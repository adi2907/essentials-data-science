Repository Source Code Contents
Generated on: Mon Jan 13 06:59:21 IST 2025
----------------------------------------
File: ./transformers.ipynb
----------------------------------------
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### What is a transformer\n",
    "A transformer is a type of neural network architecture that excels at processing sequential data (like text, time series, or even music) by using a mechanism called \"attention\" to understand relationships between different parts of the sequence.\n",
    "\n",
    "What are Transformers Used For?\n",
    "\n",
    "Natural Language Processing (NLP):\n",
    "\n",
    "**Language Translation**\n",
    "\n",
    "**Text Generation**\n",
    "\n",
    "**Question Answering**\n",
    "\n",
    "**Text Summarization**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Key Differences Between Transformers and Feed-Forward Neural Networks (FFNN)\n",
    "\n",
    "Feed-forward neural networks, the most basic version of neural networks, have difficulty in working with different sizes of text inputs.\n",
    "\n",
    "---\n",
    "\n",
    "**Input Representation:**\n",
    "In a feed-forward neural network (FFNN), you need to convert the entire sentence into a **fixed-size input**. This can be done by:\n",
    "- **Summing or averaging word embeddings**.\n",
    "- **Using a \"bag of words\" (BoW) representation**, where you count the occurrence of words in the sentence and feed it into an FFNN.\n",
    "\n",
    "---\n",
    "\n",
    "**Challenges with FFNN:**\n",
    "\n",
    "- **Loss of Sequence Information**:\n",
    "  - The order of words in the sentence is lost. For example, the FFNN cannot distinguish between:\n",
    "    - *\"The movie was fantastic.\"* (positive)\n",
    "    - *\"The movie was not fantastic.\"* (negative)\n",
    "\n",
    "- **Cannot Handle Variable-Length Sentences**:\n",
    "  - FFNN requires fixed-size input, so it struggles with sentences of varying lengths.\n",
    "\n",
    "- **Contextual Dependencies**:\n",
    "  - Sentiment depends on relationships between words (e.g., *\"not\"* modifies *\"fantastic\"*). FFNN cannot capture these dependencies.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Lets run through the transformer architecture and how training is performed. Honestly, thats  all you need to do to perform most of the tasks unless you are building a transformer yourself and training it. Most of the NLP tasks can be done by existing pre-trained transformers which are available by the hundreds on HuggingFace"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Text Generation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "!pip install transformers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "from transformers import BartForConditionalGeneration, BartTokenizer\n",
    "import torch\n",
    "\n",
    "# Load BART model and tokenizer once\n",
    "model_name = \"facebook/bart-large\"\n",
    "tokenizer = BartTokenizer.from_pretrained(model_name)\n",
    "model = BartForConditionalGeneration.from_pretrained(model_name)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Generation:\n",
      "The intelligence of human beings may refer to:\n"
     ]
    }
   ],
   "source": [
    "# Load BART model and tokenizer once\n",
    "model_name = \"facebook/bart-large\"\n",
    "tokenizer = BartTokenizer.from_pretrained(model_name)\n",
    "model = BartForConditionalGeneration.from_pretrained(model_name)\n",
    "\n",
    "def generate_text(prompt, max_length=100):\n",
    "    inputs = tokenizer(prompt, return_tensors=\"pt\", max_length=1024, truncation=True)\n",
    "    outputs = model.generate(\n",
    "        inputs[\"input_ids\"],\n",
    "        max_length=max_length,\n",
    "        min_length=10,\n",
    "        temperature=0.7,\n",
    "        num_return_sequences=1\n",
    "    )\n",
    "    return tokenizer.decode(outputs[0], skip_special_tokens=True)\n",
    "\n",
    "prompt = \"The intelligence of human beings\"\n",
    "print(\"\\nGeneration:\")\n",
    "print(generate_text(prompt))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Summarization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def summarize_text(text, max_length=40, min_length=20):\n",
    "    inputs = tokenizer(text, return_tensors=\"pt\", max_length=1024, truncation=True)\n",
    "    summary_ids = model.generate(\n",
    "        inputs[\"input_ids\"],\n",
    "        max_length=max_length,\n",
    "        min_length=min_length,\n",
    "        length_penalty=2.0,\n",
    "        num_beams=4\n",
    "    )\n",
    "    return tokenizer.decode(summary_ids[0], skip_special_tokens=True)\n",
    "text = \"\"\"\n",
    "    The Internet is a global network of interconnected computers that use standardized communication protocols \n",
    "    to share resources and information. It emerged from ARPANET in the late 1960s as a project of the United \n",
    "    States Department of Defense. Today, it connects billions of devices worldwide and has revolutionized \n",
    "    communication, commerce, entertainment, and countless other aspects of modern life.\n",
    "    \"\"\"\n",
    "print(\"\\nSummarization:\")\n",
    "print(summarize_text(text))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question Answer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from transformers import AutoModelForQuestionAnswering, AutoTokenizer\n",
    "import torch\n",
    "\n",
    "# Load RoBERTa model and tokenizer\n",
    "model_name = \"deepset/roberta-base-squad2\"  # This is fine-tuned on SQuAD dataset\n",
    "tokenizer = AutoTokenizer.from_pretrained(model_name)\n",
    "model = AutoModelForQuestionAnswering.from_pretrained(model_name)\n",
    "\n",
    "def answer_question(context, question):\n",
    "    # Tokenize input text\n",
    "    inputs = tokenizer(\n",
    "        question,\n",
    "        context,\n",
    "        return_tensors=\"pt\",\n",
    "        max_length=512,\n",
    "        truncation=True,\n",
    "        padding=True\n",
    "    )\n",
    "    \n",
    "    # Get model outputs\n",
    "    outputs = model(**inputs)\n",
    "    \n",
    "    # Get the most likely beginning and end of answer\n",
    "    answer_start = torch.argmax(outputs.start_logits)\n",
    "    answer_end = torch.argmax(outputs.end_logits)\n",
    "    \n",
    "    # Convert tokens back to string\n",
    "    answer = tokenizer.convert_tokens_to_string(\n",
    "        tokenizer.convert_ids_to_tokens(\n",
    "            inputs[\"input_ids\"][0][answer_start:answer_end + 1]\n",
    "        )\n",
    "    )\n",
    "    \n",
    "    return answer\n",
    "\n",
    "# Test examples\n",
    "context = \"Claude is an AI assistant created by Anthropic in 2022.\"\n",
    "question = \"Who created Claude?\"\n",
    "print(\"\\nQuestion Answering:\")\n",
    "print(answer_question(context, question))\n",
    "\n",
    "# More test examples\n",
    "contexts = [\n",
    "    \"The Eiffel Tower was constructed between 1887 and 1889 and was designed by engineer Gustave Eiffel.\",\n",
    "    \"Python was created by Guido van Rossum and was first released in 1991. It was named after the TV show Monty Python's Flying Circus.\"\n",
    "    \"Nehru became the prime minister of India after India gained independence in 1947\"\n",
    "]\n",
    "\n",
    "questions = [\n",
    "    \"When was the Eiffel Tower built?\",\n",
    "    \"Why was Python named Python?\"\n",
    "    \"Who was the first prime minister of India?\"\n",
    "]\n",
    "\n",
    "for context, question in zip(contexts, questions):\n",
    "    print(\"\\nContext:\", context)\n",
    "    print(\"Question:\", question)\n",
    "    print(\"Answer:\", answer_question(context, question))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Finetuning an existing pre-trained transformer\n",
    "\n",
    "Finetuning is especially useful for NLP tasks like text generation to get up to date on information, answer questions correctly or adopt a certain style. Here we will use the BART transformer to learn the shakespearean way of speaking and let it generate text in that manner"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.0.1\n"
     ]
    }
   ],
   "source": [
    "import accelerate\n",
    "print(accelerate.__version__)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from transformers import BartTokenizer, BartForConditionalGeneration, TrainingArguments, Trainer\n",
    "from datasets import Dataset\n",
    "import torch\n",
    "\n",
    "# Set device to CPU\n",
    "device = torch.device(\"cpu\")\n",
    "print(f\"Using device: {device}\")\n",
    "\n",
    "# Load model and tokenizer\n",
    "model_name = \"facebook/bart-base\"  # Using smaller model for faster training\n",
    "tokenizer = BartTokenizer.from_pretrained(model_name)\n",
    "model = BartForConditionalGeneration.from_pretrained(model_name).to(device)\n",
    "\n",
    "# Load Shakespeare text\n",
    "with open('shakespeare.txt', 'r', encoding='utf-8') as f:\n",
    "    shakespeare_text = f.read().split('\\n')\n",
    "\n",
    "# Create dataset\n",
    "dataset = Dataset.from_dict({\n",
    "    'text': shakespeare_text\n",
    "})\n",
    "\n",
    "# Preprocessing function to add inputs and labels\n",
    "def preprocess_function(examples):\n",
    "    inputs = tokenizer(\n",
    "        examples['text'],\n",
    "        truncation=True,\n",
    "        padding='max_length',\n",
    "        max_length=128\n",
    "    )\n",
    "    # Use the same input as label for reconstruction training\n",
    "    inputs['labels'] = inputs['input_ids'].copy()\n",
    "    return inputs\n",
    "\n",
    "print(\"Tokenizing dataset...\")\n",
    "tokenized_dataset = dataset.map(\n",
    "    preprocess_function,\n",
    "    batched=True,\n",
    "    remove_columns=dataset.column_names\n",
    ")\n",
    "\n",
    "# Training arguments for CPU\n",
    "training_args = TrainingArguments(\n",
    "    output_dir=\"./shakespeare-bart\",\n",
    "    num_train_epochs=3,\n",
    "    per_device_train_batch_size=8,  # Reduced batch size for CPU\n",
    "    save_steps=1000,\n",
    "    save_total_limit=2,\n",
    "    learning_rate=2e-5,\n",
    "    warmup_steps=500,\n",
    "    logging_steps=100,\n",
    "    gradient_accumulation_steps=4,\n",
    "    fp16=False,  # Disable mixed precision for CPU\n",
    "    optim=\"adamw_torch\",\n",
    "    no_cuda=True  # Explicitly disable GPU\n",
    ")\n",
    "\n",
    "# Initialize trainer\n",
    "trainer = Trainer(\n",
    "    model=model,\n",
    "    args=training_args,\n",
    "    train_dataset=tokenized_dataset,\n",
    ")\n",
    "\n",
    "print(\"Starting training...\")\n",
    "trainer.train()\n",
    "\n",
    "# Save the fine-tuned model\n",
    "model.save_pretrained(\"./shakespeare-bart-finetuned\")\n",
    "tokenizer.save_pretrained(\"./shakespeare-bart-finetuned\")\n",
    "\n",
    "# Function to test text generation\n",
    "def generate_shakespeare(prompt, max_length=100):\n",
    "    inputs = tokenizer(prompt, return_tensors=\"pt\", max_length=128, truncation=True).to(device)\n",
    "    outputs = model.generate(\n",
    "        inputs[\"input_ids\"],\n",
    "        max_length=max_length,\n",
    "        num_beams=5,\n",
    "        temperature=0.7,\n",
    "        no_repeat_ngram_size=2,\n",
    "        top_k=50,\n",
    "        top_p=0.95,\n",
    "    )\n",
    "    return tokenizer.decode(outputs[0], skip_special_tokens=True)\n",
    "\n",
    "# Test generation with various prompts\n",
    "test_prompts = [\n",
    "    \"To be, or not to be\",\n",
    "    \"The course of true love\",\n",
    "    \"All the world's a\",\n",
    "    \"What light through yonder\",\n",
    "]\n",
    "\n",
    "print(\"\\nTesting generation with various prompts:\")\n",
    "for prompt in test_prompts:\n",
    "    print(f\"\\nPrompt: {prompt}\")\n",
    "    print(\"Generated text:\")\n",
    "    print(generate_shakespeare(prompt))\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "tech-env",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

----------------------------------------
File: ./neural_network_comp.ipynb
----------------------------------------
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "# Generate synthetic dataset with complex relationships\n",
    "n_samples = 1000\n",
    "np.random.seed(42)\n",
    "\n",
    "# Generate base features\n",
    "time_of_day = np.random.uniform(0, 24, n_samples)\n",
    "temperature = np.random.uniform(10, 35, n_samples)\n",
    "cloud_cover = np.random.uniform(0, 100, n_samples)\n",
    "wind_speed = np.random.uniform(0, 30, n_samples)\n",
    "\n",
    "# Create complex non-linear relationships for energy production\n",
    "energy_production = (\n",
    "    # Complex daily cycle with multiple peaks\n",
    "    7 * np.sin(time_of_day * np.pi / 12) +\n",
    "    3 * np.sin(time_of_day * np.pi / 6) +\n",
    "    \n",
    "    # Temperature effect with threshold and quadratic relationship\n",
    "    0.3 * (temperature - 25)**2 * np.where(temperature > 25, -1, 1) +\n",
    "    \n",
    "    # Cloud cover with sudden changes and plateaus\n",
    "    np.where(cloud_cover < 30, 10, 0) +\n",
    "    np.where((cloud_cover >= 30) & (cloud_cover < 70), 5, 0) +\n",
    "    \n",
    "    # Wind speed with optimal range and diminishing returns\n",
    "    5 * np.sin(wind_speed * np.pi / 15) +\n",
    "    \n",
    "    # Interaction terms\n",
    "    0.2 * temperature * np.sin(wind_speed * np.pi / 10) +\n",
    "    -0.1 * cloud_cover * np.cos(time_of_day * np.pi / 12) +\n",
    "    \n",
    "    # Random variations\n",
    "    np.random.normal(0, 2, n_samples)\n",
    ")\n",
    "\n",
    "# Add some outliers\n",
    "outlier_idx = np.random.choice(n_samples, size=int(0.05 * n_samples), replace=False)\n",
    "energy_production[outlier_idx] += np.random.uniform(-10, 10, size=len(outlier_idx))\n",
    "\n",
    "# Ensure no negative values\n",
    "energy_production = np.maximum(energy_production, 0)\n",
    "\n",
    "# Create DataFrame\n",
    "data = pd.DataFrame({\n",
    "    'time_of_day': time_of_day,\n",
    "    'temperature': temperature,\n",
    "    'cloud_cover': cloud_cover,\n",
    "    'wind_speed': wind_speed,\n",
    "    'energy_production': energy_production\n",
    "})\n",
    "\n",
    "#data.to_csv('energy_production_dataset.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "# Set random seed for reproducibility\n",
    "np.random.seed(42)\n",
    "\n",
    "# Number of samples\n",
    "n = 1000\n",
    "\n",
    "# Generate base features\n",
    "X1 = np.random.uniform(-5, 5, n)\n",
    "X2 = np.random.uniform(-5, 5, n)\n",
    "X3 = np.random.uniform(-5, 5, n)\n",
    "\n",
    "# Create complex non-linear target variable\n",
    "y = (\n",
    "    # Polynomial terms\n",
    "    3 * X1**2 - \n",
    "    0.5 * X1**3 +\n",
    "    \n",
    "    # Sine waves\n",
    "    5 * np.sin(X2) + \n",
    "    3 * np.cos(X2 * 2) +\n",
    "    \n",
    "    # Exponential terms\n",
    "    2 * np.exp(-X3**2) +\n",
    "    \n",
    "    # Interaction terms\n",
    "    1.5 * X1 * X2 * np.sin(X3) +\n",
    "    \n",
    "    # Step function\n",
    "    4 * np.where(X2 > 0, 1, -1) +\n",
    "    \n",
    "    # Logistic function\n",
    "    5 * (1 / (1 + np.exp(-X3))) +\n",
    "    \n",
    "    # Periodic patterns\n",
    "    3 * np.sin(X1 * X2) +\n",
    "    \n",
    "    # Threshold effects\n",
    "    2 * np.maximum(X3, 0)**2 +\n",
    "    \n",
    "    # Add some noise\n",
    "    np.random.normal(0, 0.5, n)\n",
    ")\n",
    "\n",
    "# Create DataFrame\n",
    "data = pd.DataFrame({\n",
    "    'X1': X1,\n",
    "    'X2': X2,\n",
    "    'X3': X3,\n",
    "    'target': y\n",
    "})\n",
    "\n",
    "# Save to CSV\n",
    "data.to_csv('nonlinear_dataset.csv', index=False)\n",
    "\n",
    "# Print some statistics to verify non-linearity\n",
    "print(\"\\nCorrelation matrix:\")\n",
    "print(data.corr())\n",
    "\n",
    "# Calculate additional non-linear correlation metrics\n",
    "print(\"\\nSpearman correlation (captures monotonic relationships):\")\n",
    "print(data.corr(method='spearman')['target'])\n",
    "\n",
    "# Print summary statistics\n",
    "print(\"\\nSummary statistics:\")\n",
    "print(data.describe())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Training Linear Regression...\n",
      "\n",
      "Training Random Forest...\n",
      "\n",
      "Training Neural Network...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/adityaganguli/.pyenv/versions/3.8.16/envs/tech-env/lib/python3.8/site-packages/torch/optim/lr_scheduler.py:60: UserWarning: The verbose parameter is deprecated. Please use get_last_lr() to access the learning rate.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch [20/200], Train Loss: 9.7453, Val Loss: 9.2446\n",
      "Epoch [40/200], Train Loss: 5.2061, Val Loss: 3.0022\n",
      "Epoch [60/200], Train Loss: 4.3789, Val Loss: 2.8655\n",
      "Epoch [80/200], Train Loss: 3.7262, Val Loss: 2.7471\n",
      "Epoch [100/200], Train Loss: 3.9950, Val Loss: 3.3112\n",
      "Epoch [120/200], Train Loss: 4.0131, Val Loss: 2.4648\n",
      "Epoch [140/200], Train Loss: 4.2610, Val Loss: 3.0909\n",
      "Epoch [160/200], Train Loss: 4.1135, Val Loss: 2.3170\n",
      "Epoch [180/200], Train Loss: 3.4942, Val Loss: 2.0497\n",
      "Epoch [200/200], Train Loss: 3.5917, Val Loss: 2.2644\n",
      "\n",
      "Model Comparison:\n",
      "--------------------------------------------------\n",
      "\n",
      "Linear Regression:\n",
      "MAE: 8.0407\n",
      "RMSE: 9.8261\n",
      "R2 Score: 0.7833\n",
      "\n",
      "Random Forest:\n",
      "MAE: 3.0264\n",
      "RMSE: 4.3718\n",
      "R2 Score: 0.9571\n",
      "\n",
      "Neural Network:\n",
      "MAE: 2.6600\n",
      "RMSE: 3.8217\n",
      "R2 Score: 0.9672\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAB8YAAAHqCAYAAAB2uSQnAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAAEAAElEQVR4nOzdd1hT1xsH8G8CJEDYiCyRreLetqLixq11j6q4bd2ti7r3rnvVWqWV1r2qdVete7SKC0URxSICDkBWGLm/P/LLLWEJytTv53l4MPee3Puem2BOzrnnPRJBEAQQERERERERERERERERERF9pKRFHQAREREREREREREREREREVFB4sA4ERERERERERERERERERF91DgwTkREREREREREREREREREHzUOjBMRERERERERERERERER0UeNA+NERERERERERERERERERPRR48A4ERERERERERERERERERF91DgwTkREREREREREREREREREHzUOjBMRERERERERERERERER0UeNA+NERERERERERERERERERPRR48A4UQkikUgwc+bMog6jyDVu3BiNGzcWHz958gQSiQRbt24tspgyyhhjSfEhcTs5OcHHxydf4/lY+fj4wMnJqajDICIioncozDZdxrb+zJkzIZFI8PLly0I5f1G15Qq7noVt69atkEgkePLkSZ6fq7k2RERElDX2rxARUV5xYJw+WevWrYNEIkG9evXe+xjPnz/HzJkzcfPmzfwLrJg7c+YMJBKJ+KOnpwcXFxf069cPjx8/Lurw8uTixYuYOXMmoqOjizoULZqBfolEgrlz52ZZpk+fPpBIJDAyMirk6PJHUlISli9fjnr16sHU1BT6+vooV64cRo4ciaCgoKIOj4iIiHKgGejL7ufy5ctFHWKWfHx8tOI0MjKCi4sLunbtij179kClUuXLeYprGxMo3rEVtMaNG0MikcDd3T3L/SdOnBDfG7t37y7k6IiIiIq3jO0/XV1d2Nvbw8fHB2FhYUUdXrGRUzt58uTJRR1elubPn4/9+/fnqmz6PsuMP5999lmBxFec+98112Pp0qVFHcp7++OPPzgRjz45ukUdAFFR8ff3h5OTE65evYpHjx7Bzc0tz8d4/vw5Zs2aBScnJ1SvXj3/gyzGRo8ejTp16iAlJQX//PMPfvjhBxw+fBi3b9+GnZ1docbi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RYmIiKiky01blIv+EBERERERERERERERERHRR40D40RERERERERERERERERE9FHjwDgREREREREREREREREREX3UuMb4e0hLS0NKSkpRh0GUIz09Pejo6BR1GERERERERPQO7GegkkAmk0Eq5RwbIiIiIiq5SszAeFpaGmbOnIlt27bhxYsXsLOzg4+PD6ZOnSoupi4IAmbMmIFNmzYhOjoanp6eWL9+Pdzd3fMlBkEQ8OLFC0RHR+fL8YgKmpmZGWxsbMS/ESIiIiIiIio+2M9AJYlUKoWzszNkMllRh0JERERE9F5KzMD4okWLsH79evj5+aFSpUq4fv06BgwYAFNTU4wePRoAsHjxYqxatQp+fn5wdnbGtGnT4O3tjXv37kFfX/+DY9B8WS1dujQMDQ052EjFliAISEhIQGRkJADA1ta2iCMiIiIiIiKijNjPQCWFSqXC8+fPER4ejrJly/K9SkREREQlUokZGL948SI6duyItm3bAgCcnJzw22+/4erVqwDUA4ErVqzA1KlT0bFjRwDAzz//DGtra+zfvx89e/b8oPOnpaWJX1YtLS0/rDJEhcDAwAAAEBkZidKlSzOtOhERERERUTHCfgYqaaysrPD8+XOkpqZCT0+vqMMhIiIiIsqzErMwUP369XHq1CkEBQUBAAICAnD+/Hm0bt0aABASEoIXL16gefPm4nNMTU1Rr149XLp06YPPr1nry9DQ8IOPRVRYNO9XrlVHRERERERUvLCfgUoaTQr1tLS0Io6EiIiIiOj9lJgZ45MnT0ZsbCwqVKgAHR0dpKWlYd68eejTpw8AdfoxALC2ttZ6nrW1tbgvI6VSCaVSKT6OjY19ZxxMFUUlCd+vRERERERExRu/t1FJwfcqEREREZV0JWbG+M6dO+Hv749ff/0V//zzD/z8/LB06VL4+fm99zEXLFgAU1NT8cfBwSEfIyYiIiIiIiIiIiIiIiIiouKgxAyMT5gwAZMnT0bPnj1RpUoV9O3bF+PGjcOCBQsAADY2NgCAiIgIredFRESI+zLy9fVFTEyM+PPs2bOCrUQxJZFIsH///qIO45Mzc+ZMVK9evajDICIiIiIiIspX7GcoGuxnICIiIiLKWYlJpZ6QkACpVHscX0dHByqVCgDg7OwMGxsbnDp1SvwSEBsbiytXruCrr77K8phyuRxyubxA4y4OfHx8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G4wxWJaF12WRdgw+t83wUo0WFxERERERERERERERERHZ0zRivBeMG1TAwPwAsZRDezxNMuWQShuSnyzHUg4VBQHGDSro61BFRERERERERESkHzDGkEql+joMERERkb2GEuO9wLYtBuQGsLAyk6hjdfwwgEXHetu2+ihCERERERERERGRvYvjONxyyy0MHToUn8/HoEGDuPHGG7us+8ILL3DYYYfh8/koLy/nqquu6pQUrqqq4vbbb+/0nIMPPpjrrrsus7x8+XKOPvpo/H4/BxxwAHPnzu1WvOvXr+ess86ioKCAYDDIoYceyuuvv55Zf8cddzBkyBC8Xi8jRozgz3/+c2bd2WefzZlnntmpvWQySVFREX/6058y/TF79myqq6sJBAKMHTuWf/zjH5n6zz//PJZl8e9//5tx48bh8/l4+eWXu7UPIiIiIv2ZplLvBeubImxsiVIY8hBLpImmnI6p1G2LkNuF32tT2xxlfVOEQYXBvg5XRERERERERESkz1199dX8/ve/57bbbuPII4+ktraWpUuXbldvw4YNnHjiiZx77rn86U9/YunSpZx//vn4/f5Oie+dcRyHb3zjG5SWlvL666/T0tLCZZddtsuxtre3M3HiRCoqKnjssccoKyvj7bffxnEcAB555BEuvfRSbr/9dqZMmcLjjz/OjBkzGDhwIJMmTWLatGmcfvrptLe3Ewp13G7x6aefJhKJcNpppwEwe/Zs/vKXv3DnnXcybNgwXnzxRb797W9TXFzMxIkTM7FcddVV3HrrrdTU1JCfn7/L+yAiIiLS3ykx3gs+3hymJZKkLNeP3+2iLZYi6Th4bJtsv5tYKs2W9gQfbw4rMS4iIiIiInvEbXM/6rM2f3Ds8C/c3lfW3p35fXxNYeeVk67epfa/iMfsFQC807xhh3Uuyjuox+Pojq0x78jWfdnb4hYR6UpbWxu/+tWv+M1vfsP06dMBGDJkCEceeSSrV6/uVPd3v/sdlZWV/OY3v8GyLEaOHMnGjRu58sorufbaa7Htz58089lnn2Xp0qU8/fTTDBgwAICbbrqJE044YZfi/etf/8qmTZt48803KSjouF3i0KFDM+tvvfVWzj33XC666CIAZs6cyWuvvcatt97KpEmTmDp1KsFgkEceeYRzzjkn0+bXv/51srOzicfj3HTTTTz77LOMHz8egJqaGl5++WXuuuuuTonxn/70pxx77LE7jTcejxOPxzPLra2tu7SfIiIiIvsyTaXeS4zVMWW6ZVnkBDwUBn3kBDxYlkVmXnURERERERERERFhyZIlxONxJk+evEt1x48f/8l1tg4TJkygvb2d9evX7/L2KisrM0lxIJOA3hWLFi3ikEMOySTFu2p/woQJncomTJjAkiVLAHC73Zxxxhncf//9AITDYf7v//6PadOmAbBixQoikQjHHnssoVAo8/jTn/7EypUrO7V76KGHfm68s2fPJjc3N/OorKzc5X0VERER2VdpxHgvqC4Kkhfw0hxJUpJtkUwb0sbgsiw8LouWSJLcgJfqIo0WFxERERERERERCQQCe7Q927YxxnQqSyaTe6z9PRHvtGnTmDhxIg0NDcydO5dAIMDxxx8PdEzVDvDEE09QUVHR6Xk+n6/TcjD4+dcYr776ambOnJlZbm1tVXJcRERE+j2NGO8FlflZfKW6gHjaYeWmMKs2hVm9uePnyk1h4mmH8TUFVOZn9XWoIiIiIiIiIiIifW7YsGEEAgHmzZv3uXVHjRrFggULOiW+X3nlFbKzsxk4cCAAxcXF1NbWZta3trayatWqTm2sW7euU53XXnttl+M96KCDWLRoEY2NjTuM8ZVXXulU9sorr3DAAQdklo844ggqKyt58MEHuf/++zn99NPxeDwAHHDAAfh8PtauXcvQoUM7PXYnoe3z+cjJyen0EBEREenvNGK8F9i2xYRhRfz7gzra4ymMMRg6JlC3UhZFHhdHDC3CtjWluoiIiIiIiIiIiN/v58orr+SKK67A6/UyYcIENm3axAcffLDd9OoXXXQRt99+O//1X//FJZdcwrJly5g1axYzZ87M3F/8q1/9Kvfeey8nn3wyeXl5XHvttbhcrkwbU6ZMYfjw4UyfPp2f//zntLa28uMf/3iX4z3rrLO46aabOPXUU5k9ezbl5eW88847DBgwgPHjx/OjH/2IM844g0MOOYQpU6bwr3/9i4cffphnn322Uztnn302d955Jx999BHz58/PlGdnZ/PDH/6QH/zgBziOw5FHHklLSwuvvPIKOTk5mfuwi4iIiMiOacR4L3AcwyvLN2OMIcvrIuB1k+V1E/C6CXpdOMbw6orNOI75/MZEREREZK903XXXYVlWp8fIkSP7OiwRERGRfdY111zD5ZdfzrXXXsuo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r0MUEREREREREREREREREemXlBjvRUNLsvn+0UHeXtfElnCCwqCXL1Xm43ZrRnsRERERERERERERERERkZ6ixHgvWtHQxtOL61m5qZ1YKo3f7eLNVU0aMS4iIiIispe4be5H+0Sbvekra+/e4brXBl2w+w3Pn81X1m7Z5eqP2Su2K/u6M3S3Nv3ZtnbWzrrm6A7XXd38+qcL3fi+887a3N/t7PX2WZ89jiW7+Ly3Wx/stPylnDN3eZv7il193/nBscP3aHs90eauticiIiIiIvJ5lBjvJSsa2pjzymoawwnKc/1keQNEEikWb2xhY0uUGROqlBwXEREREREREREREREREekBmsO7FziO4enF9TSGEwwrCZHt9+CyLbL9HoaVhGgMJ3jmg3ocx/R1qCIiIiIiIiIiIiIiIiIi/Y4S471gQ3OUlZvaKc/1Y1lWp3WWZVGe62dFQzsbNJ2eiIiIiIiIiIiIiIiIiMgep8R4LwgnUsRSabK8Xc9cH/C6iKfShBOpXo5MRERERERERERERERERKT/0z3Ge0HQ68bvdhFJpAj53LTFUiTSDl6XTbbfTTSRxud2EdxB4lxERERERERERERERERERHafMrG9oCIvwJDiEK99vIWU49AUSZJKO7hdNvlZHty2zfghhVTkBfo6VBERERERERERERERERGRfkdTqfcC27YYWZ5NbWuMjzeHsS3IzfJgW/Dx5jC1rTFGlGVj29bnNyYiIiIiIiIiIiIiIiIiIt2ixHgvcBzD0to2ynP91BQGcQy0RpM4BmqKgpTn+llW14bjmL4OVURERERERERERERERESk39FU6r1gQ3OUlZvaGVYS6vIe4+3xFCsa2tnQHKWyIKuvwxURERER6RG3zf1ol+r94Njhfbbt/dFX1t7d1yHwmL1iu7KvO0N3q531rQ/uke33R+uao3usrYGtC2loXdi5bDe3vaBxy3Zle+qYvL0brwf5Yvrq/bYv/8eIiIiIiMi+QYnxXhBOpIil0mR5A1iWRU7A02l9wOuivjVGOJHqowhFRERERERERERkf7f4+qnk5OT0dRgiIiIiPWKfmEp99erVnHfeeVRXVxMIBBgyZAizZs0ikUh0qvfee+9x1FFH4ff7qays5JZbbumjiDsLet343S4iO0h8RxNpfG4XQa++pyAiIiIiIiIiIiIiIiIisqftE5nYpUuX4jgOd911F0OHDmXx4sWcf/75hMNhbr31VgBaW1s57rjjmDJlCnfeeSfvv/8+3/3ud8nLy+OCCy7o0/gr8gIMKQ6xeGMLIZ8by7Iy64wx1LbEGFORS0VeoA+jFBERERERERERERERERHpn/aJxPjxxx/P8ccfn1muqalh2bJl3HHHHZnE+P33308ikeCPf/wjXq+XAw88kEWLFvHLX/6yzxPjtm0xdXQpG1uiLG9opzzXT8DrIppIU9sSoyDo5bgDS7Ft6/MbExERERERERERERERERGRbtknplLvSktLCwUFBZnlBQsWcPTRR+P1ejNlU6dOZdmyZTQ1NfVFiJ0MLclmxoQqRg/IpTmSZPXmMM2RJGMqcpkxoYqhJdl9HaKIiIiIiIiIiIiIiIiISL+0T4wY/6wVK1bw61//OjNaHKCuro7q6upO9UpLSzPr8vPzt2snHo8Tj8czy62trT0UcYehJdnUHBNiQ3OUcCJF0OumIi+gkeIiIiIiIiIiIiIiIiIiIj2oT0eMX3XVVViWtdPH0qVLOz1nw4YNHH/88Zx++umcf/75X2j7s2fPJjc3N/OorKz8Qu3tCtu2qCzIYmRZDpUFWUqKi4iIiIiIiIiIiIiIiIj0sD4dMX755Zdz7rnn7rROTU1N5veNGzcyadIkjjjiCO6+++5O9crKyqivr+9UtnW5rKysy7avvvpqZs6cmVlubW3tleS4iIiIiIiIiIiIiIiIiIj0nj5NjBcXF1NcXLxLdTds2MCkSZMYN24cc+bMwbY7D3YfP348P/7xj0kmk3g8HgDmzp3LiBEjupxGHcDn8+Hz+b7YToiIiIiIiIiIiIiIiIiIyF5tn7jH+IYNGzjmmGMYPHgwt956K5s2bcqs2zoa/Oyzz+b666/nvPPO48orr2Tx4sX86le/4rbbbuursEVERERE9kq3zf1oj7b3lbV373T9a4Mu6FZ7ezq+Pe3z9nd3dbeftrWnj8EX3e6Cez79/TF7xY4b2MnNvXb6vJ3UGdi68HOfJ3uXXTnWu6Kr12PDLrTd0LqQ9TnjvvD2v5Rz5nZlb7c+uEv19rStfdFV337dGfrpwvzC7Z886eqeCmuv0BP/Y35w7PA93uau2tX96csYRURERET2FvtEYnzu3LmsWLGCFStWMHDgwE7rjDEA5Obm8swzz3DxxRczbtw4ioqKuPbaa7nggp65ACQiIiIiIiIiIiIiIiIiIvuGfSIxfu65537uvcgBDjroIF566aWeD0hERERERERERERERERERPYZO5m4TkREREREREREREREREREZN+nxLiIiIiIiIiIiIiIiIiIiPRrSoyLiIiIiOwhv/3tb6mqqsLv93P44Yfzxhtv9HVIIiIiIiIiIiIighLjIiIiIiJ7xIMPPsjMmTOZNWsWb7/9NmPHjmXq1Kk0NDT0dWgiIiIiIiIiIiL7PSXGRURERET2gF/+8pecf/75zJgxgwMOOIA777yTrKws/vjHP/Z1aCIiIiIiIiIiIvs9JcZFRERERL6gRCLBwoULmTJlSqbMtm2mTJnCggUL+jAyERERERERERERAXD3dQB7E2MMAK2trX0ciYiIiEj3bT2H2XpOI71n8+bNpNNpSktLO5WXlpaydOnSLp8Tj8eJx+OZ5ZaWFqB3zkVj4fY92l44Gt/p+j29vb72efu7u75IP32RY9BT+7NV3E72aPsiW4Wd7V/Lu/r6S7hjX3j7Mdf2f2eJyPbtdlVvT9v6d93V/m/bT63hLva7i/9Dffk+vqv/F/eFGHvCru53T8eo89B9n66LioiIyL6qO+eiltEZa8b69euprKzs6zBEREREvpB169YxcODAvg5jv7Jx40YqKip49dVXGT9+fKb8iiuu4IUXXuD111/f7jnXXXcd119/fW+GKSIiItKjdB667/r4448ZMmRIX4chIiIistt25VxUI8a3MWDAANatW0d2djaWZfXYdlpbW6msrGTdunXk5OT02Hb2ZuqDDuoH9cFW6gf1wVbqB/UB7H4fGGNoa2tjwIABPRiddKWoqAiXy0V9fX2n8vr6esrKyrp8ztVXX83MmTMzy47j0NjYSGFhYY+ei+4u/W3uG3Sc9g06TvsOHat9g45T39N56L6voKAAgLVr15Kbm9vH0cieoPfG/knHtf/RMe2fdFx7V3fORZUY34Zt2736rdacnJz9/g9CfdBB/aA+2Er9oD7YSv2gPoDd6wNdxOobXq+XcePGMW/ePE499VSgI9E9b948Lrnkki6f4/P58Pl8ncry8vJ6ONIvTn+b+wYdp32DjtO+Q8dq36Dj1Ld0Hrpvs20b6DiO+jvqX/Te2D/puPY/Oqb9k45r79nVc1ElxkVERERE9oCZM2cyffp0Dj30UA477DBuv/12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YP/Zf4DHHnuMQw89lNNPP52SkhIOOeQQfv/732fW72/vj4lEgr/85S9897vfxbKs/eq1cMQRRzBv3jw++ugjAN59911efvllTjjhBGD/ey3IvqOlpSVzLgOwYMECjj76aLxeb6Zs6tSpLFu2jKampr4IUbqwYMECxowZQ2lpaaZs6tSptLa2ZmbxkZ6lz4X7Hv0v3nvps7XIrtud/z8LFizY7rrF1KlT9fe0l9gT5xSRSIRkMtnpvF761u4e15/+9KeUlJRw3nnn9UaY0g27c0wfe+wxxo8fz8UXX0xpaSmjR4/mpptuIp1O91bY8jl257geccQRLFy4MDPd+scff8yTTz7JiSee2Csxy6fcfR3A/mLz5s2k0+lOF6EASktLWbp0aR9F1bfq6uoAuuyTrev6G8dxuOyyy5gwYQKjR48GOvrB6/Vudx/I/tgP77//PuPHjycWixEKhXjkkUc44IADWLRo0X7TBw888ABvv/02b7755nbr9ofXwuGHH869997LiBEjqK2t5frrr+eoo45i8eLF+8X+b/Xxxx9zxx13MHPmTP7nf/6HN998k//+7//G6/Uyffr0/e798dFHH6W5uZlzzz0X2D/+Fra66qqraG1tZeTIkbhcLtLpNDfeeCPTpk0D9s//lbL3W7FiBb/+9a+59dZbM2V1dXVUV1d3qrf1dVtXV9fpVhHSd+rq6rp8P9m6TnqePhfue/S/eO+0v3+2Fumu3fn/s6PzBv097R32xDnFlVdeyYABA7b7AoT0nd05ri+//DL33HMPixYt6oUIpbt255h+/PHHPPfcc0ybNo0nn3ySFStWcNFFF5FMJpk1a1ZvhC2fY3eO69lnn83mzZs58sgjMcaQSqX4/ve/r6nU+4BGjIv0oosvvpjFixfzwAMP9HUofWLEiBEsWrSI119/nQsvvJDp06fz4Ycf9nVYvWbdunVceuml3H///fj9/r4Op0+ccMIJnH766Rx00EFMnTqVJ598kubmZh566KG+Dq1XOY7Dl770JW666SYOOeQQLrjgAs4//3zuvPPOvg6tT9xzzz2ccMIJDBgwoK9D6XUPPfQQ999/P3/96195++23ue+++7j11lu57777+jo02Q9cddVVWJa108dnP9Bt2LCB448/ntNPP53zzz+/jyLfv+zOcRIR6e/298/WIiJf1M0338wDDzzAI488st9eo+oP2traOOecc/j9739PUVFRX4cje4jjOJSUlHD33Xczbtw4zjzzTH784x/vt9cN+4vnn3+em266id/97ne8/fbbPPzwwzzxxBPccMMNfR3afkcjxntJUVERLpeL+vr6TuX19fWUlZX1UVR9a+t+19fXU15enimvr6/n4IMP7qOoes4ll1zC448/zosvvsjAgQMz5WVlZSQSCZqbmzt9s70/vja8Xi9Dhw4FYNy4cbz55pv86le/4swzz9wv+mDhwoU0NDTwpS99KVOWTqd58cUX+c1vfsPTTz+9X/TDtvLy8hg+fDgrVqzg2GOP3W/2v7y8nAMOOKBT2ahRo/jnP/8J7F/vj2vWrOHZZ5/l4YcfzpTtT++LP/rRj7jqqqv41re+BcCYMWNYs2YNs2fPZvr06fvVa0F63+WXX56ZqWFHampqMr9v3LiRSZMmccQRR3D33Xd3qldWVtblee7WdbL7unucdqasrCwzbdtWOk69S58L9z36X7z30Wdrke7bnf8/Ozq/09/T3uGLnFPceuut3HzzzTz77LMcdNBBPRmmdFN3j+vKlStZvXo1J598cqbMcRwA3G43y5YtY8iQIT0btOzU7vytlpeX4/F4cLlcmbJRo0ZRV1dHIpHodAsz6Ru7c1yvueYazjnnHP7zP/8T6LgGGA6HueCCC/jxj3+MbWscc29RT/cSr9fLuHHjmDdvXqbMcRzmzZvH+PHj+zCyvlNdXU1ZWVmnPmltbeX111/vV31ijOGSSy7hkUce4bnnnttumtFx48bh8Xg69cOyZctYu3Ztv+qHrjiOQzwe32/6YPLkybz//vssWrQo8zj00EOZNm1a5vf9oR+21d7ezsqVKykvL99vXgcAEyZMYNmyZZ3KPvroIwYPHgzsP++PAHPmzKGkpISTTjopU7Y/vRYikch2J74ulyvzQXZ/ei1I7ysuLmbkyJE7fWz9wL1hwwaOOeYYxo0bx5w5c7Z73Y4fP54XX3yRZDKZKZs7dy4jRozQNOpfUHeO0+cZP34877//Pg0NDZmyuXPnkpOTs90XtqRn6HPhvkf/i/ce+mwtsvt25//P+PHjO9WHjvMG/T3tHXb3nOKWW27hhhtu4KmnnuLQQw/tjVClG7p7XEeOHLndtcavf/3rTJo0iUWLFlFZWdmb4UsXdudvdcKECaxYsSJzbQg6rhuWl5crKb6X2J3juqNrgNBxniu9yEiveeCBB4zP5zP33nuv+fDDD80FF1xg8vLyTF1dXV+H1mPa2trMO++8Y9555x0DmF/+8pfmnXfeMWvWrDHGGHPzzTebvLw883//93/mvffeM6eccoqprq420Wi0jyPfcy688EKTm5trnn/+eVNbW5t5RCKRTJ3vf//7ZtCgQea5554zb731lhk/frwZP358H0a951111VXmhRdeMKtWrTLvvfeeueqqq4xlWeaZZ54xxuwffdCViRMnmksvvTSz3N/74fLLLzfPP/+8WbVqlXnllVfMlClTTFFRkWloaDDG9P/93+qNN94wbrfb3HjjjWb58uXm/vvvN1lZWeYvf/lLps7+8P6YTqfNoEGDzJVXXrnduv3ltTB9+nRTUVFhHn/8cbNq1Srz8MMPm6KiInPFFVdk6uwPrwXZu61fv94MHTrUTJ482axfv77T+cxWzc3NprS01Jxzzjlm8eLF5oEHHjBZWVnmrrvu6sPI9z9r1qwx77zzjrn++utNKBTKnIe3tbUZY4xJpVJm9OjR5rjjjjOLFi0yTz31lCkuLjZXX311H0e+f9kfPxfu7fS5dd+gz9YiX8zn/f8555xzzFVXXZWp/8orrxi3221uvfVWs2TJEjNr1izj8XjM+++/31e7IJ/R3WN68803G6/Xa/7xj390eh/deq4oe4fuHtfPmj59ujnllFN6KVrZFd09pmvXrjXZ2dnmkksuMcuWLTOPP/64KSkpMf/v//2/vtoF6UJ3j+usWbNMdna2+dvf/mY+/vhj88wzz5ghQ4aYM844o692Yb+lxHgv+/Wvf20GDRpkvF6vOeyww8xrr73W1yH1qPnz5xtgu8f06dONMcY4jmOuueYaU1paanw+n5k8ebJZtmxZ3wa9h3W1/4CZM2dOpk40GjUXXXSRyc/PN1lZWea0007rdLG5P/jud79rBg8ebLxerykuLjaTJ0/OJMWN2T/6oCufTYz3934488wzTXl5ufF6vaaiosKceeaZZsWKFZn1/X3/t/Wvf/3LjB492vh8PjNy5Ehz9913d1q/P7w/Pv300wbocr/2l9dCa2urufTSS82gQYOM3+83NTU15sc//rGJx+OZOvvDa0H2bnPmzNnh+cy23n33XXPkkUcan89nKioqzM0339xHEe+/pk+f3uVxmj9/fqbO6tWrzQkn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Q4wcOZIRI0bw7W9/mz/+8Y+dLrY98cQTnHbaaZx44om88847zJs3j8MOOwzomHJx4MCB/PSnP818i3FXtbW1MX36dF5++WVee+01hg0bxoknnrjT5Ofuuv766znjjDN47733OPHEE5k2bRqNjY1AR6L3q1/9KocccghvvfUWTz31FPX19Zxxxhmd2rjvvvvwer288sor3HnnnaxatYpvfvObnHrqqbz77rt873vf48c//nGmfjAY5Fvf+hZz5szp1M6cOXP45je/2a0ROYFAoNO3FufNm8eyZcuYO3cujz/+OOFwmKlTp5Kfn8+bb77J3//+d5599lkuueSSzHN+8YtfcO+99/LHP/6Rl19+mcbGRh555JFu9aPjOJxwwgm88sor/OUvf+HDDz/k5ptvxuVyccQRR3D77beTk5OTeS388Ic/7LKNU045hcbGRl544QXmzp3Lxx9/zJlnntmp3sqVK3n00Ud5/PHHefzxx3nhhRe4+eabdxjbe++9R0tLC4ceeugO69xyyy1cddVVPPPMM0yePBnoGDU+f/78TJ358+dzzDHHMHHixEx5NBrl9ddf75QYBzjssMN46aWXPr/jREREZL/0eedwyWSSqVOnkp2dzUsvvcQrr7ySSTBvfd7unMN95zvf4W9/+xv/+7//y5IlS7jrrrsIhUJUVlbyz3/+E4Bly5ZRW1vLr371qy7bOPfcc3nrrbd47LHHWLBgAcYYTjzxxE6jgyKRCLfeeit//vOfefHFF1m7dm2X53/dtWLFCv75z3/y8MMPd5rG8rrrruO0007j/fff57vf/S6PPPIIl156KZdffjmLFy/me9/7HjNmzOh0btfV80RERET2NS+99BLf+c53uPTSS/nwww+56667uPfeezt96c+2bf73f/+XDz74gPvuu4/nnnuOK664AmCXr9vtzFVXXcWll17KkiVLmDp1Kvfffz/XXnstN954I0uWLOGmm27immuu4b777utWu/fddx9FRUW88cYb/Nd//RcXXnghp59+OkcccQRvv/02xx13HOeccw6RSKTT8370ox/xi1/8gjfffJPi4mJOPvnkzLnqwoULOeOMM/jWt77F+++/z3XXXcc111yz3YCwW2+9lbFjx/LOO+9wzTXX8MYbbwCfznD08MMPA7t+HXtn16A3bNjA0Ucfjc/n47nnnmPhwoV897vfzXy5YU/1p4jsYUZE+p0jjjjC3H777cYYY5LJpCkqKjLz58/PrB8/fryZNm3aDp8/ePBgc9ttt3UqmzVrlhk7dmynsttuu80MHjx4h+2k02mTnZ1t/vWvf2XKAPPII4/s8DnTp083LpfLBIPBTo8bb7yxUxs/+clPMsvt7e0GMP/+97+NMcbccMMN5rjjjuvU7rp16wxgli1bZowxZuLEieaQQw7pVOfKK680o0eP7lT24x//2ACmqanJGGPM66+/blwul9m4caMxxpj6+nrjdrvN888/v9N9OuWUU4wxxjiOY+bOnWt8Pp/54Q9/mFlfWlpq4vF45jl33323yc/PN+3t7ZmyJ554wti2berq6owxxpSXl5tbbrklsz6ZTJqBAwdmtmVM18dy7NixZtasWcYYY55++mlj23amXz5rzpw5Jjc3d7vybdt95plnjMvlMmvXrs2s/+CDDwxg3njjDWNMx+snKyvLtLa2Zur86Ec/MocffniX2zXGmEceecS4XC7jOE6X277iiitMeXm5Wbx4caf1v//9700wGDTJZNK0trYat9ttGhoazF//+ldz9NFHG2OMmTdvngHMmjVrOj33V7/6lamqqtphTCIiIrL/2J1zuD//+c9mxIgRnc5f4vG4CQQC5umnnzbG7No53MSJE82ll15qjDFm2bJlBjBz587tMs758+d3Ol/tqo2PPvrIAOaVV17JrN+8ebMJBALmoYceMsZ0nPcBZsWKFZk6v/3tb01paekO+2jVqlUGMIFAYLvz961mzZplPB6PaWho6PRcwFx22WWdyo444ghz/vnndyo7/fTTzYknnrjT54mIiIjsjbq6zvnNb37TGGPM5MmTzU033dSp/p///GdTXl6+w/b+/ve/m8LCwszyjq7bdXX9NTc318yZM8cY8+k53Nbrx1sNGTLE/PWvf+1UdsMNN5jx48fvdB8/ex575JFHZpZTqZQJBoPmnHPOyZTV1tYawCxYsMAY8+n57AMPPJCps2XLFhMIBMyDDz5ojDHm7LPPNscee2ynbf/oRz8yBxxwQGZ58ODB5tRTT+1UZ+u+vvPOOzvcB2N2fB17Z9egr776alNdXW0SiUSXbe5Of4pIz3P3ahZeRHrcsmXLeOONNzKjTtxuN2eeeSb33HNPZqqYRYsWcf755+/xbdfX1/OTn/yE559/noaGBtLpNJFI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2c6HhIRw7tw5vLy8bBMJ4HJi/I8//sDb29uurD7A999/z+nTp4mJibnpfouIiMidafDgwezcuRMPDw+ioqLw8fEhISGB8+fPc++99wK9i+GulZ2dTUxMDAsWLOCRRx5h7ty5tspCo0ePJjk5mddff52RI0eycOFCh23k5eUREBBAREQEQUFBXLp0ie3bt/dqkLQnYWFhneL34uLi624nMjKStWvXsmbNGiZMmEBOTg55eXl2FYBEREREnMGTTz5JSUkJX331FYGBgUyaNIn333+fBx98EAB/f38yMjJ499138fX15eOPP2bVqlV2bXQ1bpeens4DDzzA448/znPPPceSJUt6tSf5nDlz+PDDD8nLy8NgMGAymcjPz//XVjinpaWxaNEiAgICaGlp4YsvvrCt+DYajRQVFbFlyxZ8fX1ZsWIFKSkpzJo1q9s2+/fvT2ZmJjk5Obi7u9smhfbFOPbw4cP55ptvOHv2LCaTiYCAADZt2mSLr2/3+xQRx/pd6s2GYSIid6jU1FQ2btxoVyYcwGw2k5SUxLFjxzrtfy1959y5c3h7e1NYWEhQUNAtvdf06dPx9/fnjTfeuKX3ERERERERERERkcsqKioICQmhra2NoUOH3u7uiIiT63mTNBGRO8iGDRsIDAxk+PDhWCwW3nvvPbtVN3/99Re//fYbaWlpzJs3T0nxW2zQoEEUFBTc8r3q29vbMRgMJCUl3dL7iIiIiIiIiIiIiIjI7aEV4yIiV0lKSqKwsJDW1lY8PDyIi4tj2bJl9O9/eR7RW2+9RWpqKsHBwWzbto277777NvdYRERERERERERE5P+TVoyLyL9JiXEREREREREREREREREREXFqLre7AyIiIiIiIiIiIiIiIiIiIreSEuMiIiIiIiIiIiIiIiIiIuLUlBgXERERERERERERERERERGnpsS4iIiIiIiIiIiIiIiIiIg4NSXGRURERERERERERERERETEqSkxLiIiIiIiIiIiIiIiIiIiTk2JcRERERERERERERERERERcWpKjIuIiIiIiIiIiIiIiIiIiFNTYlxERERERERERERERERERJza/wCivhWs4GU4vQAAAABJRU5ErkJggg==",
      "text/plain": [
       "<Figure size 2000x500 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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/DKmTZuGbdu2Yfz48R7Pv/POOxEbG4uHH34Y+fn5WLNmDZYsWYKNGzcCcFXyzZo1CwkJCbjvvvsQExOD/Px8/Pe//22zHNdeey1+85vfYO/eve6GWgA4ffo0du/ejaefftpd3jlz5mD48OFYuXIl5HI5Tp482W4j65tvvonf/va3GDduHG677TYAQFpaGgCgpKQEF198sbvROiEhAdnZ2bjllltgNpuxbNkyj32tXr0aSqUS9913H06ePIm1a9dCJpNBIpGgsrISK1aswO7du/HGG28gNTUVDz30kMfrt23bho0bN2Lp0qWQy+VYt24dZs+ejW+//RZDhw7tVJkeffRRREdHY/ny5aipqUF0dDSOHDmC999/H9dccw1SU1NRUlKCl19+GVOnTsWRI0eQnJyMwYMHY+XKlXjooYdw2223YfLkyQCACRMmtPl5tqalcnz11VfIysrCmDFj8PDDD0MikWD9+vW45JJLsGPHDowbN65T70VERBSqGF+GR3wJAI888ghWrFiBCRMmYOXKlYiOjsaePXvw1VdfYdasWS2+prq6GtOmTcPJkyexZMkSpKam4t1338WNN96I8+fP46677mr3fZv6/PPPcdVVV2HIkCFYvXo1zp07h5tuuqlTjcbtnQ8A8MUXXyArKwv9+vXDihUrUF1djbVr12LixInYv38/+vbti8svvxwajQbvvPMOpk6d6vEeGzduRHp6ujv2NRqNmDhxIlJSUnDfffdBrVbjnXfewbx587B582ZceeWVHq+/4447kJCQgIceeghVVVUdPkYiIqJwwtgyPGLLyZMn44MPPoDZbIZOp4Moiti5cyckEgl27NiBX/3qVwCAHTt2QCKRYOLEiW3ur7KyErNnz8b8+fOxYMECbNq0Cffeey+GDRuGrKwsAK64dMaMGThz5gyWLl2K5ORkvPnmm/jqq6/a3HdLVqxYgdWrV7vrX81mM/bt24f9+/fj0ksvdT/P4XBg9uzZuPjii/HUU0/h008/xcMPP4z6+nqsXLnS/Txvz9U333wTixcvRmZmJp588knYbDa89NJLmDRpEr7//nv07dsXgG/jZaKwJxJRRFi/fr0IQPziiy/EsrIy8ezZs+Lbb78t9ujRQ1QqleJPP/0kiqIoLl68WAQg3nfffR6v37FjhwhAfOuttzy2f/rppx7bS0tLxejoaPHyyy8X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U6dO9XjuBx98IA4ZMkSMiooSAYjr1693P/bss8+KKSkpolwuFydOnCju27ev2T7aKocoiuL3338vzp8/X+zRo4col8vFPn36iAsWLBC//PLLFp9PREQUDhhfhn98KYqi+Prrr4ujRo0S5XK5GBsbK06dOlXcsmWL+/GWYq+SkhLxpptuEuPj48Xo6Ghx2LBhHvFXg7KyMvGqq64SVSqVGBsbK95+++3i4cOHm8VroiiKmzdvFgcPHizK5XJxyJAh4n//+19x8eLFYp8+fbw6jsbaOx9EURS/+OILceLEiaJSqRR1Op04d+5c8ciRIy3ub8uWLSIAURAE8ezZsy0+Jzc3V/zNb34jGgwGUSaTiSkpKeKcOXPETZs2uZ/j7d8UERFROGJsGRmx5d133y0CEJ988kmP7f379xcBiLm5uW0enyi64s/09PRm+24pNjx9+rT4q1/9SlSpVGJ8fLx41113iZ9++mmL32tbHnvsMXHcuHFiTEyMqFQqxQsvvFB8/PHHxdraWo/3V6vVYm5urjhr1ixRpVKJPXv2FB9++GHR4XA026c352rDZ5CZmSnq9XpRoVCIaWlp4o033tjsO/VlvEwUzgRRbGMONCIiog4QBAG///3vPaYMIiIiIiIiIiIiIgpnN954IzZt2sQR2kRBjmuMExERERERERERERERERFRWOMa40REREREREQU0ioqKlBbW9vq41Kp1L2uIxERERERAFRXV8NkMrX5nLi4OERHR3dTiYjI39gwTkREREREREQhbf78+di2bVurj/fp0wf5+fndVyAiIiIiCnobN27ETTfd1OZztm7dimnTpnVPgYjI77jGOBERERERERGFtO+++w6VlZWtPq5UKjFx4sRuLBERERERBbuioiIYjcY2nzNmzBjExsZ2U4mIyN/YME5ERERERERERERERERERGFNEugCEBERERERERERERERERER+RPXGG/E6XSisLAQWq0WgiAEujhEREREQUkURVgsFiQnJ0MiYT/LljCuJCIiImobY0rvMK4kIiIialtH4ko2jDdSWFiI3r17B7oYRERERCHh7Nmz6NWrV6CLEZQYVxIRERF5hzFl2xhXEhEREXnHm7iSDeONaLVaAK4PTqfTBbg0RERERMHJbDajd+/e7tiJmmNcSURERNQ2xpTeYVxJRERE1LaOxJVsGG+kYToi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iIiIiJpinkBERNQyNowTdDodgyMiIiKiEMVYjoiIiIiImmKeQERE1BynUiciIiIiIiIiIiIiIiIiorDGhnEiIiIiIiIiIiIiIiIiIgprbBgnIiKiThMEAe+//36gixFxVqxYgZEjRwa6GEREREREREREREQhgw3jRERE1Kobb7wR8+bNa/XxoqIiZGVldV+BOkgQBPc/nU6Hiy66CB988EGgi9Vly5cvx5dffhnoYhARERERERERERGFDDaMhzJTAVD8g+snERFRABgMBsjl8oCWQRRF1NfXt/r4+vXrUVRUhH379mHixIm4+uqr8cMPP/i1TLW1tX7dv0ajQY8ePfz6HkTkY4zdiYiIiMgXGFcSERF1GhvGQ1XuViBnNbD9adfP3K2BLhEREUWgxlOp5+fnQxAE/Pe//8X06dOhUqkwYsQI7Nq1y+M1X3/9NSZPngylUonevXtj6dKlqKqqcj/+5ptvYuzYsdBqtTAYDLjuuutQWlrqfjwnJweCICA7OxtjxoyBXC7H119/3WoZY2JiYDAYMHDgQDz66KOor6/H1q2/3DfPnj2LBQsWICYmBnFxcbjiiiuQn5/vfry+vh5Lly5FTEwMevTogXvvvReLFy/2GEk/bdo0LFmyBMuWLUN8fDwyMzMBAIcPH0ZWVhY0Gg169uyJG264AeXl5e7Xbdq0CcOGDYNSqUSPHj0wc+ZM92eRk5ODcePGQa1WIyYmBhMnTsTp06cBNJ9K3el0YuXKlejVqxfkcjlGjhyJTz/91P24t98NEfkJY3ciIiIi8gXGlURERF3ChvFQZCoADm9GbW0NrIpk1NbWAIc3Az99x96CREQRoMhUjSOFZhSZqgNdlBY98MADWL58OQ4cOICBAwdi0aJF7hHdubm5mD17Nq666iocOnQIGzduxNdff40lS5a4X19XV4dHH30UBw8exPvvv4/8/HzceOONzd7nvvvuwxNPPIGjR49i+PDh7Zarvr4er732GgAgOjra/V6ZmZnQarXYsWMHdu7cCY1Gg9mzZ7tHfT/55JN46623sH79euzcuRNms7nFddU3bNiA6Oho7Ny5E3//+99x/vx5XHLJJRg1ahT27duHTz/9FCUlJViwYAEA1zT0ixYtws0334yjR48iJycH8+fPd4+AnzdvHqZOnYpDhw5h165duO222yAIQovH9txzz+HZZ5/F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LggC3n//fY/XxMTE4I033gAA5OfnQxAEbNy4EVOnToVCocBbb72Fc+fOYdGiRUhJSYFKpcKwYcPwn//8p8PHoVarcfPNN+O+++5r83lnz57FggULEBMTg7i4OFxxxRXIz88H4JrKfMOGDfjggw8gCIJ7tPnVV1+NJUuWuPexbNkyCIKAH3/8EQBQW1sLtVqNL774AgBQU1ODpUuXIjExEQqFApMmTcLevXvdr8/JyYEgCMjOzsaYMWMgl8vx9ddfNytrbm4u+vXrhyVLlkAUxQ5/JhT6IrrHdRhoGtNnpGQEukiRgflPq0JtCjzyP1/UXxAREYULX90XGXNRpIq4HDgCcs9QrJdiw3g3a5hWIEoWhcE9ByNKFtXpaQUMagMGxQ0CgDanKmi3J051BVBjBrRJgETq+lljdm0nIqKg0929iqVSKVatWoW1a9fip59+avE5ubm5mD17Nq666iocOnQIGzduxNdff+3RWOyt++67D3fddReOHj2KzMxM2O12jBkzBh9//DEOHz6M2267DTfccAO+/fbbDu97xYoV+OGHH7Bp06YWH6+rq0NmZia0Wi127NiBnTt3QqPRYPbs2aitrcXy5cuxYMECzJ49G0VFRSgqKsKECRMwdepUj+nYt23bhvj4ePe2vXv3oq6uDhMmTAAA3HPPPdi8eTM2bNiA/fv3o3///sjMzERFhee997777sMTTzyBo0ePYvjw4R6PHTp0CJMmTcJ1112HF154IaSmtiffidge12GkIabnd9aNmP+0KBSnwCP/8mX9BRERUajz1X2RMRdFuojKgSMg9wzFeqmoQBcg0jRMK5CqT3VPK5BnyoOpxtTpE8WbfWakZCA1JhWmGhP0cr3neynjALkOsBS5/jAtRa7flXEe72M2m2Gz2aBSqTh1GhFRgOwq2IXs/GxY66zQyDTI6pvVLb0rr7zySowcORIPP/wwXnvttWaPr169Gtdffz2WLVsGABgwYACef/55TJ06FS+99BIUCoXX77Vs2TLMnz/fY9vy5cvd/7/zzjvx2Wef4Z133sG4ceM6dBzJycm466678MADD7S4TvjGjRvhdDrx6quvuhua169fj5iYGOTk5GDWrFlQKpWoqamBwfDLvXTatGm46667UFZWhqioKBw5cgR/+ctfkJOTg//7v/9DTk4OLrroIqhUKlRVVeGll17CG2+8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Sj0Sh8OBgoKC8L+3bduGc845Jxw0AeDiiy/G/v370dPTE/E3/H4/nE7nkP+IiIiI0kG53Yz5FTY26uKAuZKIiCj1MOtQuolHpgSYK4mI4o2ZgogGS8uB8UOHDuHBBx/El7/85fDfWltbUVpaOmS6gX+3trZG/J17770Xdrs9/N/06dMTV2giIiIiSjnMlUREREQ0WfHKlABzJREREVEiJXVg/I477oAkSaP+N/zRQk1NTVi7di2uuOIKXHfddZOa/5133gmHwxH+78SJE5P6PSIiIiJKDuZKIiIiIpqsZGdKgLmSiIiIKJF0yZz5rbfeis9//vOjTjNr1qzw/29ubsZ5552HlStX4v/9v/83ZLqysjK0tbUN+dvAv8vKyiL+ttFohNFonEDJiYiIiCiVMFcSERER0WQlO1MCzJVEREREiZTUgfHi4mIUFxfHNG1TUxPOO+88LF26FI899hhkeejN7itWrMA3v/lNBINB6PV6AMArr7yCOXPmID8/P+5lJyIiIqLUwVxJRERERJPFTElERESU2dLiHeNNTU0499xzMWPGDPzoRz9CR0cHWltbh7yP5zOf+QwMBgOuvfZa7NmzB0899RQeeOAB3HLLLUksORERERGlEuZKIiIiIposZkoiIiKi9JTUO8Zj9corr+DQoUM4dOgQpk2bNuQzIQQAwG634+WXX8YNN9yApUuXoqioCHfffTeuv/76ZBSZiIiIiFIQcyURERERTRYzJREREVF6ksRAWiM4nU7Y7XY4HA7YbLZkF4eIiIgoJTEzjY3riIiIiGh0zEux4XoiIiIiGt148lJaPEqdiIiIiIiIiIiIiIiIiIhoojgwTkREREREREREREREREREGY0D40RERERERERERERERERElNE4ME5ERERERERERERERERERBmNA+NERERERERERERERERERJTRODBOREREREREREREREREREQZTZfsAqQSIQQAwOl0JrkkRERERKlrICsNZCcaibmSiIiIaHTMlLFhriQiIiIa3XhyJQfGB+nr6wMATJ8+PcklISIiIkp9fX19sNvtyS5GSmKuJCIiIooNM+XomCuJiIiIYhNLrpQEL8sM0zQNzc3NyM3NhSRJcf99p9OJ6dOn48SJE7DZbHH/fYovbq/0wu2VXri90ge3VXqZqu0lhEBfXx8qKiogy3wzTySJzpWD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eOABrFixAtdddx1aWlrQ0tKC3NxcnH/++ViyZAneeecd/PWvf0VbWxs+9alPDfnub37zGxQVFeGtt97CV7/6VXzlK1/BFVdcgZUrV+K9997DRRddhKuvvhoej2fI92677Tb8+Mc/xttvv43i4mKsW7cuPIDd2NiItWvX4pOf/CR27tyJp556Clu3bsWGDRuG/MaPfvQj1NXV4f3338ddd90FAMjNzcXjjz+OvXv34oEHHsCjjz6Kn/70pwD6H6V06623YsGCBeHlHN6BOZY77rgD9913H/bt24dFixbh3nvvxW9/+1s8/PDD2LNnD26++WZ89rOfxZYtW8b1u0RERESZ5s4778R9992Hu+66C3v37sXvf/97lJaWjpiuqakJH/vYx3DGGWegoaEBDz30EP73f/8X//3f/x3zvDRNw+WXXw6DwYDt27fj4Ycfxu233x7z910uF1avXo2mpia88MILaGhowDe+8Q1omgYAeO6553DjjTfi1ltvxe7du/HlL38ZX/jCF7Bp0yYAwPr161FfXw+XyxX+zb/97W/weDz413/9VwCIOTcOz5tERERE2W7VqlXo6+vD+++/D6D/osqioqIhg8dbtmzBueeeG/H7jY2N+POf/4wXX3wRL774IrZs2YL77rsv/Pltt92GLVu24Pnnn8fLL7+MzZs347333oupbO+88w6+9rWv4Tvf+Q7279+Pv/71rzjnnHOGTPOb3/wGOp0Ob731Fh544AH85Cc/wa9+9avw5xs2bMC2bdvw5JNPYufOnbjiiiuwdu1aHDx4MFz+sfpKP//5z+PEiRPYtGkT/vSnP+F//ud/0N7eHtMyEFEWE0REWWr16tXixhtvDP/7u9/9rrjooouGTHPixAkBQOzfvz/8nbPPPjv8eSgUEjk5OeLqq68O/62lpUUAENu2bRNCCLFp0yYBQDz55JPhabq6uoTZbBZPPfWUEEKIa6+9Vlx//fVD5v3aa68JWZaF1+sVQghRVVUlLrvssjGX6/777xdLly4N//uee+4RdXV1Q6Y5cuSIACDef//98N96enoEALFp06Yh5f7zn/8cnsbn8wmLxSLeeOONIb937bXXiquuumrMshERERFlKqfTKYxGo3j00UdHfDY8e/3nf/6nmDNnjtA0LTzNL3/5S2G1WoWqqkKI/uz305/+dMjv1NXViXvuuUcIIcTf/vY3odPpRFNTU/jzjRs3CgDiueeeG7O8jzzyiMjNzRVdXV0RP1+5cqW47rrrhvztiiuuEB/72MeEEEIEg0FRVFQkfvvb34Y/v+qqq8SVV14phIgtN0bKm0RERETU77TTThP333+/EEKIyy67THzve98TBoNB9PX1iZMnTwoA4sCBA+Kxxx4Tdrs9/L177rlHWCwW4XQ6w3+77bbbxPLly4UQQvT19QmDwSCefvrp8OcDfZWD+0qjeeaZZ4TNZhvy+4OtXr1azJs3b0jWvf3228W8efOEEEIcO3ZMKIoyJMcKIcQFF1wg7rzzTiHE2H2l+/fvFwDEW2+9Ff583759AsCIDE1ENBjvGCci+lBDQwM2bdoEq9Ua/m/u3LkA+q9SHDD4LhZFUVBYWIiFCxeG/zZwV9DwKxRXrFgR/v8FBQWYM2cO9u3bF573448/PmTeF198MTRNw5EjR8LfO/3000eU+6mnnsJZZ52FsrIyWK1W/Nd//ReOHz8+mVUxxOB5Hjp0CB6PBxdeeOGQsv72t78dso6IiIiIss2+ffvg9/txwQUXxDTtihUrIElS+G9nnXUWXC4XTp48GfP8pk+fjoqKivDfBufNsezYsQNLlixBQUFB1N8/66yzhvztrLPOCudXnU6HT33qU+FHVrrdbjz//PNYv349gPHlxkgZl4iIiCjbrV69Gps3b4YQAq+99houv/xyzJs3D1u3bsWWLVtQUVGB2traiN+dOXMmcnNzw/8uLy8P91U2NjYiEAhg+fLl4c8H+ipjceGFF6KqqgqzZs3C1VdfjSeeeGLEkzPPPPPMIVl3xYoVOHjwIFRVxa5du6CqKk455ZQhOXHLli3hnDhWX+m+ffug0+mwdOnS8Dzmzp075JHyRESR6JJdACKiVOFyubBu3Tr84Ac/GPFZeXl5+P/r9fohn0mSNORvA6Fv4DGUsc77y1/+Mr72ta+N+GzGjBnh/5+TkzPks23btmH9+vX49re/jYsvvhh2ux1PPvnkmO8FkuX+66LEoHf7DDzWfbjB8xx4VOZLL72EysrKIdMZjcZR50lERESUycxmc1x/T5blIVkNiJ7XJiIe5V2/fj1Wr16N9vZ2vPLKKzCbzVi7di2A8eXG4RmXiIiIiPrf1f3rX/8aDQ0N0Ov1mDt3Ls4991xs3rwZPT09WL16ddTvRuq/HE9f5Whyc3Px3nvvYfPmzXj55Zdx991341vf+hbefvvtmAamXS4XFEXBu+++C0VRhnxmtVrD04zWV3rgwIG4LAsRZR8OjBNR1jIYDFBVNfzv0047Dc888wxmzpwJnS7+p8c333wzPMjd09ODAwcOYN68eeF57927F7Nnzx7Xb77xxhuoqqrCN7/5zfDfjh07NmSa4csJAMXFxQCAlpYWLFmyBED/XUNjmT9/PoxGI44fPz5q+CYiIiLKNrW1tTCbzXj11VfxpS99adRp582bh2eeeQZCiPBFla+//jpyc3Mxbdo0AP15raWlJfwdp9M55ElC8+bNw4kTJ9DS0hK+iPPNN9+MubyLFi3Cr371K3R3d0e8a3zevHl4/fXXcc0114T/9vrrr2P+/Pnhf69cuRLTp0/HU089hY0bN+KKK64Id8IyNxIRERFNzsB7xn/605+G89S5556L++67Dz09Pbj11lsn9Ls1NTXQ6/XYvn37iL7KWHObTqfDmjVrsGbNGtxzzz3Iy8vDP/7xD1x++eUAgO3btw+Z/s0330RtbS0URcGSJUugqira29uxatWqiL8/Vl/p3LlzEQqF8O677+KMM84AAOzfvx+9vb0xlZ+IshcHxokoa82cORPbt2/H0aNHYbVaccMNN+DRRx/FVVddhW984xsoKCjAoUOH8OSTT+JXv/rViCsYx+s73/kOCgsLUVpaim9+85soKirCZZddBgC4/fbbceaZZ2LDhg340pe+hJycHOzduxevvPIKfvGLX0T9zdraWhw/fhxPPvkkzjjjDLz00kt47rnnRiznkSNHsGPHDkybNg25ubkwm80488wzcd9996G6uhrt7e34r//6rzGXITc3F1//+tdx8803Q9M0nH322XA4HHj99ddhs9mGdJwSERERZROTyYTbb78d3/jGN2AwGHDWWWeho6MDe/bsGfF49f/4j//Az372M3z1q1/Fhg0bsH//ftxzzz245ZZbwk/2Of/88/H4449j3bp1yMvLw9133z0kj65ZswannHIKrrnmGtx///1wOp1DLpYcy1VXXYXvf//7uOyyy3DvvfeivLwc77//PioqKrBixQrcdttt+NSnPoUlS5ZgzZo1qK+vx7PPPou///3vQ37nM5/5DB5++GEcOHAAmzZtCv+duZGIiIhocvLz87Fo0SI88cQT4f7Bc845B5/61KcQDAYnfPGh1WrFtddei9tuuw2FhYUoKSnBN7/5zXAOHcuLL76Iw4cP45xzzkF+fj7+8pe/QNO0IY9iP378OG655RZ8+ctfxnvvvYcHH3ww/ITLU045BevXr8fnPvc5/PjHP8aSJUvQ0dGBV199FYsWLcKll146Zl/pnDlzsHbtWnz5y1/GQw89BJ1Oh5tuuinuT3EioszDd4wTUdb6+te/DkVRMH/+fBQXFyMQCOD111+Hqqq46KKLsHDhQtx0003Iy8uLORiO5r777sONN96IpUuXorW1FfX19TAYDAD679jZsmULDhw4gFWrVmHJkiW4++67h7wzMpKPf/zjuPnmm7FhwwYsXrwYb7zxBu66664h03zyk5/E2rVrcd5556G4uBh/+MMfAAC//vWvEQqFsHTpUtx000347//+75iW47vf/S7uuusu3HvvvZg3bx7Wrl2Ll156CdXV1RNYK0RERESZ46677sKtt96Ku+++G/PmzcOVV14ZfpfjYJWVlfjLX/6Ct956C3V1dfj3f/93XHvttUMuVLzzzjuxevVq/Mu//AsuvfRSXHbZZaipqQl/LssynnvuOXi9Xixbtgxf+tKX8L3vfS/mshoMBrz88ssoKSnBxz72MSxcuBD33XdfePD9sssuwwMPPIAf/ehHWLBgAR555BE89thjOPfcc4f8zvr167F3715UVlaOeCc5cyMRERHR5KxevRqqqoYzWEFBAebPn4+ysrKY3wkeyf33349Vq1Zh3bp1WLNmDc4+++wh7+seTV5eHp599lmcf/75mDdvHh5++GH84Q9/wIIFC8LTfO5znwvn1BtuuAE33ngjrr/++vDnjz32GD73uc/h1ltvxZw5c3DZZZfh7bffDt/BHktf6WOPPYaKigqsXr0al19+Oa6//nqUlJRMeJ0QUXaQxPCXlhERUVxt3rwZ5513Hnp6emJ6zw4RERERERERERFROjr33HOxePFi/OxnP0t2UYiIRuAd40RERERERERERERERERElNE4ME5ERERERESUYb7//e/DarVG/O+SSy5JdvGIiIiIKEW99tprUXOk1WpNdvGIiCaFj1InIiIiIiIiyjDd3d3o7u6O+JnZbEZlZeUUl4iIiIiI0oHX60VTU1PUz2fPnj2FpSEiii8OjBMRERERERERERERERERUUbjo9SJiIiIiIiIiIiIiIiIiCijcWCciIiIiIiIiIiIiIiIiIgyGgfGiYiIiIiIiIiIiIiIiIgoo3FgnIiIiIiIiIiIiIiIiIiIMhoHxomIiIiIiIiIiIiIiIiIKKNxYJyIiIiIiIiIiIiIiIiIiDIaB8aJiIiIiIiIiIiIiIiIiCijcWCciIiIiIiIiIiIiIiIiIgy2v8HMkZ8cnzojO4AAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 2000x500 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "from torch.utils.data import Dataset, DataLoader\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\n",
    "\n",
    "data = pd.read_csv('energy_production_dataset.csv')\n",
    "# Split features and target\n",
    "X = data[['time_of_day', 'temperature', 'cloud_cover', 'wind_speed']]\n",
    "y = data['energy_production']\n",
    "\n",
    "# Split into train and test sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Scale the features\n",
    "scaler = StandardScaler()\n",
    "X_train_scaled = scaler.fit_transform(X_train)\n",
    "X_test_scaled = scaler.transform(X_test)\n",
    "\n",
    "# 1. Train Linear Regression\n",
    "print(\"\\nTraining Linear Regression...\")\n",
    "lr_model = LinearRegression()\n",
    "lr_model.fit(X_train_scaled, y_train)\n",
    "lr_pred = lr_model.predict(X_test_scaled)\n",
    "lr_mae = mean_absolute_error(y_test, lr_pred)\n",
    "lr_rmse = np.sqrt(mean_squared_error(y_test, lr_pred))\n",
    "lr_r2 = r2_score(y_test, lr_pred)\n",
    "\n",
    "# 2. Train Random Forest\n",
    "print(\"\\nTraining Random Forest...\")\n",
    "rf_model = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "rf_model.fit(X_train_scaled, y_train)\n",
    "rf_pred = rf_model.predict(X_test_scaled)\n",
    "rf_mae = mean_absolute_error(y_test, rf_pred)\n",
    "rf_rmse = np.sqrt(mean_squared_error(y_test, rf_pred))\n",
    "rf_r2 = r2_score(y_test, rf_pred)\n",
    "\n",
    "# 3. Neural Network\n",
    "class SolarDataset(Dataset):\n",
    "    def __init__(self, features, targets):\n",
    "        self.features = torch.FloatTensor(features)\n",
    "        self.targets = torch.FloatTensor(targets.values).reshape(-1, 1)\n",
    "        \n",
    "    def __len__(self):\n",
    "        return len(self.features)\n",
    "    \n",
    "    def __getitem__(self, idx):\n",
    "        return self.features[idx], self.targets[idx]\n",
    "\n",
    "train_dataset = SolarDataset(X_train_scaled, y_train)\n",
    "test_dataset = SolarDataset(X_test_scaled, y_test)\n",
    "train_loader = DataLoader(train_dataset, batch_size=32, shuffle=True)\n",
    "test_loader = DataLoader(test_dataset, batch_size=32, shuffle=False)\n",
    "\n",
    "class SolarNet(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(SolarNet, self).__init__()\n",
    "        self.batch_norm1 = nn.BatchNorm1d(4)\n",
    "        \n",
    "        # First parallel branch - deeper network\n",
    "        self.deep_branch = nn.Sequential(\n",
    "            nn.Linear(4, 128),\n",
    "            nn.BatchNorm1d(128),\n",
    "            nn.LeakyReLU(),\n",
    "            nn.Dropout(0.3),\n",
    "            \n",
    "            nn.Linear(128, 64),\n",
    "            nn.BatchNorm1d(64),\n",
    "            nn.LeakyReLU(),\n",
    "            nn.Dropout(0.3),\n",
    "            \n",
    "            nn.Linear(64, 32),\n",
    "            nn.BatchNorm1d(32),\n",
    "            nn.LeakyReLU()\n",
    "        )\n",
    "        \n",
    "        # Second parallel branch - wider network\n",
    "        self.wide_branch = nn.Sequential(\n",
    "            nn.Linear(4, 256),\n",
    "            nn.BatchNorm1d(256),\n",
    "            nn.LeakyReLU(),\n",
    "            nn.Dropout(0.3),\n",
    "            \n",
    "            nn.Linear(256, 32),\n",
    "            nn.BatchNorm1d(32),\n",
    "            nn.LeakyReLU()\n",
    "        )\n",
    "        \n",
    "        # Combine branches\n",
    "        self.combine = nn.Sequential(\n",
    "            nn.Linear(64, 32),  # 32 + 32 = 64 from both branches\n",
    "            nn.BatchNorm1d(32),\n",
    "            nn.LeakyReLU(),\n",
    "            nn.Dropout(0.2),\n",
    "            \n",
    "            nn.Linear(32, 16),\n",
    "            nn.BatchNorm1d(16),\n",
    "            nn.LeakyReLU(),\n",
    "            \n",
    "            nn.Linear(16, 1)\n",
    "        )\n",
    "        \n",
    "    def forward(self, x):\n",
    "        x = self.batch_norm1(x)\n",
    "        \n",
    "        # Process both branches\n",
    "        deep_features = self.deep_branch(x)\n",
    "        wide_features = self.wide_branch(x)\n",
    "        \n",
    "        # Concatenate features from both branches\n",
    "        combined = torch.cat((deep_features, wide_features), dim=1)\n",
    "        \n",
    "        # Final processing\n",
    "        return self.combine(combined)\n",
    "\n",
    "print(\"\\nTraining Neural Network...\")\n",
    "model = SolarNet()\n",
    "criterion = nn.HuberLoss(delta=1.0)  # More robust to outliers than MSE\n",
    "optimizer = torch.optim.AdamW(model.parameters(), lr=0.001, weight_decay=0.01)\n",
    "\n",
    "# Learning rate scheduler\n",
    "scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau(optimizer, mode='min', \n",
    "                                                      factor=0.5, patience=5, \n",
    "                                                      verbose=True)\n",
    "\n",
    "n_epochs = 200  # Increased epochs\n",
    "train_losses = []\n",
    "val_losses = []\n",
    "\n",
    "for epoch in range(n_epochs):\n",
    "    model.train()\n",
    "    epoch_loss = 0\n",
    "    for batch_features, batch_targets in train_loader:\n",
    "        outputs = model(batch_features)\n",
    "        loss = criterion(outputs, batch_targets)\n",
    "        \n",
    "        optimizer.zero_grad()\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "        \n",
    "        epoch_loss += loss.item()\n",
    "    \n",
    "    model.eval()\n",
    "    val_loss = 0\n",
    "    with torch.no_grad():\n",
    "        for batch_features, batch_targets in test_loader:\n",
    "            outputs = model(batch_features)\n",
    "            val_loss += criterion(outputs, batch_targets).item()\n",
    "    \n",
    "    train_losses.append(epoch_loss / len(train_loader))\n",
    "    val_losses.append(val_loss / len(test_loader))\n",
    "    \n",
    "    if (epoch + 1) % 20 == 0:\n",
    "        print(f'Epoch [{epoch+1}/{n_epochs}], Train Loss: {train_losses[-1]:.4f}, Val Loss: {val_losses[-1]:.4f}')\n",
    "\n",
    "# Get Neural Network predictions\n",
    "model.eval()\n",
    "with torch.no_grad():\n",
    "    nn_pred = model(torch.FloatTensor(X_test_scaled)).numpy()\n",
    "nn_mae = mean_absolute_error(y_test, nn_pred)\n",
    "nn_rmse = np.sqrt(mean_squared_error(y_test, nn_pred))\n",
    "nn_r2 = r2_score(y_test, nn_pred)\n",
    "\n",
    "# Print comparison metrics\n",
    "print(\"\\nModel Comparison:\")\n",
    "print(\"-\" * 50)\n",
    "models = {\n",
    "    'Linear Regression': (lr_pred, lr_mae, lr_rmse, lr_r2),\n",
    "    'Random Forest': (rf_pred, rf_mae, rf_rmse, rf_r2),\n",
    "    'Neural Network': (nn_pred, nn_mae, nn_rmse, nn_r2)\n",
    "}\n",
    "\n",
    "for model_name, (pred, mae, rmse, r2) in models.items():\n",
    "    print(f\"\\n{model_name}:\")\n",
    "    print(f\"MAE: {mae:.4f}\")\n",
    "    print(f\"RMSE: {rmse:.4f}\")\n",
    "    print(f\"R2 Score: {r2:.4f}\")\n",
    "\n",
    "# Visualization\n",
    "plt.figure(figsize=(20, 5))\n",
    "\n",
    "# Plot 1: Actual vs Predicted for all models\n",
    "plt.subplot(1, 3, 1)\n",
    "plt.scatter(y_test, lr_pred, alpha=0.5, label='Linear Regression')\n",
    "plt.scatter(y_test, rf_pred, alpha=0.5, label='Random Forest')\n",
    "plt.scatter(y_test, nn_pred, alpha=0.5, label='Neural Network')\n",
    "plt.plot([0, max(y_test)], [0, max(y_test)], 'k--', label='Perfect Prediction')\n",
    "plt.xlabel('Actual Energy Production (kW)')\n",
    "plt.ylabel('Predicted Energy Production (kW)')\n",
    "plt.title('Actual vs Predicted: Model Comparison')\n",
    "plt.legend()\n",
    "\n",
    "# Plot 2: Error Distribution\n",
    "plt.subplot(1, 3, 2)\n",
    "plt.hist(y_test - lr_pred, bins=50, alpha=0.5, label='Linear Regression')\n",
    "plt.hist(y_test - rf_pred, bins=50, alpha=0.5, label='Random Forest')\n",
    "plt.hist(y_test - nn_pred.ravel(), bins=50, alpha=0.5, label='Neural Network')\n",
    "plt.xlabel('Prediction Error')\n",
    "plt.ylabel('Frequency')\n",
    "plt.title('Error Distribution by Model')\n",
    "plt.legend()\n",
    "\n",
    "# Plot 3: Feature Importance from Random Forest\n",
    "plt.subplot(1, 3, 3)\n",
    "feature_importance = pd.DataFrame({\n",
    "    'feature': X.columns,\n",
    "    'importance': rf_model.feature_importances_\n",
    "}).sort_values('importance', ascending=True)\n",
    "\n",
    "plt.barh(range(len(feature_importance)), feature_importance['importance'])\n",
    "plt.yticks(range(len(feature_importance)), feature_importance['feature'])\n",
    "plt.xlabel('Feature Importance')\n",
    "plt.title('Random Forest Feature Importance')\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "# Additional visualization: Model predictions across feature ranges\n",
    "plt.figure(figsize=(20, 5))\n",
    "\n",
    "features_to_plot = ['temperature', 'cloud_cover', 'wind_speed']\n",
    "for i, feature in enumerate(features_to_plot, 1):\n",
    "    plt.subplot(1, 3, i)\n",
    "    plt.scatter(X_test[feature], y_test, alpha=0.5, label='Actual', color='gray', s=10)\n",
    "    plt.scatter(X_test[feature], lr_pred, alpha=0.5, label='Linear Regression', s=10)\n",
    "    plt.scatter(X_test[feature], rf_pred, alpha=0.5, label='Random Forest', s=10)\n",
    "    plt.scatter(X_test[feature], nn_pred, alpha=0.5, label='Neural Network', s=10)\n",
    "    plt.xlabel(feature)\n",
    "    plt.ylabel('Energy Production')\n",
    "    plt.title(f'Predictions vs {feature}')\n",
    "    if i == 1:  # Only show legend for first plot\n",
    "        plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/adityaganguli/.pyenv/versions/3.8.16/envs/tech-env/lib/python3.8/site-packages/torch/optim/lr_scheduler.py:60: UserWarning: The verbose parameter is deprecated. Please use get_last_lr() to access the learning rate.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch [20/300], Train Loss: 30.6196, Val Loss: 41.0921\n",
      "Epoch [40/300], Train Loss: 26.6866, Val Loss: 36.3322\n",
      "Epoch [60/300], Train Loss: 19.6907, Val Loss: 29.0272\n",
      "Epoch [80/300], Train Loss: 14.5102, Val Loss: 22.4432\n",
      "Epoch [100/300], Train Loss: 11.9146, Val Loss: 18.4159\n",
      "Epoch [120/300], Train Loss: 10.0089, Val Loss: 15.1555\n",
      "Epoch [140/300], Train Loss: 8.4464, Val Loss: 12.6560\n",
      "Epoch [160/300], Train Loss: 7.0682, Val Loss: 10.0031\n",
      "Epoch [180/300], Train Loss: 6.3541, Val Loss: 8.5277\n",
      "Epoch [200/300], Train Loss: 5.5569, Val Loss: 6.3538\n",
      "Epoch [220/300], Train Loss: 5.0607, Val Loss: 5.8331\n",
      "Epoch [240/300], Train Loss: 4.3105, Val Loss: 5.4410\n",
      "Epoch [260/300], Train Loss: 4.0755, Val Loss: 5.3598\n",
      "Epoch [280/300], Train Loss: 3.8002, Val Loss: 5.0279\n",
      "Epoch [300/300], Train Loss: 3.6105, Val Loss: 4.1274\n",
      "\n",
      "Neural Network Performance:\n",
      "MAE: 3.9879\n",
      "RMSE: 7.5861\n",
      "R² Score: 0.9660\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/8p/1gfm1_3j1fgg5cch6pfct1780000gn/T/ipykernel_77711/181842254.py:168: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n",
      "  model.load_state_dict(torch.load('best_model.pth'))\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Training Linear Regression...\n",
      "\n",
      "Training Random Forest...\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 2000x1000 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Model Comparison:\n",
      "--------------------------------------------------\n",
      "\n",
      "Linear Regression:\n",
      "MAE: 25.0761\n",
      "RMSE: 30.2131\n",
      "R² Score: 0.4614\n",
      "\n",
      "Random Forest:\n",
      "MAE: 5.8601\n",
      "RMSE: 8.5170\n",
      "R² Score: 0.9572\n",
      "\n",
      "Neural Network:\n",
      "MAE: 3.9879\n",
      "RMSE: 7.5861\n",
      "R² Score: 0.9660\n",
      "\n",
      "Detailed Error Analysis:\n",
      "--------------------------------------------------\n",
      "\n",
      "Linear Regression:\n",
      "Mean Error: 1.1665\n",
      "Error Std: 30.1906\n",
      "Max Error: 93.9737\n",
      "Error 95th Percentile: 60.0406\n",
      "\n",
      "Random Forest:\n",
      "Mean Error: 0.9263\n",
      "Error Std: 8.4664\n",
      "Max Error: 29.6722\n",
      "Error 95th Percentile: 18.9598\n",
      "\n",
      "Neural Network:\n",
      "Mean Error: 1.5840\n",
      "Error Std: 7.4189\n",
      "Max Error: 52.9164\n",
      "Error 95th Percentile: 13.3638\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "from torch.utils.data import Dataset, DataLoader, TensorDataset\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "class ResidualBlock(nn.Module):\n",
    "    def __init__(self, in_features, hidden_features):\n",
    "        super(ResidualBlock, self).__init__()\n",
    "        self.block = nn.Sequential(\n",
    "            nn.Linear(in_features, hidden_features),\n",
    "            nn.LayerNorm(hidden_features),\n",
    "            nn.GELU(),\n",
    "            nn.Dropout(0.1),\n",
    "            nn.Linear(hidden_features, in_features),\n",
    "            nn.LayerNorm(in_features),\n",
    "            nn.Dropout(0.1)\n",
    "        )\n",
    "        \n",
    "    def forward(self, x):\n",
    "        return x + self.block(x)\n",
    "\n",
    "class ImprovedNonLinearNet(nn.Module):\n",
    "    def __init__(self, input_size):\n",
    "        super(ImprovedNonLinearNet, self).__init__()\n",
    "        \n",
    "        # Initial feature expansion\n",
    "        self.input_block = nn.Sequential(\n",
    "            nn.Linear(input_size, 256),\n",
    "            nn.LayerNorm(256),\n",
    "            nn.GELU(),\n",
    "            nn.Dropout(0.1)\n",
    "        )\n",
    "        \n",
    "        # Deep residual blocks\n",
    "        self.res_blocks = nn.ModuleList([\n",
    "            ResidualBlock(256, 512) for _ in range(6)\n",
    "        ])\n",
    "        \n",
    "        # Parallel processing paths\n",
    "        self.path1 = nn.Sequential(\n",
    "            nn.Linear(256, 128),\n",
    "            nn.LayerNorm(128),\n",
    "            nn.GELU()\n",
    "        )\n",
    "        \n",
    "        self.path2 = nn.Sequential(\n",
    "            nn.Linear(256, 128),\n",
    "            nn.LayerNorm(128),\n",
    "            nn.GELU()\n",
    "        )\n",
    "        \n",
    "        # Final layers with skip connection\n",
    "        self.final = nn.Sequential(\n",
    "            nn.Linear(256, 64),\n",
    "            nn.LayerNorm(64),\n",
    "            nn.GELU(),\n",
    "            nn.Dropout(0.1),\n",
    "            nn.Linear(64, 32),\n",
    "            nn.LayerNorm(32),\n",
    "            nn.GELU(),\n",
    "            nn.Linear(32, 1)\n",
    "        )\n",
    "        \n",
    "    def forward(self, x):\n",
    "        # Initial feature processing\n",
    "        x = self.input_block(x)\n",
    "        \n",
    "        # Residual blocks\n",
    "        for res_block in self.res_blocks:\n",
    "            x = res_block(x)\n",
    "        \n",
    "        # Parallel paths\n",
    "        path1_out = self.path1(x)\n",
    "        path2_out = self.path2(x)\n",
    "        \n",
    "        # Combine paths\n",
    "        combined = torch.cat([path1_out, path2_out], dim=1)\n",
    "        \n",
    "        # Final processing\n",
    "        return self.final(combined)\n",
    "\n",
    "# Load and prepare data\n",
    "data = pd.read_csv('nonlinear_dataset.csv')\n",
    "X = data[['X1', 'X2', 'X3']]\n",
    "y = data['target']\n",
    "\n",
    "# Split and scale data\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "scaler = StandardScaler()\n",
    "X_train_scaled = scaler.fit_transform(X_train)\n",
    "X_test_scaled = scaler.transform(X_test)\n",
    "\n",
    "# Convert to tensors\n",
    "X_train_tensor = torch.FloatTensor(X_train_scaled)\n",
    "y_train_tensor = torch.FloatTensor(y_train.values).reshape(-1, 1)\n",
    "X_test_tensor = torch.FloatTensor(X_test_scaled)\n",
    "y_test_tensor = torch.FloatTensor(y_test.values).reshape(-1, 1)\n",
    "\n",
    "# Create data loaders with larger batch size\n",
    "train_dataset = TensorDataset(X_train_tensor, y_train_tensor)\n",
    "train_loader = DataLoader(train_dataset, batch_size=64, shuffle=True)\n",
    "test_dataset = TensorDataset(X_test_tensor, y_test_tensor)\n",
    "test_loader = DataLoader(test_dataset, batch_size=64, shuffle=False)\n",
    "\n",
    "# Initialize model and training components\n",
    "model = ImprovedNonLinearNet(input_size=3)\n",
    "criterion = nn.HuberLoss(delta=1.0)  # Robust loss function\n",
    "optimizer = torch.optim.AdamW(model.parameters(), lr=0.001, weight_decay=0.01)\n",
    "scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau(optimizer, mode='min', \n",
    "                                                          factor=0.5, patience=10, \n",
    "                                                          verbose=True, min_lr=1e-6)\n",
    "\n",
    "# Training loop with validation\n",
    "best_val_loss = float('inf')\n",
    "patience = 15\n",
    "patience_counter = 0\n",
    "train_losses = []\n",
    "val_losses = []\n",
    "\n",
    "for epoch in range(300):\n",
    "    model.train()\n",
    "    epoch_loss = 0\n",
    "    for batch_X, batch_y in train_loader:\n",
    "        optimizer.zero_grad()\n",
    "        outputs = model(batch_X)\n",
    "        loss = criterion(outputs, batch_y)\n",
    "        loss.backward()\n",
    "        torch.nn.utils.clip_grad_norm_(model.parameters(), max_norm=1.0)\n",
    "        optimizer.step()\n",
    "        # Scheduler step moved outside batch loop\n",
    "        epoch_loss += loss.item()\n",
    "    \n",
    "    # Validation phase\n",
    "    model.eval()\n",
    "    val_loss = 0\n",
    "    with torch.no_grad():\n",
    "        for batch_X, batch_y in test_loader:\n",
    "            outputs = model(batch_X)\n",
    "            val_loss += criterion(outputs, batch_y).item()\n",
    "    \n",
    "    train_losses.append(epoch_loss / len(train_loader))\n",
    "    val_losses.append(val_loss / len(test_loader))\n",
    "    \n",
    "    # Early stopping check\n",
    "    if val_loss < best_val_loss:\n",
    "        best_val_loss = val_loss\n",
    "        patience_counter = 0\n",
    "        # Save best model\n",
    "        torch.save(model.state_dict(), 'best_model.pth')\n",
    "    else:\n",
    "        patience_counter += 1\n",
    "        if patience_counter >= patience:\n",
    "            print(f'Early stopping at epoch {epoch}')\n",
    "            break\n",
    "    \n",
    "    # Update scheduler with validation loss\n",
    "    scheduler.step(val_losses[-1])\n",
    "    \n",
    "    if (epoch + 1) % 20 == 0:\n",
    "        print(f'Epoch [{epoch+1}/300], Train Loss: {train_losses[-1]:.4f}, Val Loss: {val_losses[-1]:.4f}')\n",
    "\n",
    "# Load best model\n",
    "model.load_state_dict(torch.load('best_model.pth'))\n",
    "\n",
    "# Get predictions\n",
    "model.eval()\n",
    "with torch.no_grad():\n",
    "    nn_pred = model(X_test_tensor).numpy()\n",
    "\n",
    "# Calculate metrics\n",
    "nn_mae = mean_absolute_error(y_test, nn_pred)\n",
    "nn_rmse = np.sqrt(mean_squared_error(y_test, nn_pred))\n",
    "nn_r2 = r2_score(y_test, nn_pred.ravel())\n",
    "\n",
    "print(\"\\nNeural Network Performance:\")\n",
    "print(f\"MAE: {nn_mae:.4f}\")\n",
    "print(f\"RMSE: {nn_rmse:.4f}\")\n",
    "print(f\"R² Score: {nn_r2:.4f}\")\n",
    "\n",
    "# Plot training history\n",
    "plt.figure(figsize=(10, 5))\n",
    "plt.plot(train_losses, label='Training Loss')\n",
    "plt.plot(val_losses, label='Validation Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.title('Training History')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "# Train Linear Regression\n",
    "print(\"\\nTraining Linear Regression...\")\n",
    "lr_model = LinearRegression()\n",
    "lr_model.fit(X_train_scaled, y_train)\n",
    "lr_pred = lr_model.predict(X_test_scaled)\n",
    "lr_mae = mean_absolute_error(y_test, lr_pred)\n",
    "lr_rmse = np.sqrt(mean_squared_error(y_test, lr_pred))\n",
    "lr_r2 = r2_score(y_test, lr_pred)\n",
    "\n",
    "# Train Random Forest\n",
    "print(\"\\nTraining Random Forest...\")\n",
    "rf_model = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "rf_model.fit(X_train_scaled, y_train)\n",
    "rf_pred = rf_model.predict(X_test_scaled)\n",
    "rf_mae = mean_absolute_error(y_test, rf_pred)\n",
    "rf_rmse = np.sqrt(mean_squared_error(y_test, rf_pred))\n",
    "rf_r2 = r2_score(y_test, rf_pred)\n",
    "\n",
    "# Create comparison visualizations\n",
    "plt.figure(figsize=(20, 10))\n",
    "\n",
    "# 1. Model Predictions vs Actual\n",
    "plt.subplot(2, 2, 1)\n",
    "plt.scatter(y_test, lr_pred, alpha=0.5, label=f'Linear (R²={lr_r2:.3f})')\n",
    "plt.scatter(y_test, rf_pred, alpha=0.5, label=f'Random Forest (R²={rf_r2:.3f})')\n",
    "plt.scatter(y_test, nn_pred, alpha=0.5, label=f'Neural Network (R²={nn_r2:.3f})')\n",
    "plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'k--', label='Perfect Prediction')\n",
    "plt.xlabel('Actual Values')\n",
    "plt.ylabel('Predicted Values')\n",
    "plt.title('Model Predictions vs Actual Values')\n",
    "plt.legend()\n",
    "\n",
    "# 2. Error Distribution\n",
    "plt.subplot(2, 2, 2)\n",
    "plt.hist(y_test - lr_pred, bins=50, alpha=0.5, label=f'Linear (RMSE={lr_rmse:.3f})')\n",
    "plt.hist(y_test - rf_pred, bins=50, alpha=0.5, label=f'Random Forest (RMSE={rf_rmse:.3f})')\n",
    "plt.hist(y_test - nn_pred.ravel(), bins=50, alpha=0.5, label=f'Neural Network (RMSE={nn_rmse:.3f})')\n",
    "plt.xlabel('Prediction Error')\n",
    "plt.ylabel('Frequency')\n",
    "plt.title('Error Distribution by Model')\n",
    "plt.legend()\n",
    "\n",
    "# 3. Feature Importance (Random Forest)\n",
    "plt.subplot(2, 2, 3)\n",
    "importance = pd.DataFrame({\n",
    "    'feature': X.columns,\n",
    "    'importance': rf_model.feature_importances_\n",
    "}).sort_values('importance', ascending=True)\n",
    "plt.barh(importance['feature'], importance['importance'])\n",
    "plt.xlabel('Feature Importance')\n",
    "plt.title('Random Forest Feature Importance')\n",
    "\n",
    "# 4. Error vs Predicted Value\n",
    "plt.subplot(2, 2, 4)\n",
    "plt.scatter(lr_pred, y_test - lr_pred, alpha=0.5, label='Linear')\n",
    "plt.scatter(rf_pred, y_test - rf_pred, alpha=0.5, label='Random Forest')\n",
    "plt.scatter(nn_pred.ravel(), y_test - nn_pred.ravel(), alpha=0.5, label='Neural Network')\n",
    "plt.axhline(y=0, color='k', linestyle='--')\n",
    "plt.xlabel('Predicted Value')\n",
    "plt.ylabel('Error')\n",
    "plt.title('Error vs Predicted Value')\n",
    "plt.legend()\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "# Print comprehensive metrics comparison\n",
    "print(\"\\nModel Comparison:\")\n",
    "print(\"-\" * 50)\n",
    "models = {\n",
    "    'Linear Regression': (lr_mae, lr_rmse, lr_r2),\n",
    "    'Random Forest': (rf_mae, rf_rmse, rf_r2),\n",
    "    'Neural Network': (nn_mae, nn_rmse, nn_r2)\n",
    "}\n",
    "\n",
    "for name, (mae, rmse, r2) in models.items():\n",
    "    print(f\"\\n{name}:\")\n",
    "    print(f\"MAE: {mae:.4f}\")\n",
    "    print(f\"RMSE: {rmse:.4f}\")\n",
    "    print(f\"R² Score: {r2:.4f}\")\n",
    "\n",
    "# Additional error analysis\n",
    "print(\"\\nDetailed Error Analysis:\")\n",
    "print(\"-\" * 50)\n",
    "for name, pred in [('Linear Regression', lr_pred), \n",
    "                  ('Random Forest', rf_pred), \n",
    "                  ('Neural Network', nn_pred.ravel())]:\n",
    "    errors = y_test - pred\n",
    "    print(f\"\\n{name}:\")\n",
    "    print(f\"Mean Error: {np.mean(errors):.4f}\")\n",
    "    print(f\"Error Std: {np.std(errors):.4f}\")\n",
    "    print(f\"Max Error: {np.max(np.abs(errors)):.4f}\")\n",
    "    print(f\"Error 95th Percentile: {np.percentile(np.abs(errors), 95):.4f}\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "tech-env",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

----------------------------------------
File: ./python_basics.ipynb
----------------------------------------
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Python Basics for Data Analysis (30 mins)\n",
    "Python is an interpreted and object-oriented language, which means it executes code line-by-line and supports objects, classes, and methods. It is highly readable and simple, making it an excellent choice for beginners and data analysis.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Hello, World!\n"
     ]
    }
   ],
   "source": [
    "# Python code can be executed directly without compilation\n",
    "print(\"Hello, World!\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Variables, Data Types, and Basic Operations\n",
    "\n",
    "### Variables and Assignment\n",
    "Variables are containers for storing data values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10 Alice True\n"
     ]
    }
   ],
   "source": [
    "# Assign values to variables\n",
    "x = 10\n",
    "name = \"Alice\"\n",
    "is_active = True\n",
    "\n",
    "# Print variables\n",
    "print(x, name, is_active)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Object-oriented: All variables in Python are objects\n",
    "\n",
    "x = 42\n",
    "print(x.real)  # Accessing attributes of the int object\n",
    "print(x + 10)  # Using methods/operators on an object\n",
    "print(x.__le__(50)) # accessing internal methods\n",
    "\n",
    "y = \"Hello\"\n",
    "print(y.upper())  # Accessing string methods\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Types\n",
    "Python has various data types such as integers, floats, strings, booleans, and collections like lists and dictionaries."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "25 5.9 Hello, Python! False [1, 2, 3, 4, 5] {'name': 'Alice', 'age': 25}\n"
     ]
    }
   ],
   "source": [
    "# Integer and Float\n",
    "age = 25\n",
    "height = 5.9\n",
    "\n",
    "# String\n",
    "greeting = \"Hello, Python!\"\n",
    "\n",
    "# Boolean\n",
    "is_valid = False\n",
    "\n",
    "# List\n",
    "numbers = [1, 2, 3, 4, 5]\n",
    "\n",
    "# Dictionary\n",
    "person = {\"name\": \"Alice\", \"age\": 25}\n",
    "\n",
    "print(age, height, greeting, is_valid, numbers, person)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Python's flexibility as a weakly typed language allows operations between different data types without explicit type declarations."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "30.9\n",
      "Hello, Python! Age is 25\n",
      "[1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\n",
      "Alice is 25 years old.\n",
      "False\n",
      "25 5.9 Hello, Python! False [1, 2, 3, 4, 5] {'name': 'Alice', 'age': 25}\n"
     ]
    }
   ],
   "source": [
    "# Variables with different types\n",
    "age = 25\n",
    "height = 5.9\n",
    "greeting = \"Hello, Python!\"\n",
    "is_valid = False\n",
    "numbers = [1, 2, 3, 4, 5]\n",
    "person = {\"name\": \"Alice\", \"age\": 25}\n",
    "\n",
    "# Implicit type conversion and operations\n",
    "print(age + height)  # Adds int and float: 25 + 5.9 -> 30.9\n",
    "print(greeting + \" Age is \" + str(age))  # Concatenates string and int\n",
    "print(numbers * 2)  # Duplicates the list: [1, 2, 3, 4, 5, 1, 2, 3, 4, 5]\n",
    "print(person[\"name\"] + \" is \" + str(person[\"age\"]) + \" years old.\")  # String manipulation\n",
    "print(bool(age) and is_valid)  # Combines int and bool in a logical operation: False\n",
    "\n",
    "# Display all variables\n",
    "print(age, height, greeting, is_valid, numbers, person)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Loops and conditional statements"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "### If-Else\n",
    "\n",
    "# Conditional statements\n",
    "x = 10\n",
    "if x > 5:\n",
    "    print(\"x is greater than 5\")\n",
    "else:\n",
    "    print(\"x is 5 or less\")\n",
    "\n",
    "\n",
    "### For Loop\n",
    "\n",
    "# Looping through a list\n",
    "numbers = [1, 2, 3, 4, 5]\n",
    "for num in numbers:\n",
    "    print(num)\n",
    "\n",
    "\n",
    "### While Loop\n",
    "\n",
    "# Loop until a condition is met\n",
    "count = 0\n",
    "while count < 5:\n",
    "    print(\"Count is\", count)\n",
    "    count += 1\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Some interesting nuances in loops and specific data structures in python."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### zip: Merge two lists into a dictionary."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "keys = [\"name\", \"age\", \"city\"]\n",
    "values = [\"Alice\", 25, \"New York\"]\n",
    "\n",
    "result = dict(zip(keys, values))\n",
    "print(result)  # {'name': 'Alice', 'age': 25, 'city': 'New York'}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### List comprehension: Elegant and concise iteration."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "squares = [x ** 2 for x in range(1, 6)]\n",
    "print(squares)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Tokenization Example Using Enumerate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Tokenizing the string into words\n",
    "text = \"Python is a great programming language.\"\n",
    "tokens = text.split()  # ['Python', 'is', 'a', 'great', 'programming', 'language.']\n",
    "\n",
    "# Assigning indices to tokens using enumerate\n",
    "tokenized = {index: token for index, token in enumerate(tokens)}\n",
    "\n",
    "print(tokenized)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Set: Removing duplicates from a list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "items = [1, 2, 3, 1, 2, 4, 5, 4, 6]\n",
    "\n",
    "# Use set to create a unique list\n",
    "unique_items = list(set(items))\n",
    "\n",
    "print(\"Original List:\", items)\n",
    "print(\"Unique List:\", unique_items)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### for with else: Search for a specific file in a directory."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "directory = \"/path/to/directory\"\n",
    "for file in os.listdir(directory):\n",
    "    if file.endswith(\".txt\"):\n",
    "        print(f\"Found a text file: {file}\")\n",
    "        break\n",
    "else:\n",
    "    print(\"No text files found.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Use of Range with For"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Months of the year\n",
    "months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n",
    "          \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n",
    "\n",
    "# Use range to iterate through months\n",
    "for i in range(len(months)):\n",
    "    print(f\"Generating report for {months[i]}...\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## File and Directory Access"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Reading and Writing Files"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Writing to a file\n",
    "with open('example.txt', 'w') as file:\n",
    "    file.write(\"Hello, this is a test file.\")\n",
    "\n",
    "# Reading from a file\n",
    "with open('example.txt', 'r') as file:\n",
    "    content = file.read()\n",
    "    print(content)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Listing Directory Contents"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "\n",
    "# List files and directories in the current directory\n",
    "print(os.listdir('.'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Creating and Removing Directories"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a directory\n",
    "os.mkdir('test_directory')\n",
    "\n",
    "# Remove a directory\n",
    "os.rmdir('test_directory')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Visualizing Directory Structure with Tree Command\n",
    "To view the directory structure in your terminal, you can use the `tree` command (install it if not available)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Essential libraries"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Numpy"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### NumPy Arrays\n",
    "NumPy arrays are more efficient than Python lists for numerical operations. You can create arrays using np.array().\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "# Creating a NumPy array\n",
    "array = np.array([1, 2, 3, 4, 5])\n",
    "print(\"Array:\", array)\n",
    "print(\"Type:\", type(array))\n",
    "\n",
    "# 1D Array\n",
    "arr_1d = np.array([1, 2, 3])\n",
    "print(\"1D Array:\", arr_1d)\n",
    "\n",
    "# 2D Array\n",
    "arr_2d = np.array([[1, 2], [3, 4]])\n",
    "print(\"2D Array:\\n\", arr_2d)\n",
    "\n",
    "# 3D Array\n",
    "arr_3d = np.array([[[1, 2], [3, 4]], [[5, 6], [7, 8]]])\n",
    "print(\"3D Array:\\n\", arr_3d)\n",
    "\n",
    "\n",
    "# Arithmetic with numpy arrays\n",
    "a = np.array([1, 2, 3])\n",
    "b = np.array([4, 5, 6])\n",
    "\n",
    "# Arithmetic operations\n",
    "print(\"Addition:\", a + b)\n",
    "print(\"Multiplication:\", a * b)\n",
    "print(\"Scalar Multiplication:\", a * 2)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Indexing and Slicing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "arr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n",
    "\n",
    "# Access specific element\n",
    "print(\"Element at (0,1):\", arr[0, 1])\n",
    "\n",
    "# Slice rows and columns\n",
    "print(\"First row:\", arr[0, :])\n",
    "print(\"First column:\", arr[:, 0])\n",
    "\n",
    "# Modify elements\n",
    "arr[1, 1] = 99\n",
    "print(\"Modified Array:\\n\", arr)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Transposing arrays\n",
    "arr = np.array([[1, 2, 3], [4, 5, 6]])\n",
    "print(\"Original Array:\\n\", arr)\n",
    "print(\"Transposed Array:\\n\", arr.T)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Some musings on speed of numpy\n",
    "\n",
    "NumPy is significantly faster than Python's list and loop-based operations. The main benefit comes from vectorization, which eliminates the need for explicit loops by performing element-wise operations directly, and parallel computing capabilities, where NumPy leverages optimized, low-level C and Fortran libraries to perform operations efficiently."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Python list addition took: 0.02499 seconds\n",
      "NumPy array addition took: 0.00071 seconds\n"
     ]
    }
   ],
   "source": [
    "# comparing array speeds of numpy versus regular python operations\n",
    "\n",
    "import numpy as np\n",
    "import time\n",
    "\n",
    "# Generate data\n",
    "size = 1_000_000\n",
    "list1 = list(range(size))\n",
    "list2 = list(range(size))\n",
    "\n",
    "array1 = np.array(list1)\n",
    "array2 = np.array(list2)\n",
    "\n",
    "# Using Python lists\n",
    "start_time = time.time()\n",
    "result_list = [x + y for x, y in zip(list1, list2)]\n",
    "end_time = time.time()\n",
    "print(f\"Python list addition took: {end_time - start_time:.5f} seconds\")\n",
    "\n",
    "# Using NumPy arrays\n",
    "start_time = time.time()\n",
    "result_array = array1 + array2\n",
    "end_time = time.time()\n",
    "print(f\"NumPy array addition took: {end_time - start_time:.5f} seconds\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "35.197183098591545\n"
     ]
    }
   ],
   "source": [
    "speed_upgrade = 0.02499/0.00071\n",
    "print(speed_upgrade)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# A practical use of NumPy is to calculate similarity among various vectors. We'll cover this more deeply later on\n",
    "# It is the fastest way to compute similarity for vectors derived from large 'embeddings' generated by various text sources, \n",
    "# such as word embeddings, sentence embeddings, or document embeddings in natural language processing (NLP). \n",
    "# NumPy's vectorized operations, like dot product and normalization, make it highly efficient for comparing embeddings "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cosine Similarity (Lists): 0.75007, Time: 0.10440 seconds\n",
      "Cosine Similarity (NumPy): 0.75007, Time: 0.00126 seconds\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import time\n",
    "import math\n",
    "\n",
    "# Generate large random arrays\n",
    "size = 1_000_000\n",
    "vec1 = np.random.rand(size)\n",
    "vec2 = np.random.rand(size)\n",
    "\n",
    "# Using Python lists for cosine similarity\n",
    "vec1_list = vec1.tolist()\n",
    "vec2_list = vec2.tolist()\n",
    "\n",
    "def cosine_similarity_lists(v1, v2):\n",
    "    dot_product = sum(x * y for x, y in zip(v1, v2))\n",
    "    norm_v1 = math.sqrt(sum(x ** 2 for x in v1))\n",
    "    norm_v2 = math.sqrt(sum(y ** 2 for y in v2))\n",
    "    return dot_product / (norm_v1 * norm_v2)\n",
    "\n",
    "# Using NumPy for cosine similarity\n",
    "def cosine_similarity_numpy(v1, v2):\n",
    "    dot_product = np.dot(v1, v2)\n",
    "    norm_v1 = np.linalg.norm(v1)\n",
    "    norm_v2 = np.linalg.norm(v2)\n",
    "    return dot_product / (norm_v1 * norm_v2)\n",
    "\n",
    "# Measure time for Python lists\n",
    "start_time = time.time()\n",
    "cos_sim_list = cosine_similarity_lists(vec1_list, vec2_list)\n",
    "end_time = time.time()\n",
    "print(f\"Cosine Similarity (Lists): {cos_sim_list:.5f}, Time: {end_time - start_time:.5f} seconds\")\n",
    "\n",
    "# Measure time for NumPy\n",
    "start_time = time.time()\n",
    "cos_sim_numpy = cosine_similarity_numpy(vec1, vec2)\n",
    "end_time = time.time()\n",
    "print(f\"Cosine Similarity (NumPy): {cos_sim_numpy:.5f}, Time: {end_time - start_time:.5f} seconds\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "82.85714285714286\n"
     ]
    }
   ],
   "source": [
    "speed_upgrade = 0.10440/0.00126\n",
    "print(speed_upgrade)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "# Weekly sales data (rows: weeks, columns: categories)\n",
    "sales_data = np.array([\n",
    "    [150, 200, 250, 300, 350],\n",
    "    [160, 210, 240, 310, 360],\n",
    "    [155, 220, 260, 290, 370],\n",
    "    [165, 230, 270, 280, 340],\n",
    "    [170, 190, 220, 310, 330],\n",
    "    [180, 195, 245, 320, 310],\n",
    "    [175, 185, 235, 305, 325],\n",
    "    [190, 215, 250, 315, 345],\n",
    "])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exercise for numpy\n",
    "\n",
    "Shape and Data Overview: Print the shape of the array and the total sales for the store (sum of all elements).\n",
    "\n",
    "Slicing Data: Extract the sales data for the last 4 weeks and first 3 product categories.\n",
    "\n",
    "Category-wise Totals: Calculate the total sales for each product category across all weeks (hint: sum along the correct axis).\n",
    "\n",
    "Find the Week with the Highest Sales: Identify the week (row index) with the highest total sales.\n",
    "\n",
    "Filter by Threshold: Print the weeks where sales of product category 3 (index 2) exceeded 250.\n",
    "\n",
    "Normalize Sales Data: Normalize the sales data by dividing each element by the maximum sales recorded in any category."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Hints\n",
    "Hint 1: sales_data.shape gives the dimensions of the array.\n",
    "Hint 2: Use sales_data[-4:, :3] to slice the last 4 rows and first 3 columns.\n",
    "Hint 3: Use np.sum along axis for category-wise totals.\n",
    "Hint 4: Use np.argmax and np.sum to find the index of the row with the highest sales.\n",
    "Hint 5: Use Boolean indexing\n",
    "Hint 6: Use sales_data / np.max(sales_data) for normalization.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Pandas\n",
    "Pandas is the big daddy of data manipulation, offering powerful tools for cleaning, transforming, and analyzing large datasets with ease. Its intuitive DataFrame and Series structures simplify handling tabular data, while built-in functions enable efficient filtering, grouping, and aggregation."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The fundamental unit of Pandas is Series and Dataframe\n",
    "\n",
    "Series:\n",
    "\n",
    "A one-dimensional labeled array capable of holding any data type (integer, string, float, etc.).\n",
    "\n",
    "Similar to a column in a spreadsheet or database table.\n",
    "\n",
    "DataFrame:\n",
    "\n",
    "A two-dimensional labeled data structure with columns of potentially different types.\n",
    "\n",
    "Think of it as a spreadsheet or SQL table."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Series\n",
    "import pandas as pd\n",
    "data = [10, 20, 30, 40]\n",
    "series = pd.Series(data, name='Numbers')\n",
    "print(\"Series\")\n",
    "print(series)\n",
    "print(\"********\")\n",
    "\n",
    "data = {'Name': ['Alice', 'Bob', 'Charlie'], 'Score': [85, 90, 78]}\n",
    "df = pd.DataFrame(data)\n",
    "print(df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First, let's create some sample data to work with. We'll generate sales data\n",
    "that includes dates, products, regions, and various metrics."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Generate sample sales data\n",
    "np.random.seed(42)\n",
    "n_rows = 300\n",
    "\n",
    "# Sales Data\n",
    "dates = pd.date_range('2023-01-01', periods=n_rows)\n",
    "products = ['Laptop', 'Phone', 'Tablet', 'Watch']\n",
    "regions = ['North', 'South', 'East', 'West']\n",
    "\n",
    "sales_data = {\n",
    "    'Date': dates,\n",
    "    'Product': np.random.choice(products, n_rows),\n",
    "    'Region': np.random.choice(regions, n_rows),\n",
    "    'Units': np.random.randint(1, 50, n_rows),\n",
    "    'Price': np.random.uniform(200, 2000, n_rows).round(2),\n",
    "    'Customer_Rating': np.random.uniform(3, 5, n_rows).round(1)\n",
    "}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_sales = pd.DataFrame(sales_data)\n",
    "#df_sales.head(5)\n",
    "# create a new columnn (series) as function of other values\n",
    "df_sales['Total_Sales'] = df_sales['Units'] * df_sales['Price']\n",
    "df_sales.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Generate customer data\n",
    "customer_data = {\n",
    "    'Region': regions,\n",
    "    'Regional_Manager': ['John Smith', 'Emma Davis', 'Michael Chen', 'Sarah Wilson'],\n",
    "    'Target_Revenue': np.random.uniform(100000, 500000, 4).round(2)\n",
    "}\n",
    "df_customers = pd.DataFrame(customer_data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "One of the most useful functions of pandas is ease of loading data from various sources - csv,xlsx and sql as well. You can checkout all the various ways pandas can read the files. Also Pandas can read files in sizes exceeding several GB (Excel cops out in a few hundred MBs). Similarly you can write back the data to csv easily"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_sales.to_csv('sales_data.csv',index=False)\n",
    "df_customers.to_csv('customter_data.csv',index=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Basic Data Exploration"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"\\n=== Basic Data Exploration ===\")\n",
    "print(\"\\nFirst few rows:\")\n",
    "print(df_sales.head())\n",
    "print(\"\\nDataset info:\")\n",
    "print(df_sales.info())\n",
    "print(\"\\nSummary statistics:\")\n",
    "print(df_sales.describe())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 2. Data Filtering\n",
    "print(\"\\n=== Data Filtering ===\")\n",
    "high_value_sales = df_sales[df_sales['Total_Sales'] > df_sales['Total_Sales'].mean()]\n",
    "print(\"\\nHigh value sales (above mean):\")\n",
    "print(high_value_sales.head())\n",
    "\n",
    "# Filter multiple conditions\n",
    "laptop_north = df_sales[(df_sales['Product'] == 'Laptop') & (df_sales['Region'] == 'North')]\n",
    "print(\"\\nLaptop sales in North region:\")\n",
    "print(laptop_north.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Data Aggregation\n",
    "One of the principal requirements in Pandas is to group by some parameter. E.g. you want to summarise sales by region, then you will group by the region. It is very similar to GROUPBY in sql for those who have a backgraound in DBMS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Sales by region:\n",
      "            min       max         sum\n",
      "Region                               \n",
      "East     839.65  82615.72  2080746.82\n",
      "North    638.44  75718.40  1838729.69\n",
      "South   2714.01  83102.88  2043672.52\n",
      "West     736.33  84279.51  2687353.85\n"
     ]
    }
   ],
   "source": [
    "region_sales = df_sales.groupby('Region')['Total_Sales'].agg(['min','max','sum'])\n",
    "print(\"\\nSales by region:\")\n",
    "print(region_sales)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Pandas dataframes and series are actually built on numpy hence they are so fast. Below we will do some operations which combine dataframes and numpy arrays"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Convert dataframe to numpy array\n",
    "sales_array = region_sales['min','max','sum'].to_numpy()\n",
    "\n",
    "# Calculate the mean across columns\n",
    "print(\"Mean across columns\")\n",
    "np.mean(sales_array,axis=1)\n",
    "\n",
    "# Find the max sum across all regions\n",
    "print(\"Max sum across regions\")\n",
    "print(np.max(sales_array[:,2]))\n",
    "\n",
    "# Normalized sum brings all sum values between 0 and 1\n",
    "min_sum = region_sales['sum'].min()\n",
    "max_sum = region_sales['sum'].max()\n",
    "region_sales['normalized_sum'] = (region_sales['sum'] - min_sum)/(max_sum - min_sum)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "product_performance = df_sales.groupby('Product').agg({\n",
    "    'Units': 'sum',\n",
    "    'Total_Sales': 'sum',\n",
    "    'Customer_Rating': 'mean'\n",
    "}).round(2)\n",
    "print(\"\\nProduct performance:\")\n",
    "print(product_performance)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# 4. Time Series Analysis\n",
    "print(\"\\n=== Time Series Analysis ===\")\n",
    "monthly_sales = df_sales.set_index('Date').resample('M')['Total_Sales'].sum()\n",
    "print(\"\\nMonthly sales:\")\n",
    "print(monthly_sales)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A very useful feature of Pandas is 'merge' which is similar to 'JOIN' in SQL. Multiple files with a single common attribute can be merged in this way"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(\"\\n=== Data Merging ===\")\n",
    "merged_df = df_sales.merge(df_customers, on='Region', how='left')\n",
    "print(\"\\nMerged data:\")\n",
    "print(merged_df.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Methods and Lambda methods. \n",
    "I had held off introducing methods or functions till now since this is typically the cornerstone of any language. For data analysis, methods and anonymous methods (or lambda as we call them) become equally important"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Date', 'Product', 'Region', 'Units', 'Price', 'Customer_Rating',\n",
       "       'Total_Sales'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_sales.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Product</th>\n",
       "      <th>Region</th>\n",
       "      <th>Units</th>\n",
       "      <th>Price</th>\n",
       "      <th>Customer_Rating</th>\n",
       "      <th>Total_Sales</th>\n",
       "      <th>sales_category</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2023-01-01</td>\n",
       "      <td>Tablet</td>\n",
       "      <td>North</td>\n",
       "      <td>45</td>\n",
       "      <td>940.17</td>\n",
       "      <td>3.7</td>\n",
       "      <td>42307.65</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2023-01-02</td>\n",
       "      <td>Watch</td>\n",
       "      <td>North</td>\n",
       "      <td>32</td>\n",
       "      <td>1285.01</td>\n",
       "      <td>3.1</td>\n",
       "      <td>41120.32</td>\n",
       "      <td>High</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2023-01-03</td>\n",
       "      <td>Laptop</td>\n",
       "      <td>East</td>\n",
       "      <td>30</td>\n",
       "      <td>687.72</td>\n",
       "      <td>3.2</td>\n",
       "      <td>20631.60</td>\n",
       "      <td>Med</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2023-01-04</td>\n",
       "      <td>Tablet</td>\n",
       "      <td>South</td>\n",
       "      <td>47</td>\n",
       "      <td>439.73</td>\n",
       "      <td>3.2</td>\n",
       "      <td>20667.31</td>\n",
       "      <td>Med</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2023-01-05</td>\n",
       "      <td>Tablet</td>\n",
       "      <td>South</td>\n",
       "      <td>35</td>\n",
       "      <td>337.16</td>\n",
       "      <td>4.7</td>\n",
       "      <td>11800.60</td>\n",
       "      <td>Low</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Date Product Region  Units    Price  Customer_Rating  Total_Sales  \\\n",
       "0 2023-01-01  Tablet  North     45   940.17              3.7     42307.65   \n",
       "1 2023-01-02   Watch  North     32  1285.01              3.1     41120.32   \n",
       "2 2023-01-03  Laptop   East     30   687.72              3.2     20631.60   \n",
       "3 2023-01-04  Tablet  South     47   439.73              3.2     20667.31   \n",
       "4 2023-01-05  Tablet  South     35   337.16              4.7     11800.60   \n",
       "\n",
       "  sales_category  \n",
       "0           High  \n",
       "1           High  \n",
       "2            Med  \n",
       "3            Med  \n",
       "4            Low  "
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Methods is defined with 'def' keyword\n",
    "\n",
    "def categorize_sales(sales:int) -> str: # Typically take an argument, do transformation and return an output\n",
    "    if sales>25000:\n",
    "        return 'High'\n",
    "    elif sales >=15000 and sales <25000:\n",
    "        return 'Med'\n",
    "    else:\n",
    "        return 'Low'\n",
    "    \n",
    "\n",
    "df_sales['sales_category'] = df_sales['Total_Sales'].apply(categorize_sales)\n",
    "df_sales.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Another important notation is the lambda notation where you write functions inline to transform the data\n",
    "# x is the input parameter or argument\n",
    "\n",
    "df_sales.drop(columns='sales_category')\n",
    "\n",
    "df_sales['sales_category'] = df_sales['Total_Sales'].apply(\n",
    "    lambda x: 'High' if x>25000 else 'Med' if x >=15000 else 'Low')\n",
    "df_sales.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['Date', 'Product', 'Region', 'Units', 'Price', 'Customer_Rating',\n",
      "       'Total_Sales', 'sales_category'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "print(df_sales.columns)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Combining some concepts - Groupby, Filter, lambda etc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Among high sales_category entries, which region is giving the maximum sales\n",
    "\n",
    "# first filter the dataframe\n",
    "df_sales = df_sales[df_sales['sales_category']=='High']\n",
    "# then apply groupby and sum\n",
    "max_sum_per_region = df_sales.groupby('Region')['Total_Sales'].sum()\n",
    "print(max_sum_per_region) # Groupby will transform the dataframe into a series with the index as region (since we grouped by region)\n",
    "max_sum_region = max_sum_per_region.idxmax()\n",
    "print(max_sum_region)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculate average price per product\n",
    "avg_price_per_product = df_sales.groupby('Product')['Price'].mean()\n",
    "print(avg_price_per_product) # This gives a series where Product is the index and mean price is the value\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Generate profit margin using Lambda\n",
    "# Add a cost column\n",
    "df_sales['Cost'] = df_sales['Price']*np.random.uniform(0.6,0.8,size=len(df_sales))\n",
    "# Add Profit margin column using lambda\n",
    "df_sales['Profit_Margin'] = df_sales.apply(lambda row: ((row['Price']-row['Cost'])/row['Price'])*100,axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "So finally we have covered essential Python concepts starting from basic data types and operations, progressing through advanced features like list comprehension, file handling, and directory management. The NumPy section demonstrated its power for numerical computations. Although you won't use numpy as much as Pandas  in data science. For Pandas we have laid the groundwork for data manipulation and analysis, emphasizing its fundamental structures (Series and DataFrame) and difference functions which can be applied to the tabular data"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "tech-env",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

----------------------------------------
File: ./nlp_basics.ipynb
----------------------------------------
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Natural Language processing\n",
    "\n",
    "Natural Language Processing (NLP) is a field of AI that helps computers understand, interpret, and respond to human language.  It has applications in chatbots, sentiment analysis, language translation, and more.\n",
    "\n",
    "Challenges in NLP\n",
    "\n",
    "Ambiguity: Words can have multiple meanings (e.g., \"bank\" as a financial institution vs river bank).\n",
    "\n",
    "Context Understanding: Understanding implied meanings or references. E.g. 'Digging one a hole'\n",
    "\n",
    "Computational Complexity: Analyzing large datasets efficiently."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We should be using standard libraries which have been trained on large corpus of data to get a lot of meaning directly from the sentences. E.g. spaCy is commonly used in all production environements for most NLP tasks like named entity recognition, stemming/lemmatization, sentiment analysis etc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "!pip install spacy==3.5.3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import spacy\n",
    "!python -m spacy download en_core_web_sm"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Tokenization:\n",
    "Splitting text into individual words or sentences."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Tokens  [Manufacturing, machines, are, important, ., Machines, help, production]\n"
     ]
    }
   ],
   "source": [
    "import spacy\n",
    "nlp=spacy.load(\"en_core_web_sm\")\n",
    "text = \"Manufacturing machines are important. Machines help production\"\n",
    "doc = nlp(text)\n",
    "tokens = []\n",
    "for token in doc:\n",
    "    tokens.append(token)\n",
    "print(\"Tokens \",tokens)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Stemming and Lemmatization\n",
    "Stemming: Reduces words to their root form by chopping off suffixes.\n",
    "Lemmatization: Converts words to their dictionary base form."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['manufacturing', 'machine', 'be', 'important', '.', 'machine', 'help', 'production']\n"
     ]
    }
   ],
   "source": [
    "# In spaCY, stemming is not supported and one can directly get the root word by lemmatization\n",
    "lemmas = [token.lemma_ for token in tokens]\n",
    "print(lemmas)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Normalized Industry Names: ['production machine', 'manufacturing machine', 'machine', 'machining']\n"
     ]
    }
   ],
   "source": [
    "industries = [\"Machines\", \"Machine\", \"Machining\", \"Production Machines\", \"Manufacturing machine\"]\n",
    "\n",
    "normalized_industries = []\n",
    "for industry in industries:\n",
    "    doc = nlp(industry)\n",
    "    lemmatized_text = \" \".join([token.lemma_ for token in doc])\n",
    "    normalized_industries.append(lemmatized_text)\n",
    "\n",
    "print(\"Normalized Industry Names:\", list(set(normalized_industries)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Named Entity Recognition and Parts of speech tagging\n",
    "\n",
    "NER (Named Entity Recognition): Identifies real-world entities like people, organizations, locations, etc., in text (e.g., \"Narendra Modi\" → PERSON, \"India\" → GPE). spaCy uses statistical models trained on labeled data to detect and label these entities.\n",
    "\n",
    "POS Tagging (Part of Speech Tagging): Assigns grammatical categories to words, such as noun, verb, or adjective (e.g., \"run\" → VERB). spaCy performs this using pre-trained language models that analyze word context.\n",
    "\n",
    "spaCy processes text by building a \"Doc\" object containing linguistic annotations for each token, including its lemma, POS tag, and named entity label.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Tokens and POS tags\n",
      "Narendra: PROPN\n",
      "Modi: PROPN\n",
      "is: AUX\n",
      "the: DET\n",
      "Prime: PROPN\n",
      "Minister: PROPN\n",
      "of: ADP\n",
      "India: PROPN\n",
      "\n",
      " Named Entities\n",
      "Narendra Modi: PERSON\n",
      "India: GPE\n"
     ]
    }
   ],
   "source": [
    "text = \"Narendra Modi is the Prime Minister of India\"\n",
    "\n",
    "doc = nlp(text)\n",
    "\n",
    "print(\"Tokens and POS tags\")\n",
    "for token in doc:\n",
    "    print(f\"{token.text}: {token.pos_}\")\n",
    "\n",
    "print(\"\\n Named Entities\")\n",
    "for ent in doc.ents:\n",
    "    print(f\"{ent.text}: {ent.label_}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Before transformers, embeddings etc came into the picture, these were the libraries which helped us with a variety of NLP tasks"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting textblob\n",
      "  Downloading textblob-0.18.0.post0-py3-none-any.whl (626 kB)\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m626.3/626.3 KB\u001b[0m \u001b[31m614.9 kB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0ma \u001b[36m0:00:01\u001b[0m\n",
      "\u001b[?25hRequirement already satisfied: nltk>=3.8 in /Users/adityaganguli/.pyenv/versions/3.8.16/envs/tech-env/lib/python3.8/site-packages (from textblob) (3.9.1)\n",
      "Requirement already satisfied: joblib in /Users/adityaganguli/.pyenv/versions/3.8.16/envs/tech-env/lib/python3.8/site-packages (from nltk>=3.8->textblob) (1.4.2)\n",
      "Requirement already satisfied: tqdm in /Users/adityaganguli/.pyenv/versions/3.8.16/envs/tech-env/lib/python3.8/site-packages (from nltk>=3.8->textblob) (4.67.1)\n",
      "Requirement already satisfied: regex>=2021.8.3 in /Users/adityaganguli/.pyenv/versions/3.8.16/envs/tech-env/lib/python3.8/site-packages (from nltk>=3.8->textblob) (2024.11.6)\n",
      "Requirement already satisfied: click in /Users/adityaganguli/.pyenv/versions/3.8.16/envs/tech-env/lib/python3.8/site-packages (from nltk>=3.8->textblob) (8.1.8)\n",
      "Installing collected packages: textblob\n",
      "Successfully installed textblob-0.18.0.post0\n",
      "\u001b[33mWARNING: You are using pip version 22.0.4; however, version 24.3.1 is available.\n",
      "You should consider upgrading via the '/Users/adityaganguli/.pyenv/versions/3.8.16/envs/tech-env/bin/python -m pip install --upgrade pip' command.\u001b[0m\u001b[33m\n",
      "\u001b[0m"
     ]
    }
   ],
   "source": [
    "!pip install textblob"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Text: I love spaCy and Python! They make NLP easy and fun.\n",
      "Polarity: 0.4527777777777778 (range -1 to 1, negative to positive)\n",
      "Subjectivity: 0.5444444444444444 (range 0 to 1, objective to subjective)\n",
      "Text: I hate waiting for hours in traffic.\n",
      "Polarity: -0.8 (range -1 to 1, negative to positive)\n",
      "Subjectivity: 0.9 (range 0 to 1, objective to subjective)\n"
     ]
    }
   ],
   "source": [
    "import spacy\n",
    "from textblob import TextBlob\n",
    "\n",
    "# Load English language model in spaCy\n",
    "nlp = spacy.load(\"en_core_web_sm\")\n",
    "\n",
    "def analyze_sentiment(text):\n",
    "    # Process text using spaCy\n",
    "    doc = nlp(text)\n",
    "    \n",
    "    # Convert processed text to string and analyze sentiment using TextBlob\n",
    "    sentiment = TextBlob(doc.text).sentiment\n",
    "    \n",
    "    # Output sentiment polarity and subjectivity\n",
    "    print(f\"Text: {text}\")\n",
    "    print(f\"Polarity: {sentiment.polarity} (range -1 to 1, negative to positive)\")\n",
    "    print(f\"Subjectivity: {sentiment.subjectivity} (range 0 to 1, objective to subjective)\")\n",
    "\n",
    "# Example usage\n",
    "analyze_sentiment(\"I love spaCy and Python! They make NLP easy and fun.\")\n",
    "analyze_sentiment(\"I hate waiting for hours in traffic.\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Vector Embeddings\n",
    "Alright, things are going to get interesting. So for a long time, researchers used feature engineering using different parts of speech, sentiment analysis etc. In came the word2vec model where words or tokens began to be represented as vectors. Introduced by Google researchers led by Tomas Mikolov, Word2Vec revolutionized NLP by learning dense word embeddings in a vector space. This allowed the model to capture semantic relationships (e.g., \"king - man + woman ≈ queen\").\n",
    "\n",
    "Vectors are in n dimensional space. Here's a simple representation of a word vector in few dimensions\n",
    "![Word vectors](https://corpling.hypotheses.org/files/2018/04/3dplot-500x381.jpg) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Word vectors are built around the concept of \"meaning of a word can be derived from the company it keeps\". Hence a neural network. Hence, a neural network is trained to predict either the target word based on the surrounding words (CBOW) or the surrounding words based on the target word (Skip-Gram) \n",
    "\n",
    "\n",
    "![CBOW Skip gram](https://i0.wp.com/spotintelligence.com/wp-content/uploads/2023/12/continuous-bag-of-words-vs-skip-gram-1-1024x576.webp?resize=1024%2C576&ssl=1) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now lets look at some examples of how one can derive meaning out of word vectors. We will be using pre-trained models since they have been trained on a large corpus of text. Stanford NLP group has a good pre-trained word vector model called Glove. We will need to download the Glove word vectors from http://nlp.stanford.edu/data/glove.6B.zip. then unzip and link it to the model path here"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "File exists: True\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "glove_path = \"/Users/adityaganguli/Downloads/glove/glove.6B.100d.txt\"\n",
    "print(\"File exists:\", os.path.exists(glove_path))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Loaded 400000 word vectors.\n",
      "France - Paris + Berlin ≈ germany\n",
      "Germany - Hitler + Italy ≈ mussolini\n",
      "Dog - Puppy + Cat ≈ puppy\n",
      "Paris - Eiffel Tower + india ≈ maldives\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "# Load GloVe embeddings\n",
    "def load_glove_model(file_path):\n",
    "    glove_model = {}\n",
    "    with open(file_path, 'r', encoding='utf-8') as f:\n",
    "        for line in f:\n",
    "            parts = line.split()\n",
    "            word = parts[0]\n",
    "            vector = np.array(parts[1:], dtype='float32')\n",
    "            glove_model[word] = vector\n",
    "    print(f\"Loaded {len(glove_model)} word vectors.\")\n",
    "    return glove_model\n",
    "\n",
    "# Specify GloVe file path (100d)\n",
    "glove_path = \"/Users/adityaganguli/Downloads/glove/glove.6B.100d.txt\"\n",
    "glove_model = load_glove_model(glove_path)\n",
    "\n",
    "# Function to find closest word based on vector arithmetic\n",
    "def find_closest_word(glove_model, word_vec):\n",
    "    closest_word = None\n",
    "    min_dist = float(\"inf\")\n",
    "    for word, vec in glove_model.items():\n",
    "        dist = np.linalg.norm(word_vec - vec)\n",
    "        if dist < min_dist:\n",
    "            min_dist = dist\n",
    "            closest_word = word\n",
    "    return closest_word\n",
    "\n",
    "# Vector arithmetic examples:\n",
    "\n",
    "# 1. Country Capitals: Germany - Berlin + France ≈ ?\n",
    "capital_prediction = find_closest_word(glove_model, glove_model[\"france\"] - glove_model[\"paris\"] + glove_model[\"berlin\"])\n",
    "print(f\"France - Paris + Berlin ≈ {capital_prediction}\")\n",
    "\n",
    "# 2. Country Leaders: Germany - Hitler + Italy ≈ ?\n",
    "leader_prediction = find_closest_word(glove_model, glove_model[\"italy\"] - glove_model[\"germany\"] + glove_model[\"hitler\"])\n",
    "print(f\"Germany - Hitler + Italy ≈ {leader_prediction}\")\n",
    "\n",
    "# 3. Animal Babies: Dog - Puppy + Cat ≈ ?\n",
    "baby_animal_prediction = find_closest_word(glove_model, glove_model[\"cat\"] - glove_model[\"dog\"] + glove_model[\"puppy\"])\n",
    "print(f\"Dog - Puppy + Cat ≈ {baby_animal_prediction}\")\n",
    "\n",
    "# 4. Famous Landmarks: Paris - Eiffel Tower + India ≈ ?\n",
    "landmark_prediction = find_closest_word(glove_model, glove_model[\"india\"] - glove_model[\"paris\"] + glove_model[\"eiffel\"])\n",
    "print(f\"Paris - Eiffel Tower + india ≈ {landmark_prediction}\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "tech-env",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

----------------------------------------
File: ./neural_networks.ipynb
----------------------------------------
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Deep Learning\n",
    "What Makes Deep Learning Different?\n",
    "\n",
    "Imagine you’re trying to teach someone to recognize apples and oranges. Traditional machine learning works by giving that person specific rules: \"If it’s round and red, it’s an apple.\" Deep learning, on the other hand, teaches them by showing many examples and letting them figure out the patterns themselves.\n",
    "\n",
    "Machine Learning: Requires manual rules for pattern recognition.\n",
    "\n",
    "Deep Learning: Learns rules automatically from data.\n",
    "\n",
    "Analogy: Imagine teaching someone to drive. Instead of explaining every rule, you sit beside them as they practice until they can handle situations themselves.\n",
    "\n",
    "![Deep Learning](https://cdn.prod.website-files.com/5fb24a974499e90dae242d98/60f6fcbbeb0b8f57a7980a98_5f213db7c7763a9288759ad1_5eac2d0ef117c236e34cc0ff_DeepLearning.jpeg)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Neural network \n",
    "\n",
    "A neural network is like a decision-making machine made of tiny units called neurons. Each neuron takes some input, does a simple calculation, and passes the result to the next neuron.\n",
    "\n",
    "Think of it like a relay race:\n",
    "\n",
    "The input layer is the starting point (it receives the data).\n",
    "\n",
    "The hidden layers are where the baton is passed between runners (neurons) that process the data.\n",
    "\n",
    "The output layer is the finish line (it gives the prediction)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "    ## Neuron\n",
    "    Think of a neuron as a smart information processor:\n",
    "\n",
    "    Inputs: Takes in multiple signals (like temperature, wind speed)\n",
    "    Processing: Weighs each input differently (like giving more importance to temperature)\n",
    "    Activation: Decides whether to \"fire\" based on the total weighted input\n",
    "    Output: Produces a signal that can be used by other neurons\n",
    "\n",
    "    Scenario: Predicting energy production based on weather.\n",
    "\n",
    "    Step 1: Input Layer\n",
    "\n",
    "    The input layer receives data like the time of day, temperature, cloud cover, and wind speed.\n",
    "\n",
    "    Step 2: First Hidden Layer\n",
    "\n",
    "    Each neuron in this layer takes the data, applies weights, adds a bias, and then decides using an activation function.\n",
    "\n",
    "    Example: A neuron might get an input of 15 (temperature). After the math, it passes 5 to the next layer.\n",
    "\n",
    "    Step 3: Second Hidden Layer\n",
    "\n",
    "    Neurons in this layer combine the results from the previous layer.\n",
    "\n",
    "    Example: One neuron might combine inputs from \"time of day\" and \"wind speed\" to predict how energy production changes in the evening.\n",
    "\n",
    "    Step 4: Output Layer\n",
    "\n",
    "    This layer gives the final prediction. In our case, it might predict that energy production will be 50 units at 3 PM."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## How Neural Networks Learn \n",
    "\n",
    "Imagine training for a relay race:\n",
    "\n",
    "Forward Pass (Practice Run):\n",
    "\n",
    "The team runs the race and finishes.\n",
    "\n",
    "The coach checks how close they came to the goal.\n",
    "\n",
    "Loss Function (Measuring Mistakes):\n",
    "\n",
    "This is like the coach saying, \"You were 10 seconds slower than the goal.\"\n",
    "\n",
    "Backward Pass (Adjusting Strategy):\n",
    "\n",
    "The coach gives feedback to the runners.\n",
    "\n",
    "Example: \"Runner 2, you need to speed up! Runner 3, slow down a bit.\"\n",
    "\n",
    "In neural networks, this is called backpropagation. The network adjusts weights (importance) and bias (starting point) until the predictions improve."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Why Deep Learning Works Better for our Data:\n",
    "\n",
    "The energy production has complex patterns:\n",
    "\n",
    "Daily cycles (time_of_day)\n",
    "Temperature thresholds\n",
    "Cloud cover plateaus\n",
    "Wind speed optimal ranges\n",
    "Interactions between variables\n",
    "\n",
    "A deep neural network can:\n",
    "\n",
    "First layer: Learn basic patterns (day/night cycles)\n",
    "Middle layers: Understand interactions (temperature × wind speed)\n",
    "Deep layers: Capture complex relationships (optimal conditions)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Neural networks as it works"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Understanding neural networks - one layer at a time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "\n",
    "# Example input: 1 sample with 4 features (time, temperature, cloud cover, wind speed)\n",
    "inputs = torch.tensor([[12.0, 20.0, 40.0, 10.0]], dtype=torch.float32)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Output after the first linear layer: torch.Size([1, 16])\n"
     ]
    }
   ],
   "source": [
    "import torch.nn as nn\n",
    "\n",
    "# Define a layer with 4 inputs (features) and 16 neurons (units)\n",
    "fc1 = nn.Linear(4, 16)\n",
    "layer1_output = fc1(inputs)\n",
    "#This layer transforms the data into 16 new values (one for each neuron).\n",
    "print(\"Output after the first linear layer:\", layer1_output.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "activation = nn.ReLU()\n",
    "activated_output = activation(layer1_output)\n",
    "# The activation ensures that neurons only pass meaningful signals.\n",
    "print(\"Output after applying ReLU:\", activated_output)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Second hidden layer with 16 inputs and 8 neurons\n",
    "fc2 = nn.Linear(16, 8)\n",
    "layer2_output = fc2(activated_output)\n",
    "activated_output2 = activation(layer2_output)\n",
    "print(\"Output after the second hidden layer:\", activated_output2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Final prediction: tensor([[-0.0438]], grad_fn=<AddmmBackward0>)\n"
     ]
    }
   ],
   "source": [
    "# Output layer: 8 inputs and 1 output (final prediction)\n",
    "fc3 = nn.Linear(8, 1)\n",
    "final_output = fc3(activated_output2)\n",
    "print(\"Final prediction:\", final_output)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Putting it all together\n",
    "class SimpleEnergyModel(nn.Module):\n",
    "    def __init__(self):\n",
    "        super(SimpleEnergyModel, self).__init__()\n",
    "        self.fc1 = nn.Linear(4, 16)  # First hidden layer\n",
    "        self.fc2 = nn.Linear(16, 8)  # Second hidden layer\n",
    "        self.fc3 = nn.Linear(8, 1)  # Output layer\n",
    "        self.relu = nn.ReLU()  # Activation function\n",
    "\n",
    "    def forward(self, x):\n",
    "        x = self.relu(self.fc1(x))\n",
    "        x = self.relu(self.fc2(x))\n",
    "        x = self.fc3(x)\n",
    "        return x\n",
    "\n",
    "# Initialize the model\n",
    "model = SimpleEnergyModel()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "How Training Works\n",
    "\n",
    "To make the network learn:\n",
    "\n",
    "Forward Pass: Pass the input data through the layers.\n",
    "\n",
    "Loss Calculation: Measure how far the prediction is from the true value.\n",
    "\n",
    "Backward Pass: Adjust the weights and biases using feedback (gradients)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First lets load and prepare the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "data = pd.read_csv('energy_production_dataset.csv')\n",
    "X = torch.tensor(data[['time_of_day', 'temperature', 'cloud_cover', 'wind_speed']].values, dtype=torch.float32)\n",
    "y = torch.tensor(data['energy_production'].values,dtype=torch.float32).reshape(-1, 1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import StandardScaler\n",
    "# Scale both features AND targets\n",
    "scaler_X = StandardScaler()\n",
    "scaler_y = StandardScaler()\n",
    "\n",
    "feature_columns = ['time_of_day', 'temperature', 'cloud_cover', 'wind_speed']\n",
    "X_scaled = scaler_X.fit_transform(data[feature_columns])\n",
    "y_scaled = scaler_y.fit_transform(data[['energy_production']])\n",
    "\n",
    "X = torch.tensor(X_scaled, dtype=torch.float32)\n",
    "y = torch.tensor(y_scaled, dtype=torch.float32)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Step 4: Initialize the model\n",
    "model = SimpleEnergyModel()\n",
    "\n",
    "# Step 5: Define loss function and optimizer\n",
    "loss_fn = nn.MSELoss()\n",
    "optimizer = torch.optim.SGD(model.parameters(), lr=0.01)  # Using the same optimizer as in your notebook\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch [10/100], Loss: 0.9618\n",
      "Epoch [20/100], Loss: 0.9047\n",
      "Epoch [30/100], Loss: 0.8594\n",
      "Epoch [40/100], Loss: 0.8203\n",
      "Epoch [50/100], Loss: 0.7844\n",
      "Epoch [60/100], Loss: 0.7499\n",
      "Epoch [70/100], Loss: 0.7161\n",
      "Epoch [80/100], Loss: 0.6828\n",
      "Epoch [90/100], Loss: 0.6505\n",
      "Epoch [100/100], Loss: 0.6195\n"
     ]
    }
   ],
   "source": [
    "# Step 6: Training loop\n",
    "num_epochs = 100\n",
    "losses = []\n",
    "\n",
    "for epoch in range(num_epochs):\n",
    "    # Forward pass\n",
    "    predictions = model(X)\n",
    "    \n",
    "    # Calculate loss\n",
    "    loss = loss_fn(predictions, y)\n",
    "    \n",
    "    # Backward pass and optimization\n",
    "    optimizer.zero_grad()  # Clear previous gradients\n",
    "    loss.backward()       # Compute gradients\n",
    "    optimizer.step()      # Update weights\n",
    "    \n",
    "    # Store loss\n",
    "    losses.append(loss.item())\n",
    "    \n",
    "    # Print progress every 10 epochs\n",
    "    if (epoch + 1) % 10 == 0:\n",
    "        print(f'Epoch [{epoch+1}/{num_epochs}], Loss: {loss.item():.4f}')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now lets look at the training progress"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "plt.figure(figsize=(10, 6))\n",
    "plt.plot(losses)\n",
    "plt.title('Training Progress')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('Loss')\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Test prediction for input [12.0, 20.0, 40.0, 10.0]: 18.99\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/adityaganguli/.pyenv/versions/3.8.16/envs/tech-env/lib/python3.8/site-packages/sklearn/base.py:465: UserWarning: X does not have valid feature names, but StandardScaler was fitted with feature names\n",
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "model.eval()  # Set model to evaluation mode\n",
    "with torch.no_grad():\n",
    "    test_input_raw = [[12.0, 20.0, 40.0, 10.0]]\n",
    "    test_input_scaled = scaler_X.transform(test_input_raw)\n",
    "    test_input = torch.tensor(test_input_scaled, dtype=torch.float32)\n",
    "    \n",
    "    # Make prediction and inverse transform to original scale\n",
    "    prediction_scaled = model(test_input)\n",
    "    prediction_original = scaler_y.inverse_transform(prediction_scaled.numpy())\n",
    "    \n",
    "    print(f\"\\nTest prediction for input {test_input_raw[0]}: {prediction_original[0][0]:.2f}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Sample predictions vs actual values:\n",
      "Predicted: 24.87, Actual: 44.48\n",
      "Predicted: 11.22, Actual: 4.68\n",
      "Predicted: 5.25, Actual: -0.00\n",
      "Predicted: 9.84, Actual: 2.73\n",
      "Predicted: 10.07, Actual: 1.27\n"
     ]
    }
   ],
   "source": [
    "with torch.no_grad():\n",
    "    # Get predictions for first few samples\n",
    "    sample_X = X[:5]\n",
    "    sample_predictions_scaled = model(sample_X)\n",
    "    sample_predictions = scaler_y.inverse_transform(sample_predictions_scaled.numpy())\n",
    "    sample_actual = scaler_y.inverse_transform(y[:5].numpy())\n",
    "    \n",
    "    print(\"\\nSample predictions vs actual values:\")\n",
    "    for i in range(5):\n",
    "        print(f\"Predicted: {sample_predictions[i][0]:.2f}, Actual: {sample_actual[i][0]:.2f}\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "tech-env",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

----------------------------------------
File: ./regression.ipynb
----------------------------------------
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Regression\n",
    "Regression is the OG Machine learning algorithm. Linear regression and different derivatives are widely used today in solving many different types of problems like forecasting, prediction etc to a high level of accuracy. It is a statistical method used to model relationships between variables. We'll cover both linear regression for continuous outcomes and logistic regression for binary classification"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Linear Regression\n",
    "$$ y = \\beta_0 + \\beta_1 x_1 + \\beta_2 x_2 + \\ldots + \\beta_n x_n $$\n",
    "\n",
    "y: dependent variable output\n",
    "x: independent variable input\n",
    "b0 is the error term\n",
    "b is the curve of the slope for different input variables\n",
    "\n",
    "### Intuition:\n",
    "**Goal:** Find the values of b0 and b1,b2 that minimize the error between predicted y and actual y\n",
    "\n",
    "**Example:** Predict steel price y based on grade x1 and thickness x2\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Lets use a data set to illustrate linear regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "!pip install numpy pandas matplotlib scikit-learn seaborn\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import sklearn"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Data Loading and pre-processing\n",
    "First, let's create our healthcare dataset and prepare it for analysis.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('insurance.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['age', 'sex', 'bmi', 'children', 'smoker', 'region', 'charges'], dtype='object')"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Columns of dataset are Index(['age', 'sex', 'bmi', 'children', 'smoker', 'region', 'charges'], dtype='object')\n",
      "               age          sex          bmi     children       smoker  \\\n",
      "count  1338.000000  1338.000000  1338.000000  1338.000000  1338.000000   \n",
      "mean     39.207025     0.505232    30.663397     1.094918     0.204783   \n",
      "std      14.049960     0.500160     6.098187     1.205493     0.403694   \n",
      "min      18.000000     0.000000    15.960000     0.000000     0.000000   \n",
      "25%      27.000000     0.000000    26.296250     0.000000     0.000000   \n",
      "50%      39.000000     1.000000    30.400000     1.000000     0.000000   \n",
      "75%      51.000000     1.000000    34.693750     2.000000     0.000000   \n",
      "max      64.000000     1.000000    53.130000     5.000000     1.000000   \n",
      "\n",
      "            region       charges  \n",
      "count  1338.000000   1338.000000  \n",
      "mean      1.515695  13270.422265  \n",
      "std       1.104885  12110.011237  \n",
      "min       0.000000   1121.873900  \n",
      "25%       1.000000   4740.287150  \n",
      "50%       2.000000   9382.033000  \n",
      "75%       2.000000  16639.912515  \n",
      "max       3.000000  63770.428010  \n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1338 entries, 0 to 1337\n",
      "Data columns (total 7 columns):\n",
      " #   Column    Non-Null Count  Dtype  \n",
      "---  ------    --------------  -----  \n",
      " 0   age       1338 non-null   int64  \n",
      " 1   sex       1338 non-null   int64  \n",
      " 2   bmi       1338 non-null   float64\n",
      " 3   children  1338 non-null   int64  \n",
      " 4   smoker    1338 non-null   int64  \n",
      " 5   region    1338 non-null   int64  \n",
      " 6   charges   1338 non-null   float64\n",
      "dtypes: float64(2), int64(5)\n",
      "memory usage: 73.3 KB\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "# First step is to examine the data available\n",
    "print(f\"Columns of dataset are {df.columns}\")\n",
    "\n",
    "# Get an overview of summary statistics\n",
    "print(df.describe())\n",
    "print(df.info())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Univariate analysis\n",
    "Observe the distribution and count of different variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "df[['age','sex','bmi','children']].hist(bins=20,figsize=(10,8))\n",
    "plt.show()\n",
    "\n",
    "for col in ('sex','smoker','region'):\n",
    "    sns.countplot(x=col,data = df)\n",
    "    plt.title(f'Count plot for {col}')\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Bivariate analysis\n",
    "Observe the correlation among various variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Lets try to find the correlation matrix - corr among various variables \n",
    "corr = df.corr()\n",
    "print(corr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# We are getting an error because correlation works only among numeric columns\n",
    "# Selecting only the numeric columns\n",
    "numeric_cols = df.select_dtypes(include='number')\n",
    "corr = numeric_cols.corr()\n",
    "\n",
    "sns.heatmap(corr, annot=True, cmap='coolwarm', vmin=-1, vmax=1)\n",
    "plt.title('Correlation Heatmap (Numeric Columns Only)')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "However we don't want to leave out non numeric variables in correlation analysis \n",
    "This brings us to categorical variables which have discrete number of values. The way to transform them is to convert the categorical values to numeric which the model can implicitly understand\n",
    "\n",
    "We have 2 options \n",
    "1. Label encoder. : Converts each category into a unique integer. e.g. 'male' -> 0, 'female' ->1. This is easy to implement and works for binary or small categories but can introduce order where none exists\n",
    "2. One-hot encoding: Creates new columns for each category and assigns 1 if the cateogory is present, else 0. e.g. for 'sex', if its male, it'll assign 'sex_male' to 1 and 'sex_female' to 0\n",
    "\n",
    "Now lets transform the categorical variables 'sex', 'region', 'smoker' and 'children'. For simplicity we 'll use label encoder as none of them have a lot of values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import LabelEncoder\n",
    "le=LabelEncoder()\n",
    "for col in ['sex', 'region', 'smoker','children']:\n",
    "    df[col] = le.fit_transform(df[col])\n",
    "print(df.head(5))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Now lets get the entire correlation heatmap\n",
    "corr = df.corr()\n",
    "sns.heatmap(corr,annot=True,cmap='coolwarm', vmin=-1, vmax=1)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Normalization\n",
    "Normalization is a process of scaling numerical values to a specific range (usually [0, 1]). It is often used when\n",
    "\n",
    "Different numeric columns have very different ranges (e.g., age ranges from 18–65, charges ranges from 1000–50000).\n",
    "Models that rely on distance-based calculations (like regression, KNN, etc.) may be biased towards columns with larger ranges"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Before Normalization:\n",
      "               age          bmi       charges\n",
      "count  1338.000000  1338.000000   1338.000000\n",
      "mean     39.207025    30.663397  13270.422265\n",
      "std      14.049960     6.098187  12110.011237\n",
      "min      18.000000    15.960000   1121.873900\n",
      "25%      27.000000    26.296250   4740.287150\n",
      "50%      39.000000    30.400000   9382.033000\n",
      "75%      51.000000    34.693750  16639.912515\n",
      "max      64.000000    53.130000  63770.428010\n"
     ]
    }
   ],
   "source": [
    "numeric_cols = ['age', 'bmi', 'charges']\n",
    "\n",
    "# Display statistics before normalization\n",
    "print(\"Before Normalization:\")\n",
    "print(df[numeric_cols].describe())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Perform normalization\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "scaler = MinMaxScaler()\n",
    "df_norm = df.copy()\n",
    "df_norm[numeric_cols] = scaler.fit_transform(df_norm[numeric_cols])\n",
    "# transform back to dataframe as df_norm is a numpy array\n",
    "df_norm = pd.DataFrame(df_norm)\n",
    "print(\"After Normalization:\")\n",
    "print(df_norm.describe())\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Linear Regression \n",
    "Finally we can proceed with the regression. Here we will use a library which is widely used for all statistical and ML algos. Scikit Learn. As with any machine learning problem, we will need to split the data into training set on which the model will learn the variables and the test set on which the model accuracy will be tested. \n",
    "\n",
    "You will see how within a few lines of code, the entire regression can be done. Also we can use the same dataset for other types of regression models which we will cover later but a short overview will be given here"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LinearRegression\n",
    "\n",
    "# Get the error computation code which will be used to minimise the error by the model\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_error\n",
    "\n",
    "# We need to use the independent variables in the X-matrix and dependent variable in the Y matrix\n",
    "y=df_norm['charges']\n",
    "X = df_norm.drop(columns =['charges','smoker']) # Why did we drop 'smoker'?\n",
    "\n",
    "# Split the data into 80-20 among training and test set\n",
    "X_train,X_test,y_train,y_test = train_test_split(X,y,test_size=0.2,random_state=42)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Train Linear regression model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "lr = LinearRegression()\n",
    "lr.fit(X_train,y_train)\n",
    "y_pred = lr.predict(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Check Variable Dependence (Coefficients)\n",
    "Linear regression provides coefficients for each feature, showing their impact on the prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a DataFrame of feature names and their coefficients\n",
    "coefficients = pd.DataFrame({'Feature': X.columns, 'Coefficient': lr.coef_}).sort_values(by='Coefficient', ascending=False)\n",
    "print(coefficients)\n",
    "\n",
    "# Visualize feature importance\n",
    "sns.barplot(x='Coefficient', y='Feature', data=coefficients)\n",
    "plt.title('Feature Importance in Linear Regression')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Mean Squared Error (MSE) and Mean Absolute Error (MAE)\n",
    "\n",
    "---\n",
    "\n",
    "#### **Mean Squared Error (MSE)**\n",
    "The Mean Squared Error (MSE) is defined as:\n",
    "$$\n",
    "MSE = \\frac{1}{n} \\sum_{i=1}^{n} (y_i - \\hat{y}_i)^2\n",
    "$$\n",
    "- \\( y_i \\): Actual value.\n",
    "- \\( \\hat{y}_i \\): Predicted value.\n",
    "- \\( n \\): Number of data points.\n",
    "\n",
    "**Key Points:**\n",
    "- MSE calculates the **average squared difference** between actual and predicted values.\n",
    "- The squaring penalizes large errors more, making MSE sensitive to large outliers.\n",
    "- The output is in **squared units** of the target variable.\n",
    "\n",
    "---\n",
    "\n",
    "#### **Mean Absolute Error (MAE)**\n",
    "The Mean Absolute Error (MAE) is defined as:\n",
    "$$\n",
    "MAE = \\frac{1}{n} \\sum_{i=1}^{n} |y_i - \\hat{y}_i|\n",
    "$$\n",
    "- \\( |y_i - \\hat{y}_i| \\): Absolute difference between actual and predicted values.\n",
    "\n",
    "**Key Points:**\n",
    "- MAE calculates the **average absolute difference** between actual and predicted values.\n",
    "- MAE is more **robust to outliers** compared to MSE.\n",
    "- The output is in the **same units** as the target variable.\n",
    "\n",
    "---\n",
    "\n",
    "### **Differences Between MSE and MAE**\n",
    "\n",
    "| **Metric** | **Description**                  | **Sensitivity to Outliers** | **Units**          |\n",
    "|-------------|-----------------------------------|----------------------------|-------------------|\n",
    "| **MSE**     | Average of squared errors         | High (penalizes large errors) | Squared units (e.g., $^2$) |\n",
    "| **MAE**     | Average of absolute errors        | Low (treats all errors equally) | Same units as target (e.g., $) |\n",
    "\n",
    "---\n",
    "\n",
    "### **Conclusion:**\n",
    "- Use **MSE** when you want to penalize large errors more heavily (e.g., cost-sensitive applications).\n",
    "- Use **MAE** when you want a simpler, interpretable metric that is not as sensitive to outliers.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Squared Error (MSE): 0.033253598577450326\n",
      "Mean Absolute Error (MAE): 0.14544994321069074\n"
     ]
    }
   ],
   "source": [
    "# Calculate errors\n",
    "mse = mean_squared_error(y_test, y_pred)  # Mean Squared Error\n",
    "mae = mean_absolute_error(y_test, y_pred)  # Mean Absolute Error\n",
    "\n",
    "print(f\"Mean Squared Error (MSE): {mse}\")\n",
    "print(f\"Mean Absolute Error (MAE): {mae}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Remember charges were normalized\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "sns.histplot(y_test, kde=True)\n",
    "plt.title('Distribution of Charges (Test Data)')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now lets see how having  'smoker' as a independent variable impacts the error rate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Linear Regression Results (with `smoker`):\n",
      "Mean Squared Error (MSE): 0.0086\n",
      "Mean Absolute Error (MAE): 0.0668\n",
      "R-squared Score (R²): 0.7833\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_error\n",
    "\n",
    "# Features (X) and Target (y)\n",
    "X = df_norm.drop(columns=['charges'])  # Include all features (including normalized `smoker`)\n",
    "y = df_norm['charges']  # Target variable (normalized `charges`)\n",
    "\n",
    "# Train-test split (80% train, 20% test)\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Initialize and fit the linear regression model\n",
    "lr = LinearRegression()\n",
    "lr.fit(X_train, y_train)\n",
    "\n",
    "# Predict on test data\n",
    "y_pred = lr.predict(X_test)\n",
    "\n",
    "# Calculate errors\n",
    "mse = mean_squared_error(y_test, y_pred)  # Mean Squared Error\n",
    "mae = mean_absolute_error(y_test, y_pred)  # Mean Absolute Error\n",
    "\n",
    "\n",
    "print(f\"Linear Regression Results (with `smoker`):\")\n",
    "print(f\"Mean Squared Error (MSE): {mse:.4f}\")\n",
    "print(f\"Mean Absolute Error (MAE): {mae:.4f}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "Quickly lets check how Random Forest performs here on the same dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Random Forest Regression Results (Normalized `charges`):\n",
      "Mean Squared Error (MSE): 0.0378\n",
      "Mean Absolute Error (MAE): 0.1493\n"
     ]
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\n",
    "\n",
    "# Features (X) and Target (y)\n",
    "X = df_norm.drop(columns=['charges', 'smoker'])  # All features except the target\n",
    "y = df_norm['charges']  # Normalized charges (target variable)\n",
    "\n",
    "# Train-test split (80% train, 20% test)\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Initialize and fit the Random Forest model\n",
    "rf = RandomForestRegressor(n_estimators=100, random_state=42)\n",
    "rf.fit(X_train, y_train)\n",
    "\n",
    "# Predict on test data\n",
    "y_pred_rf = rf.predict(X_test)\n",
    "\n",
    "# Calculate errors\n",
    "mse_rf = mean_squared_error(y_test, y_pred_rf)  # Mean Squared Error\n",
    "mae_rf = mean_absolute_error(y_test, y_pred_rf)  # Mean Absolute Error\n",
    "\n",
    "# Print results\n",
    "print(f\"Random Forest Regression Results (Normalized `charges`):\")\n",
    "print(f\"Mean Squared Error (MSE): {mse_rf:.4f}\")\n",
    "print(f\"Mean Absolute Error (MAE): {mae_rf:.4f}\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "tech-env",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

----------------------------------------
File: ./classification.ipynb
----------------------------------------
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Classification\n",
    "Understanding Classification vs Regression\n",
    "While regression predicts continuous values (like insurance charges), classification predicts categories or classes (like whether someone is a smoker or non-smoker). Think of regression as answering \"how much?\" and classification as answering \"which category?\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Logistic Regression\n",
    "Despite its name, logistic regression is actually used for classification! Think of it as drawing a line (or boundary) that best separates different groups in your data.\n",
    "Simple Intuition\n",
    "\n",
    "While linear regression gives you any number as output (like $5,240 for insurance charges)\n",
    "Logistic regression gives you a probability between 0 and 1 (like 0.8 probability of being a smoker)\n",
    "If probability > 0.5, we classify as Yes (1)\n",
    "If probability < 0.5, we classify as No (0)\n",
    "\n",
    "Let's implement this to predict whether someone is a smoker:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "df = pd.read_csv('insurance.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import accuracy_score, classification_report\n",
    "\n",
    "# Prepare the data\n",
    "X = df[['age', 'bmi', 'charges']]  # Features\n",
    "y = df['smoker']  # Target\n",
    "\n",
    "# Split the data\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Create and train the model\n",
    "model = LogisticRegression()\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "# Make predictions\n",
    "predictions = model.predict(X_test)\n",
    "\n",
    "# Check accuracy\n",
    "print(\"Accuracy:\", accuracy_score(y_test, predictions))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now lets understand the intuition and mathematics behind logistic regression\n",
    "Logistic regression uses the sigmoid function to convert any input into a probability between 0 and 1. The sigmoid function is:\n",
    "$$ \\sigma(z) = \\frac{1}{1 + e^{-z}} $$\n",
    "where z is the linear combination of features: z = w₁x₁ + w₂x₂ + ... + b\n",
    "If the output probability is > 0.5, we classify as 1 (e.g., smoker), otherwise as 0 (non-smoker).\n",
    "\n",
    "The z value is the raw output before sigmoid transformation:\n",
    "z = w₁×age + w₂×bmi + w₃×charges + b\n",
    "For example, if:\n",
    "\n",
    "w₁ (weight for age) = 0.03\n",
    "w₂ (weight for bmi) = 0.05\n",
    "w₃ (weight for charges) = 0.001\n",
    "b (bias) = -2.5\n",
    "\n",
    "For a person with:\n",
    "\n",
    "age = 45\n",
    "bmi = 28\n",
    "charges = 5000\n",
    "\n",
    "z = (0.03×45) + (0.05×28) + (0.001×5000) - 2.5 = 4.35\n",
    "This z is then converted to probability using sigmoid:\n",
    "probability = 1/(1 + e^(-4.35)) = 0.987\n",
    "Meaning 98.7% chance of being a smoker."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Decision Trees\n",
    "Imagine playing a game of \"20 Questions\" - that's exactly how a decision tree works! It asks a series of yes/no questions to reach a conclusion.\n",
    "How it Works\n",
    "\n",
    "Start at the top (root node)\n",
    "Ask a question about a feature (Is BMI > 30?)\n",
    "Follow the appropriate path based on the answer\n",
    "Keep going until you reach a conclusion (leaf node)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.tree import plot_tree\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Create and train the model\n",
    "dt_model = DecisionTreeClassifier(max_depth=3)  # Limiting depth for clarity\n",
    "dt_model.fit(X_train, y_train)\n",
    "\n",
    "# Visualize the tree\n",
    "plt.figure(figsize=(15,10))\n",
    "plot_tree(dt_model, feature_names=['age', 'bmi', 'charges'], \n",
    "          class_names=['Non-smoker', 'Smoker'], \n",
    "          filled=True)\n",
    "plt.show()\n",
    "\n",
    "# Make predictions\n",
    "dt_predictions = dt_model.predict(X_test)\n",
    "accuracy = accuracy_score(y_test, dt_predictions)\n",
    "print(f\"Accuracy: {accuracy:.2f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Random Forest\n",
    "Think of Random Forest as a crowd of decision trees voting on the answer!\n",
    "Simple Intuition\n",
    "\n",
    "Instead of one decision tree, we create many trees (like 100)\n",
    "Each tree:\n",
    "\n",
    "Gets a random subset of the data to train on\n",
    "Gets a random subset of features to consider\n",
    "Makes its own prediction\n",
    "\n",
    "\n",
    "Final prediction is based on majority vote (for classification) or average (for regression)\n",
    "\n",
    "Why it Works Better\n",
    "\n",
    "\"Wisdom of the crowd\" - multiple trees are less likely to make mistakes\n",
    "Each tree sees different data, so they learn different patterns\n",
    "Trees can compensate for each other's mistakes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "# Create and train Random Forest\n",
    "rf_model = RandomForestClassifier(n_estimators=100, random_state=42)\n",
    "rf_model.fit(X_train, y_train)\n",
    "\n",
    "# Make predictions\n",
    "rf_predictions = rf_model.predict(X_test)\n",
    "\n",
    "print(\"\\nRandom Forest Performance:\")\n",
    "accuracy = accuracy_score(y_test, rf_predictions)\n",
    "print(f\"Accuracy: {accuracy:.2f}\")\n",
    "\n",
    "# Feature Importance\n",
    "feature_importance = pd.DataFrame({\n",
    "    'feature': X.columns,\n",
    "    'importance': rf_model.feature_importances_\n",
    "}).sort_values('importance', ascending=False)\n",
    "\n",
    "print(\"\\nFeature Importance:\")\n",
    "print(feature_importance)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The same Random Forest can be used for regression by changing how trees vote:\n",
    "\n",
    "For classification: they vote on the class (smoker/non-smoker)\n",
    "For regression: they predict numbers and we take the average"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Classification Metrics\n",
    "Confusion Matrix\n",
    "A confusion matrix shows how well our model is performing by comparing predicted vs actual values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import confusion_matrix, classification_report\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Prepare data\n",
    "X = df[['age', 'bmi', 'charges']]\n",
    "y = df['smoker']\n",
    "\n",
    "# Split data\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "# Train model\n",
    "model = LogisticRegression()\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "# Make predictions\n",
    "y_pred = model.predict(X_test)\n",
    "\n",
    "# Create confusion matrix\n",
    "cm = confusion_matrix(y_test, y_pred)\n",
    "\n",
    "# Visualize confusion matrix\n",
    "plt.figure(figsize=(8, 6))\n",
    "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',\n",
    "            xticklabels=['Non-Smoker', 'Smoker'],\n",
    "            yticklabels=['Non-Smoker', 'Smoker'])\n",
    "plt.title('Confusion Matrix')\n",
    "plt.ylabel('Actual')\n",
    "plt.xlabel('Predicted')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Understanding the Numbers\n",
    "In our smoking prediction:\n",
    "\n",
    "True Negatives (TN): Correctly predicted non-smokers\n",
    "False Positives (FP): Incorrectly predicted as smokers\n",
    "False Negatives (FN): Incorrectly predicted as non-smokers\n",
    "True Positives (TP): Correctly predicted smokers"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Accuracy: \n",
    "Overall, how often is the model correct?\n",
    "Accuracy = (TP + TN) / (TP + TN + FP + FN)\n",
    "\n",
    "### Precision: \n",
    "When model predicts smoker, how often is it right?\n",
    "Used when false positives are costly\n",
    "Precision = TP / (TP + FP)\n",
    "\n",
    "### Recall: \n",
    "Out of all actual smokers, how many did we catch\n",
    "Used when false negatives are costly\n",
    "Recall = TP / (TP + FN)\n",
    "\n",
    "### F1 Score: \n",
    "The harmonic mean between precision and recall\n",
    "Use Case: When there’s a trade-off between precision and recall, especially in imbalanced datasets.\n",
    "Example: In spam classification, if you want to balance false positives (non-spam marked as spam) and false negatives (spam not detected)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "tech-env",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

----------------------------------------
File: ./animations/index.html
----------------------------------------
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>

----------------------------------------
File: ./animations/node_modules/callsites/index.js
----------------------------------------
'use strict';

const callsites = () => {
	const _prepareStackTrace = Error.prepareStackTrace;
	Error.prepareStackTrace = (_, stack) => stack;
	const stack = new Error().stack.slice(1);
	Error.prepareStackTrace = _prepareStackTrace;
	return stack;
};

module.exports = callsites;
// TODO: Remove this for the next major release
module.exports.default = callsites;

----------------------------------------
File: ./animations/node_modules/callsites/readme.md
----------------------------------------
# callsites [![Build Status](https://travis-ci.org/sindresorhus/callsites.svg?branch=master)](https://travis-ci.org/sindresorhus/callsites)

> Get callsites from the [V8 stack trace API](https://v8.dev/docs/stack-trace-api)


## Install

```
$ npm install callsites
```


## Usage

```js
const callsites = require('callsites');

function unicorn() {
	console.log(callsites()[0].getFileName());
	//=> '/Users/sindresorhus/dev/callsites/test.js'
}

unicorn();
```


## API

Returns an array of callsite objects with the following methods:

- `getThis`: returns the value of `this`.
- `getTypeName`: returns the type of `this` as a string. This is the name of the function stored in the constructor field of `this`, if available, otherwise the object's `[[Class]]` internal property.
- `getFunction`: returns the current function.
- `getFunctionName`: returns the name of the current function, typically its `name` property. If a name property is not available an attempt will be made to try to infer a name from the function's context.
- `getMethodName`: returns the name of the property of `this` or one of its prototypes that holds the current function.
- `getFileName`: if this function was defined in a script returns the name of the script.
- `getLineNumber`: if this function was defined in a script returns the current line number.
- `getColumnNumber`: if this function was defined in a script returns the current column number
- `getEvalOrigin`: if this function was created using a call to `eval` returns a string representing the location where `eval` was called.
- `isToplevel`: is this a top-level invocation, that is, is this the global object?
- `isEval`: does this call take place in code defined by a call to `eval`?
- `isNative`: is this call in native V8 code?
- `isConstructor`: is this a constructor call?


## License

MIT © [Sindre Sorhus](https://sindresorhus.com)

----------------------------------------
File: ./animations/node_modules/callsites/index.d.ts
----------------------------------------
declare namespace callsites {
	interface CallSite {
		/**
		Returns the value of `this`.
		*/
		getThis(): unknown | undefined;

		/**
		Returns the type of `this` as a string. This is the name of the function stored in the constructor field of `this`, if available, otherwise the object's `[[Class]]` internal property.
		*/
		getTypeName(): string | null;

		/**
		Returns the current function.
		*/
		getFunction(): Function | undefined;

		/**
		Returns the name of the current function, typically its `name` property. If a name property is not available an attempt will be made to try to infer a name from the function's context.
		*/
		getFunctionName(): string | null;

		/**
		Returns the name of the property of `this` or one of its prototypes that holds the current function.
		*/
		getMethodName(): string | undefined;

		/**
		Returns the name of the script if this function was defined in a script.
		*/
		getFileName(): string | null;

		/**
		Returns the current line number if this function was defined in a script.
		*/
		getLineNumber(): number | null;

		/**
		Returns the current column number if this function was defined in a script.
		*/
		getColumnNumber(): number | null;

		/**
		Returns a string representing the location where `eval` was called if this function was created using a call to `eval`.
		*/
		getEvalOrigin(): string | undefined;

		/**
		Returns `true` if this is a top-level invocation, that is, if it's a global object.
		*/
		isToplevel(): boolean;

		/**
		Returns `true` if this call takes place in code defined by a call to `eval`.
		*/
		isEval(): boolean;

		/**
		Returns `true` if this call is in native V8 code.
		*/
		isNative(): boolean;

		/**
		Returns `true` if this is a constructor call.
		*/
		isConstructor(): boolean;
	}
}

declare const callsites: {
	/**
	Get callsites from the V8 stack trace API.

	@returns An array of `CallSite` objects.

	@example
	```
	import callsites = require('callsites');

	function unicorn() {
		console.log(callsites()[0].getFileName());
		//=> '/Users/sindresorhus/dev/callsites/test.js'
	}

	unicorn();
	```
	*/
	(): callsites.CallSite[];

	// TODO: Remove this for the next major release, refactor the whole definition to:
	// declare function callsites(): callsites.CallSite[];
	// export = callsites;
	default: typeof callsites;
};

export = callsites;

----------------------------------------
File: ./animations/node_modules/victory-vendor/d3-time.js
----------------------------------------

// `victory-vendor/d3-time` (CommonJS)
// See upstream license: https://github.com/d3/d3-time/blob/main/LICENSE
//
// This file only exists for tooling that doesn't work yet with package.json:exports
// by proxying through the CommonJS version.
module.exports = require("./lib/d3-time");

----------------------------------------
File: ./animations/node_modules/victory-vendor/d3-timer.js
----------------------------------------

// `victory-vendor/d3-timer` (CommonJS)
// See upstream license: https://github.com/d3/d3-timer/blob/main/LICENSE
//
// This file only exists for tooling that doesn't work yet with package.json:exports
// by proxying through the CommonJS version.
module.exports = require("./lib/d3-timer");

----------------------------------------
File: ./animations/node_modules/victory-vendor/d3-interpolate.js
----------------------------------------

// `victory-vendor/d3-interpolate` (CommonJS)
// See upstream license: https://github.com/d3/d3-interpolate/blob/main/LICENSE
//
// This file only exists for tooling that doesn't work yet with package.json:exports
// by proxying through the CommonJS version.
module.exports = require("./lib/d3-interpolate");

----------------------------------------
File: ./animations/node_modules/victory-vendor/CHANGELOG.md
----------------------------------------
# victory-vendor

## 36.9.2

## 36.9.1

## 36.9.0

## 36.8.6

## 36.8.5

### Patch Changes

- Replace instances of lodash.assign with Object.assign ([#2757](https://github.com/FormidableLabs/victory/pull/2757))

## 36.8.4

## 36.8.3

## 36.8.2

## 36.8.1

## 36.8.0

## 36.7.0

## 36.6.12

## 36.6.11

## 36.6.10

### Patch Changes

- Setup NPM Provenance ([#2590](https://github.com/FormidableLabs/victory/pull/2590))

## 36.6.9

### Patch Changes

- Setup NPM Provenance ([#2587](https://github.com/FormidableLabs/victory/pull/2587))

## 36.6.8

## 36.6.7

## 36.6.6

## 36.6.5

### Patch Changes

- Export types directly from d3-\* (fixes [#2439](https://github.com/FormidableLabs/victory/issues/2439)) ([#2440](https://github.com/FormidableLabs/victory/pull/2440))

## 36.6.4

### Patch Changes

- Allow data accessors to accept any data types (fixes [#2360](https://github.com/FormidableLabs/victory/issues/2360)) ([#2436](https://github.com/FormidableLabs/victory/pull/2436))

## 36.6.3

### Patch Changes

- Do not generate \*.js.map sourcemaps (fixes [#2346](https://github.com/FormidableLabs/victory/issues/2346)) ([#2432](https://github.com/FormidableLabs/victory/pull/2432))

## 36.6.2

## 36.6.1

## 36.6.0

### Patch Changes

- Update source code with minor lint-based improvements (see [#2236](https://github.com/FormidableLabs/victory/issues/2236)). ([#2403](https://github.com/FormidableLabs/victory/pull/2403))

## 36.5.3 and earlier

Change history for version 36.5.3 and earlier can be found in our root [CHANGELOG.md](https://github.com/FormidableLabs/victory/blob/main/CHANGELOG.md).

----------------------------------------
File: ./animations/node_modules/victory-vendor/d3-time.d.ts
----------------------------------------

// `victory-vendor/d3-time` (TypeScript)
//
// Export the type definitions for this package:
export * from "d3-time";

----------------------------------------
File: ./animations/node_modules/victory-vendor/d3-interpolate.d.ts
----------------------------------------

// `victory-vendor/d3-interpolate` (TypeScript)
//
// Export the type definitions for this package:
export * from "d3-interpolate";

----------------------------------------
File: ./animations/node_modules/victory-vendor/README.md
----------------------------------------
# VictoryVendor

Vendored dependencies for Victory.

## Background

D3 has released most of its libraries as ESM-only. This means that consumers in Node.js applications can no longer just `require()` anything with a d3 transitive dependency, including much of Victory.

To help provide an easy path to folks still using CommonJS in their Node.js applications that consume Victory, we now provide this package to vendor in various d3-related packages.

## Packages

We presently provide the following top-level libraries:
<!-- cat packages/victory-vendor/package.json | egrep '"d3-' | egrep -o 'd3-[^"]*'| sor t-->

- d3-ease
- d3-interpolate
- d3-scale
- d3-shape
- d3-timer

This is the total list of top and transitive libraries we vendor:
<!-- ls packages/victory-vendor/lib-vendor | sort -->

- d3-array
- d3-color
- d3-ease
- d3-format
- d3-interpolate
- d3-path
- d3-scale
- d3-shape
- d3-time
- d3-time-format
- d3-timer
- internmap

Note that this does _not_ include the following D3 libraries that still support CommonJS:

- d3-voronoi

## How it works

We provide two alternate paths and behaviors -- for ESM and CommonJS

### ESM

If you do a Node.js import like:

```js
import { interpolate } from "victory-vendor/d3-interpolate";
```

under the hood it's going to just re-export and pass you through to `node_modules/d3-interpolate`, the **real** ESM library from D3.

### CommonJS

If you do a Node.js import like:

```js
const { interpolate } = require("victory-vendor/d3-interpolate");
```

under the hood it's going to will go to an alternate path that contains the transpiled version of the underlying d3 library to be found at `victory-vendor/lib-vendor/d3-interpolate/**/*.js`. This futher has internally consistent import references to other `victory-vendor/lib-vendor/<pkg-name>` paths.

Note that for some tooling (like Jest) that doesn't play well with `package.json:exports` routing to this CommonJS path, we **also** output a root file in the form of `victory-vendor/d3-interpolate.js`.

## Licenses

This project is released under the MIT license, but the vendor'ed in libraries include other licenses (e.g. ISC) that we enumerate in our `package.json:license` field.

----------------------------------------
File: ./animations/node_modules/victory-vendor/d3-array.js
----------------------------------------

// `victory-vendor/d3-array` (CommonJS)
// See upstream license: https://github.com/d3/d3-array/blob/main/LICENSE
//
// This file only exists for tooling that doesn't work yet with package.json:exports
// by proxying through the CommonJS version.
module.exports = require("./lib/d3-array");

----------------------------------------
File: ./animations/node_modules/victory-vendor/d3-ease.js
----------------------------------------

// `victory-vendor/d3-ease` (CommonJS)
// See upstream license: https://github.com/d3/d3-ease/blob/main/LICENSE
//
// This file only exists for tooling that doesn't work yet with package.json:exports
// by proxying through the CommonJS version.
module.exports = require("./lib/d3-ease");

----------------------------------------
File: ./animations/node_modules/victory-vendor/d3-scale.js
----------------------------------------

// `victory-vendor/d3-scale` (CommonJS)
// See upstream license: https://github.com/d3/d3-scale/blob/main/LICENSE
//
// This file only exists for tooling that doesn't work yet with package.json:exports
// by proxying through the CommonJS version.
module.exports = require("./lib/d3-scale");

----------------------------------------
File: ./animations/node_modules/victory-vendor/lib/d3-time.js
----------------------------------------

// `victory-vendor/d3-time` (CommonJS)
// See upstream license: https://github.com/d3/d3-time/blob/main/LICENSE
//
// Our CommonJS package relies on transpiled vendor files in `lib-vendor/d3-time`
module.exports = require("../lib-vendor/d3-time/src/index.js");

----------------------------------------
File: ./animations/node_modules/victory-vendor/lib/d3-timer.js
----------------------------------------

// `victory-vendor/d3-timer` (CommonJS)
// See upstream license: https://github.com/d3/d3-timer/blob/main/LICENSE
//
// Our CommonJS package relies on transpiled vendor files in `lib-vendor/d3-timer`
module.exports = require("../lib-vendor/d3-timer/src/index.js");

----------------------------------------
File: ./animations/node_modules/victory-vendor/lib/d3-interpolate.js
----------------------------------------

// `victory-vendor/d3-interpolate` (CommonJS)
// See upstream license: https://github.com/d3/d3-interpolate/blob/main/LICENSE
//
// Our CommonJS package relies on transpiled vendor files in `lib-vendor/d3-interpolate`
module.exports = require("../lib-vendor/d3-interpolate/src/index.js");

----------------------------------------
File: ./animations/node_modules/victory-vendor/lib/d3-voronoi.js
----------------------------------------

// `victory-vendor/d3-voronoi` (CommonJS)
// See upstream license: https://github.com/d3/d3-voronoi/blob/main/LICENSE
//
// Our CommonJS package relies on transpiled vendor files in `lib-vendor/d3-voronoi`
module.exports = require("../lib-vendor/d3-voronoi/src/index.js");

----------------------------------------
File: ./animations/node_modules/victory-vendor/lib/internmap.js
----------------------------------------

// `victory-vendor/internmap` (CommonJS)
// See upstream license: https://github.com/mbostock/internmap/blob/main/LICENSE
//
// Our CommonJS package relies on transpiled vendor files in `lib-vendor/internmap`
module.exports = require("../lib-vendor/internmap/src/index.js");

----------------------------------------
File: ./animations/node_modules/victory-vendor/lib/d3-color.js
----------------------------------------

// `victory-vendor/d3-color` (CommonJS)
// See upstream license: https://github.com/d3/d3-color/blob/main/LICENSE
//
// Our CommonJS package relies on transpiled vendor files in `lib-vendor/d3-color`
module.exports = require("../lib-vendor/d3-color/src/index.js");

----------------------------------------
File: ./animations/node_modules/victory-vendor/lib/d3-array.js
----------------------------------------

// `victory-vendor/d3-array` (CommonJS)
// See upstream license: https://github.com/d3/d3-array/blob/main/LICENSE
//
// Our CommonJS package relies on transpiled vendor files in `lib-vendor/d3-array`
module.exports = require("../lib-vendor/d3-array/src/index.js");

----------------------------------------
File: ./animations/node_modules/victory-vendor/lib/d3-ease.js
----------------------------------------

// `victory-vendor/d3-ease` (CommonJS)
// See upstream license: https://github.com/d3/d3-ease/blob/main/LICENSE
//
// Our CommonJS package relies on transpiled vendor files in `lib-vendor/d3-ease`
module.exports = require("../lib-vendor/d3-ease/src/index.js");

----------------------------------------
File: ./animations/node_modules/victory-vendor/lib/d3-format.js
----------------------------------------

// `victory-vendor/d3-format` (CommonJS)
// See upstream license: https://github.com/d3/d3-format/blob/main/LICENSE
//
// Our CommonJS package relies on transpiled vendor files in `lib-vendor/d3-format`
module.exports = require("../lib-vendor/d3-format/src/index.js");

----------------------------------------
File: ./animations/node_modules/victory-vendor/lib/d3-scale.js
----------------------------------------

// `victory-vendor/d3-scale` (CommonJS)
// See upstream license: https://github.com/d3/d3-scale/blob/main/LICENSE
//
// Our CommonJS package relies on transpiled vendor files in `lib-vendor/d3-scale`
module.exports = require("../lib-vendor/d3-scale/src/index.js");

----------------------------------------
File: ./animations/node_modules/victory-vendor/lib/d3-time-format.js
----------------------------------------

// `victory-vendor/d3-time-format` (CommonJS)
// See upstream license: https://github.com/d3/d3-time-format/blob/main/LICENSE
//
// Our CommonJS package relies on transpiled vendor files in `lib-vendor/d3-time-format`
module.exports = require("../lib-vendor/d3-time-format/src/index.js");

----------------------------------------
File: ./animations/node_modules/victory-vendor/lib/d3-shape.js
----------------------------------------

// `victory-vendor/d3-shape` (CommonJS)
// See upstream license: https://github.com/d3/d3-shape/blob/main/LICENSE
//
// Our CommonJS package relies on transpiled vendor files in `lib-vendor/d3-shape`
module.exports = require("../lib-vendor/d3-shape/src/index.js");

----------------------------------------
File: ./animations/node_modules/victory-vendor/lib/d3-path.js
----------------------------------------

// `victory-vendor/d3-path` (CommonJS)
// See upstream license: https://github.com/d3/d3-path/blob/main/LICENSE
//
// Our CommonJS package relies on transpiled vendor files in `lib-vendor/d3-path`
module.exports = require("../lib-vendor/d3-path/src/index.js");

----------------------------------------
File: ./animations/node_modules/victory-vendor/d3-scale.d.ts
----------------------------------------

// `victory-vendor/d3-scale` (TypeScript)
//
// Export the type definitions for this package:
export * from "d3-scale";

----------------------------------------
File: ./animations/node_modules/victory-vendor/d3-shape.d.ts
----------------------------------------

// `victory-vendor/d3-shape` (TypeScript)
//
// Export the type definitions for this package:
export * from "d3-shape";

----------------------------------------
File: ./animations/node_modules/victory-vendor/d3-timer.d.ts
----------------------------------------

// `victory-vendor/d3-timer` (TypeScript)
//
// Export the type definitions for this package:
export * from "d3-timer";

----------------------------------------
File: ./animations/node_modules/victory-vendor/es/d3-time.js
----------------------------------------

// `victory-vendor/d3-time` (ESM)
// See upstream license: https://github.com/d3/d3-time/blob/main/LICENSE
//
// Our ESM package uses the underlying installed dependencies of `node_modules/d3-time`
export * from "d3-time";

----------------------------------------
File: ./animations/node_modules/victory-vendor/es/d3-timer.js
----------------------------------------

// `victory-vendor/d3-timer` (ESM)
// See upstream license: https://github.com/d3/d3-timer/blob/main/LICENSE
//
// Our ESM package uses the underlying installed dependencies of `node_modules/d3-timer`
export * from "d3-timer";

----------------------------------------
File: ./animations/node_modules/victory-vendor/es/d3-interpolate.js
----------------------------------------

// `victory-vendor/d3-interpolate` (ESM)
// See upstream license: https://github.com/d3/d3-interpolate/blob/main/LICENSE
//
// Our ESM package uses the underlying installed dependencies of `node_modules/d3-interpolate`
export * from "d3-interpolate";

----------------------------------------
File: ./animations/node_modules/victory-vendor/es/d3-voronoi.js
----------------------------------------

// `victory-vendor/d3-voronoi` (ESM)
// See upstream license: https://github.com/d3/d3-voronoi/blob/main/LICENSE
//
// Our ESM package uses the underlying installed dependencies of `node_modules/d3-voronoi`
export * from "d3-voronoi";

----------------------------------------
File: ./animations/node_modules/victory-vendor/es/internmap.js
----------------------------------------

// `victory-vendor/internmap` (ESM)
// See upstream license: https://github.com/mbostock/internmap/blob/main/LICENSE
//
// Our ESM package uses the underlying installed dependencies of `node_modules/internmap`
export * from "internmap";

----------------------------------------
File: ./animations/node_modules/victory-vendor/es/d3-color.js
----------------------------------------

// `victory-vendor/d3-color` (ESM)
// See upstream license: https://github.com/d3/d3-color/blob/main/LICENSE
//
// Our ESM package uses the underlying installed dependencies of `node_modules/d3-color`
export * from "d3-color";

----------------------------------------
File: ./animations/node_modules/victory-vendor/es/d3-array.js
----------------------------------------

// `victory-vendor/d3-array` (ESM)
// See upstream license: https://github.com/d3/d3-array/blob/main/LICENSE
//
// Our ESM package uses the underlying installed dependencies of `node_modules/d3-array`
export * from "d3-array";

----------------------------------------
File: ./animations/node_modules/victory-vendor/es/d3-ease.js
----------------------------------------

// `victory-vendor/d3-ease` (ESM)
// See upstream license: https://github.com/d3/d3-ease/blob/main/LICENSE
//
// Our ESM package uses the underlying installed dependencies of `node_modules/d3-ease`
export * from "d3-ease";

----------------------------------------
File: ./animations/node_modules/victory-vendor/es/d3-format.js
----------------------------------------

// `victory-vendor/d3-format` (ESM)
// See upstream license: https://github.com/d3/d3-format/blob/main/LICENSE
//
// Our ESM package uses the underlying installed dependencies of `node_modules/d3-format`
export * from "d3-format";

----------------------------------------
File: ./animations/node_modules/victory-vendor/es/d3-scale.js
----------------------------------------

// `victory-vendor/d3-scale` (ESM)
// See upstream license: https://github.com/d3/d3-scale/blob/main/LICENSE
//
// Our ESM package uses the underlying installed dependencies of `node_modules/d3-scale`
export * from "d3-scale";

----------------------------------------
File: ./animations/node_modules/victory-vendor/es/d3-time-format.js
----------------------------------------

// `victory-vendor/d3-time-format` (ESM)
// See upstream license: https://github.com/d3/d3-time-format/blob/main/LICENSE
//
// Our ESM package uses the underlying installed dependencies of `node_modules/d3-time-format`
export * from "d3-time-format";

----------------------------------------
File: ./animations/node_modules/victory-vendor/es/d3-shape.js
----------------------------------------

// `victory-vendor/d3-shape` (ESM)
// See upstream license: https://github.com/d3/d3-shape/blob/main/LICENSE
//
// Our ESM package uses the underlying installed dependencies of `node_modules/d3-shape`
export * from "d3-shape";

----------------------------------------
File: ./animations/node_modules/victory-vendor/es/d3-path.js
----------------------------------------

// `victory-vendor/d3-path` (ESM)
// See upstream license: https://github.com/d3/d3-path/blob/main/LICENSE
//
// Our ESM package uses the underlying installed dependencies of `node_modules/d3-path`
export * from "d3-path";

----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-format/src/formatGroup.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(grouping, thousands) {
  return function (value, width) {
    var i = value.length,
        t = [],
        j = 0,
        g = grouping[0],
        length = 0;

    while (i > 0 && g > 0) {
      if (length + g + 1 > width) g = Math.max(1, width - length);
      t.push(value.substring(i -= g, i + g));
      if ((length += g + 1) > width) break;
      g = grouping[j = (j + 1) % grouping.length];
    }

    return t.reverse().join(thousands);
  };
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-format/src/formatDecimal.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.formatDecimalParts = formatDecimalParts;

function _default(x) {
  return Math.abs(x = Math.round(x)) >= 1e21 ? x.toLocaleString("en").replace(/,/g, "") : x.toString(10);
} // Computes the decimal coefficient and exponent of the specified number x with
// significant digits p, where x is positive and p is in [1, 21] or undefined.
// For example, formatDecimalParts(1.23) returns ["123", 0].


function formatDecimalParts(x, p) {
  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity

  var i,
      coefficient = x.slice(0, i); // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
  // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).

  return [coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient, +x.slice(i + 1)];
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-format/src/formatSpecifier.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FormatSpecifier = FormatSpecifier;
exports.default = formatSpecifier;
// [[fill]align][sign][symbol][0][width][,][.precision][~][type]
var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;

function formatSpecifier(specifier) {
  if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);
  var match;
  return new FormatSpecifier({
    fill: match[1],
    align: match[2],
    sign: match[3],
    symbol: match[4],
    zero: match[5],
    width: match[6],
    comma: match[7],
    precision: match[8] && match[8].slice(1),
    trim: match[9],
    type: match[10]
  });
}

formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof

function FormatSpecifier(specifier) {
  this.fill = specifier.fill === undefined ? " " : specifier.fill + "";
  this.align = specifier.align === undefined ? ">" : specifier.align + "";
  this.sign = specifier.sign === undefined ? "-" : specifier.sign + "";
  this.symbol = specifier.symbol === undefined ? "" : specifier.symbol + "";
  this.zero = !!specifier.zero;
  this.width = specifier.width === undefined ? undefined : +specifier.width;
  this.comma = !!specifier.comma;
  this.precision = specifier.precision === undefined ? undefined : +specifier.precision;
  this.trim = !!specifier.trim;
  this.type = specifier.type === undefined ? "" : specifier.type + "";
}

FormatSpecifier.prototype.toString = function () {
  return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === undefined ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === undefined ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
};
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-format/src/formatNumerals.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(numerals) {
  return function (value) {
    return value.replace(/[0-9]/g, function (i) {
      return numerals[+i];
    });
  };
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-format/src/precisionFixed.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _exponent = _interopRequireDefault(require("./exponent.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(step) {
  return Math.max(0, -(0, _exponent.default)(Math.abs(step)));
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-format/src/index.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "FormatSpecifier", {
  enumerable: true,
  get: function () {
    return _formatSpecifier.FormatSpecifier;
  }
});
Object.defineProperty(exports, "format", {
  enumerable: true,
  get: function () {
    return _defaultLocale.format;
  }
});
Object.defineProperty(exports, "formatDefaultLocale", {
  enumerable: true,
  get: function () {
    return _defaultLocale.default;
  }
});
Object.defineProperty(exports, "formatLocale", {
  enumerable: true,
  get: function () {
    return _locale.default;
  }
});
Object.defineProperty(exports, "formatPrefix", {
  enumerable: true,
  get: function () {
    return _defaultLocale.formatPrefix;
  }
});
Object.defineProperty(exports, "formatSpecifier", {
  enumerable: true,
  get: function () {
    return _formatSpecifier.default;
  }
});
Object.defineProperty(exports, "precisionFixed", {
  enumerable: true,
  get: function () {
    return _precisionFixed.default;
  }
});
Object.defineProperty(exports, "precisionPrefix", {
  enumerable: true,
  get: function () {
    return _precisionPrefix.default;
  }
});
Object.defineProperty(exports, "precisionRound", {
  enumerable: true,
  get: function () {
    return _precisionRound.default;
  }
});

var _defaultLocale = _interopRequireWildcard(require("./defaultLocale.js"));

var _locale = _interopRequireDefault(require("./locale.js"));

var _formatSpecifier = _interopRequireWildcard(require("./formatSpecifier.js"));

var _precisionFixed = _interopRequireDefault(require("./precisionFixed.js"));

var _precisionPrefix = _interopRequireDefault(require("./precisionPrefix.js"));

var _precisionRound = _interopRequireDefault(require("./precisionRound.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-format/src/defaultLocale.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = defaultLocale;
exports.formatPrefix = exports.format = void 0;

var _locale = _interopRequireDefault(require("./locale.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var locale;
var format;
exports.format = format;
var formatPrefix;
exports.formatPrefix = formatPrefix;
defaultLocale({
  thousands: ",",
  grouping: [3],
  currency: ["$", ""]
});

function defaultLocale(definition) {
  locale = (0, _locale.default)(definition);
  exports.format = format = locale.format;
  exports.formatPrefix = formatPrefix = locale.formatPrefix;
  return locale;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-format/src/precisionRound.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _exponent = _interopRequireDefault(require("./exponent.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(step, max) {
  step = Math.abs(step), max = Math.abs(max) - step;
  return Math.max(0, (0, _exponent.default)(max) - (0, _exponent.default)(step)) + 1;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-format/src/formatTrim.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.
function _default(s) {
  out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {
    switch (s[i]) {
      case ".":
        i0 = i1 = i;
        break;

      case "0":
        if (i0 === 0) i0 = i;
        i1 = i;
        break;

      default:
        if (!+s[i]) break out;
        if (i0 > 0) i0 = 0;
        break;
    }
  }

  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-format/src/formatRounded.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _formatDecimal = require("./formatDecimal.js");

function _default(x, p) {
  var d = (0, _formatDecimal.formatDecimalParts)(x, p);
  if (!d) return x + "";
  var coefficient = d[0],
      exponent = d[1];
  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-format/src/identity.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return x;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-format/src/formatPrefixAuto.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.prefixExponent = void 0;

var _formatDecimal = require("./formatDecimal.js");

var prefixExponent;
exports.prefixExponent = prefixExponent;

function _default(x, p) {
  var d = (0, _formatDecimal.formatDecimalParts)(x, p);
  if (!d) return x + "";
  var coefficient = d[0],
      exponent = d[1],
      i = exponent - (exports.prefixExponent = prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,
      n = coefficient.length;
  return i === n ? coefficient : i > n ? coefficient + new Array(i - n + 1).join("0") : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i) : "0." + new Array(1 - i).join("0") + (0, _formatDecimal.formatDecimalParts)(x, Math.max(0, p + i - 1))[0]; // less than 1y!
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-format/src/formatTypes.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _formatDecimal = _interopRequireDefault(require("./formatDecimal.js"));

var _formatPrefixAuto = _interopRequireDefault(require("./formatPrefixAuto.js"));

var _formatRounded = _interopRequireDefault(require("./formatRounded.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = {
  "%": (x, p) => (x * 100).toFixed(p),
  "b": x => Math.round(x).toString(2),
  "c": x => x + "",
  "d": _formatDecimal.default,
  "e": (x, p) => x.toExponential(p),
  "f": (x, p) => x.toFixed(p),
  "g": (x, p) => x.toPrecision(p),
  "o": x => Math.round(x).toString(8),
  "p": (x, p) => (0, _formatRounded.default)(x * 100, p),
  "r": _formatRounded.default,
  "s": _formatPrefixAuto.default,
  "X": x => Math.round(x).toString(16).toUpperCase(),
  "x": x => Math.round(x).toString(16)
};
exports.default = _default;
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-format/src/precisionPrefix.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _exponent = _interopRequireDefault(require("./exponent.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(step, value) {
  return Math.max(0, Math.max(-8, Math.min(8, Math.floor((0, _exponent.default)(value) / 3))) * 3 - (0, _exponent.default)(Math.abs(step)));
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-format/src/locale.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _exponent = _interopRequireDefault(require("./exponent.js"));

var _formatGroup = _interopRequireDefault(require("./formatGroup.js"));

var _formatNumerals = _interopRequireDefault(require("./formatNumerals.js"));

var _formatSpecifier = _interopRequireDefault(require("./formatSpecifier.js"));

var _formatTrim = _interopRequireDefault(require("./formatTrim.js"));

var _formatTypes = _interopRequireDefault(require("./formatTypes.js"));

var _formatPrefixAuto = require("./formatPrefixAuto.js");

var _identity = _interopRequireDefault(require("./identity.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var map = Array.prototype.map,
    prefixes = ["y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];

function _default(locale) {
  var group = locale.grouping === undefined || locale.thousands === undefined ? _identity.default : (0, _formatGroup.default)(map.call(locale.grouping, Number), locale.thousands + ""),
      currencyPrefix = locale.currency === undefined ? "" : locale.currency[0] + "",
      currencySuffix = locale.currency === undefined ? "" : locale.currency[1] + "",
      decimal = locale.decimal === undefined ? "." : locale.decimal + "",
      numerals = locale.numerals === undefined ? _identity.default : (0, _formatNumerals.default)(map.call(locale.numerals, String)),
      percent = locale.percent === undefined ? "%" : locale.percent + "",
      minus = locale.minus === undefined ? "−" : locale.minus + "",
      nan = locale.nan === undefined ? "NaN" : locale.nan + "";

  function newFormat(specifier) {
    specifier = (0, _formatSpecifier.default)(specifier);
    var fill = specifier.fill,
        align = specifier.align,
        sign = specifier.sign,
        symbol = specifier.symbol,
        zero = specifier.zero,
        width = specifier.width,
        comma = specifier.comma,
        precision = specifier.precision,
        trim = specifier.trim,
        type = specifier.type; // The "n" type is an alias for ",g".

    if (type === "n") comma = true, type = "g"; // The "" type, and any invalid type, is an alias for ".12~g".
    else if (!_formatTypes.default[type]) precision === undefined && (precision = 12), trim = true, type = "g"; // If zero fill is specified, padding goes after sign and before digits.

    if (zero || fill === "0" && align === "=") zero = true, fill = "0", align = "="; // Compute the prefix and suffix.
    // For SI-prefix, the suffix is lazily computed.

    var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",
        suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : ""; // What format function should we use?
    // Is this an integer type?
    // Can this type generate exponential notation?

    var formatType = _formatTypes.default[type],
        maybeSuffix = /[defgprs%]/.test(type); // Set the default precision if not specified,
    // or clamp the specified precision to the supported range.
    // For significant precision, it must be in [1, 21].
    // For fixed precision, it must be in [0, 20].

    precision = precision === undefined ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));

    function format(value) {
      var valuePrefix = prefix,
          valueSuffix = suffix,
          i,
          n,
          c;

      if (type === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value; // Determine the sign. -0 is not less than 0, but 1 / -0 is!

        var valueNegative = value < 0 || 1 / value < 0; // Perform the initial formatting.

        value = isNaN(value) ? nan : formatType(Math.abs(value), precision); // Trim insignificant zeros.

        if (trim) value = (0, _formatTrim.default)(value); // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.

        if (valueNegative && +value === 0 && sign !== "+") valueNegative = false; // Compute the prefix and suffix.

        valuePrefix = (valueNegative ? sign === "(" ? sign : minus : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
        valueSuffix = (type === "s" ? prefixes[8 + _formatPrefixAuto.prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : ""); // Break the formatted value into the integer “value” part that can be
        // grouped, and fractional or exponential “suffix” part that is not.

        if (maybeSuffix) {
          i = -1, n = value.length;

          while (++i < n) {
            if (c = value.charCodeAt(i), 48 > c || c > 57) {
              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
              value = value.slice(0, i);
              break;
            }
          }
        }
      } // If the fill character is not "0", grouping is applied before padding.


      if (comma && !zero) value = group(value, Infinity); // Compute the padding.

      var length = valuePrefix.length + value.length + valueSuffix.length,
          padding = length < width ? new Array(width - length + 1).join(fill) : ""; // If the fill character is "0", grouping is applied after padding.

      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = ""; // Reconstruct the final output based on the desired alignment.

      switch (align) {
        case "<":
          value = valuePrefix + value + valueSuffix + padding;
          break;

        case "=":
          value = valuePrefix + padding + value + valueSuffix;
          break;

        case "^":
          value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
          break;

        default:
          value = padding + valuePrefix + value + valueSuffix;
          break;
      }

      return numerals(value);
    }

    format.toString = function () {
      return specifier + "";
    };

    return format;
  }

  function formatPrefix(specifier, value) {
    var f = newFormat((specifier = (0, _formatSpecifier.default)(specifier), specifier.type = "f", specifier)),
        e = Math.max(-8, Math.min(8, Math.floor((0, _exponent.default)(value) / 3))) * 3,
        k = Math.pow(10, -e),
        prefix = prefixes[8 + e / 3];
    return function (value) {
      return f(k * value) + prefix;
    };
  }

  return {
    format: newFormat,
    formatPrefix: formatPrefix
  };
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-format/src/exponent.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _formatDecimal = require("./formatDecimal.js");

function _default(x) {
  return x = (0, _formatDecimal.formatDecimalParts)(Math.abs(x)), x ? x[1] : NaN;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-shape/src/order/reverse.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _none = _interopRequireDefault(require("./none.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(series) {
  return (0, _none.default)(series).reverse();
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-shape/src/order/none.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(series) {
  var n = series.length,
      o = new Array(n);

  while (--n >= 0) o[n] = n;

  return o;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-shape/src/order/descending.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _ascending = _interopRequireDefault(require("./ascending.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(series) {
  return (0, _ascending.default)(series).reverse();
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-shape/src/order/insideOut.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _appearance = _interopRequireDefault(require("./appearance.js"));

var _ascending = require("./ascending.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(series) {
  var n = series.length,
      i,
      j,
      sums = series.map(_ascending.sum),
      order = (0, _appearance.default)(series),
      top = 0,
      bottom = 0,
      tops = [],
      bottoms = [];

  for (i = 0; i < n; ++i) {
    j = order[i];

    if (top < bottom) {
      top += sums[j];
      tops.push(j);
    } else {
      bottom += sums[j];
      bottoms.push(j);
    }
  }

  return bottoms.reverse().concat(tops);
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-shape/src/order/ascending.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.sum = sum;

var _none = _interopRequireDefault(require("./none.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(series) {
  var sums = series.map(sum);
  return (0, _none.default)(series).sort(function (a, b) {
    return sums[a] - sums[b];
  });
}

function sum(series) {
  var s = 0,
      i = -1,
      n = series.length,
      v;

  while (++i < n) if (v = +series[i][1]) s += v;

  return s;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-shape/src/order/appearance.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _none = _interopRequireDefault(require("./none.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(series) {
  var peaks = series.map(peak);
  return (0, _none.default)(series).sort(function (a, b) {
    return peaks[a] - peaks[b];
  });
}

function peak(series) {
  var i = -1,
      j = 0,
      n = series.length,
      vi,
      vj = -Infinity;

  while (++i < n) if ((vi = +series[i][1]) > vj) vj = vi, j = i;

  return j;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-shape/src/line.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("../../../lib-vendor/d3-path/src/index.js");

var _array = _interopRequireDefault(require("./array.js"));

var _constant = _interopRequireDefault(require("./constant.js"));

var _linear = _interopRequireDefault(require("./curve/linear.js"));

var _point = require("./point.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(x, y) {
  var defined = (0, _constant.default)(true),
      context = null,
      curve = _linear.default,
      output = null;
  x = typeof x === "function" ? x : x === undefined ? _point.x : (0, _constant.default)(x);
  y = typeof y === "function" ? y : y === undefined ? _point.y : (0, _constant.default)(y);

  function line(data) {
    var i,
        n = (data = (0, _array.default)(data)).length,
        d,
        defined0 = false,
        buffer;
    if (context == null) output = curve(buffer = (0, _index.path)());

    for (i = 0; i <= n; ++i) {
      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
        if (defined0 = !defined0) output.lineStart();else output.lineEnd();
      }

      if (defined0) output.point(+x(d, i, data), +y(d, i, data));
    }

    if (buffer) return output = null, buffer + "" || null;
  }

  line.x = function (_) {
    return arguments.length ? (x = typeof _ === "function" ? _ : (0, _constant.default)(+_), line) : x;
  };

  line.y = function (_) {
    return arguments.length ? (y = typeof _ === "function" ? _ : (0, _constant.default)(+_), line) : y;
  };

  line.defined = function (_) {
    return arguments.length ? (defined = typeof _ === "function" ? _ : (0, _constant.default)(!!_), line) : defined;
  };

  line.curve = function (_) {
    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
  };

  line.context = function (_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
  };

  return line;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-shape/src/pie.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _array = _interopRequireDefault(require("./array.js"));

var _constant = _interopRequireDefault(require("./constant.js"));

var _descending = _interopRequireDefault(require("./descending.js"));

var _identity = _interopRequireDefault(require("./identity.js"));

var _math = require("./math.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var value = _identity.default,
      sortValues = _descending.default,
      sort = null,
      startAngle = (0, _constant.default)(0),
      endAngle = (0, _constant.default)(_math.tau),
      padAngle = (0, _constant.default)(0);

  function pie(data) {
    var i,
        n = (data = (0, _array.default)(data)).length,
        j,
        k,
        sum = 0,
        index = new Array(n),
        arcs = new Array(n),
        a0 = +startAngle.apply(this, arguments),
        da = Math.min(_math.tau, Math.max(-_math.tau, endAngle.apply(this, arguments) - a0)),
        a1,
        p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)),
        pa = p * (da < 0 ? -1 : 1),
        v;

    for (i = 0; i < n; ++i) {
      if ((v = arcs[index[i] = i] = +value(data[i], i, data)) > 0) {
        sum += v;
      }
    } // Optionally sort the arcs by previously-computed values or by data.


    if (sortValues != null) index.sort(function (i, j) {
      return sortValues(arcs[i], arcs[j]);
    });else if (sort != null) index.sort(function (i, j) {
      return sort(data[i], data[j]);
    }); // Compute the arcs! They are stored in the original data's order.

    for (i = 0, k = sum ? (da - n * pa) / sum : 0; i < n; ++i, a0 = a1) {
      j = index[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k : 0) + pa, arcs[j] = {
        data: data[j],
        index: i,
        value: v,
        startAngle: a0,
        endAngle: a1,
        padAngle: p
      };
    }

    return arcs;
  }

  pie.value = function (_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : (0, _constant.default)(+_), pie) : value;
  };

  pie.sortValues = function (_) {
    return arguments.length ? (sortValues = _, sort = null, pie) : sortValues;
  };

  pie.sort = function (_) {
    return arguments.length ? (sort = _, sortValues = null, pie) : sort;
  };

  pie.startAngle = function (_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : (0, _constant.default)(+_), pie) : startAngle;
  };

  pie.endAngle = function (_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : (0, _constant.default)(+_), pie) : endAngle;
  };

  pie.padAngle = function (_) {
    return arguments.length ? (padAngle = typeof _ === "function" ? _ : (0, _constant.default)(+_), pie) : padAngle;
  };

  return pie;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-shape/src/symbol.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Symbol;
exports.symbolsStroke = exports.symbolsFill = void 0;

var _index = require("../../../lib-vendor/d3-path/src/index.js");

var _constant = _interopRequireDefault(require("./constant.js"));

var _asterisk = _interopRequireDefault(require("./symbol/asterisk.js"));

var _circle = _interopRequireDefault(require("./symbol/circle.js"));

var _cross = _interopRequireDefault(require("./symbol/cross.js"));

var _diamond = _interopRequireDefault(require("./symbol/diamond.js"));

var _diamond2 = _interopRequireDefault(require("./symbol/diamond2.js"));

var _plus = _interopRequireDefault(require("./symbol/plus.js"));

var _square = _interopRequireDefault(require("./symbol/square.js"));

var _square2 = _interopRequireDefault(require("./symbol/square2.js"));

var _star = _interopRequireDefault(require("./symbol/star.js"));

var _triangle = _interopRequireDefault(require("./symbol/triangle.js"));

var _triangle2 = _interopRequireDefault(require("./symbol/triangle2.js"));

var _wye = _interopRequireDefault(require("./symbol/wye.js"));

var _x = _interopRequireDefault(require("./symbol/x.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// These symbols are designed to be filled.
const symbolsFill = [_circle.default, _cross.default, _diamond.default, _square.default, _star.default, _triangle.default, _wye.default]; // These symbols are designed to be stroked (with a width of 1.5px and round caps).

exports.symbolsFill = symbolsFill;
const symbolsStroke = [_circle.default, _plus.default, _x.default, _triangle2.default, _asterisk.default, _square2.default, _diamond2.default];
exports.symbolsStroke = symbolsStroke;

function Symbol(type, size) {
  let context = null;
  type = typeof type === "function" ? type : (0, _constant.default)(type || _circle.default);
  size = typeof size === "function" ? size : (0, _constant.default)(size === undefined ? 64 : +size);

  function symbol() {
    let buffer;
    if (!context) context = buffer = (0, _index.path)();
    type.apply(this, arguments).draw(context, +size.apply(this, arguments));
    if (buffer) return context = null, buffer + "" || null;
  }

  symbol.type = function (_) {
    return arguments.length ? (type = typeof _ === "function" ? _ : (0, _constant.default)(_), symbol) : type;
  };

  symbol.size = function (_) {
    return arguments.length ? (size = typeof _ === "function" ? _ : (0, _constant.default)(+_), symbol) : size;
  };

  symbol.context = function (_) {
    return arguments.length ? (context = _ == null ? null : _, symbol) : context;
  };

  return symbol;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-shape/src/link.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.link = link;
exports.linkHorizontal = linkHorizontal;
exports.linkRadial = linkRadial;
exports.linkVertical = linkVertical;

var _index = require("../../../lib-vendor/d3-path/src/index.js");

var _array = require("./array.js");

var _constant = _interopRequireDefault(require("./constant.js"));

var _bump = require("./curve/bump.js");

var _point = require("./point.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function linkSource(d) {
  return d.source;
}

function linkTarget(d) {
  return d.target;
}

function link(curve) {
  let source = linkSource;
  let target = linkTarget;
  let x = _point.x;
  let y = _point.y;
  let context = null;
  let output = null;

  function link() {
    let buffer;

    const argv = _array.slice.call(arguments);

    const s = source.apply(this, argv);
    const t = target.apply(this, argv);
    if (context == null) output = curve(buffer = (0, _index.path)());
    output.lineStart();
    argv[0] = s, output.point(+x.apply(this, argv), +y.apply(this, argv));
    argv[0] = t, output.point(+x.apply(this, argv), +y.apply(this, argv));
    output.lineEnd();
    if (buffer) return output = null, buffer + "" || null;
  }

  link.source = function (_) {
    return arguments.length ? (source = _, link) : source;
  };

  link.target = function (_) {
    return arguments.length ? (target = _, link) : target;
  };

  link.x = function (_) {
    return arguments.length ? (x = typeof _ === "function" ? _ : (0, _constant.default)(+_), link) : x;
  };

  link.y = function (_) {
    return arguments.length ? (y = typeof _ === "function" ? _ : (0, _constant.default)(+_), link) : y;
  };

  link.context = function (_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), link) : context;
  };

  return link;
}

function linkHorizontal() {
  return link(_bump.bumpX);
}

function linkVertical() {
  return link(_bump.bumpY);
}

function linkRadial() {
  const l = link(_bump.bumpRadial);
  l.angle = l.x, delete l.x;
  l.radius = l.y, delete l.y;
  return l;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-shape/src/curve/linearClosed.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _noop = _interopRequireDefault(require("../noop.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function LinearClosed(context) {
  this._context = context;
}

LinearClosed.prototype = {
  areaStart: _noop.default,
  areaEnd: _noop.default,
  lineStart: function () {
    this._point = 0;
  },
  lineEnd: function () {
    if (this._point) this._context.closePath();
  },
  point: function (x, y) {
    x = +x, y = +y;
    if (this._point) this._context.lineTo(x, y);else this._point = 1, this._context.moveTo(x, y);
  }
};

function _default(context) {
  return new LinearClosed(context);
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-shape/src/curve/radial.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.curveRadialLinear = void 0;
exports.default = curveRadial;

var _linear = _interopRequireDefault(require("./linear.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var curveRadialLinear = curveRadial(_linear.default);
exports.curveRadialLinear = curveRadialLinear;

function Radial(curve) {
  this._curve = curve;
}

Radial.prototype = {
  areaStart: function () {
    this._curve.areaStart();
  },
  areaEnd: function () {
    this._curve.areaEnd();
  },
  lineStart: function () {
    this._curve.lineStart();
  },
  lineEnd: function () {
    this._curve.lineEnd();
  },
  point: function (a, r) {
    this._curve.point(r * Math.sin(a), r * -Math.cos(a));
  }
};

function curveRadial(curve) {
  function radial(context) {
    return new Radial(curve(context));
  }

  radial._curve = curve;
  return radial;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-shape/src/curve/basisOpen.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _basis = require("./basis.js");

function BasisOpen(context) {
  this._context = context;
}

BasisOpen.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x0 = this._x1 = this._y0 = this._y1 = NaN;
    this._point = 0;
  },
  lineEnd: function () {
    if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function (x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        break;

      case 1:
        this._point = 2;
        break;

      case 2:
        this._point = 3;
        var x0 = (this._x0 + 4 * this._x1 + x) / 6,
            y0 = (this._y0 + 4 * this._y1 + y) / 6;
        this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0);
        break;

      case 3:
        this._point = 4;
      // falls through

      default:
        (0, _basis.point)(this, x, y);
        break;
    }

    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
  }
};

function _default(context) {
  return new BasisOpen(context);
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-shape/src/curve/linear.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function Linear(context) {
  this._context = context;
}

Linear.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._point = 0;
  },
  lineEnd: function () {
    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function (x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
        break;

      case 1:
        this._point = 2;
      // falls through

      default:
        this._context.lineTo(x, y);

        break;
    }
  }
};

function _default(context) {
  return new Linear(context);
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-shape/src/curve/catmullRom.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.point = point;

var _math = require("../math.js");

var _cardinal = require("./cardinal.js");

function point(that, x, y) {
  var x1 = that._x1,
      y1 = that._y1,
      x2 = that._x2,
      y2 = that._y2;

  if (that._l01_a > _math.epsilon) {
    var a = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a,
        n = 3 * that._l01_a * (that._l01_a + that._l12_a);
    x1 = (x1 * a - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;
    y1 = (y1 * a - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;
  }

  if (that._l23_a > _math.epsilon) {
    var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a,
        m = 3 * that._l23_a * (that._l23_a + that._l12_a);
    x2 = (x2 * b + that._x1 * that._l23_2a - x * that._l12_2a) / m;
    y2 = (y2 * b + that._y1 * that._l23_2a - y * that._l12_2a) / m;
  }

  that._context.bezierCurveTo(x1, y1, x2, y2, that._x2, that._y2);
}

function CatmullRom(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}

CatmullRom.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function () {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x2, this._y2);

        break;

      case 3:
        this.point(this._x2, this._y2);
        break;
    }

    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function (x, y) {
    x = +x, y = +y;

    if (this._point) {
      var x23 = this._x2 - x,
          y23 = this._y2 - y;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }

    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
        break;

      case 1:
        this._point = 2;
        break;

      case 2:
        this._point = 3;
      // falls through

      default:
        point(this, x, y);
        break;
    }

    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var _default = function custom(alpha) {
  function catmullRom(context) {
    return alpha ? new CatmullRom(context, alpha) : new _cardinal.Cardinal(context, 0);
  }

  catmullRom.alpha = function (alpha) {
    return custom(+alpha);
  };

  return catmullRom;
}(0.5);

exports.default = _default;
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-shape/src/curve/cardinalClosed.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CardinalClosed = CardinalClosed;
exports.default = void 0;

var _noop = _interopRequireDefault(require("../noop.js"));

var _cardinal = require("./cardinal.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function CardinalClosed(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}

CardinalClosed.prototype = {
  areaStart: _noop.default,
  areaEnd: _noop.default,
  lineStart: function () {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
    this._point = 0;
  },
  lineEnd: function () {
    switch (this._point) {
      case 1:
        {
          this._context.moveTo(this._x3, this._y3);

          this._context.closePath();

          break;
        }

      case 2:
        {
          this._context.lineTo(this._x3, this._y3);

          this._context.closePath();

          break;
        }

      case 3:
        {
          this.point(this._x3, this._y3);
          this.point(this._x4, this._y4);
          this.point(this._x5, this._y5);
          break;
        }
    }
  },
  point: function (x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        this._x3 = x, this._y3 = y;
        break;

      case 1:
        this._point = 2;

        this._context.moveTo(this._x4 = x, this._y4 = y);

        break;

      case 2:
        this._point = 3;
        this._x5 = x, this._y5 = y;
        break;

      default:
        (0, _cardinal.point)(this, x, y);
        break;
    }

    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var _default = function custom(tension) {
  function cardinal(context) {
    return new CardinalClosed(context, tension);
  }

  cardinal.tension = function (tension) {
    return custom(+tension);
  };

  return cardinal;
}(0);

exports.default = _default;
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-shape/src/curve/bundle.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _basis = require("./basis.js");

function Bundle(context, beta) {
  this._basis = new _basis.Basis(context);
  this._beta = beta;
}

Bundle.prototype = {
  lineStart: function () {
    this._x = [];
    this._y = [];

    this._basis.lineStart();
  },
  lineEnd: function () {
    var x = this._x,
        y = this._y,
        j = x.length - 1;

    if (j > 0) {
      var x0 = x[0],
          y0 = y[0],
          dx = x[j] - x0,
          dy = y[j] - y0,
          i = -1,
          t;

      while (++i <= j) {
        t = i / j;

        this._basis.point(this._beta * x[i] + (1 - this._beta) * (x0 + t * dx), this._beta * y[i] + (1 - this._beta) * (y0 + t * dy));
      }
    }

    this._x = this._y = null;

    this._basis.lineEnd();
  },
  point: function (x, y) {
    this._x.push(+x);

    this._y.push(+y);
  }
};

var _default = function custom(beta) {
  function bundle(context) {
    return beta === 1 ? new _basis.Basis(context) : new Bundle(context, beta);
  }

  bundle.beta = function (beta) {
    return custom(+beta);
  };

  return bundle;
}(0.85);

exports.default = _default;
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-shape/src/curve/monotone.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.monotoneX = monotoneX;
exports.monotoneY = monotoneY;

function sign(x) {
  return x < 0 ? -1 : 1;
} // Calculate the slopes of the tangents (Hermite-type interpolation) based on
// the following paper: Steffen, M. 1990. A Simple Method for Monotonic
// Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.
// NOV(II), P. 443, 1990.


function slope3(that, x2, y2) {
  var h0 = that._x1 - that._x0,
      h1 = x2 - that._x1,
      s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0),
      s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0),
      p = (s0 * h1 + s1 * h0) / (h0 + h1);
  return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
} // Calculate a one-sided slope.


function slope2(that, t) {
  var h = that._x1 - that._x0;
  return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
} // According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations
// "you can express cubic Hermite interpolation in terms of cubic Bézier curves
// with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1".


function point(that, t0, t1) {
  var x0 = that._x0,
      y0 = that._y0,
      x1 = that._x1,
      y1 = that._y1,
      dx = (x1 - x0) / 3;

  that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);
}

function MonotoneX(context) {
  this._context = context;
}

MonotoneX.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN;
    this._point = 0;
  },
  lineEnd: function () {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x1, this._y1);

        break;

      case 3:
        point(this, this._t0, slope2(this, this._t0));
        break;
    }

    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function (x, y) {
    var t1 = NaN;
    x = +x, y = +y;
    if (x === this._x1 && y === this._y1) return; // Ignore coincident points.

    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
        break;

      case 1:
        this._point = 2;
        break;

      case 2:
        this._point = 3;
        point(this, slope2(this, t1 = slope3(this, x, y)), t1);
        break;

      default:
        point(this, this._t0, t1 = slope3(this, x, y));
        break;
    }

    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
    this._t0 = t1;
  }
};

function MonotoneY(context) {
  this._context = new ReflectContext(context);
}

(MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function (x, y) {
  MonotoneX.prototype.point.call(this, y, x);
};

function ReflectContext(context) {
  this._context = context;
}

ReflectContext.prototype = {
  moveTo: function (x, y) {
    this._context.moveTo(y, x);
  },
  closePath: function () {
    this._context.closePath();
  },
  lineTo: function (x, y) {
    this._context.lineTo(y, x);
  },
  bezierCurveTo: function (x1, y1, x2, y2, x, y) {
    this._context.bezierCurveTo(y1, x1, y2, x2, y, x);
  }
};

function monotoneX(context) {
  return new MonotoneX(context);
}

function monotoneY(context) {
  return new MonotoneY(context);
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-shape/src/curve/basis.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Basis = Basis;
exports.default = _default;
exports.point = point;

function point(that, x, y) {
  that._context.bezierCurveTo((2 * that._x0 + that._x1) / 3, (2 * that._y0 + that._y1) / 3, (that._x0 + 2 * that._x1) / 3, (that._y0 + 2 * that._y1) / 3, (that._x0 + 4 * that._x1 + x) / 6, (that._y0 + 4 * that._y1 + y) / 6);
}

function Basis(context) {
  this._context = context;
}

Basis.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x0 = this._x1 = this._y0 = this._y1 = NaN;
    this._point = 0;
  },
  lineEnd: function () {
    switch (this._point) {
      case 3:
        point(this, this._x1, this._y1);
      // falls through

      case 2:
        this._context.lineTo(this._x1, this._y1);

        break;
    }

    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function (x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
        break;

      case 1:
        this._point = 2;
        break;

      case 2:
        this._point = 3;

        this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6);

      // falls through

      default:
        point(this, x, y);
        break;
    }

    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
  }
};

function _default(context) {
  return new Basis(context);
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-shape/src/curve/natural.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function Natural(context) {
  this._context = context;
}

Natural.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x = [];
    this._y = [];
  },
  lineEnd: function () {
    var x = this._x,
        y = this._y,
        n = x.length;

    if (n) {
      this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);

      if (n === 2) {
        this._context.lineTo(x[1], y[1]);
      } else {
        var px = controlPoints(x),
            py = controlPoints(y);

        for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {
          this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);
        }
      }
    }

    if (this._line || this._line !== 0 && n === 1) this._context.closePath();
    this._line = 1 - this._line;
    this._x = this._y = null;
  },
  point: function (x, y) {
    this._x.push(+x);

    this._y.push(+y);
  }
}; // See https://www.particleincell.com/2012/bezier-splines/ for derivation.

function controlPoints(x) {
  var i,
      n = x.length - 1,
      m,
      a = new Array(n),
      b = new Array(n),
      r = new Array(n);
  a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];

  for (i = 1; i < n - 1; ++i) a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];

  a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];

  for (i = 1; i < n; ++i) m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];

  a[n - 1] = r[n - 1] / b[n - 1];

  for (i = n - 2; i >= 0; --i) a[i] = (r[i] - a[i + 1]) / b[i];

  b[n - 1] = (x[n] + a[n - 1]) / 2;

  for (i = 0; i < n - 1; ++i) b[i] = 2 * x[i + 1] - a[i + 1];

  return [a, b];
}

function _default(context) {
  return new Natural(context);
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-shape/src/curve/cardinalOpen.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CardinalOpen = CardinalOpen;
exports.default = void 0;

var _cardinal = require("./cardinal.js");

function CardinalOpen(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}

CardinalOpen.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._point = 0;
  },
  lineEnd: function () {
    if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function (x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        break;

      case 1:
        this._point = 2;
        break;

      case 2:
        this._point = 3;
        this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
        break;

      case 3:
        this._point = 4;
      // falls through

      default:
        (0, _cardinal.point)(this, x, y);
        break;
    }

    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var _default = function custom(tension) {
  function cardinal(context) {
    return new CardinalOpen(context, tension);
  }

  cardinal.tension = function (tension) {
    return custom(+tension);
  };

  return cardinal;
}(0);

exports.default = _default;
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-shape/src/curve/catmullRomClosed.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _cardinalClosed = require("./cardinalClosed.js");

var _noop = _interopRequireDefault(require("../noop.js"));

var _catmullRom = require("./catmullRom.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function CatmullRomClosed(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}

CatmullRomClosed.prototype = {
  areaStart: _noop.default,
  areaEnd: _noop.default,
  lineStart: function () {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function () {
    switch (this._point) {
      case 1:
        {
          this._context.moveTo(this._x3, this._y3);

          this._context.closePath();

          break;
        }

      case 2:
        {
          this._context.lineTo(this._x3, this._y3);

          this._context.closePath();

          break;
        }

      case 3:
        {
          this.point(this._x3, this._y3);
          this.point(this._x4, this._y4);
          this.point(this._x5, this._y5);
          break;
        }
    }
  },
  point: function (x, y) {
    x = +x, y = +y;

    if (this._point) {
      var x23 = this._x2 - x,
          y23 = this._y2 - y;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }

    switch (this._point) {
      case 0:
        this._point = 1;
        this._x3 = x, this._y3 = y;
        break;

      case 1:
        this._point = 2;

        this._context.moveTo(this._x4 = x, this._y4 = y);

        break;

      case 2:
        this._point = 3;
        this._x5 = x, this._y5 = y;
        break;

      default:
        (0, _catmullRom.point)(this, x, y);
        break;
    }

    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var _default = function custom(alpha) {
  function catmullRom(context) {
    return alpha ? new CatmullRomClosed(context, alpha) : new _cardinalClosed.CardinalClosed(context, 0);
  }

  catmullRom.alpha = function (alpha) {
    return custom(+alpha);
  };

  return catmullRom;
}(0.5);

exports.default = _default;
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-shape/src/curve/cardinal.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Cardinal = Cardinal;
exports.default = void 0;
exports.point = point;

function point(that, x, y) {
  that._context.bezierCurveTo(that._x1 + that._k * (that._x2 - that._x0), that._y1 + that._k * (that._y2 - that._y0), that._x2 + that._k * (that._x1 - x), that._y2 + that._k * (that._y1 - y), that._x2, that._y2);
}

function Cardinal(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}

Cardinal.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._point = 0;
  },
  lineEnd: function () {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x2, this._y2);

        break;

      case 3:
        point(this, this._x1, this._y1);
        break;
    }

    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function (x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
        break;

      case 1:
        this._point = 2;
        this._x1 = x, this._y1 = y;
        break;

      case 2:
        this._point = 3;
      // falls through

      default:
        point(this, x, y);
        break;
    }

    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var _default = function custom(tension) {
  function cardinal(context) {
    return new Cardinal(context, tension);
  }

  cardinal.tension = function (tension) {
    return custom(+tension);
  };

  return cardinal;
}(0);

exports.default = _default;
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-shape/src/curve/step.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.stepAfter = stepAfter;
exports.stepBefore = stepBefore;

function Step(context, t) {
  this._context = context;
  this._t = t;
}

Step.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x = this._y = NaN;
    this._point = 0;
  },
  lineEnd: function () {
    if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);
    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;
  },
  point: function (x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
        break;

      case 1:
        this._point = 2;
      // falls through

      default:
        {
          if (this._t <= 0) {
            this._context.lineTo(this._x, y);

            this._context.lineTo(x, y);
          } else {
            var x1 = this._x * (1 - this._t) + x * this._t;

            this._context.lineTo(x1, this._y);

            this._context.lineTo(x1, y);
          }

          break;
        }
    }

    this._x = x, this._y = y;
  }
};

function _default(context) {
  return new Step(context, 0.5);
}

function stepBefore(context) {
  return new Step(context, 0);
}

function stepAfter(context) {
  return new Step(context, 1);
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-shape/src/curve/catmullRomOpen.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _cardinalOpen = require("./cardinalOpen.js");

var _catmullRom = require("./catmullRom.js");

function CatmullRomOpen(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}

CatmullRomOpen.prototype = {
  areaStart: function () {
    this._line = 0;
  },
  areaEnd: function () {
    this._line = NaN;
  },
  lineStart: function () {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function () {
    if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function (x, y) {
    x = +x, y = +y;

    if (this._point) {
      var x23 = this._x2 - x,
          y23 = this._y2 - y;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }

    switch (this._point) {
      case 0:
        this._point = 1;
        break;

      case 1:
        this._point = 2;
        break;

      case 2:
        this._point = 3;
        this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
        break;

      case 3:
        this._point = 4;
      // falls through

      default:
        (0, _catmullRom.point)(this, x, y);
        break;
    }

    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var _default = function custom(alpha) {
  function catmullRom(context) {
    return alpha ? new CatmullRomOpen(context, alpha) : new _cardinalOpen.CardinalOpen(context, 0);
  }

  catmullRom.alpha = function (alpha) {
    return custom(+alpha);
  };

  return catmullRom;
}(0.5);

exports.default = _default;
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-shape/src/curve/bump.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bumpRadial = bumpRadial;
exports.bumpX = bumpX;
exports.bumpY = bumpY;

var _pointRadial = _interopRequireDefault(require("../pointRadial.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Bump {
  constructor(context, x) {
    this._context = context;
    this._x = x;
  }

  areaStart() {
    this._line = 0;
  }

  areaEnd() {
    this._line = NaN;
  }

  lineStart() {
    this._point = 0;
  }

  lineEnd() {
    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  }

  point(x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        {
          this._point = 1;
          if (this._line) this._context.lineTo(x, y);else this._context.moveTo(x, y);
          break;
        }

      case 1:
        this._point = 2;
      // falls through

      default:
        {
          if (this._x) this._context.bezierCurveTo(this._x0 = (this._x0 + x) / 2, this._y0, this._x0, y, x, y);else this._context.bezierCurveTo(this._x0, this._y0 = (this._y0 + y) / 2, x, this._y0, x, y);
          break;
        }
    }

    this._x0 = x, this._y0 = y;
  }

}

class BumpRadial {
  constructor(context) {
    this._context = context;
  }

  lineStart() {
    this._point = 0;
  }

  lineEnd() {}

  point(x, y) {
    x = +x, y = +y;

    if (this._point++ === 0) {
      this._x0 = x, this._y0 = y;
    } else {
      const p0 = (0, _pointRadial.default)(this._x0, this._y0);
      const p1 = (0, _pointRadial.default)(this._x0, this._y0 = (this._y0 + y) / 2);
      const p2 = (0, _pointRadial.default)(x, this._y0);
      const p3 = (0, _pointRadial.default)(x, y);

      this._context.moveTo(...p0);

      this._context.bezierCurveTo(...p1, ...p2, ...p3);
    }
  }

}

function bumpX(context) {
  return new Bump(context, true);
}

function bumpY(context) {
  return new Bump(context, false);
}

function bumpRadial(context) {
  return new BumpRadial(context);
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-shape/src/curve/basisClosed.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _noop = _interopRequireDefault(require("../noop.js"));

var _basis = require("./basis.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function BasisClosed(context) {
  this._context = context;
}

BasisClosed.prototype = {
  areaStart: _noop.default,
  areaEnd: _noop.default,
  lineStart: function () {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
    this._point = 0;
  },
  lineEnd: function () {
    switch (this._point) {
      case 1:
        {
          this._context.moveTo(this._x2, this._y2);

          this._context.closePath();

          break;
        }

      case 2:
        {
          this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);

          this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);

          this._context.closePath();

          break;
        }

      case 3:
        {
          this.point(this._x2, this._y2);
          this.point(this._x3, this._y3);
          this.point(this._x4, this._y4);
          break;
        }
    }
  },
  point: function (x, y) {
    x = +x, y = +y;

    switch (this._point) {
      case 0:
        this._point = 1;
        this._x2 = x, this._y2 = y;
        break;

      case 1:
        this._point = 2;
        this._x3 = x, this._y3 = y;
        break;

      case 2:
        this._point = 3;
        this._x4 = x, this._y4 = y;

        this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6);

        break;

      default:
        (0, _basis.point)(this, x, y);
        break;
    }

    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
  }
};

function _default(context) {
  return new BasisClosed(context);
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-shape/src/index.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "arc", {
  enumerable: true,
  get: function () {
    return _arc.default;
  }
});
Object.defineProperty(exports, "area", {
  enumerable: true,
  get: function () {
    return _area.default;
  }
});
Object.defineProperty(exports, "areaRadial", {
  enumerable: true,
  get: function () {
    return _areaRadial.default;
  }
});
Object.defineProperty(exports, "curveBasis", {
  enumerable: true,
  get: function () {
    return _basis.default;
  }
});
Object.defineProperty(exports, "curveBasisClosed", {
  enumerable: true,
  get: function () {
    return _basisClosed.default;
  }
});
Object.defineProperty(exports, "curveBasisOpen", {
  enumerable: true,
  get: function () {
    return _basisOpen.default;
  }
});
Object.defineProperty(exports, "curveBumpX", {
  enumerable: true,
  get: function () {
    return _bump.bumpX;
  }
});
Object.defineProperty(exports, "curveBumpY", {
  enumerable: true,
  get: function () {
    return _bump.bumpY;
  }
});
Object.defineProperty(exports, "curveBundle", {
  enumerable: true,
  get: function () {
    return _bundle.default;
  }
});
Object.defineProperty(exports, "curveCardinal", {
  enumerable: true,
  get: function () {
    return _cardinal.default;
  }
});
Object.defineProperty(exports, "curveCardinalClosed", {
  enumerable: true,
  get: function () {
    return _cardinalClosed.default;
  }
});
Object.defineProperty(exports, "curveCardinalOpen", {
  enumerable: true,
  get: function () {
    return _cardinalOpen.default;
  }
});
Object.defineProperty(exports, "curveCatmullRom", {
  enumerable: true,
  get: function () {
    return _catmullRom.default;
  }
});
Object.defineProperty(exports, "curveCatmullRomClosed", {
  enumerable: true,
  get: function () {
    return _catmullRomClosed.default;
  }
});
Object.defineProperty(exports, "curveCatmullRomOpen", {
  enumerable: true,
  get: function () {
    return _catmullRomOpen.default;
  }
});
Object.defineProperty(exports, "curveLinear", {
  enumerable: true,
  get: function () {
    return _linear.default;
  }
});
Object.defineProperty(exports, "curveLinearClosed", {
  enumerable: true,
  get: function () {
    return _linearClosed.default;
  }
});
Object.defineProperty(exports, "curveMonotoneX", {
  enumerable: true,
  get: function () {
    return _monotone.monotoneX;
  }
});
Object.defineProperty(exports, "curveMonotoneY", {
  enumerable: true,
  get: function () {
    return _monotone.monotoneY;
  }
});
Object.defineProperty(exports, "curveNatural", {
  enumerable: true,
  get: function () {
    return _natural.default;
  }
});
Object.defineProperty(exports, "curveStep", {
  enumerable: true,
  get: function () {
    return _step.default;
  }
});
Object.defineProperty(exports, "curveStepAfter", {
  enumerable: true,
  get: function () {
    return _step.stepAfter;
  }
});
Object.defineProperty(exports, "curveStepBefore", {
  enumerable: true,
  get: function () {
    return _step.stepBefore;
  }
});
Object.defineProperty(exports, "line", {
  enumerable: true,
  get: function () {
    return _line.default;
  }
});
Object.defineProperty(exports, "lineRadial", {
  enumerable: true,
  get: function () {
    return _lineRadial.default;
  }
});
Object.defineProperty(exports, "link", {
  enumerable: true,
  get: function () {
    return _link.link;
  }
});
Object.defineProperty(exports, "linkHorizontal", {
  enumerable: true,
  get: function () {
    return _link.linkHorizontal;
  }
});
Object.defineProperty(exports, "linkRadial", {
  enumerable: true,
  get: function () {
    return _link.linkRadial;
  }
});
Object.defineProperty(exports, "linkVertical", {
  enumerable: true,
  get: function () {
    return _link.linkVertical;
  }
});
Object.defineProperty(exports, "pie", {
  enumerable: true,
  get: function () {
    return _pie.default;
  }
});
Object.defineProperty(exports, "pointRadial", {
  enumerable: true,
  get: function () {
    return _pointRadial.default;
  }
});
Object.defineProperty(exports, "radialArea", {
  enumerable: true,
  get: function () {
    return _areaRadial.default;
  }
});
Object.defineProperty(exports, "radialLine", {
  enumerable: true,
  get: function () {
    return _lineRadial.default;
  }
});
Object.defineProperty(exports, "stack", {
  enumerable: true,
  get: function () {
    return _stack.default;
  }
});
Object.defineProperty(exports, "stackOffsetDiverging", {
  enumerable: true,
  get: function () {
    return _diverging.default;
  }
});
Object.defineProperty(exports, "stackOffsetExpand", {
  enumerable: true,
  get: function () {
    return _expand.default;
  }
});
Object.defineProperty(exports, "stackOffsetNone", {
  enumerable: true,
  get: function () {
    return _none.default;
  }
});
Object.defineProperty(exports, "stackOffsetSilhouette", {
  enumerable: true,
  get: function () {
    return _silhouette.default;
  }
});
Object.defineProperty(exports, "stackOffsetWiggle", {
  enumerable: true,
  get: function () {
    return _wiggle.default;
  }
});
Object.defineProperty(exports, "stackOrderAppearance", {
  enumerable: true,
  get: function () {
    return _appearance.default;
  }
});
Object.defineProperty(exports, "stackOrderAscending", {
  enumerable: true,
  get: function () {
    return _ascending.default;
  }
});
Object.defineProperty(exports, "stackOrderDescending", {
  enumerable: true,
  get: function () {
    return _descending.default;
  }
});
Object.defineProperty(exports, "stackOrderInsideOut", {
  enumerable: true,
  get: function () {
    return _insideOut.default;
  }
});
Object.defineProperty(exports, "stackOrderNone", {
  enumerable: true,
  get: function () {
    return _none2.default;
  }
});
Object.defineProperty(exports, "stackOrderReverse", {
  enumerable: true,
  get: function () {
    return _reverse.default;
  }
});
Object.defineProperty(exports, "symbol", {
  enumerable: true,
  get: function () {
    return _symbol.default;
  }
});
Object.defineProperty(exports, "symbolAsterisk", {
  enumerable: true,
  get: function () {
    return _asterisk.default;
  }
});
Object.defineProperty(exports, "symbolCircle", {
  enumerable: true,
  get: function () {
    return _circle.default;
  }
});
Object.defineProperty(exports, "symbolCross", {
  enumerable: true,
  get: function () {
    return _cross.default;
  }
});
Object.defineProperty(exports, "symbolDiamond", {
  enumerable: true,
  get: function () {
    return _diamond.default;
  }
});
Object.defineProperty(exports, "symbolDiamond2", {
  enumerable: true,
  get: function () {
    return _diamond2.default;
  }
});
Object.defineProperty(exports, "symbolPlus", {
  enumerable: true,
  get: function () {
    return _plus.default;
  }
});
Object.defineProperty(exports, "symbolSquare", {
  enumerable: true,
  get: function () {
    return _square.default;
  }
});
Object.defineProperty(exports, "symbolSquare2", {
  enumerable: true,
  get: function () {
    return _square2.default;
  }
});
Object.defineProperty(exports, "symbolStar", {
  enumerable: true,
  get: function () {
    return _star.default;
  }
});
Object.defineProperty(exports, "symbolTriangle", {
  enumerable: true,
  get: function () {
    return _triangle.default;
  }
});
Object.defineProperty(exports, "symbolTriangle2", {
  enumerable: true,
  get: function () {
    return _triangle2.default;
  }
});
Object.defineProperty(exports, "symbolWye", {
  enumerable: true,
  get: function () {
    return _wye.default;
  }
});
Object.defineProperty(exports, "symbolX", {
  enumerable: true,
  get: function () {
    return _x.default;
  }
});
Object.defineProperty(exports, "symbols", {
  enumerable: true,
  get: function () {
    return _symbol.symbolsFill;
  }
});
Object.defineProperty(exports, "symbolsFill", {
  enumerable: true,
  get: function () {
    return _symbol.symbolsFill;
  }
});
Object.defineProperty(exports, "symbolsStroke", {
  enumerable: true,
  get: function () {
    return _symbol.symbolsStroke;
  }
});

var _arc = _interopRequireDefault(require("./arc.js"));

var _area = _interopRequireDefault(require("./area.js"));

var _line = _interopRequireDefault(require("./line.js"));

var _pie = _interopRequireDefault(require("./pie.js"));

var _areaRadial = _interopRequireDefault(require("./areaRadial.js"));

var _lineRadial = _interopRequireDefault(require("./lineRadial.js"));

var _pointRadial = _interopRequireDefault(require("./pointRadial.js"));

var _link = require("./link.js");

var _symbol = _interopRequireWildcard(require("./symbol.js"));

var _asterisk = _interopRequireDefault(require("./symbol/asterisk.js"));

var _circle = _interopRequireDefault(require("./symbol/circle.js"));

var _cross = _interopRequireDefault(require("./symbol/cross.js"));

var _diamond = _interopRequireDefault(require("./symbol/diamond.js"));

var _diamond2 = _interopRequireDefault(require("./symbol/diamond2.js"));

var _plus = _interopRequireDefault(require("./symbol/plus.js"));

var _square = _interopRequireDefault(require("./symbol/square.js"));

var _square2 = _interopRequireDefault(require("./symbol/square2.js"));

var _star = _interopRequireDefault(require("./symbol/star.js"));

var _triangle = _interopRequireDefault(require("./symbol/triangle.js"));

var _triangle2 = _interopRequireDefault(require("./symbol/triangle2.js"));

var _wye = _interopRequireDefault(require("./symbol/wye.js"));

var _x = _interopRequireDefault(require("./symbol/x.js"));

var _basisClosed = _interopRequireDefault(require("./curve/basisClosed.js"));

var _basisOpen = _interopRequireDefault(require("./curve/basisOpen.js"));

var _basis = _interopRequireDefault(require("./curve/basis.js"));

var _bump = require("./curve/bump.js");

var _bundle = _interopRequireDefault(require("./curve/bundle.js"));

var _cardinalClosed = _interopRequireDefault(require("./curve/cardinalClosed.js"));

var _cardinalOpen = _interopRequireDefault(require("./curve/cardinalOpen.js"));

var _cardinal = _interopRequireDefault(require("./curve/cardinal.js"));

var _catmullRomClosed = _interopRequireDefault(require("./curve/catmullRomClosed.js"));

var _catmullRomOpen = _interopRequireDefault(require("./curve/catmullRomOpen.js"));

var _catmullRom = _interopRequireDefault(require("./curve/catmullRom.js"));

var _linearClosed = _interopRequireDefault(require("./curve/linearClosed.js"));

var _linear = _interopRequireDefault(require("./curve/linear.js"));

var _monotone = require("./curve/monotone.js");

var _natural = _interopRequireDefault(require("./curve/natural.js"));

var _step = _interopRequireWildcard(require("./curve/step.js"));

var _stack = _interopRequireDefault(require("./stack.js"));

var _expand = _interopRequireDefault(require("./offset/expand.js"));

var _diverging = _interopRequireDefault(require("./offset/diverging.js"));

var _none = _interopRequireDefault(require("./offset/none.js"));

var _silhouette = _interopRequireDefault(require("./offset/silhouette.js"));

var _wiggle = _interopRequireDefault(require("./offset/wiggle.js"));

var _appearance = _interopRequireDefault(require("./order/appearance.js"));

var _ascending = _interopRequireDefault(require("./order/ascending.js"));

var _descending = _interopRequireDefault(require("./order/descending.js"));

var _insideOut = _interopRequireDefault(require("./order/insideOut.js"));

var _none2 = _interopRequireDefault(require("./order/none.js"));

var _reverse = _interopRequireDefault(require("./order/reverse.js"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-shape/src/symbol/circle.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _math = require("../math.js");

var _default = {
  draw(context, size) {
    const r = (0, _math.sqrt)(size / _math.pi);
    context.moveTo(r, 0);
    context.arc(0, 0, r, 0, _math.tau);
  }

};
exports.default = _default;
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-shape/src/symbol/x.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _math = require("../math.js");

var _default = {
  draw(context, size) {
    const r = (0, _math.sqrt)(size - (0, _math.min)(size / 6, 1.7)) * 0.6189;
    context.moveTo(-r, -r);
    context.lineTo(r, r);
    context.moveTo(-r, r);
    context.lineTo(r, -r);
  }

};
exports.default = _default;
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-shape/src/symbol/triangle2.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _math = require("../math.js");

const sqrt3 = (0, _math.sqrt)(3);
var _default = {
  draw(context, size) {
    const s = (0, _math.sqrt)(size) * 0.6824;
    const t = s / 2;
    const u = s * sqrt3 / 2; // cos(Math.PI / 6)

    context.moveTo(0, -s);
    context.lineTo(u, t);
    context.lineTo(-u, t);
    context.closePath();
  }

};
exports.default = _default;
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-shape/src/symbol/star.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _math = require("../math.js");

const ka = 0.89081309152928522810;
const kr = (0, _math.sin)(_math.pi / 10) / (0, _math.sin)(7 * _math.pi / 10);
const kx = (0, _math.sin)(_math.tau / 10) * kr;
const ky = -(0, _math.cos)(_math.tau / 10) * kr;
var _default = {
  draw(context, size) {
    const r = (0, _math.sqrt)(size * ka);
    const x = kx * r;
    const y = ky * r;
    context.moveTo(0, -r);
    context.lineTo(x, y);

    for (let i = 1; i < 5; ++i) {
      const a = _math.tau * i / 5;
      const c = (0, _math.cos)(a);
      const s = (0, _math.sin)(a);
      context.lineTo(s * r, -c * r);
      context.lineTo(c * x - s * y, s * x + c * y);
    }

    context.closePath();
  }

};
exports.default = _default;
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-shape/src/symbol/cross.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _math = require("../math.js");

var _default = {
  draw(context, size) {
    const r = (0, _math.sqrt)(size / 5) / 2;
    context.moveTo(-3 * r, -r);
    context.lineTo(-r, -r);
    context.lineTo(-r, -3 * r);
    context.lineTo(r, -3 * r);
    context.lineTo(r, -r);
    context.lineTo(3 * r, -r);
    context.lineTo(3 * r, r);
    context.lineTo(r, r);
    context.lineTo(r, 3 * r);
    context.lineTo(-r, 3 * r);
    context.lineTo(-r, r);
    context.lineTo(-3 * r, r);
    context.closePath();
  }

};
exports.default = _default;
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-shape/src/symbol/wye.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _math = require("../math.js");

const c = -0.5;
const s = (0, _math.sqrt)(3) / 2;
const k = 1 / (0, _math.sqrt)(12);
const a = (k / 2 + 1) * 3;
var _default = {
  draw(context, size) {
    const r = (0, _math.sqrt)(size / a);
    const x0 = r / 2,
          y0 = r * k;
    const x1 = x0,
          y1 = r * k + r;
    const x2 = -x1,
          y2 = y1;
    context.moveTo(x0, y0);
    context.lineTo(x1, y1);
    context.lineTo(x2, y2);
    context.lineTo(c * x0 - s * y0, s * x0 + c * y0);
    context.lineTo(c * x1 - s * y1, s * x1 + c * y1);
    context.lineTo(c * x2 - s * y2, s * x2 + c * y2);
    context.lineTo(c * x0 + s * y0, c * y0 - s * x0);
    context.lineTo(c * x1 + s * y1, c * y1 - s * x1);
    context.lineTo(c * x2 + s * y2, c * y2 - s * x2);
    context.closePath();
  }

};
exports.default = _default;
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-shape/src/symbol/diamond.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _math = require("../math.js");

const tan30 = (0, _math.sqrt)(1 / 3);
const tan30_2 = tan30 * 2;
var _default = {
  draw(context, size) {
    const y = (0, _math.sqrt)(size / tan30_2);
    const x = y * tan30;
    context.moveTo(0, -y);
    context.lineTo(x, 0);
    context.lineTo(0, y);
    context.lineTo(-x, 0);
    context.closePath();
  }

};
exports.default = _default;
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-shape/src/symbol/plus.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _math = require("../math.js");

var _default = {
  draw(context, size) {
    const r = (0, _math.sqrt)(size - (0, _math.min)(size / 7, 2)) * 0.87559;
    context.moveTo(-r, 0);
    context.lineTo(r, 0);
    context.moveTo(0, r);
    context.lineTo(0, -r);
  }

};
exports.default = _default;
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-shape/src/symbol/square.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _math = require("../math.js");

var _default = {
  draw(context, size) {
    const w = (0, _math.sqrt)(size);
    const x = -w / 2;
    context.rect(x, x, w, w);
  }

};
exports.default = _default;
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-shape/src/symbol/asterisk.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _math = require("../math.js");

const sqrt3 = (0, _math.sqrt)(3);
var _default = {
  draw(context, size) {
    const r = (0, _math.sqrt)(size + (0, _math.min)(size / 28, 0.75)) * 0.59436;
    const t = r / 2;
    const u = t * sqrt3;
    context.moveTo(0, r);
    context.lineTo(0, -r);
    context.moveTo(-u, -t);
    context.lineTo(u, t);
    context.moveTo(-u, t);
    context.lineTo(u, -t);
  }

};
exports.default = _default;
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-shape/src/symbol/square2.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _math = require("../math.js");

var _default = {
  draw(context, size) {
    const r = (0, _math.sqrt)(size) * 0.4431;
    context.moveTo(r, r);
    context.lineTo(r, -r);
    context.lineTo(-r, -r);
    context.lineTo(-r, r);
    context.closePath();
  }

};
exports.default = _default;
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-shape/src/symbol/triangle.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _math = require("../math.js");

const sqrt3 = (0, _math.sqrt)(3);
var _default = {
  draw(context, size) {
    const y = -(0, _math.sqrt)(size / (sqrt3 * 3));
    context.moveTo(0, y * 2);
    context.lineTo(-sqrt3 * y, -y);
    context.lineTo(sqrt3 * y, -y);
    context.closePath();
  }

};
exports.default = _default;
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-shape/src/symbol/diamond2.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _math = require("../math.js");

var _default = {
  draw(context, size) {
    const r = (0, _math.sqrt)(size) * 0.62625;
    context.moveTo(0, -r);
    context.lineTo(r, 0);
    context.lineTo(0, r);
    context.lineTo(-r, 0);
    context.closePath();
  }

};
exports.default = _default;
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-shape/src/pointRadial.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x, y) {
  return [(y = +y) * Math.cos(x -= Math.PI / 2), y * Math.sin(x)];
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-shape/src/descending.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b) {
  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-shape/src/array.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.slice = void 0;
var slice = Array.prototype.slice;
exports.slice = slice;

function _default(x) {
  return typeof x === "object" && "length" in x ? x // Array, TypedArray, NodeList, array-like
  : Array.from(x); // Map, Set, iterable, string, or anything else
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-shape/src/offset/silhouette.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _none = _interopRequireDefault(require("./none.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(series, order) {
  if (!((n = series.length) > 0)) return;

  for (var j = 0, s0 = series[order[0]], n, m = s0.length; j < m; ++j) {
    for (var i = 0, y = 0; i < n; ++i) y += series[i][j][1] || 0;

    s0[j][1] += s0[j][0] = -y / 2;
  }

  (0, _none.default)(series, order);
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-shape/src/offset/diverging.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(series, order) {
  if (!((n = series.length) > 0)) return;

  for (var i, j = 0, d, dy, yp, yn, n, m = series[order[0]].length; j < m; ++j) {
    for (yp = yn = 0, i = 0; i < n; ++i) {
      if ((dy = (d = series[order[i]][j])[1] - d[0]) > 0) {
        d[0] = yp, d[1] = yp += dy;
      } else if (dy < 0) {
        d[1] = yn, d[0] = yn += dy;
      } else {
        d[0] = 0, d[1] = dy;
      }
    }
  }
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-shape/src/offset/none.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(series, order) {
  if (!((n = series.length) > 1)) return;

  for (var i = 1, j, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i) {
    s0 = s1, s1 = series[order[i]];

    for (j = 0; j < m; ++j) {
      s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];
    }
  }
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-shape/src/offset/wiggle.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _none = _interopRequireDefault(require("./none.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(series, order) {
  if (!((n = series.length) > 0) || !((m = (s0 = series[order[0]]).length) > 0)) return;

  for (var y = 0, j = 1, s0, m, n; j < m; ++j) {
    for (var i = 0, s1 = 0, s2 = 0; i < n; ++i) {
      var si = series[order[i]],
          sij0 = si[j][1] || 0,
          sij1 = si[j - 1][1] || 0,
          s3 = (sij0 - sij1) / 2;

      for (var k = 0; k < i; ++k) {
        var sk = series[order[k]],
            skj0 = sk[j][1] || 0,
            skj1 = sk[j - 1][1] || 0;
        s3 += skj0 - skj1;
      }

      s1 += sij0, s2 += s3 * sij0;
    }

    s0[j - 1][1] += s0[j - 1][0] = y;
    if (s1) y -= s2 / s1;
  }

  s0[j - 1][1] += s0[j - 1][0] = y;
  (0, _none.default)(series, order);
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-shape/src/offset/expand.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _none = _interopRequireDefault(require("./none.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(series, order) {
  if (!((n = series.length) > 0)) return;

  for (var i, n, j = 0, m = series[0].length, y; j < m; ++j) {
    for (y = i = 0; i < n; ++i) y += series[i][j][1] || 0;

    if (y) for (i = 0; i < n; ++i) series[i][j][1] /= y;
  }

  (0, _none.default)(series, order);
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-shape/src/arc.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("../../../lib-vendor/d3-path/src/index.js");

var _constant = _interopRequireDefault(require("./constant.js"));

var _math = require("./math.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function arcInnerRadius(d) {
  return d.innerRadius;
}

function arcOuterRadius(d) {
  return d.outerRadius;
}

function arcStartAngle(d) {
  return d.startAngle;
}

function arcEndAngle(d) {
  return d.endAngle;
}

function arcPadAngle(d) {
  return d && d.padAngle; // Note: optional!
}

function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {
  var x10 = x1 - x0,
      y10 = y1 - y0,
      x32 = x3 - x2,
      y32 = y3 - y2,
      t = y32 * x10 - x32 * y10;
  if (t * t < _math.epsilon) return;
  t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / t;
  return [x0 + t * x10, y0 + t * y10];
} // Compute perpendicular offset line of length rc.
// http://mathworld.wolfram.com/Circle-LineIntersection.html


function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
  var x01 = x0 - x1,
      y01 = y0 - y1,
      lo = (cw ? rc : -rc) / (0, _math.sqrt)(x01 * x01 + y01 * y01),
      ox = lo * y01,
      oy = -lo * x01,
      x11 = x0 + ox,
      y11 = y0 + oy,
      x10 = x1 + ox,
      y10 = y1 + oy,
      x00 = (x11 + x10) / 2,
      y00 = (y11 + y10) / 2,
      dx = x10 - x11,
      dy = y10 - y11,
      d2 = dx * dx + dy * dy,
      r = r1 - rc,
      D = x11 * y10 - x10 * y11,
      d = (dy < 0 ? -1 : 1) * (0, _math.sqrt)((0, _math.max)(0, r * r * d2 - D * D)),
      cx0 = (D * dy - dx * d) / d2,
      cy0 = (-D * dx - dy * d) / d2,
      cx1 = (D * dy + dx * d) / d2,
      cy1 = (-D * dx + dy * d) / d2,
      dx0 = cx0 - x00,
      dy0 = cy0 - y00,
      dx1 = cx1 - x00,
      dy1 = cy1 - y00; // Pick the closer of the two intersection points.
  // TODO Is there a faster way to determine which intersection to use?

  if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;
  return {
    cx: cx0,
    cy: cy0,
    x01: -ox,
    y01: -oy,
    x11: cx0 * (r1 / r - 1),
    y11: cy0 * (r1 / r - 1)
  };
}

function _default() {
  var innerRadius = arcInnerRadius,
      outerRadius = arcOuterRadius,
      cornerRadius = (0, _constant.default)(0),
      padRadius = null,
      startAngle = arcStartAngle,
      endAngle = arcEndAngle,
      padAngle = arcPadAngle,
      context = null;

  function arc() {
    var buffer,
        r,
        r0 = +innerRadius.apply(this, arguments),
        r1 = +outerRadius.apply(this, arguments),
        a0 = startAngle.apply(this, arguments) - _math.halfPi,
        a1 = endAngle.apply(this, arguments) - _math.halfPi,
        da = (0, _math.abs)(a1 - a0),
        cw = a1 > a0;

    if (!context) context = buffer = (0, _index.path)(); // Ensure that the outer radius is always larger than the inner radius.

    if (r1 < r0) r = r1, r1 = r0, r0 = r; // Is it a point?

    if (!(r1 > _math.epsilon)) context.moveTo(0, 0); // Or is it a circle or annulus?
    else if (da > _math.tau - _math.epsilon) {
      context.moveTo(r1 * (0, _math.cos)(a0), r1 * (0, _math.sin)(a0));
      context.arc(0, 0, r1, a0, a1, !cw);

      if (r0 > _math.epsilon) {
        context.moveTo(r0 * (0, _math.cos)(a1), r0 * (0, _math.sin)(a1));
        context.arc(0, 0, r0, a1, a0, cw);
      }
    } // Or is it a circular or annular sector?
    else {
      var a01 = a0,
          a11 = a1,
          a00 = a0,
          a10 = a1,
          da0 = da,
          da1 = da,
          ap = padAngle.apply(this, arguments) / 2,
          rp = ap > _math.epsilon && (padRadius ? +padRadius.apply(this, arguments) : (0, _math.sqrt)(r0 * r0 + r1 * r1)),
          rc = (0, _math.min)((0, _math.abs)(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),
          rc0 = rc,
          rc1 = rc,
          t0,
          t1; // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.

      if (rp > _math.epsilon) {
        var p0 = (0, _math.asin)(rp / r0 * (0, _math.sin)(ap)),
            p1 = (0, _math.asin)(rp / r1 * (0, _math.sin)(ap));
        if ((da0 -= p0 * 2) > _math.epsilon) p0 *= cw ? 1 : -1, a00 += p0, a10 -= p0;else da0 = 0, a00 = a10 = (a0 + a1) / 2;
        if ((da1 -= p1 * 2) > _math.epsilon) p1 *= cw ? 1 : -1, a01 += p1, a11 -= p1;else da1 = 0, a01 = a11 = (a0 + a1) / 2;
      }

      var x01 = r1 * (0, _math.cos)(a01),
          y01 = r1 * (0, _math.sin)(a01),
          x10 = r0 * (0, _math.cos)(a10),
          y10 = r0 * (0, _math.sin)(a10); // Apply rounded corners?

      if (rc > _math.epsilon) {
        var x11 = r1 * (0, _math.cos)(a11),
            y11 = r1 * (0, _math.sin)(a11),
            x00 = r0 * (0, _math.cos)(a00),
            y00 = r0 * (0, _math.sin)(a00),
            oc; // Restrict the corner radius according to the sector angle.

        if (da < _math.pi && (oc = intersect(x01, y01, x00, y00, x11, y11, x10, y10))) {
          var ax = x01 - oc[0],
              ay = y01 - oc[1],
              bx = x11 - oc[0],
              by = y11 - oc[1],
              kc = 1 / (0, _math.sin)((0, _math.acos)((ax * bx + ay * by) / ((0, _math.sqrt)(ax * ax + ay * ay) * (0, _math.sqrt)(bx * bx + by * by))) / 2),
              lc = (0, _math.sqrt)(oc[0] * oc[0] + oc[1] * oc[1]);
          rc0 = (0, _math.min)(rc, (r0 - lc) / (kc - 1));
          rc1 = (0, _math.min)(rc, (r1 - lc) / (kc + 1));
        }
      } // Is the sector collapsed to a line?


      if (!(da1 > _math.epsilon)) context.moveTo(x01, y01); // Does the sector’s outer ring have rounded corners?
      else if (rc1 > _math.epsilon) {
        t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
        t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);
        context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01); // Have the corners merged?

        if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, (0, _math.atan2)(t0.y01, t0.x01), (0, _math.atan2)(t1.y01, t1.x01), !cw); // Otherwise, draw the two corners and the ring.
        else {
          context.arc(t0.cx, t0.cy, rc1, (0, _math.atan2)(t0.y01, t0.x01), (0, _math.atan2)(t0.y11, t0.x11), !cw);
          context.arc(0, 0, r1, (0, _math.atan2)(t0.cy + t0.y11, t0.cx + t0.x11), (0, _math.atan2)(t1.cy + t1.y11, t1.cx + t1.x11), !cw);
          context.arc(t1.cx, t1.cy, rc1, (0, _math.atan2)(t1.y11, t1.x11), (0, _math.atan2)(t1.y01, t1.x01), !cw);
        }
      } // Or is the outer ring just a circular arc?
      else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw); // Is there no inner ring, and it’s a circular sector?
      // Or perhaps it’s an annular sector collapsed due to padding?

      if (!(r0 > _math.epsilon) || !(da0 > _math.epsilon)) context.lineTo(x10, y10); // Does the sector’s inner ring (or point) have rounded corners?
      else if (rc0 > _math.epsilon) {
        t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
        t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);
        context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01); // Have the corners merged?

        if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, (0, _math.atan2)(t0.y01, t0.x01), (0, _math.atan2)(t1.y01, t1.x01), !cw); // Otherwise, draw the two corners and the ring.
        else {
          context.arc(t0.cx, t0.cy, rc0, (0, _math.atan2)(t0.y01, t0.x01), (0, _math.atan2)(t0.y11, t0.x11), !cw);
          context.arc(0, 0, r0, (0, _math.atan2)(t0.cy + t0.y11, t0.cx + t0.x11), (0, _math.atan2)(t1.cy + t1.y11, t1.cx + t1.x11), cw);
          context.arc(t1.cx, t1.cy, rc0, (0, _math.atan2)(t1.y11, t1.x11), (0, _math.atan2)(t1.y01, t1.x01), !cw);
        }
      } // Or is the inner ring just a circular arc?
      else context.arc(0, 0, r0, a10, a00, cw);
    }
    context.closePath();
    if (buffer) return context = null, buffer + "" || null;
  }

  arc.centroid = function () {
    var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,
        a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - _math.pi / 2;
    return [(0, _math.cos)(a) * r, (0, _math.sin)(a) * r];
  };

  arc.innerRadius = function (_) {
    return arguments.length ? (innerRadius = typeof _ === "function" ? _ : (0, _constant.default)(+_), arc) : innerRadius;
  };

  arc.outerRadius = function (_) {
    return arguments.length ? (outerRadius = typeof _ === "function" ? _ : (0, _constant.default)(+_), arc) : outerRadius;
  };

  arc.cornerRadius = function (_) {
    return arguments.length ? (cornerRadius = typeof _ === "function" ? _ : (0, _constant.default)(+_), arc) : cornerRadius;
  };

  arc.padRadius = function (_) {
    return arguments.length ? (padRadius = _ == null ? null : typeof _ === "function" ? _ : (0, _constant.default)(+_), arc) : padRadius;
  };

  arc.startAngle = function (_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : (0, _constant.default)(+_), arc) : startAngle;
  };

  arc.endAngle = function (_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : (0, _constant.default)(+_), arc) : endAngle;
  };

  arc.padAngle = function (_) {
    return arguments.length ? (padAngle = typeof _ === "function" ? _ : (0, _constant.default)(+_), arc) : padAngle;
  };

  arc.context = function (_) {
    return arguments.length ? (context = _ == null ? null : _, arc) : context;
  };

  return arc;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-shape/src/constant.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function constant() {
    return x;
  };
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-shape/src/math.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.abs = void 0;
exports.acos = acos;
exports.asin = asin;
exports.tau = exports.sqrt = exports.sin = exports.pi = exports.min = exports.max = exports.halfPi = exports.epsilon = exports.cos = exports.atan2 = void 0;
const abs = Math.abs;
exports.abs = abs;
const atan2 = Math.atan2;
exports.atan2 = atan2;
const cos = Math.cos;
exports.cos = cos;
const max = Math.max;
exports.max = max;
const min = Math.min;
exports.min = min;
const sin = Math.sin;
exports.sin = sin;
const sqrt = Math.sqrt;
exports.sqrt = sqrt;
const epsilon = 1e-12;
exports.epsilon = epsilon;
const pi = Math.PI;
exports.pi = pi;
const halfPi = pi / 2;
exports.halfPi = halfPi;
const tau = 2 * pi;
exports.tau = tau;

function acos(x) {
  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);
}

function asin(x) {
  return x >= 1 ? halfPi : x <= -1 ? -halfPi : Math.asin(x);
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-shape/src/lineRadial.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.lineRadial = lineRadial;

var _radial = _interopRequireWildcard(require("./curve/radial.js"));

var _line = _interopRequireDefault(require("./line.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function lineRadial(l) {
  var c = l.curve;
  l.angle = l.x, delete l.x;
  l.radius = l.y, delete l.y;

  l.curve = function (_) {
    return arguments.length ? c((0, _radial.default)(_)) : c()._curve;
  };

  return l;
}

function _default() {
  return lineRadial((0, _line.default)().curve(_radial.curveRadialLinear));
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-shape/src/identity.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(d) {
  return d;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-shape/src/area.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("../../../lib-vendor/d3-path/src/index.js");

var _array = _interopRequireDefault(require("./array.js"));

var _constant = _interopRequireDefault(require("./constant.js"));

var _linear = _interopRequireDefault(require("./curve/linear.js"));

var _line = _interopRequireDefault(require("./line.js"));

var _point = require("./point.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(x0, y0, y1) {
  var x1 = null,
      defined = (0, _constant.default)(true),
      context = null,
      curve = _linear.default,
      output = null;
  x0 = typeof x0 === "function" ? x0 : x0 === undefined ? _point.x : (0, _constant.default)(+x0);
  y0 = typeof y0 === "function" ? y0 : y0 === undefined ? (0, _constant.default)(0) : (0, _constant.default)(+y0);
  y1 = typeof y1 === "function" ? y1 : y1 === undefined ? _point.y : (0, _constant.default)(+y1);

  function area(data) {
    var i,
        j,
        k,
        n = (data = (0, _array.default)(data)).length,
        d,
        defined0 = false,
        buffer,
        x0z = new Array(n),
        y0z = new Array(n);
    if (context == null) output = curve(buffer = (0, _index.path)());

    for (i = 0; i <= n; ++i) {
      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
        if (defined0 = !defined0) {
          j = i;
          output.areaStart();
          output.lineStart();
        } else {
          output.lineEnd();
          output.lineStart();

          for (k = i - 1; k >= j; --k) {
            output.point(x0z[k], y0z[k]);
          }

          output.lineEnd();
          output.areaEnd();
        }
      }

      if (defined0) {
        x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);
        output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);
      }
    }

    if (buffer) return output = null, buffer + "" || null;
  }

  function arealine() {
    return (0, _line.default)().defined(defined).curve(curve).context(context);
  }

  area.x = function (_) {
    return arguments.length ? (x0 = typeof _ === "function" ? _ : (0, _constant.default)(+_), x1 = null, area) : x0;
  };

  area.x0 = function (_) {
    return arguments.length ? (x0 = typeof _ === "function" ? _ : (0, _constant.default)(+_), area) : x0;
  };

  area.x1 = function (_) {
    return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : (0, _constant.default)(+_), area) : x1;
  };

  area.y = function (_) {
    return arguments.length ? (y0 = typeof _ === "function" ? _ : (0, _constant.default)(+_), y1 = null, area) : y0;
  };

  area.y0 = function (_) {
    return arguments.length ? (y0 = typeof _ === "function" ? _ : (0, _constant.default)(+_), area) : y0;
  };

  area.y1 = function (_) {
    return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : (0, _constant.default)(+_), area) : y1;
  };

  area.lineX0 = area.lineY0 = function () {
    return arealine().x(x0).y(y0);
  };

  area.lineY1 = function () {
    return arealine().x(x0).y(y1);
  };

  area.lineX1 = function () {
    return arealine().x(x1).y(y0);
  };

  area.defined = function (_) {
    return arguments.length ? (defined = typeof _ === "function" ? _ : (0, _constant.default)(!!_), area) : defined;
  };

  area.curve = function (_) {
    return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;
  };

  area.context = function (_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;
  };

  return area;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-shape/src/point.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.x = x;
exports.y = y;

function x(p) {
  return p[0];
}

function y(p) {
  return p[1];
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-shape/src/areaRadial.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _radial = _interopRequireWildcard(require("./curve/radial.js"));

var _area = _interopRequireDefault(require("./area.js"));

var _lineRadial = require("./lineRadial.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _default() {
  var a = (0, _area.default)().curve(_radial.curveRadialLinear),
      c = a.curve,
      x0 = a.lineX0,
      x1 = a.lineX1,
      y0 = a.lineY0,
      y1 = a.lineY1;
  a.angle = a.x, delete a.x;
  a.startAngle = a.x0, delete a.x0;
  a.endAngle = a.x1, delete a.x1;
  a.radius = a.y, delete a.y;
  a.innerRadius = a.y0, delete a.y0;
  a.outerRadius = a.y1, delete a.y1;
  a.lineStartAngle = function () {
    return (0, _lineRadial.lineRadial)(x0());
  }, delete a.lineX0;
  a.lineEndAngle = function () {
    return (0, _lineRadial.lineRadial)(x1());
  }, delete a.lineX1;
  a.lineInnerRadius = function () {
    return (0, _lineRadial.lineRadial)(y0());
  }, delete a.lineY0;
  a.lineOuterRadius = function () {
    return (0, _lineRadial.lineRadial)(y1());
  }, delete a.lineY1;

  a.curve = function (_) {
    return arguments.length ? c((0, _radial.default)(_)) : c()._curve;
  };

  return a;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-shape/src/noop.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default() {}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-shape/src/stack.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _array = _interopRequireDefault(require("./array.js"));

var _constant = _interopRequireDefault(require("./constant.js"));

var _none = _interopRequireDefault(require("./offset/none.js"));

var _none2 = _interopRequireDefault(require("./order/none.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function stackValue(d, key) {
  return d[key];
}

function stackSeries(key) {
  const series = [];
  series.key = key;
  return series;
}

function _default() {
  var keys = (0, _constant.default)([]),
      order = _none2.default,
      offset = _none.default,
      value = stackValue;

  function stack(data) {
    var sz = Array.from(keys.apply(this, arguments), stackSeries),
        i,
        n = sz.length,
        j = -1,
        oz;

    for (const d of data) {
      for (i = 0, ++j; i < n; ++i) {
        (sz[i][j] = [0, +value(d, sz[i].key, j, data)]).data = d;
      }
    }

    for (i = 0, oz = (0, _array.default)(order(sz)); i < n; ++i) {
      sz[oz[i]].index = i;
    }

    offset(sz, oz);
    return sz;
  }

  stack.keys = function (_) {
    return arguments.length ? (keys = typeof _ === "function" ? _ : (0, _constant.default)(Array.from(_)), stack) : keys;
  };

  stack.value = function (_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : (0, _constant.default)(+_), stack) : value;
  };

  stack.order = function (_) {
    return arguments.length ? (order = _ == null ? _none2.default : typeof _ === "function" ? _ : (0, _constant.default)(Array.from(_)), stack) : order;
  };

  stack.offset = function (_) {
    return arguments.length ? (offset = _ == null ? _none.default : _, stack) : offset;
  };

  return stack;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-array/src/number.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = number;
exports.numbers = numbers;

function number(x) {
  return x === null ? NaN : +x;
}

function* numbers(values, valueof) {
  if (valueof === undefined) {
    for (let value of values) {
      if (value != null && (value = +value) >= value) {
        yield value;
      }
    }
  } else {
    let index = -1;

    for (let value of values) {
      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
        yield value;
      }
    }
  }
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-array/src/range.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = range;

function range(start, stop, step) {
  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;
  var i = -1,
      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
      range = new Array(n);

  while (++i < n) {
    range[i] = start + i * step;
  }

  return range;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-array/src/sort.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ascendingDefined = ascendingDefined;
exports.compareDefined = compareDefined;
exports.default = sort;

var _ascending = _interopRequireDefault(require("./ascending.js"));

var _permute = _interopRequireDefault(require("./permute.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function sort(values, ...F) {
  if (typeof values[Symbol.iterator] !== "function") throw new TypeError("values is not iterable");
  values = Array.from(values);
  let [f] = F;

  if (f && f.length !== 2 || F.length > 1) {
    const index = Uint32Array.from(values, (d, i) => i);

    if (F.length > 1) {
      F = F.map(f => values.map(f));
      index.sort((i, j) => {
        for (const f of F) {
          const c = ascendingDefined(f[i], f[j]);
          if (c) return c;
        }
      });
    } else {
      f = values.map(f);
      index.sort((i, j) => ascendingDefined(f[i], f[j]));
    }

    return (0, _permute.default)(values, index);
  }

  return values.sort(compareDefined(f));
}

function compareDefined(compare = _ascending.default) {
  if (compare === _ascending.default) return ascendingDefined;
  if (typeof compare !== "function") throw new TypeError("compare is not a function");
  return (a, b) => {
    const x = compare(a, b);
    if (x || x === 0) return x;
    return (compare(b, b) === 0) - (compare(a, a) === 0);
  };
}

function ascendingDefined(a, b) {
  return (a == null || !(a >= a)) - (b == null || !(b >= b)) || (a < b ? -1 : a > b ? 1 : 0);
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-array/src/pairs.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = pairs;
exports.pair = pair;

function pairs(values, pairof = pair) {
  const pairs = [];
  let previous;
  let first = false;

  for (const value of values) {
    if (first) pairs.push(pairof(previous, value));
    previous = value;
    first = true;
  }

  return pairs;
}

function pair(a, b) {
  return [a, b];
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-array/src/ticks.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ticks;
exports.tickIncrement = tickIncrement;
exports.tickStep = tickStep;
var e10 = Math.sqrt(50),
    e5 = Math.sqrt(10),
    e2 = Math.sqrt(2);

function ticks(start, stop, count) {
  var reverse,
      i = -1,
      n,
      ticks,
      step;
  stop = +stop, start = +start, count = +count;
  if (start === stop && count > 0) return [start];
  if (reverse = stop < start) n = start, start = stop, stop = n;
  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];

  if (step > 0) {
    let r0 = Math.round(start / step),
        r1 = Math.round(stop / step);
    if (r0 * step < start) ++r0;
    if (r1 * step > stop) --r1;
    ticks = new Array(n = r1 - r0 + 1);

    while (++i < n) ticks[i] = (r0 + i) * step;
  } else {
    step = -step;
    let r0 = Math.round(start * step),
        r1 = Math.round(stop * step);
    if (r0 / step < start) ++r0;
    if (r1 / step > stop) --r1;
    ticks = new Array(n = r1 - r0 + 1);

    while (++i < n) ticks[i] = (r0 + i) / step;
  }

  if (reverse) ticks.reverse();
  return ticks;
}

function tickIncrement(start, stop, count) {
  var step = (stop - start) / Math.max(0, count),
      power = Math.floor(Math.log(step) / Math.LN10),
      error = step / Math.pow(10, power);
  return power >= 0 ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
}

function tickStep(start, stop, count) {
  var step0 = Math.abs(stop - start) / Math.max(0, count),
      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
      error = step0 / step1;
  if (error >= e10) step1 *= 10;else if (error >= e5) step1 *= 5;else if (error >= e2) step1 *= 2;
  return stop < start ? -step1 : step1;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-array/src/reverse.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = reverse;

function reverse(values) {
  if (typeof values[Symbol.iterator] !== "function") throw new TypeError("values is not iterable");
  return Array.from(values).reverse();
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-array/src/deviation.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = deviation;

var _variance = _interopRequireDefault(require("./variance.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function deviation(values, valueof) {
  const v = (0, _variance.default)(values, valueof);
  return v ? Math.sqrt(v) : v;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-array/src/every.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = every;

function every(values, test) {
  if (typeof test !== "function") throw new TypeError("test is not a function");
  let index = -1;

  for (const value of values) {
    if (!test(value, ++index, values)) {
      return false;
    }
  }

  return true;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-array/src/greatestIndex.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = greatestIndex;

var _ascending = _interopRequireDefault(require("./ascending.js"));

var _maxIndex = _interopRequireDefault(require("./maxIndex.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function greatestIndex(values, compare = _ascending.default) {
  if (compare.length === 1) return (0, _maxIndex.default)(values, compare);
  let maxValue;
  let max = -1;
  let index = -1;

  for (const value of values) {
    ++index;

    if (max < 0 ? compare(value, value) === 0 : compare(value, maxValue) > 0) {
      maxValue = value;
      max = index;
    }
  }

  return max;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-array/src/variance.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = variance;

function variance(values, valueof) {
  let count = 0;
  let delta;
  let mean = 0;
  let sum = 0;

  if (valueof === undefined) {
    for (let value of values) {
      if (value != null && (value = +value) >= value) {
        delta = value - mean;
        mean += delta / ++count;
        sum += delta * (value - mean);
      }
    }
  } else {
    let index = -1;

    for (let value of values) {
      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
        delta = value - mean;
        mean += delta / ++count;
        sum += delta * (value - mean);
      }
    }
  }

  if (count > 1) return sum / (count - 1);
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-array/src/least.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = least;

var _ascending = _interopRequireDefault(require("./ascending.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function least(values, compare = _ascending.default) {
  let min;
  let defined = false;

  if (compare.length === 1) {
    let minValue;

    for (const element of values) {
      const value = compare(element);

      if (defined ? (0, _ascending.default)(value, minValue) < 0 : (0, _ascending.default)(value, value) === 0) {
        min = element;
        minValue = value;
        defined = true;
      }
    }
  } else {
    for (const value of values) {
      if (defined ? compare(value, min) < 0 : compare(value, value) === 0) {
        min = value;
        defined = true;
      }
    }
  }

  return min;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-array/src/bin.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = bin;

var _array = require("./array.js");

var _bisect = _interopRequireDefault(require("./bisect.js"));

var _constant = _interopRequireDefault(require("./constant.js"));

var _extent = _interopRequireDefault(require("./extent.js"));

var _identity = _interopRequireDefault(require("./identity.js"));

var _nice = _interopRequireDefault(require("./nice.js"));

var _ticks = _interopRequireWildcard(require("./ticks.js"));

var _sturges = _interopRequireDefault(require("./threshold/sturges.js"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function bin() {
  var value = _identity.default,
      domain = _extent.default,
      threshold = _sturges.default;

  function histogram(data) {
    if (!Array.isArray(data)) data = Array.from(data);
    var i,
        n = data.length,
        x,
        step,
        values = new Array(n);

    for (i = 0; i < n; ++i) {
      values[i] = value(data[i], i, data);
    }

    var xz = domain(values),
        x0 = xz[0],
        x1 = xz[1],
        tz = threshold(values, x0, x1); // Convert number of thresholds into uniform thresholds, and nice the
    // default domain accordingly.

    if (!Array.isArray(tz)) {
      const max = x1,
            tn = +tz;
      if (domain === _extent.default) [x0, x1] = (0, _nice.default)(x0, x1, tn);
      tz = (0, _ticks.default)(x0, x1, tn); // If the domain is aligned with the first tick (which it will by
      // default), then we can use quantization rather than bisection to bin
      // values, which is substantially faster.

      if (tz[0] <= x0) step = (0, _ticks.tickIncrement)(x0, x1, tn); // If the last threshold is coincident with the domain’s upper bound, the
      // last bin will be zero-width. If the default domain is used, and this
      // last threshold is coincident with the maximum input value, we can
      // extend the niced upper bound by one tick to ensure uniform bin widths;
      // otherwise, we simply remove the last threshold. Note that we don’t
      // coerce values or the domain to numbers, and thus must be careful to
      // compare order (>=) rather than strict equality (===)!

      if (tz[tz.length - 1] >= x1) {
        if (max >= x1 && domain === _extent.default) {
          const step = (0, _ticks.tickIncrement)(x0, x1, tn);

          if (isFinite(step)) {
            if (step > 0) {
              x1 = (Math.floor(x1 / step) + 1) * step;
            } else if (step < 0) {
              x1 = (Math.ceil(x1 * -step) + 1) / -step;
            }
          }
        } else {
          tz.pop();
        }
      }
    } // Remove any thresholds outside the domain.


    var m = tz.length;

    while (tz[0] <= x0) tz.shift(), --m;

    while (tz[m - 1] > x1) tz.pop(), --m;

    var bins = new Array(m + 1),
        bin; // Initialize bins.

    for (i = 0; i <= m; ++i) {
      bin = bins[i] = [];
      bin.x0 = i > 0 ? tz[i - 1] : x0;
      bin.x1 = i < m ? tz[i] : x1;
    } // Assign data to bins by value, ignoring any outside the domain.


    if (isFinite(step)) {
      if (step > 0) {
        for (i = 0; i < n; ++i) {
          if ((x = values[i]) != null && x0 <= x && x <= x1) {
            bins[Math.min(m, Math.floor((x - x0) / step))].push(data[i]);
          }
        }
      } else if (step < 0) {
        for (i = 0; i < n; ++i) {
          if ((x = values[i]) != null && x0 <= x && x <= x1) {
            const j = Math.floor((x0 - x) * step);
            bins[Math.min(m, j + (tz[j] <= x))].push(data[i]); // handle off-by-one due to rounding
          }
        }
      }
    } else {
      for (i = 0; i < n; ++i) {
        if ((x = values[i]) != null && x0 <= x && x <= x1) {
          bins[(0, _bisect.default)(tz, x, 0, m)].push(data[i]);
        }
      }
    }

    return bins;
  }

  histogram.value = function (_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : (0, _constant.default)(_), histogram) : value;
  };

  histogram.domain = function (_) {
    return arguments.length ? (domain = typeof _ === "function" ? _ : (0, _constant.default)([_[0], _[1]]), histogram) : domain;
  };

  histogram.thresholds = function (_) {
    return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? (0, _constant.default)(_array.slice.call(_)) : (0, _constant.default)(_), histogram) : threshold;
  };

  return histogram;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-array/src/maxIndex.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = maxIndex;

function maxIndex(values, valueof) {
  let max;
  let maxIndex = -1;
  let index = -1;

  if (valueof === undefined) {
    for (const value of values) {
      ++index;

      if (value != null && (max < value || max === undefined && value >= value)) {
        max = value, maxIndex = index;
      }
    }
  } else {
    for (let value of values) {
      if ((value = valueof(value, ++index, values)) != null && (max < value || max === undefined && value >= value)) {
        max = value, maxIndex = index;
      }
    }
  }

  return maxIndex;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-array/src/cross.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = cross;

function length(array) {
  return array.length | 0;
}

function empty(length) {
  return !(length > 0);
}

function arrayify(values) {
  return typeof values !== "object" || "length" in values ? values : Array.from(values);
}

function reducer(reduce) {
  return values => reduce(...values);
}

function cross(...values) {
  const reduce = typeof values[values.length - 1] === "function" && reducer(values.pop());
  values = values.map(arrayify);
  const lengths = values.map(length);
  const j = values.length - 1;
  const index = new Array(j + 1).fill(0);
  const product = [];
  if (j < 0 || lengths.some(empty)) return product;

  while (true) {
    product.push(index.map((j, i) => values[i][j]));
    let i = j;

    while (++index[i] === lengths[i]) {
      if (i === 0) return reduce ? product.map(reduce) : product;
      index[i--] = 0;
    }
  }
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-array/src/merge.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = merge;

function* flatten(arrays) {
  for (const array of arrays) {
    yield* array;
  }
}

function merge(arrays) {
  return Array.from(flatten(arrays));
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-array/src/permute.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = permute;

function permute(source, keys) {
  return Array.from(keys, key => source[key]);
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-array/src/superset.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = superset;

function superset(values, other) {
  const iterator = values[Symbol.iterator](),
        set = new Set();

  for (const o of other) {
    const io = intern(o);
    if (set.has(io)) continue;
    let value, done;

    while (({
      value,
      done
    } = iterator.next())) {
      if (done) return false;
      const ivalue = intern(value);
      set.add(ivalue);
      if (Object.is(io, ivalue)) break;
    }
  }

  return true;
}

function intern(value) {
  return value !== null && typeof value === "object" ? value.valueOf() : value;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-array/src/max.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = max;

function max(values, valueof) {
  let max;

  if (valueof === undefined) {
    for (const value of values) {
      if (value != null && (max < value || max === undefined && value >= value)) {
        max = value;
      }
    }
  } else {
    let index = -1;

    for (let value of values) {
      if ((value = valueof(value, ++index, values)) != null && (max < value || max === undefined && value >= value)) {
        max = value;
      }
    }
  }

  return max;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-array/src/fsum.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Adder = void 0;
exports.fcumsum = fcumsum;
exports.fsum = fsum;

// https://github.com/python/cpython/blob/a74eea238f5baba15797e2e8b570d153bc8690a7/Modules/mathmodule.c#L1423
class Adder {
  constructor() {
    this._partials = new Float64Array(32);
    this._n = 0;
  }

  add(x) {
    const p = this._partials;
    let i = 0;

    for (let j = 0; j < this._n && j < 32; j++) {
      const y = p[j],
            hi = x + y,
            lo = Math.abs(x) < Math.abs(y) ? x - (hi - y) : y - (hi - x);
      if (lo) p[i++] = lo;
      x = hi;
    }

    p[i] = x;
    this._n = i + 1;
    return this;
  }

  valueOf() {
    const p = this._partials;
    let n = this._n,
        x,
        y,
        lo,
        hi = 0;

    if (n > 0) {
      hi = p[--n];

      while (n > 0) {
        x = hi;
        y = p[--n];
        hi = x + y;
        lo = y - (hi - x);
        if (lo) break;
      }

      if (n > 0 && (lo < 0 && p[n - 1] < 0 || lo > 0 && p[n - 1] > 0)) {
        y = lo * 2;
        x = hi + y;
        if (y == x - hi) hi = x;
      }
    }

    return hi;
  }

}

exports.Adder = Adder;

function fsum(values, valueof) {
  const adder = new Adder();

  if (valueof === undefined) {
    for (let value of values) {
      if (value = +value) {
        adder.add(value);
      }
    }
  } else {
    let index = -1;

    for (let value of values) {
      if (value = +valueof(value, ++index, values)) {
        adder.add(value);
      }
    }
  }

  return +adder;
}

function fcumsum(values, valueof) {
  const adder = new Adder();
  let index = -1;
  return Float64Array.from(values, valueof === undefined ? v => adder.add(+v || 0) : v => adder.add(+valueof(v, ++index, values) || 0));
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-array/src/difference.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = difference;

var _index = require("../../../lib-vendor/internmap/src/index.js");

function difference(values, ...others) {
  values = new _index.InternSet(values);

  for (const other of others) {
    for (const value of other) {
      values.delete(value);
    }
  }

  return values;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-array/src/reduce.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = reduce;

function reduce(values, reducer, value) {
  if (typeof reducer !== "function") throw new TypeError("reducer is not a function");
  const iterator = values[Symbol.iterator]();
  let done,
      next,
      index = -1;

  if (arguments.length < 3) {
    ({
      done,
      value
    } = iterator.next());
    if (done) return;
    ++index;
  }

  while (({
    done,
    value: next
  } = iterator.next()), !done) {
    value = reducer(value, next, ++index, values);
  }

  return value;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-array/src/bisect.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.bisectRight = exports.bisectLeft = exports.bisectCenter = void 0;

var _ascending = _interopRequireDefault(require("./ascending.js"));

var _bisector = _interopRequireDefault(require("./bisector.js"));

var _number = _interopRequireDefault(require("./number.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const ascendingBisect = (0, _bisector.default)(_ascending.default);
const bisectRight = ascendingBisect.right;
exports.bisectRight = bisectRight;
const bisectLeft = ascendingBisect.left;
exports.bisectLeft = bisectLeft;
const bisectCenter = (0, _bisector.default)(_number.default).center;
exports.bisectCenter = bisectCenter;
var _default = bisectRight;
exports.default = _default;
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-array/src/index.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Adder", {
  enumerable: true,
  get: function () {
    return _fsum.Adder;
  }
});
Object.defineProperty(exports, "InternMap", {
  enumerable: true,
  get: function () {
    return _index.InternMap;
  }
});
Object.defineProperty(exports, "InternSet", {
  enumerable: true,
  get: function () {
    return _index.InternSet;
  }
});
Object.defineProperty(exports, "ascending", {
  enumerable: true,
  get: function () {
    return _ascending.default;
  }
});
Object.defineProperty(exports, "bin", {
  enumerable: true,
  get: function () {
    return _bin.default;
  }
});
Object.defineProperty(exports, "bisect", {
  enumerable: true,
  get: function () {
    return _bisect.default;
  }
});
Object.defineProperty(exports, "bisectCenter", {
  enumerable: true,
  get: function () {
    return _bisect.bisectCenter;
  }
});
Object.defineProperty(exports, "bisectLeft", {
  enumerable: true,
  get: function () {
    return _bisect.bisectLeft;
  }
});
Object.defineProperty(exports, "bisectRight", {
  enumerable: true,
  get: function () {
    return _bisect.bisectRight;
  }
});
Object.defineProperty(exports, "bisector", {
  enumerable: true,
  get: function () {
    return _bisector.default;
  }
});
Object.defineProperty(exports, "count", {
  enumerable: true,
  get: function () {
    return _count.default;
  }
});
Object.defineProperty(exports, "cross", {
  enumerable: true,
  get: function () {
    return _cross.default;
  }
});
Object.defineProperty(exports, "cumsum", {
  enumerable: true,
  get: function () {
    return _cumsum.default;
  }
});
Object.defineProperty(exports, "descending", {
  enumerable: true,
  get: function () {
    return _descending.default;
  }
});
Object.defineProperty(exports, "deviation", {
  enumerable: true,
  get: function () {
    return _deviation.default;
  }
});
Object.defineProperty(exports, "difference", {
  enumerable: true,
  get: function () {
    return _difference.default;
  }
});
Object.defineProperty(exports, "disjoint", {
  enumerable: true,
  get: function () {
    return _disjoint.default;
  }
});
Object.defineProperty(exports, "every", {
  enumerable: true,
  get: function () {
    return _every.default;
  }
});
Object.defineProperty(exports, "extent", {
  enumerable: true,
  get: function () {
    return _extent.default;
  }
});
Object.defineProperty(exports, "fcumsum", {
  enumerable: true,
  get: function () {
    return _fsum.fcumsum;
  }
});
Object.defineProperty(exports, "filter", {
  enumerable: true,
  get: function () {
    return _filter.default;
  }
});
Object.defineProperty(exports, "flatGroup", {
  enumerable: true,
  get: function () {
    return _group.flatGroup;
  }
});
Object.defineProperty(exports, "flatRollup", {
  enumerable: true,
  get: function () {
    return _group.flatRollup;
  }
});
Object.defineProperty(exports, "fsum", {
  enumerable: true,
  get: function () {
    return _fsum.fsum;
  }
});
Object.defineProperty(exports, "greatest", {
  enumerable: true,
  get: function () {
    return _greatest.default;
  }
});
Object.defineProperty(exports, "greatestIndex", {
  enumerable: true,
  get: function () {
    return _greatestIndex.default;
  }
});
Object.defineProperty(exports, "group", {
  enumerable: true,
  get: function () {
    return _group.default;
  }
});
Object.defineProperty(exports, "groupSort", {
  enumerable: true,
  get: function () {
    return _groupSort.default;
  }
});
Object.defineProperty(exports, "groups", {
  enumerable: true,
  get: function () {
    return _group.groups;
  }
});
Object.defineProperty(exports, "histogram", {
  enumerable: true,
  get: function () {
    return _bin.default;
  }
});
Object.defineProperty(exports, "index", {
  enumerable: true,
  get: function () {
    return _group.index;
  }
});
Object.defineProperty(exports, "indexes", {
  enumerable: true,
  get: function () {
    return _group.indexes;
  }
});
Object.defineProperty(exports, "intersection", {
  enumerable: true,
  get: function () {
    return _intersection.default;
  }
});
Object.defineProperty(exports, "least", {
  enumerable: true,
  get: function () {
    return _least.default;
  }
});
Object.defineProperty(exports, "leastIndex", {
  enumerable: true,
  get: function () {
    return _leastIndex.default;
  }
});
Object.defineProperty(exports, "map", {
  enumerable: true,
  get: function () {
    return _map.default;
  }
});
Object.defineProperty(exports, "max", {
  enumerable: true,
  get: function () {
    return _max.default;
  }
});
Object.defineProperty(exports, "maxIndex", {
  enumerable: true,
  get: function () {
    return _maxIndex.default;
  }
});
Object.defineProperty(exports, "mean", {
  enumerable: true,
  get: function () {
    return _mean.default;
  }
});
Object.defineProperty(exports, "median", {
  enumerable: true,
  get: function () {
    return _median.default;
  }
});
Object.defineProperty(exports, "merge", {
  enumerable: true,
  get: function () {
    return _merge.default;
  }
});
Object.defineProperty(exports, "min", {
  enumerable: true,
  get: function () {
    return _min.default;
  }
});
Object.defineProperty(exports, "minIndex", {
  enumerable: true,
  get: function () {
    return _minIndex.default;
  }
});
Object.defineProperty(exports, "mode", {
  enumerable: true,
  get: function () {
    return _mode.default;
  }
});
Object.defineProperty(exports, "nice", {
  enumerable: true,
  get: function () {
    return _nice.default;
  }
});
Object.defineProperty(exports, "pairs", {
  enumerable: true,
  get: function () {
    return _pairs.default;
  }
});
Object.defineProperty(exports, "permute", {
  enumerable: true,
  get: function () {
    return _permute.default;
  }
});
Object.defineProperty(exports, "quantile", {
  enumerable: true,
  get: function () {
    return _quantile.default;
  }
});
Object.defineProperty(exports, "quantileSorted", {
  enumerable: true,
  get: function () {
    return _quantile.quantileSorted;
  }
});
Object.defineProperty(exports, "quickselect", {
  enumerable: true,
  get: function () {
    return _quickselect.default;
  }
});
Object.defineProperty(exports, "range", {
  enumerable: true,
  get: function () {
    return _range.default;
  }
});
Object.defineProperty(exports, "rank", {
  enumerable: true,
  get: function () {
    return _rank.default;
  }
});
Object.defineProperty(exports, "reduce", {
  enumerable: true,
  get: function () {
    return _reduce.default;
  }
});
Object.defineProperty(exports, "reverse", {
  enumerable: true,
  get: function () {
    return _reverse.default;
  }
});
Object.defineProperty(exports, "rollup", {
  enumerable: true,
  get: function () {
    return _group.rollup;
  }
});
Object.defineProperty(exports, "rollups", {
  enumerable: true,
  get: function () {
    return _group.rollups;
  }
});
Object.defineProperty(exports, "scan", {
  enumerable: true,
  get: function () {
    return _scan.default;
  }
});
Object.defineProperty(exports, "shuffle", {
  enumerable: true,
  get: function () {
    return _shuffle.default;
  }
});
Object.defineProperty(exports, "shuffler", {
  enumerable: true,
  get: function () {
    return _shuffle.shuffler;
  }
});
Object.defineProperty(exports, "some", {
  enumerable: true,
  get: function () {
    return _some.default;
  }
});
Object.defineProperty(exports, "sort", {
  enumerable: true,
  get: function () {
    return _sort.default;
  }
});
Object.defineProperty(exports, "subset", {
  enumerable: true,
  get: function () {
    return _subset.default;
  }
});
Object.defineProperty(exports, "sum", {
  enumerable: true,
  get: function () {
    return _sum.default;
  }
});
Object.defineProperty(exports, "superset", {
  enumerable: true,
  get: function () {
    return _superset.default;
  }
});
Object.defineProperty(exports, "thresholdFreedmanDiaconis", {
  enumerable: true,
  get: function () {
    return _freedmanDiaconis.default;
  }
});
Object.defineProperty(exports, "thresholdScott", {
  enumerable: true,
  get: function () {
    return _scott.default;
  }
});
Object.defineProperty(exports, "thresholdSturges", {
  enumerable: true,
  get: function () {
    return _sturges.default;
  }
});
Object.defineProperty(exports, "tickIncrement", {
  enumerable: true,
  get: function () {
    return _ticks.tickIncrement;
  }
});
Object.defineProperty(exports, "tickStep", {
  enumerable: true,
  get: function () {
    return _ticks.tickStep;
  }
});
Object.defineProperty(exports, "ticks", {
  enumerable: true,
  get: function () {
    return _ticks.default;
  }
});
Object.defineProperty(exports, "transpose", {
  enumerable: true,
  get: function () {
    return _transpose.default;
  }
});
Object.defineProperty(exports, "union", {
  enumerable: true,
  get: function () {
    return _union.default;
  }
});
Object.defineProperty(exports, "variance", {
  enumerable: true,
  get: function () {
    return _variance.default;
  }
});
Object.defineProperty(exports, "zip", {
  enumerable: true,
  get: function () {
    return _zip.default;
  }
});

var _bisect = _interopRequireWildcard(require("./bisect.js"));

var _ascending = _interopRequireDefault(require("./ascending.js"));

var _bisector = _interopRequireDefault(require("./bisector.js"));

var _count = _interopRequireDefault(require("./count.js"));

var _cross = _interopRequireDefault(require("./cross.js"));

var _cumsum = _interopRequireDefault(require("./cumsum.js"));

var _descending = _interopRequireDefault(require("./descending.js"));

var _deviation = _interopRequireDefault(require("./deviation.js"));

var _extent = _interopRequireDefault(require("./extent.js"));

var _fsum = require("./fsum.js");

var _group = _interopRequireWildcard(require("./group.js"));

var _groupSort = _interopRequireDefault(require("./groupSort.js"));

var _bin = _interopRequireDefault(require("./bin.js"));

var _freedmanDiaconis = _interopRequireDefault(require("./threshold/freedmanDiaconis.js"));

var _scott = _interopRequireDefault(require("./threshold/scott.js"));

var _sturges = _interopRequireDefault(require("./threshold/sturges.js"));

var _max = _interopRequireDefault(require("./max.js"));

var _maxIndex = _interopRequireDefault(require("./maxIndex.js"));

var _mean = _interopRequireDefault(require("./mean.js"));

var _median = _interopRequireDefault(require("./median.js"));

var _merge = _interopRequireDefault(require("./merge.js"));

var _min = _interopRequireDefault(require("./min.js"));

var _minIndex = _interopRequireDefault(require("./minIndex.js"));

var _mode = _interopRequireDefault(require("./mode.js"));

var _nice = _interopRequireDefault(require("./nice.js"));

var _pairs = _interopRequireDefault(require("./pairs.js"));

var _permute = _interopRequireDefault(require("./permute.js"));

var _quantile = _interopRequireWildcard(require("./quantile.js"));

var _quickselect = _interopRequireDefault(require("./quickselect.js"));

var _range = _interopRequireDefault(require("./range.js"));

var _rank = _interopRequireDefault(require("./rank.js"));

var _least = _interopRequireDefault(require("./least.js"));

var _leastIndex = _interopRequireDefault(require("./leastIndex.js"));

var _greatest = _interopRequireDefault(require("./greatest.js"));

var _greatestIndex = _interopRequireDefault(require("./greatestIndex.js"));

var _scan = _interopRequireDefault(require("./scan.js"));

var _shuffle = _interopRequireWildcard(require("./shuffle.js"));

var _sum = _interopRequireDefault(require("./sum.js"));

var _ticks = _interopRequireWildcard(require("./ticks.js"));

var _transpose = _interopRequireDefault(require("./transpose.js"));

var _variance = _interopRequireDefault(require("./variance.js"));

var _zip = _interopRequireDefault(require("./zip.js"));

var _every = _interopRequireDefault(require("./every.js"));

var _some = _interopRequireDefault(require("./some.js"));

var _filter = _interopRequireDefault(require("./filter.js"));

var _map = _interopRequireDefault(require("./map.js"));

var _reduce = _interopRequireDefault(require("./reduce.js"));

var _reverse = _interopRequireDefault(require("./reverse.js"));

var _sort = _interopRequireDefault(require("./sort.js"));

var _difference = _interopRequireDefault(require("./difference.js"));

var _disjoint = _interopRequireDefault(require("./disjoint.js"));

var _intersection = _interopRequireDefault(require("./intersection.js"));

var _subset = _interopRequireDefault(require("./subset.js"));

var _superset = _interopRequireDefault(require("./superset.js"));

var _union = _interopRequireDefault(require("./union.js"));

var _index = require("../../../lib-vendor/internmap/src/index.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-array/src/quantile.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = quantile;
exports.quantileSorted = quantileSorted;

var _max = _interopRequireDefault(require("./max.js"));

var _min = _interopRequireDefault(require("./min.js"));

var _quickselect = _interopRequireDefault(require("./quickselect.js"));

var _number = _interopRequireWildcard(require("./number.js"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function quantile(values, p, valueof) {
  values = Float64Array.from((0, _number.numbers)(values, valueof));
  if (!(n = values.length)) return;
  if ((p = +p) <= 0 || n < 2) return (0, _min.default)(values);
  if (p >= 1) return (0, _max.default)(values);
  var n,
      i = (n - 1) * p,
      i0 = Math.floor(i),
      value0 = (0, _max.default)((0, _quickselect.default)(values, i0).subarray(0, i0 + 1)),
      value1 = (0, _min.default)(values.subarray(i0 + 1));
  return value0 + (value1 - value0) * (i - i0);
}

function quantileSorted(values, p, valueof = _number.default) {
  if (!(n = values.length)) return;
  if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);
  if (p >= 1) return +valueof(values[n - 1], n - 1, values);
  var n,
      i = (n - 1) * p,
      i0 = Math.floor(i),
      value0 = +valueof(values[i0], i0, values),
      value1 = +valueof(values[i0 + 1], i0 + 1, values);
  return value0 + (value1 - value0) * (i - i0);
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-array/src/some.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = some;

function some(values, test) {
  if (typeof test !== "function") throw new TypeError("test is not a function");
  let index = -1;

  for (const value of values) {
    if (test(value, ++index, values)) {
      return true;
    }
  }

  return false;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-array/src/descending.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = descending;

function descending(a, b) {
  return a == null || b == null ? NaN : b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-array/src/array.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.slice = exports.map = void 0;
var array = Array.prototype;
var slice = array.slice;
exports.slice = slice;
var map = array.map;
exports.map = map;
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-array/src/extent.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = extent;

function extent(values, valueof) {
  let min;
  let max;

  if (valueof === undefined) {
    for (const value of values) {
      if (value != null) {
        if (min === undefined) {
          if (value >= value) min = max = value;
        } else {
          if (min > value) min = value;
          if (max < value) max = value;
        }
      }
    }
  } else {
    let index = -1;

    for (let value of values) {
      if ((value = valueof(value, ++index, values)) != null) {
        if (min === undefined) {
          if (value >= value) min = max = value;
        } else {
          if (min > value) min = value;
          if (max < value) max = value;
        }
      }
    }
  }

  return [min, max];
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-array/src/intersection.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = intersection;

var _index = require("../../../lib-vendor/internmap/src/index.js");

function intersection(values, ...others) {
  values = new _index.InternSet(values);
  others = others.map(set);

  out: for (const value of values) {
    for (const other of others) {
      if (!other.has(value)) {
        values.delete(value);
        continue out;
      }
    }
  }

  return values;
}

function set(values) {
  return values instanceof _index.InternSet ? values : new _index.InternSet(values);
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-array/src/sum.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = sum;

function sum(values, valueof) {
  let sum = 0;

  if (valueof === undefined) {
    for (let value of values) {
      if (value = +value) {
        sum += value;
      }
    }
  } else {
    let index = -1;

    for (let value of values) {
      if (value = +valueof(value, ++index, values)) {
        sum += value;
      }
    }
  }

  return sum;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-array/src/cumsum.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = cumsum;

function cumsum(values, valueof) {
  var sum = 0,
      index = 0;
  return Float64Array.from(values, valueof === undefined ? v => sum += +v || 0 : v => sum += +valueof(v, index++, values) || 0);
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-array/src/threshold/scott.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = thresholdScott;

var _count = _interopRequireDefault(require("../count.js"));

var _deviation = _interopRequireDefault(require("../deviation.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function thresholdScott(values, min, max) {
  return Math.ceil((max - min) * Math.cbrt((0, _count.default)(values)) / (3.49 * (0, _deviation.default)(values)));
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-array/src/threshold/freedmanDiaconis.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = thresholdFreedmanDiaconis;

var _count = _interopRequireDefault(require("../count.js"));

var _quantile = _interopRequireDefault(require("../quantile.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function thresholdFreedmanDiaconis(values, min, max) {
  return Math.ceil((max - min) / (2 * ((0, _quantile.default)(values, 0.75) - (0, _quantile.default)(values, 0.25)) * Math.pow((0, _count.default)(values), -1 / 3)));
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-array/src/threshold/sturges.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = thresholdSturges;

var _count = _interopRequireDefault(require("../count.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function thresholdSturges(values) {
  return Math.ceil(Math.log((0, _count.default)(values)) / Math.LN2) + 1;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-array/src/leastIndex.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = leastIndex;

var _ascending = _interopRequireDefault(require("./ascending.js"));

var _minIndex = _interopRequireDefault(require("./minIndex.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function leastIndex(values, compare = _ascending.default) {
  if (compare.length === 1) return (0, _minIndex.default)(values, compare);
  let minValue;
  let min = -1;
  let index = -1;

  for (const value of values) {
    ++index;

    if (min < 0 ? compare(value, value) === 0 : compare(value, minValue) < 0) {
      minValue = value;
      min = index;
    }
  }

  return min;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-array/src/bisector.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = bisector;

var _ascending = _interopRequireDefault(require("./ascending.js"));

var _descending = _interopRequireDefault(require("./descending.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function bisector(f) {
  let compare1, compare2, delta; // If an accessor is specified, promote it to a comparator. In this case we
  // can test whether the search value is (self-) comparable. We can’t do this
  // for a comparator (except for specific, known comparators) because we can’t
  // tell if the comparator is symmetric, and an asymmetric comparator can’t be
  // used to test whether a single value is comparable.

  if (f.length !== 2) {
    compare1 = _ascending.default;

    compare2 = (d, x) => (0, _ascending.default)(f(d), x);

    delta = (d, x) => f(d) - x;
  } else {
    compare1 = f === _ascending.default || f === _descending.default ? f : zero;
    compare2 = f;
    delta = f;
  }

  function left(a, x, lo = 0, hi = a.length) {
    if (lo < hi) {
      if (compare1(x, x) !== 0) return hi;

      do {
        const mid = lo + hi >>> 1;
        if (compare2(a[mid], x) < 0) lo = mid + 1;else hi = mid;
      } while (lo < hi);
    }

    return lo;
  }

  function right(a, x, lo = 0, hi = a.length) {
    if (lo < hi) {
      if (compare1(x, x) !== 0) return hi;

      do {
        const mid = lo + hi >>> 1;
        if (compare2(a[mid], x) <= 0) lo = mid + 1;else hi = mid;
      } while (lo < hi);
    }

    return lo;
  }

  function center(a, x, lo = 0, hi = a.length) {
    const i = left(a, x, lo, hi - 1);
    return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i;
  }

  return {
    left,
    center,
    right
  };
}

function zero() {
  return 0;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-array/src/ascending.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ascending;

function ascending(a, b) {
  return a == null || b == null ? NaN : a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-array/src/constant.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = constant;

function constant(x) {
  return () => x;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-array/src/count.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = count;

function count(values, valueof) {
  let count = 0;

  if (valueof === undefined) {
    for (let value of values) {
      if (value != null && (value = +value) >= value) {
        ++count;
      }
    }
  } else {
    let index = -1;

    for (let value of values) {
      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
        ++count;
      }
    }
  }

  return count;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-array/src/disjoint.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = disjoint;

var _index = require("../../../lib-vendor/internmap/src/index.js");

function disjoint(values, other) {
  const iterator = other[Symbol.iterator](),
        set = new _index.InternSet();

  for (const v of values) {
    if (set.has(v)) return false;
    let value, done;

    while (({
      value,
      done
    } = iterator.next())) {
      if (done) break;
      if (Object.is(v, value)) return false;
      set.add(value);
    }
  }

  return true;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-array/src/union.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = union;

var _index = require("../../../lib-vendor/internmap/src/index.js");

function union(...others) {
  const set = new _index.InternSet();

  for (const other of others) {
    for (const o of other) {
      set.add(o);
    }
  }

  return set;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-array/src/minIndex.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = minIndex;

function minIndex(values, valueof) {
  let min;
  let minIndex = -1;
  let index = -1;

  if (valueof === undefined) {
    for (const value of values) {
      ++index;

      if (value != null && (min > value || min === undefined && value >= value)) {
        min = value, minIndex = index;
      }
    }
  } else {
    for (let value of values) {
      if ((value = valueof(value, ++index, values)) != null && (min > value || min === undefined && value >= value)) {
        min = value, minIndex = index;
      }
    }
  }

  return minIndex;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-array/src/identity.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = identity;

function identity(x) {
  return x;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-array/src/rank.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = rank;

var _ascending = _interopRequireDefault(require("./ascending.js"));

var _sort = require("./sort.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function rank(values, valueof = _ascending.default) {
  if (typeof values[Symbol.iterator] !== "function") throw new TypeError("values is not iterable");
  let V = Array.from(values);
  const R = new Float64Array(V.length);
  if (valueof.length !== 2) V = V.map(valueof), valueof = _ascending.default;

  const compareIndex = (i, j) => valueof(V[i], V[j]);

  let k, r;
  Uint32Array.from(V, (_, i) => i).sort(valueof === _ascending.default ? (i, j) => (0, _sort.ascendingDefined)(V[i], V[j]) : (0, _sort.compareDefined)(compareIndex)).forEach((j, i) => {
    const c = compareIndex(j, k === undefined ? j : k);

    if (c >= 0) {
      if (k === undefined || c > 0) k = j, r = i;
      R[j] = r;
    } else {
      R[j] = NaN;
    }
  });
  return R;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-array/src/transpose.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = transpose;

var _min = _interopRequireDefault(require("./min.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function transpose(matrix) {
  if (!(n = matrix.length)) return [];

  for (var i = -1, m = (0, _min.default)(matrix, length), transpose = new Array(m); ++i < m;) {
    for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {
      row[j] = matrix[j][i];
    }
  }

  return transpose;
}

function length(d) {
  return d.length;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-array/src/subset.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = subset;

var _superset = _interopRequireDefault(require("./superset.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function subset(values, other) {
  return (0, _superset.default)(other, values);
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-array/src/groupSort.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = groupSort;

var _ascending = _interopRequireDefault(require("./ascending.js"));

var _group = _interopRequireWildcard(require("./group.js"));

var _sort = _interopRequireDefault(require("./sort.js"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function groupSort(values, reduce, key) {
  return (reduce.length !== 2 ? (0, _sort.default)((0, _group.rollup)(values, reduce, key), ([ak, av], [bk, bv]) => (0, _ascending.default)(av, bv) || (0, _ascending.default)(ak, bk)) : (0, _sort.default)((0, _group.default)(values, key), ([ak, av], [bk, bv]) => reduce(av, bv) || (0, _ascending.default)(ak, bk))).map(([key]) => key);
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-array/src/zip.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = zip;

var _transpose = _interopRequireDefault(require("./transpose.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function zip() {
  return (0, _transpose.default)(arguments);
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-array/src/greatest.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = greatest;

var _ascending = _interopRequireDefault(require("./ascending.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function greatest(values, compare = _ascending.default) {
  let max;
  let defined = false;

  if (compare.length === 1) {
    let maxValue;

    for (const element of values) {
      const value = compare(element);

      if (defined ? (0, _ascending.default)(value, maxValue) > 0 : (0, _ascending.default)(value, value) === 0) {
        max = element;
        maxValue = value;
        defined = true;
      }
    }
  } else {
    for (const value of values) {
      if (defined ? compare(value, max) > 0 : compare(value, value) === 0) {
        max = value;
        defined = true;
      }
    }
  }

  return max;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-array/src/mode.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = mode;

var _index = require("../../../lib-vendor/internmap/src/index.js");

function mode(values, valueof) {
  const counts = new _index.InternMap();

  if (valueof === undefined) {
    for (let value of values) {
      if (value != null && value >= value) {
        counts.set(value, (counts.get(value) || 0) + 1);
      }
    }
  } else {
    let index = -1;

    for (let value of values) {
      if ((value = valueof(value, ++index, values)) != null && value >= value) {
        counts.set(value, (counts.get(value) || 0) + 1);
      }
    }
  }

  let modeValue;
  let modeCount = 0;

  for (const [value, count] of counts) {
    if (count > modeCount) {
      modeCount = count;
      modeValue = value;
    }
  }

  return modeValue;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-array/src/shuffle.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.shuffler = shuffler;

var _default = shuffler(Math.random);

exports.default = _default;

function shuffler(random) {
  return function shuffle(array, i0 = 0, i1 = array.length) {
    let m = i1 - (i0 = +i0);

    while (m) {
      const i = random() * m-- | 0,
            t = array[m + i0];
      array[m + i0] = array[i + i0];
      array[i + i0] = t;
    }

    return array;
  };
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-array/src/mean.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = mean;

function mean(values, valueof) {
  let count = 0;
  let sum = 0;

  if (valueof === undefined) {
    for (let value of values) {
      if (value != null && (value = +value) >= value) {
        ++count, sum += value;
      }
    }
  } else {
    let index = -1;

    for (let value of values) {
      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
        ++count, sum += value;
      }
    }
  }

  if (count) return sum / count;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-array/src/min.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = min;

function min(values, valueof) {
  let min;

  if (valueof === undefined) {
    for (const value of values) {
      if (value != null && (min > value || min === undefined && value >= value)) {
        min = value;
      }
    }
  } else {
    let index = -1;

    for (let value of values) {
      if ((value = valueof(value, ++index, values)) != null && (min > value || min === undefined && value >= value)) {
        min = value;
      }
    }
  }

  return min;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-array/src/quickselect.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = quickselect;

var _sort = require("./sort.js");

// Based on https://github.com/mourner/quickselect
// ISC license, Copyright 2018 Vladimir Agafonkin.
function quickselect(array, k, left = 0, right = array.length - 1, compare) {
  compare = compare === undefined ? _sort.ascendingDefined : (0, _sort.compareDefined)(compare);

  while (right > left) {
    if (right - left > 600) {
      const n = right - left + 1;
      const m = k - left + 1;
      const z = Math.log(n);
      const s = 0.5 * Math.exp(2 * z / 3);
      const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);
      const newLeft = Math.max(left, Math.floor(k - m * s / n + sd));
      const newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));
      quickselect(array, k, newLeft, newRight, compare);
    }

    const t = array[k];
    let i = left;
    let j = right;
    swap(array, left, k);
    if (compare(array[right], t) > 0) swap(array, left, right);

    while (i < j) {
      swap(array, i, j), ++i, --j;

      while (compare(array[i], t) < 0) ++i;

      while (compare(array[j], t) > 0) --j;
    }

    if (compare(array[left], t) === 0) swap(array, left, j);else ++j, swap(array, j, right);
    if (j <= k) left = j + 1;
    if (k <= j) right = j - 1;
  }

  return array;
}

function swap(array, i, j) {
  const t = array[i];
  array[i] = array[j];
  array[j] = t;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-array/src/map.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = map;

function map(values, mapper) {
  if (typeof values[Symbol.iterator] !== "function") throw new TypeError("values is not iterable");
  if (typeof mapper !== "function") throw new TypeError("mapper is not a function");
  return Array.from(values, (value, index) => mapper(value, index, values));
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-array/src/scan.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = scan;

var _leastIndex = _interopRequireDefault(require("./leastIndex.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function scan(values, compare) {
  const index = (0, _leastIndex.default)(values, compare);
  return index < 0 ? undefined : index;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-array/src/filter.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = filter;

function filter(values, test) {
  if (typeof test !== "function") throw new TypeError("test is not a function");
  const array = [];
  let index = -1;

  for (const value of values) {
    if (test(value, ++index, values)) {
      array.push(value);
    }
  }

  return array;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-array/src/nice.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = nice;

var _ticks = require("./ticks.js");

function nice(start, stop, count) {
  let prestep;

  while (true) {
    const step = (0, _ticks.tickIncrement)(start, stop, count);

    if (step === prestep || step === 0 || !isFinite(step)) {
      return [start, stop];
    } else if (step > 0) {
      start = Math.floor(start / step) * step;
      stop = Math.ceil(stop / step) * step;
    } else if (step < 0) {
      start = Math.ceil(start * step) / step;
      stop = Math.floor(stop * step) / step;
    }

    prestep = step;
  }
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-array/src/group.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = group;
exports.flatGroup = flatGroup;
exports.flatRollup = flatRollup;
exports.groups = groups;
exports.index = index;
exports.indexes = indexes;
exports.rollup = rollup;
exports.rollups = rollups;

var _index = require("../../../lib-vendor/internmap/src/index.js");

var _identity = _interopRequireDefault(require("./identity.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function group(values, ...keys) {
  return nest(values, _identity.default, _identity.default, keys);
}

function groups(values, ...keys) {
  return nest(values, Array.from, _identity.default, keys);
}

function flatten(groups, keys) {
  for (let i = 1, n = keys.length; i < n; ++i) {
    groups = groups.flatMap(g => g.pop().map(([key, value]) => [...g, key, value]));
  }

  return groups;
}

function flatGroup(values, ...keys) {
  return flatten(groups(values, ...keys), keys);
}

function flatRollup(values, reduce, ...keys) {
  return flatten(rollups(values, reduce, ...keys), keys);
}

function rollup(values, reduce, ...keys) {
  return nest(values, _identity.default, reduce, keys);
}

function rollups(values, reduce, ...keys) {
  return nest(values, Array.from, reduce, keys);
}

function index(values, ...keys) {
  return nest(values, _identity.default, unique, keys);
}

function indexes(values, ...keys) {
  return nest(values, Array.from, unique, keys);
}

function unique(values) {
  if (values.length !== 1) throw new Error("duplicate key");
  return values[0];
}

function nest(values, map, reduce, keys) {
  return function regroup(values, i) {
    if (i >= keys.length) return reduce(values);
    const groups = new _index.InternMap();
    const keyof = keys[i++];
    let index = -1;

    for (const value of values) {
      const key = keyof(value, ++index, values);
      const group = groups.get(key);
      if (group) group.push(value);else groups.set(key, [value]);
    }

    for (const [key, values] of groups) {
      groups.set(key, regroup(values, i));
    }

    return map(groups);
  }(values, 0);
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-array/src/median.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = median;

var _quantile = _interopRequireDefault(require("./quantile.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function median(values, valueof) {
  return (0, _quantile.default)(values, 0.5, valueof);
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-scale/src/number.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = number;

function number(x) {
  return +x;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-scale/src/radial.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = radial;

var _continuous = _interopRequireDefault(require("./continuous.js"));

var _init = require("./init.js");

var _linear = require("./linear.js");

var _number = _interopRequireDefault(require("./number.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function square(x) {
  return Math.sign(x) * x * x;
}

function unsquare(x) {
  return Math.sign(x) * Math.sqrt(Math.abs(x));
}

function radial() {
  var squared = (0, _continuous.default)(),
      range = [0, 1],
      round = false,
      unknown;

  function scale(x) {
    var y = unsquare(squared(x));
    return isNaN(y) ? unknown : round ? Math.round(y) : y;
  }

  scale.invert = function (y) {
    return squared.invert(square(y));
  };

  scale.domain = function (_) {
    return arguments.length ? (squared.domain(_), scale) : squared.domain();
  };

  scale.range = function (_) {
    return arguments.length ? (squared.range((range = Array.from(_, _number.default)).map(square)), scale) : range.slice();
  };

  scale.rangeRound = function (_) {
    return scale.range(_).round(true);
  };

  scale.round = function (_) {
    return arguments.length ? (round = !!_, scale) : round;
  };

  scale.clamp = function (_) {
    return arguments.length ? (squared.clamp(_), scale) : squared.clamp();
  };

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  scale.copy = function () {
    return radial(squared.domain(), range).round(round).clamp(squared.clamp()).unknown(unknown);
  };

  _init.initRange.apply(scale, arguments);

  return (0, _linear.linearish)(scale);
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-scale/src/linear.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = linear;
exports.linearish = linearish;

var _index = require("../../../lib-vendor/d3-array/src/index.js");

var _continuous = _interopRequireWildcard(require("./continuous.js"));

var _init = require("./init.js");

var _tickFormat = _interopRequireDefault(require("./tickFormat.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function linearish(scale) {
  var domain = scale.domain;

  scale.ticks = function (count) {
    var d = domain();
    return (0, _index.ticks)(d[0], d[d.length - 1], count == null ? 10 : count);
  };

  scale.tickFormat = function (count, specifier) {
    var d = domain();
    return (0, _tickFormat.default)(d[0], d[d.length - 1], count == null ? 10 : count, specifier);
  };

  scale.nice = function (count) {
    if (count == null) count = 10;
    var d = domain();
    var i0 = 0;
    var i1 = d.length - 1;
    var start = d[i0];
    var stop = d[i1];
    var prestep;
    var step;
    var maxIter = 10;

    if (stop < start) {
      step = start, start = stop, stop = step;
      step = i0, i0 = i1, i1 = step;
    }

    while (maxIter-- > 0) {
      step = (0, _index.tickIncrement)(start, stop, count);

      if (step === prestep) {
        d[i0] = start;
        d[i1] = stop;
        return domain(d);
      } else if (step > 0) {
        start = Math.floor(start / step) * step;
        stop = Math.ceil(stop / step) * step;
      } else if (step < 0) {
        start = Math.ceil(start * step) / step;
        stop = Math.floor(stop * step) / step;
      } else {
        break;
      }

      prestep = step;
    }

    return scale;
  };

  return scale;
}

function linear() {
  var scale = (0, _continuous.default)();

  scale.copy = function () {
    return (0, _continuous.copy)(scale, linear());
  };

  _init.initRange.apply(scale, arguments);

  return linearish(scale);
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-scale/src/diverging.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = diverging;
exports.divergingLog = divergingLog;
exports.divergingPow = divergingPow;
exports.divergingSqrt = divergingSqrt;
exports.divergingSymlog = divergingSymlog;

var _index = require("../../../lib-vendor/d3-interpolate/src/index.js");

var _continuous = require("./continuous.js");

var _init = require("./init.js");

var _linear = require("./linear.js");

var _log = require("./log.js");

var _sequential = require("./sequential.js");

var _symlog = require("./symlog.js");

var _pow = require("./pow.js");

function transformer() {
  var x0 = 0,
      x1 = 0.5,
      x2 = 1,
      s = 1,
      t0,
      t1,
      t2,
      k10,
      k21,
      interpolator = _continuous.identity,
      transform,
      clamp = false,
      unknown;

  function scale(x) {
    return isNaN(x = +x) ? unknown : (x = 0.5 + ((x = +transform(x)) - t1) * (s * x < s * t1 ? k10 : k21), interpolator(clamp ? Math.max(0, Math.min(1, x)) : x));
  }

  scale.domain = function (_) {
    return arguments.length ? ([x0, x1, x2] = _, t0 = transform(x0 = +x0), t1 = transform(x1 = +x1), t2 = transform(x2 = +x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), s = t1 < t0 ? -1 : 1, scale) : [x0, x1, x2];
  };

  scale.clamp = function (_) {
    return arguments.length ? (clamp = !!_, scale) : clamp;
  };

  scale.interpolator = function (_) {
    return arguments.length ? (interpolator = _, scale) : interpolator;
  };

  function range(interpolate) {
    return function (_) {
      var r0, r1, r2;
      return arguments.length ? ([r0, r1, r2] = _, interpolator = (0, _index.piecewise)(interpolate, [r0, r1, r2]), scale) : [interpolator(0), interpolator(0.5), interpolator(1)];
    };
  }

  scale.range = range(_index.interpolate);
  scale.rangeRound = range(_index.interpolateRound);

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  return function (t) {
    transform = t, t0 = t(x0), t1 = t(x1), t2 = t(x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), s = t1 < t0 ? -1 : 1;
    return scale;
  };
}

function diverging() {
  var scale = (0, _linear.linearish)(transformer()(_continuous.identity));

  scale.copy = function () {
    return (0, _sequential.copy)(scale, diverging());
  };

  return _init.initInterpolator.apply(scale, arguments);
}

function divergingLog() {
  var scale = (0, _log.loggish)(transformer()).domain([0.1, 1, 10]);

  scale.copy = function () {
    return (0, _sequential.copy)(scale, divergingLog()).base(scale.base());
  };

  return _init.initInterpolator.apply(scale, arguments);
}

function divergingSymlog() {
  var scale = (0, _symlog.symlogish)(transformer());

  scale.copy = function () {
    return (0, _sequential.copy)(scale, divergingSymlog()).constant(scale.constant());
  };

  return _init.initInterpolator.apply(scale, arguments);
}

function divergingPow() {
  var scale = (0, _pow.powish)(transformer());

  scale.copy = function () {
    return (0, _sequential.copy)(scale, divergingPow()).exponent(scale.exponent());
  };

  return _init.initInterpolator.apply(scale, arguments);
}

function divergingSqrt() {
  return divergingPow.apply(null, arguments).exponent(0.5);
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-scale/src/pow.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = pow;
exports.powish = powish;
exports.sqrt = sqrt;

var _linear = require("./linear.js");

var _continuous = require("./continuous.js");

var _init = require("./init.js");

function transformPow(exponent) {
  return function (x) {
    return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
  };
}

function transformSqrt(x) {
  return x < 0 ? -Math.sqrt(-x) : Math.sqrt(x);
}

function transformSquare(x) {
  return x < 0 ? -x * x : x * x;
}

function powish(transform) {
  var scale = transform(_continuous.identity, _continuous.identity),
      exponent = 1;

  function rescale() {
    return exponent === 1 ? transform(_continuous.identity, _continuous.identity) : exponent === 0.5 ? transform(transformSqrt, transformSquare) : transform(transformPow(exponent), transformPow(1 / exponent));
  }

  scale.exponent = function (_) {
    return arguments.length ? (exponent = +_, rescale()) : exponent;
  };

  return (0, _linear.linearish)(scale);
}

function pow() {
  var scale = powish((0, _continuous.transformer)());

  scale.copy = function () {
    return (0, _continuous.copy)(scale, pow()).exponent(scale.exponent());
  };

  _init.initRange.apply(scale, arguments);

  return scale;
}

function sqrt() {
  return pow.apply(null, arguments).exponent(0.5);
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-scale/src/band.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = band;
exports.point = point;

var _index = require("../../../lib-vendor/d3-array/src/index.js");

var _init = require("./init.js");

var _ordinal = _interopRequireDefault(require("./ordinal.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function band() {
  var scale = (0, _ordinal.default)().unknown(undefined),
      domain = scale.domain,
      ordinalRange = scale.range,
      r0 = 0,
      r1 = 1,
      step,
      bandwidth,
      round = false,
      paddingInner = 0,
      paddingOuter = 0,
      align = 0.5;
  delete scale.unknown;

  function rescale() {
    var n = domain().length,
        reverse = r1 < r0,
        start = reverse ? r1 : r0,
        stop = reverse ? r0 : r1;
    step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);
    if (round) step = Math.floor(step);
    start += (stop - start - step * (n - paddingInner)) * align;
    bandwidth = step * (1 - paddingInner);
    if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);
    var values = (0, _index.range)(n).map(function (i) {
      return start + step * i;
    });
    return ordinalRange(reverse ? values.reverse() : values);
  }

  scale.domain = function (_) {
    return arguments.length ? (domain(_), rescale()) : domain();
  };

  scale.range = function (_) {
    return arguments.length ? ([r0, r1] = _, r0 = +r0, r1 = +r1, rescale()) : [r0, r1];
  };

  scale.rangeRound = function (_) {
    return [r0, r1] = _, r0 = +r0, r1 = +r1, round = true, rescale();
  };

  scale.bandwidth = function () {
    return bandwidth;
  };

  scale.step = function () {
    return step;
  };

  scale.round = function (_) {
    return arguments.length ? (round = !!_, rescale()) : round;
  };

  scale.padding = function (_) {
    return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_), rescale()) : paddingInner;
  };

  scale.paddingInner = function (_) {
    return arguments.length ? (paddingInner = Math.min(1, _), rescale()) : paddingInner;
  };

  scale.paddingOuter = function (_) {
    return arguments.length ? (paddingOuter = +_, rescale()) : paddingOuter;
  };

  scale.align = function (_) {
    return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;
  };

  scale.copy = function () {
    return band(domain(), [r0, r1]).round(round).paddingInner(paddingInner).paddingOuter(paddingOuter).align(align);
  };

  return _init.initRange.apply(rescale(), arguments);
}

function pointish(scale) {
  var copy = scale.copy;
  scale.padding = scale.paddingOuter;
  delete scale.paddingInner;
  delete scale.paddingOuter;

  scale.copy = function () {
    return pointish(copy());
  };

  return scale;
}

function point() {
  return pointish(band.apply(null, arguments).paddingInner(1));
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-scale/src/time.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.calendar = calendar;
exports.default = time;

var _index = require("../../../lib-vendor/d3-time/src/index.js");

var _index2 = require("../../../lib-vendor/d3-time-format/src/index.js");

var _continuous = _interopRequireWildcard(require("./continuous.js"));

var _init = require("./init.js");

var _nice = _interopRequireDefault(require("./nice.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function date(t) {
  return new Date(t);
}

function number(t) {
  return t instanceof Date ? +t : +new Date(+t);
}

function calendar(ticks, tickInterval, year, month, week, day, hour, minute, second, format) {
  var scale = (0, _continuous.default)(),
      invert = scale.invert,
      domain = scale.domain;
  var formatMillisecond = format(".%L"),
      formatSecond = format(":%S"),
      formatMinute = format("%I:%M"),
      formatHour = format("%I %p"),
      formatDay = format("%a %d"),
      formatWeek = format("%b %d"),
      formatMonth = format("%B"),
      formatYear = format("%Y");

  function tickFormat(date) {
    return (second(date) < date ? formatMillisecond : minute(date) < date ? formatSecond : hour(date) < date ? formatMinute : day(date) < date ? formatHour : month(date) < date ? week(date) < date ? formatDay : formatWeek : year(date) < date ? formatMonth : formatYear)(date);
  }

  scale.invert = function (y) {
    return new Date(invert(y));
  };

  scale.domain = function (_) {
    return arguments.length ? domain(Array.from(_, number)) : domain().map(date);
  };

  scale.ticks = function (interval) {
    var d = domain();
    return ticks(d[0], d[d.length - 1], interval == null ? 10 : interval);
  };

  scale.tickFormat = function (count, specifier) {
    return specifier == null ? tickFormat : format(specifier);
  };

  scale.nice = function (interval) {
    var d = domain();
    if (!interval || typeof interval.range !== "function") interval = tickInterval(d[0], d[d.length - 1], interval == null ? 10 : interval);
    return interval ? domain((0, _nice.default)(d, interval)) : scale;
  };

  scale.copy = function () {
    return (0, _continuous.copy)(scale, calendar(ticks, tickInterval, year, month, week, day, hour, minute, second, format));
  };

  return scale;
}

function time() {
  return _init.initRange.apply(calendar(_index.timeTicks, _index.timeTickInterval, _index.timeYear, _index.timeMonth, _index.timeWeek, _index.timeDay, _index.timeHour, _index.timeMinute, _index.timeSecond, _index2.timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]), arguments);
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-scale/src/quantize.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = quantize;

var _index = require("../../../lib-vendor/d3-array/src/index.js");

var _linear = require("./linear.js");

var _init = require("./init.js");

function quantize() {
  var x0 = 0,
      x1 = 1,
      n = 1,
      domain = [0.5],
      range = [0, 1],
      unknown;

  function scale(x) {
    return x != null && x <= x ? range[(0, _index.bisect)(domain, x, 0, n)] : unknown;
  }

  function rescale() {
    var i = -1;
    domain = new Array(n);

    while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);

    return scale;
  }

  scale.domain = function (_) {
    return arguments.length ? ([x0, x1] = _, x0 = +x0, x1 = +x1, rescale()) : [x0, x1];
  };

  scale.range = function (_) {
    return arguments.length ? (n = (range = Array.from(_)).length - 1, rescale()) : range.slice();
  };

  scale.invertExtent = function (y) {
    var i = range.indexOf(y);
    return i < 0 ? [NaN, NaN] : i < 1 ? [x0, domain[0]] : i >= n ? [domain[n - 1], x1] : [domain[i - 1], domain[i]];
  };

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : scale;
  };

  scale.thresholds = function () {
    return domain.slice();
  };

  scale.copy = function () {
    return quantize().domain([x0, x1]).range(range).unknown(unknown);
  };

  return _init.initRange.apply((0, _linear.linearish)(scale), arguments);
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-scale/src/log.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = log;
exports.loggish = loggish;

var _index = require("../../../lib-vendor/d3-array/src/index.js");

var _index2 = require("../../../lib-vendor/d3-format/src/index.js");

var _nice = _interopRequireDefault(require("./nice.js"));

var _continuous = require("./continuous.js");

var _init = require("./init.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function transformLog(x) {
  return Math.log(x);
}

function transformExp(x) {
  return Math.exp(x);
}

function transformLogn(x) {
  return -Math.log(-x);
}

function transformExpn(x) {
  return -Math.exp(-x);
}

function pow10(x) {
  return isFinite(x) ? +("1e" + x) : x < 0 ? 0 : x;
}

function powp(base) {
  return base === 10 ? pow10 : base === Math.E ? Math.exp : x => Math.pow(base, x);
}

function logp(base) {
  return base === Math.E ? Math.log : base === 10 && Math.log10 || base === 2 && Math.log2 || (base = Math.log(base), x => Math.log(x) / base);
}

function reflect(f) {
  return (x, k) => -f(-x, k);
}

function loggish(transform) {
  const scale = transform(transformLog, transformExp);
  const domain = scale.domain;
  let base = 10;
  let logs;
  let pows;

  function rescale() {
    logs = logp(base), pows = powp(base);

    if (domain()[0] < 0) {
      logs = reflect(logs), pows = reflect(pows);
      transform(transformLogn, transformExpn);
    } else {
      transform(transformLog, transformExp);
    }

    return scale;
  }

  scale.base = function (_) {
    return arguments.length ? (base = +_, rescale()) : base;
  };

  scale.domain = function (_) {
    return arguments.length ? (domain(_), rescale()) : domain();
  };

  scale.ticks = count => {
    const d = domain();
    let u = d[0];
    let v = d[d.length - 1];
    const r = v < u;
    if (r) [u, v] = [v, u];
    let i = logs(u);
    let j = logs(v);
    let k;
    let t;
    const n = count == null ? 10 : +count;
    let z = [];

    if (!(base % 1) && j - i < n) {
      i = Math.floor(i), j = Math.ceil(j);
      if (u > 0) for (; i <= j; ++i) {
        for (k = 1; k < base; ++k) {
          t = i < 0 ? k / pows(-i) : k * pows(i);
          if (t < u) continue;
          if (t > v) break;
          z.push(t);
        }
      } else for (; i <= j; ++i) {
        for (k = base - 1; k >= 1; --k) {
          t = i > 0 ? k / pows(-i) : k * pows(i);
          if (t < u) continue;
          if (t > v) break;
          z.push(t);
        }
      }
      if (z.length * 2 < n) z = (0, _index.ticks)(u, v, n);
    } else {
      z = (0, _index.ticks)(i, j, Math.min(j - i, n)).map(pows);
    }

    return r ? z.reverse() : z;
  };

  scale.tickFormat = (count, specifier) => {
    if (count == null) count = 10;
    if (specifier == null) specifier = base === 10 ? "s" : ",";

    if (typeof specifier !== "function") {
      if (!(base % 1) && (specifier = (0, _index2.formatSpecifier)(specifier)).precision == null) specifier.trim = true;
      specifier = (0, _index2.format)(specifier);
    }

    if (count === Infinity) return specifier;
    const k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?

    return d => {
      let i = d / pows(Math.round(logs(d)));
      if (i * base < base - 0.5) i *= base;
      return i <= k ? specifier(d) : "";
    };
  };

  scale.nice = () => {
    return domain((0, _nice.default)(domain(), {
      floor: x => pows(Math.floor(logs(x))),
      ceil: x => pows(Math.ceil(logs(x)))
    }));
  };

  return scale;
}

function log() {
  const scale = loggish((0, _continuous.transformer)()).domain([1, 10]);

  scale.copy = () => (0, _continuous.copy)(scale, log()).base(scale.base());

  _init.initRange.apply(scale, arguments);

  return scale;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-scale/src/index.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "scaleBand", {
  enumerable: true,
  get: function () {
    return _band.default;
  }
});
Object.defineProperty(exports, "scaleDiverging", {
  enumerable: true,
  get: function () {
    return _diverging.default;
  }
});
Object.defineProperty(exports, "scaleDivergingLog", {
  enumerable: true,
  get: function () {
    return _diverging.divergingLog;
  }
});
Object.defineProperty(exports, "scaleDivergingPow", {
  enumerable: true,
  get: function () {
    return _diverging.divergingPow;
  }
});
Object.defineProperty(exports, "scaleDivergingSqrt", {
  enumerable: true,
  get: function () {
    return _diverging.divergingSqrt;
  }
});
Object.defineProperty(exports, "scaleDivergingSymlog", {
  enumerable: true,
  get: function () {
    return _diverging.divergingSymlog;
  }
});
Object.defineProperty(exports, "scaleIdentity", {
  enumerable: true,
  get: function () {
    return _identity.default;
  }
});
Object.defineProperty(exports, "scaleImplicit", {
  enumerable: true,
  get: function () {
    return _ordinal.implicit;
  }
});
Object.defineProperty(exports, "scaleLinear", {
  enumerable: true,
  get: function () {
    return _linear.default;
  }
});
Object.defineProperty(exports, "scaleLog", {
  enumerable: true,
  get: function () {
    return _log.default;
  }
});
Object.defineProperty(exports, "scaleOrdinal", {
  enumerable: true,
  get: function () {
    return _ordinal.default;
  }
});
Object.defineProperty(exports, "scalePoint", {
  enumerable: true,
  get: function () {
    return _band.point;
  }
});
Object.defineProperty(exports, "scalePow", {
  enumerable: true,
  get: function () {
    return _pow.default;
  }
});
Object.defineProperty(exports, "scaleQuantile", {
  enumerable: true,
  get: function () {
    return _quantile.default;
  }
});
Object.defineProperty(exports, "scaleQuantize", {
  enumerable: true,
  get: function () {
    return _quantize.default;
  }
});
Object.defineProperty(exports, "scaleRadial", {
  enumerable: true,
  get: function () {
    return _radial.default;
  }
});
Object.defineProperty(exports, "scaleSequential", {
  enumerable: true,
  get: function () {
    return _sequential.default;
  }
});
Object.defineProperty(exports, "scaleSequentialLog", {
  enumerable: true,
  get: function () {
    return _sequential.sequentialLog;
  }
});
Object.defineProperty(exports, "scaleSequentialPow", {
  enumerable: true,
  get: function () {
    return _sequential.sequentialPow;
  }
});
Object.defineProperty(exports, "scaleSequentialQuantile", {
  enumerable: true,
  get: function () {
    return _sequentialQuantile.default;
  }
});
Object.defineProperty(exports, "scaleSequentialSqrt", {
  enumerable: true,
  get: function () {
    return _sequential.sequentialSqrt;
  }
});
Object.defineProperty(exports, "scaleSequentialSymlog", {
  enumerable: true,
  get: function () {
    return _sequential.sequentialSymlog;
  }
});
Object.defineProperty(exports, "scaleSqrt", {
  enumerable: true,
  get: function () {
    return _pow.sqrt;
  }
});
Object.defineProperty(exports, "scaleSymlog", {
  enumerable: true,
  get: function () {
    return _symlog.default;
  }
});
Object.defineProperty(exports, "scaleThreshold", {
  enumerable: true,
  get: function () {
    return _threshold.default;
  }
});
Object.defineProperty(exports, "scaleTime", {
  enumerable: true,
  get: function () {
    return _time.default;
  }
});
Object.defineProperty(exports, "scaleUtc", {
  enumerable: true,
  get: function () {
    return _utcTime.default;
  }
});
Object.defineProperty(exports, "tickFormat", {
  enumerable: true,
  get: function () {
    return _tickFormat.default;
  }
});

var _band = _interopRequireWildcard(require("./band.js"));

var _identity = _interopRequireDefault(require("./identity.js"));

var _linear = _interopRequireDefault(require("./linear.js"));

var _log = _interopRequireDefault(require("./log.js"));

var _symlog = _interopRequireDefault(require("./symlog.js"));

var _ordinal = _interopRequireWildcard(require("./ordinal.js"));

var _pow = _interopRequireWildcard(require("./pow.js"));

var _radial = _interopRequireDefault(require("./radial.js"));

var _quantile = _interopRequireDefault(require("./quantile.js"));

var _quantize = _interopRequireDefault(require("./quantize.js"));

var _threshold = _interopRequireDefault(require("./threshold.js"));

var _time = _interopRequireDefault(require("./time.js"));

var _utcTime = _interopRequireDefault(require("./utcTime.js"));

var _sequential = _interopRequireWildcard(require("./sequential.js"));

var _sequentialQuantile = _interopRequireDefault(require("./sequentialQuantile.js"));

var _diverging = _interopRequireWildcard(require("./diverging.js"));

var _tickFormat = _interopRequireDefault(require("./tickFormat.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-scale/src/sequentialQuantile.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = sequentialQuantile;

var _index = require("../../../lib-vendor/d3-array/src/index.js");

var _continuous = require("./continuous.js");

var _init = require("./init.js");

function sequentialQuantile() {
  var domain = [],
      interpolator = _continuous.identity;

  function scale(x) {
    if (x != null && !isNaN(x = +x)) return interpolator(((0, _index.bisect)(domain, x, 1) - 1) / (domain.length - 1));
  }

  scale.domain = function (_) {
    if (!arguments.length) return domain.slice();
    domain = [];

    for (let d of _) if (d != null && !isNaN(d = +d)) domain.push(d);

    domain.sort(_index.ascending);
    return scale;
  };

  scale.interpolator = function (_) {
    return arguments.length ? (interpolator = _, scale) : interpolator;
  };

  scale.range = function () {
    return domain.map((d, i) => interpolator(i / (domain.length - 1)));
  };

  scale.quantiles = function (n) {
    return Array.from({
      length: n + 1
    }, (_, i) => (0, _index.quantile)(domain, i / n));
  };

  scale.copy = function () {
    return sequentialQuantile(interpolator).domain(domain);
  };

  return _init.initInterpolator.apply(scale, arguments);
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-scale/src/quantile.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = quantile;

var _index = require("../../../lib-vendor/d3-array/src/index.js");

var _init = require("./init.js");

function quantile() {
  var domain = [],
      range = [],
      thresholds = [],
      unknown;

  function rescale() {
    var i = 0,
        n = Math.max(1, range.length);
    thresholds = new Array(n - 1);

    while (++i < n) thresholds[i - 1] = (0, _index.quantileSorted)(domain, i / n);

    return scale;
  }

  function scale(x) {
    return x == null || isNaN(x = +x) ? unknown : range[(0, _index.bisect)(thresholds, x)];
  }

  scale.invertExtent = function (y) {
    var i = range.indexOf(y);
    return i < 0 ? [NaN, NaN] : [i > 0 ? thresholds[i - 1] : domain[0], i < thresholds.length ? thresholds[i] : domain[domain.length - 1]];
  };

  scale.domain = function (_) {
    if (!arguments.length) return domain.slice();
    domain = [];

    for (let d of _) if (d != null && !isNaN(d = +d)) domain.push(d);

    domain.sort(_index.ascending);
    return rescale();
  };

  scale.range = function (_) {
    return arguments.length ? (range = Array.from(_), rescale()) : range.slice();
  };

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  scale.quantiles = function () {
    return thresholds.slice();
  };

  scale.copy = function () {
    return quantile().domain(domain).range(range).unknown(unknown);
  };

  return _init.initRange.apply(scale, arguments);
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-scale/src/ordinal.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ordinal;
exports.implicit = void 0;

var _index = require("../../../lib-vendor/d3-array/src/index.js");

var _init = require("./init.js");

const implicit = Symbol("implicit");
exports.implicit = implicit;

function ordinal() {
  var index = new _index.InternMap(),
      domain = [],
      range = [],
      unknown = implicit;

  function scale(d) {
    let i = index.get(d);

    if (i === undefined) {
      if (unknown !== implicit) return unknown;
      index.set(d, i = domain.push(d) - 1);
    }

    return range[i % range.length];
  }

  scale.domain = function (_) {
    if (!arguments.length) return domain.slice();
    domain = [], index = new _index.InternMap();

    for (const value of _) {
      if (index.has(value)) continue;
      index.set(value, domain.push(value) - 1);
    }

    return scale;
  };

  scale.range = function (_) {
    return arguments.length ? (range = Array.from(_), scale) : range.slice();
  };

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  scale.copy = function () {
    return ordinal(domain, range).unknown(unknown);
  };

  _init.initRange.apply(scale, arguments);

  return scale;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-scale/src/init.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initInterpolator = initInterpolator;
exports.initRange = initRange;

function initRange(domain, range) {
  switch (arguments.length) {
    case 0:
      break;

    case 1:
      this.range(domain);
      break;

    default:
      this.range(range).domain(domain);
      break;
  }

  return this;
}

function initInterpolator(domain, interpolator) {
  switch (arguments.length) {
    case 0:
      break;

    case 1:
      {
        if (typeof domain === "function") this.interpolator(domain);else this.range(domain);
        break;
      }

    default:
      {
        this.domain(domain);
        if (typeof interpolator === "function") this.interpolator(interpolator);else this.range(interpolator);
        break;
      }
  }

  return this;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-scale/src/symlog.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = symlog;
exports.symlogish = symlogish;

var _linear = require("./linear.js");

var _continuous = require("./continuous.js");

var _init = require("./init.js");

function transformSymlog(c) {
  return function (x) {
    return Math.sign(x) * Math.log1p(Math.abs(x / c));
  };
}

function transformSymexp(c) {
  return function (x) {
    return Math.sign(x) * Math.expm1(Math.abs(x)) * c;
  };
}

function symlogish(transform) {
  var c = 1,
      scale = transform(transformSymlog(c), transformSymexp(c));

  scale.constant = function (_) {
    return arguments.length ? transform(transformSymlog(c = +_), transformSymexp(c)) : c;
  };

  return (0, _linear.linearish)(scale);
}

function symlog() {
  var scale = symlogish((0, _continuous.transformer)());

  scale.copy = function () {
    return (0, _continuous.copy)(scale, symlog()).constant(scale.constant());
  };

  return _init.initRange.apply(scale, arguments);
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-scale/src/continuous.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.copy = copy;
exports.default = continuous;
exports.identity = identity;
exports.transformer = transformer;

var _index = require("../../../lib-vendor/d3-array/src/index.js");

var _index2 = require("../../../lib-vendor/d3-interpolate/src/index.js");

var _constant = _interopRequireDefault(require("./constant.js"));

var _number = _interopRequireDefault(require("./number.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var unit = [0, 1];

function identity(x) {
  return x;
}

function normalize(a, b) {
  return (b -= a = +a) ? function (x) {
    return (x - a) / b;
  } : (0, _constant.default)(isNaN(b) ? NaN : 0.5);
}

function clamper(a, b) {
  var t;
  if (a > b) t = a, a = b, b = t;
  return function (x) {
    return Math.max(a, Math.min(b, x));
  };
} // normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
// interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].


function bimap(domain, range, interpolate) {
  var d0 = domain[0],
      d1 = domain[1],
      r0 = range[0],
      r1 = range[1];
  if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);
  return function (x) {
    return r0(d0(x));
  };
}

function polymap(domain, range, interpolate) {
  var j = Math.min(domain.length, range.length) - 1,
      d = new Array(j),
      r = new Array(j),
      i = -1; // Reverse descending domains.

  if (domain[j] < domain[0]) {
    domain = domain.slice().reverse();
    range = range.slice().reverse();
  }

  while (++i < j) {
    d[i] = normalize(domain[i], domain[i + 1]);
    r[i] = interpolate(range[i], range[i + 1]);
  }

  return function (x) {
    var i = (0, _index.bisect)(domain, x, 1, j) - 1;
    return r[i](d[i](x));
  };
}

function copy(source, target) {
  return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown());
}

function transformer() {
  var domain = unit,
      range = unit,
      interpolate = _index2.interpolate,
      transform,
      untransform,
      unknown,
      clamp = identity,
      piecewise,
      output,
      input;

  function rescale() {
    var n = Math.min(domain.length, range.length);
    if (clamp !== identity) clamp = clamper(domain[0], domain[n - 1]);
    piecewise = n > 2 ? polymap : bimap;
    output = input = null;
    return scale;
  }

  function scale(x) {
    return x == null || isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));
  }

  scale.invert = function (y) {
    return clamp(untransform((input || (input = piecewise(range, domain.map(transform), _index2.interpolateNumber)))(y)));
  };

  scale.domain = function (_) {
    return arguments.length ? (domain = Array.from(_, _number.default), rescale()) : domain.slice();
  };

  scale.range = function (_) {
    return arguments.length ? (range = Array.from(_), rescale()) : range.slice();
  };

  scale.rangeRound = function (_) {
    return range = Array.from(_), interpolate = _index2.interpolateRound, rescale();
  };

  scale.clamp = function (_) {
    return arguments.length ? (clamp = _ ? true : identity, rescale()) : clamp !== identity;
  };

  scale.interpolate = function (_) {
    return arguments.length ? (interpolate = _, rescale()) : interpolate;
  };

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  return function (t, u) {
    transform = t, untransform = u;
    return rescale();
  };
}

function continuous() {
  return transformer()(identity, identity);
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-scale/src/constant.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = constants;

function constants(x) {
  return function () {
    return x;
  };
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-scale/src/colors.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = colors;

function colors(s) {
  return s.match(/.{6}/g).map(function (x) {
    return "#" + x;
  });
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-scale/src/tickFormat.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = tickFormat;

var _index = require("../../../lib-vendor/d3-array/src/index.js");

var _index2 = require("../../../lib-vendor/d3-format/src/index.js");

function tickFormat(start, stop, count, specifier) {
  var step = (0, _index.tickStep)(start, stop, count),
      precision;
  specifier = (0, _index2.formatSpecifier)(specifier == null ? ",f" : specifier);

  switch (specifier.type) {
    case "s":
      {
        var value = Math.max(Math.abs(start), Math.abs(stop));
        if (specifier.precision == null && !isNaN(precision = (0, _index2.precisionPrefix)(step, value))) specifier.precision = precision;
        return (0, _index2.formatPrefix)(specifier, value);
      }

    case "":
    case "e":
    case "g":
    case "p":
    case "r":
      {
        if (specifier.precision == null && !isNaN(precision = (0, _index2.precisionRound)(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
        break;
      }

    case "f":
    case "%":
      {
        if (specifier.precision == null && !isNaN(precision = (0, _index2.precisionFixed)(step))) specifier.precision = precision - (specifier.type === "%") * 2;
        break;
      }
  }

  return (0, _index2.format)(specifier);
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-scale/src/identity.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = identity;

var _linear = require("./linear.js");

var _number = _interopRequireDefault(require("./number.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function identity(domain) {
  var unknown;

  function scale(x) {
    return x == null || isNaN(x = +x) ? unknown : x;
  }

  scale.invert = scale;

  scale.domain = scale.range = function (_) {
    return arguments.length ? (domain = Array.from(_, _number.default), scale) : domain.slice();
  };

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  scale.copy = function () {
    return identity(domain).unknown(unknown);
  };

  domain = arguments.length ? Array.from(domain, _number.default) : [0, 1];
  return (0, _linear.linearish)(scale);
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-scale/src/sequential.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.copy = copy;
exports.default = sequential;
exports.sequentialLog = sequentialLog;
exports.sequentialPow = sequentialPow;
exports.sequentialSqrt = sequentialSqrt;
exports.sequentialSymlog = sequentialSymlog;

var _index = require("../../../lib-vendor/d3-interpolate/src/index.js");

var _continuous = require("./continuous.js");

var _init = require("./init.js");

var _linear = require("./linear.js");

var _log = require("./log.js");

var _symlog = require("./symlog.js");

var _pow = require("./pow.js");

function transformer() {
  var x0 = 0,
      x1 = 1,
      t0,
      t1,
      k10,
      transform,
      interpolator = _continuous.identity,
      clamp = false,
      unknown;

  function scale(x) {
    return x == null || isNaN(x = +x) ? unknown : interpolator(k10 === 0 ? 0.5 : (x = (transform(x) - t0) * k10, clamp ? Math.max(0, Math.min(1, x)) : x));
  }

  scale.domain = function (_) {
    return arguments.length ? ([x0, x1] = _, t0 = transform(x0 = +x0), t1 = transform(x1 = +x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0), scale) : [x0, x1];
  };

  scale.clamp = function (_) {
    return arguments.length ? (clamp = !!_, scale) : clamp;
  };

  scale.interpolator = function (_) {
    return arguments.length ? (interpolator = _, scale) : interpolator;
  };

  function range(interpolate) {
    return function (_) {
      var r0, r1;
      return arguments.length ? ([r0, r1] = _, interpolator = interpolate(r0, r1), scale) : [interpolator(0), interpolator(1)];
    };
  }

  scale.range = range(_index.interpolate);
  scale.rangeRound = range(_index.interpolateRound);

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  return function (t) {
    transform = t, t0 = t(x0), t1 = t(x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0);
    return scale;
  };
}

function copy(source, target) {
  return target.domain(source.domain()).interpolator(source.interpolator()).clamp(source.clamp()).unknown(source.unknown());
}

function sequential() {
  var scale = (0, _linear.linearish)(transformer()(_continuous.identity));

  scale.copy = function () {
    return copy(scale, sequential());
  };

  return _init.initInterpolator.apply(scale, arguments);
}

function sequentialLog() {
  var scale = (0, _log.loggish)(transformer()).domain([1, 10]);

  scale.copy = function () {
    return copy(scale, sequentialLog()).base(scale.base());
  };

  return _init.initInterpolator.apply(scale, arguments);
}

function sequentialSymlog() {
  var scale = (0, _symlog.symlogish)(transformer());

  scale.copy = function () {
    return copy(scale, sequentialSymlog()).constant(scale.constant());
  };

  return _init.initInterpolator.apply(scale, arguments);
}

function sequentialPow() {
  var scale = (0, _pow.powish)(transformer());

  scale.copy = function () {
    return copy(scale, sequentialPow()).exponent(scale.exponent());
  };

  return _init.initInterpolator.apply(scale, arguments);
}

function sequentialSqrt() {
  return sequentialPow.apply(null, arguments).exponent(0.5);
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-scale/src/threshold.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = threshold;

var _index = require("../../../lib-vendor/d3-array/src/index.js");

var _init = require("./init.js");

function threshold() {
  var domain = [0.5],
      range = [0, 1],
      unknown,
      n = 1;

  function scale(x) {
    return x != null && x <= x ? range[(0, _index.bisect)(domain, x, 0, n)] : unknown;
  }

  scale.domain = function (_) {
    return arguments.length ? (domain = Array.from(_), n = Math.min(domain.length, range.length - 1), scale) : domain.slice();
  };

  scale.range = function (_) {
    return arguments.length ? (range = Array.from(_), n = Math.min(domain.length, range.length - 1), scale) : range.slice();
  };

  scale.invertExtent = function (y) {
    var i = range.indexOf(y);
    return [domain[i - 1], domain[i]];
  };

  scale.unknown = function (_) {
    return arguments.length ? (unknown = _, scale) : unknown;
  };

  scale.copy = function () {
    return threshold().domain(domain).range(range).unknown(unknown);
  };

  return _init.initRange.apply(scale, arguments);
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-scale/src/utcTime.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = utcTime;

var _index = require("../../../lib-vendor/d3-time/src/index.js");

var _index2 = require("../../../lib-vendor/d3-time-format/src/index.js");

var _time = require("./time.js");

var _init = require("./init.js");

function utcTime() {
  return _init.initRange.apply((0, _time.calendar)(_index.utcTicks, _index.utcTickInterval, _index.utcYear, _index.utcMonth, _index.utcWeek, _index.utcDay, _index.utcHour, _index.utcMinute, _index.utcSecond, _index2.utcFormat).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]), arguments);
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-scale/src/nice.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = nice;

function nice(domain, interval) {
  domain = domain.slice();
  var i0 = 0,
      i1 = domain.length - 1,
      x0 = domain[i0],
      x1 = domain[i1],
      t;

  if (x1 < x0) {
    t = i0, i0 = i1, i1 = t;
    t = x0, x0 = x1, x1 = t;
  }

  domain[i0] = interval.floor(x0);
  domain[i1] = interval.ceil(x1);
  return domain;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-color/src/index.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "color", {
  enumerable: true,
  get: function () {
    return _color.default;
  }
});
Object.defineProperty(exports, "cubehelix", {
  enumerable: true,
  get: function () {
    return _cubehelix.default;
  }
});
Object.defineProperty(exports, "gray", {
  enumerable: true,
  get: function () {
    return _lab.gray;
  }
});
Object.defineProperty(exports, "hcl", {
  enumerable: true,
  get: function () {
    return _lab.hcl;
  }
});
Object.defineProperty(exports, "hsl", {
  enumerable: true,
  get: function () {
    return _color.hsl;
  }
});
Object.defineProperty(exports, "lab", {
  enumerable: true,
  get: function () {
    return _lab.default;
  }
});
Object.defineProperty(exports, "lch", {
  enumerable: true,
  get: function () {
    return _lab.lch;
  }
});
Object.defineProperty(exports, "rgb", {
  enumerable: true,
  get: function () {
    return _color.rgb;
  }
});

var _color = _interopRequireWildcard(require("./color.js"));

var _lab = _interopRequireWildcard(require("./lab.js"));

var _cubehelix = _interopRequireDefault(require("./cubehelix.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-color/src/define.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.extend = extend;

function _default(constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
}

function extend(parent, definition) {
  var prototype = Object.create(parent.prototype);

  for (var key in definition) prototype[key] = definition[key];

  return prototype;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-color/src/color.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Color = Color;
exports.Rgb = Rgb;
exports.darker = exports.brighter = void 0;
exports.default = color;
exports.hsl = hsl;
exports.hslConvert = hslConvert;
exports.rgb = rgb;
exports.rgbConvert = rgbConvert;

var _define = _interopRequireWildcard(require("./define.js"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function Color() {}

var darker = 0.7;
exports.darker = darker;
var brighter = 1 / darker;
exports.brighter = brighter;
var reI = "\\s*([+-]?\\d+)\\s*",
    reN = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*",
    reP = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*",
    reHex = /^#([0-9a-f]{3,8})$/,
    reRgbInteger = new RegExp(`^rgb\\(${reI},${reI},${reI}\\)$`),
    reRgbPercent = new RegExp(`^rgb\\(${reP},${reP},${reP}\\)$`),
    reRgbaInteger = new RegExp(`^rgba\\(${reI},${reI},${reI},${reN}\\)$`),
    reRgbaPercent = new RegExp(`^rgba\\(${reP},${reP},${reP},${reN}\\)$`),
    reHslPercent = new RegExp(`^hsl\\(${reN},${reP},${reP}\\)$`),
    reHslaPercent = new RegExp(`^hsla\\(${reN},${reP},${reP},${reN}\\)$`);
var named = {
  aliceblue: 0xf0f8ff,
  antiquewhite: 0xfaebd7,
  aqua: 0x00ffff,
  aquamarine: 0x7fffd4,
  azure: 0xf0ffff,
  beige: 0xf5f5dc,
  bisque: 0xffe4c4,
  black: 0x000000,
  blanchedalmond: 0xffebcd,
  blue: 0x0000ff,
  blueviolet: 0x8a2be2,
  brown: 0xa52a2a,
  burlywood: 0xdeb887,
  cadetblue: 0x5f9ea0,
  chartreuse: 0x7fff00,
  chocolate: 0xd2691e,
  coral: 0xff7f50,
  cornflowerblue: 0x6495ed,
  cornsilk: 0xfff8dc,
  crimson: 0xdc143c,
  cyan: 0x00ffff,
  darkblue: 0x00008b,
  darkcyan: 0x008b8b,
  darkgoldenrod: 0xb8860b,
  darkgray: 0xa9a9a9,
  darkgreen: 0x006400,
  darkgrey: 0xa9a9a9,
  darkkhaki: 0xbdb76b,
  darkmagenta: 0x8b008b,
  darkolivegreen: 0x556b2f,
  darkorange: 0xff8c00,
  darkorchid: 0x9932cc,
  darkred: 0x8b0000,
  darksalmon: 0xe9967a,
  darkseagreen: 0x8fbc8f,
  darkslateblue: 0x483d8b,
  darkslategray: 0x2f4f4f,
  darkslategrey: 0x2f4f4f,
  darkturquoise: 0x00ced1,
  darkviolet: 0x9400d3,
  deeppink: 0xff1493,
  deepskyblue: 0x00bfff,
  dimgray: 0x696969,
  dimgrey: 0x696969,
  dodgerblue: 0x1e90ff,
  firebrick: 0xb22222,
  floralwhite: 0xfffaf0,
  forestgreen: 0x228b22,
  fuchsia: 0xff00ff,
  gainsboro: 0xdcdcdc,
  ghostwhite: 0xf8f8ff,
  gold: 0xffd700,
  goldenrod: 0xdaa520,
  gray: 0x808080,
  green: 0x008000,
  greenyellow: 0xadff2f,
  grey: 0x808080,
  honeydew: 0xf0fff0,
  hotpink: 0xff69b4,
  indianred: 0xcd5c5c,
  indigo: 0x4b0082,
  ivory: 0xfffff0,
  khaki: 0xf0e68c,
  lavender: 0xe6e6fa,
  lavenderblush: 0xfff0f5,
  lawngreen: 0x7cfc00,
  lemonchiffon: 0xfffacd,
  lightblue: 0xadd8e6,
  lightcoral: 0xf08080,
  lightcyan: 0xe0ffff,
  lightgoldenrodyellow: 0xfafad2,
  lightgray: 0xd3d3d3,
  lightgreen: 0x90ee90,
  lightgrey: 0xd3d3d3,
  lightpink: 0xffb6c1,
  lightsalmon: 0xffa07a,
  lightseagreen: 0x20b2aa,
  lightskyblue: 0x87cefa,
  lightslategray: 0x778899,
  lightslategrey: 0x778899,
  lightsteelblue: 0xb0c4de,
  lightyellow: 0xffffe0,
  lime: 0x00ff00,
  limegreen: 0x32cd32,
  linen: 0xfaf0e6,
  magenta: 0xff00ff,
  maroon: 0x800000,
  mediumaquamarine: 0x66cdaa,
  mediumblue: 0x0000cd,
  mediumorchid: 0xba55d3,
  mediumpurple: 0x9370db,
  mediumseagreen: 0x3cb371,
  mediumslateblue: 0x7b68ee,
  mediumspringgreen: 0x00fa9a,
  mediumturquoise: 0x48d1cc,
  mediumvioletred: 0xc71585,
  midnightblue: 0x191970,
  mintcream: 0xf5fffa,
  mistyrose: 0xffe4e1,
  moccasin: 0xffe4b5,
  navajowhite: 0xffdead,
  navy: 0x000080,
  oldlace: 0xfdf5e6,
  olive: 0x808000,
  olivedrab: 0x6b8e23,
  orange: 0xffa500,
  orangered: 0xff4500,
  orchid: 0xda70d6,
  palegoldenrod: 0xeee8aa,
  palegreen: 0x98fb98,
  paleturquoise: 0xafeeee,
  palevioletred: 0xdb7093,
  papayawhip: 0xffefd5,
  peachpuff: 0xffdab9,
  peru: 0xcd853f,
  pink: 0xffc0cb,
  plum: 0xdda0dd,
  powderblue: 0xb0e0e6,
  purple: 0x800080,
  rebeccapurple: 0x663399,
  red: 0xff0000,
  rosybrown: 0xbc8f8f,
  royalblue: 0x4169e1,
  saddlebrown: 0x8b4513,
  salmon: 0xfa8072,
  sandybrown: 0xf4a460,
  seagreen: 0x2e8b57,
  seashell: 0xfff5ee,
  sienna: 0xa0522d,
  silver: 0xc0c0c0,
  skyblue: 0x87ceeb,
  slateblue: 0x6a5acd,
  slategray: 0x708090,
  slategrey: 0x708090,
  snow: 0xfffafa,
  springgreen: 0x00ff7f,
  steelblue: 0x4682b4,
  tan: 0xd2b48c,
  teal: 0x008080,
  thistle: 0xd8bfd8,
  tomato: 0xff6347,
  turquoise: 0x40e0d0,
  violet: 0xee82ee,
  wheat: 0xf5deb3,
  white: 0xffffff,
  whitesmoke: 0xf5f5f5,
  yellow: 0xffff00,
  yellowgreen: 0x9acd32
};
(0, _define.default)(Color, color, {
  copy(channels) {
    return Object.assign(new this.constructor(), this, channels);
  },

  displayable() {
    return this.rgb().displayable();
  },

  hex: color_formatHex,
  // Deprecated! Use color.formatHex.
  formatHex: color_formatHex,
  formatHex8: color_formatHex8,
  formatHsl: color_formatHsl,
  formatRgb: color_formatRgb,
  toString: color_formatRgb
});

function color_formatHex() {
  return this.rgb().formatHex();
}

function color_formatHex8() {
  return this.rgb().formatHex8();
}

function color_formatHsl() {
  return hslConvert(this).formatHsl();
}

function color_formatRgb() {
  return this.rgb().formatRgb();
}

function color(format) {
  var m, l;
  format = (format + "").trim().toLowerCase();
  return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000
  : l === 3 ? new Rgb(m >> 8 & 0xf | m >> 4 & 0xf0, m >> 4 & 0xf | m & 0xf0, (m & 0xf) << 4 | m & 0xf, 1) // #f00
  : l === 8 ? rgba(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000
  : l === 4 ? rgba(m >> 12 & 0xf | m >> 8 & 0xf0, m >> 8 & 0xf | m >> 4 & 0xf0, m >> 4 & 0xf | m & 0xf0, ((m & 0xf) << 4 | m & 0xf) / 0xff) // #f000
  : null // invalid hex
  ) : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
  : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
  : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
  : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
  : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
  : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
  : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins
  : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
}

function rgbn(n) {
  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
}

function rgba(r, g, b, a) {
  if (a <= 0) r = g = b = NaN;
  return new Rgb(r, g, b, a);
}

function rgbConvert(o) {
  if (!(o instanceof Color)) o = color(o);
  if (!o) return new Rgb();
  o = o.rgb();
  return new Rgb(o.r, o.g, o.b, o.opacity);
}

function rgb(r, g, b, opacity) {
  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
}

function Rgb(r, g, b, opacity) {
  this.r = +r;
  this.g = +g;
  this.b = +b;
  this.opacity = +opacity;
}

(0, _define.default)(Rgb, rgb, (0, _define.extend)(Color, {
  brighter(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },

  darker(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
  },

  rgb() {
    return this;
  },

  clamp() {
    return new Rgb(clampi(this.r), clampi(this.g), clampi(this.b), clampa(this.opacity));
  },

  displayable() {
    return -0.5 <= this.r && this.r < 255.5 && -0.5 <= this.g && this.g < 255.5 && -0.5 <= this.b && this.b < 255.5 && 0 <= this.opacity && this.opacity <= 1;
  },

  hex: rgb_formatHex,
  // Deprecated! Use color.formatHex.
  formatHex: rgb_formatHex,
  formatHex8: rgb_formatHex8,
  formatRgb: rgb_formatRgb,
  toString: rgb_formatRgb
}));

function rgb_formatHex() {
  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}`;
}

function rgb_formatHex8() {
  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}${hex((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`;
}

function rgb_formatRgb() {
  const a = clampa(this.opacity);
  return `${a === 1 ? "rgb(" : "rgba("}${clampi(this.r)}, ${clampi(this.g)}, ${clampi(this.b)}${a === 1 ? ")" : `, ${a})`}`;
}

function clampa(opacity) {
  return isNaN(opacity) ? 1 : Math.max(0, Math.min(1, opacity));
}

function clampi(value) {
  return Math.max(0, Math.min(255, Math.round(value) || 0));
}

function hex(value) {
  value = clampi(value);
  return (value < 16 ? "0" : "") + value.toString(16);
}

function hsla(h, s, l, a) {
  if (a <= 0) h = s = l = NaN;else if (l <= 0 || l >= 1) h = s = NaN;else if (s <= 0) h = NaN;
  return new Hsl(h, s, l, a);
}

function hslConvert(o) {
  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof Color)) o = color(o);
  if (!o) return new Hsl();
  if (o instanceof Hsl) return o;
  o = o.rgb();
  var r = o.r / 255,
      g = o.g / 255,
      b = o.b / 255,
      min = Math.min(r, g, b),
      max = Math.max(r, g, b),
      h = NaN,
      s = max - min,
      l = (max + min) / 2;

  if (s) {
    if (r === max) h = (g - b) / s + (g < b) * 6;else if (g === max) h = (b - r) / s + 2;else h = (r - g) / s + 4;
    s /= l < 0.5 ? max + min : 2 - max - min;
    h *= 60;
  } else {
    s = l > 0 && l < 1 ? 0 : h;
  }

  return new Hsl(h, s, l, o.opacity);
}

function hsl(h, s, l, opacity) {
  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
}

function Hsl(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}

(0, _define.default)(Hsl, hsl, (0, _define.extend)(Color, {
  brighter(k) {
    k = k == null ? brighter : Math.pow(brighter, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },

  darker(k) {
    k = k == null ? darker : Math.pow(darker, k);
    return new Hsl(this.h, this.s, this.l * k, this.opacity);
  },

  rgb() {
    var h = this.h % 360 + (this.h < 0) * 360,
        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
        l = this.l,
        m2 = l + (l < 0.5 ? l : 1 - l) * s,
        m1 = 2 * l - m2;
    return new Rgb(hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2), hsl2rgb(h, m1, m2), hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2), this.opacity);
  },

  clamp() {
    return new Hsl(clamph(this.h), clampt(this.s), clampt(this.l), clampa(this.opacity));
  },

  displayable() {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && 0 <= this.l && this.l <= 1 && 0 <= this.opacity && this.opacity <= 1;
  },

  formatHsl() {
    const a = clampa(this.opacity);
    return `${a === 1 ? "hsl(" : "hsla("}${clamph(this.h)}, ${clampt(this.s) * 100}%, ${clampt(this.l) * 100}%${a === 1 ? ")" : `, ${a})`}`;
  }

}));

function clamph(value) {
  value = (value || 0) % 360;
  return value < 0 ? value + 360 : value;
}

function clampt(value) {
  return Math.max(0, Math.min(1, value || 0));
}
/* From FvD 13.37, CSS Color Module Level 3 */


function hsl2rgb(h, m1, m2) {
  return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-color/src/cubehelix.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Cubehelix = Cubehelix;
exports.default = cubehelix;

var _define = _interopRequireWildcard(require("./define.js"));

var _color = require("./color.js");

var _math = require("./math.js");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var A = -0.14861,
    B = +1.78277,
    C = -0.29227,
    D = -0.90649,
    E = +1.97294,
    ED = E * D,
    EB = E * B,
    BC_DA = B * C - D * A;

function cubehelixConvert(o) {
  if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);
  if (!(o instanceof _color.Rgb)) o = (0, _color.rgbConvert)(o);
  var r = o.r / 255,
      g = o.g / 255,
      b = o.b / 255,
      l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),
      bl = b - l,
      k = (E * (g - l) - C * bl) / D,
      s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)),
      // NaN if l=0 or l=1
  h = s ? Math.atan2(k, bl) * _math.degrees - 120 : NaN;
  return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);
}

function cubehelix(h, s, l, opacity) {
  return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);
}

function Cubehelix(h, s, l, opacity) {
  this.h = +h;
  this.s = +s;
  this.l = +l;
  this.opacity = +opacity;
}

(0, _define.default)(Cubehelix, cubehelix, (0, _define.extend)(_color.Color, {
  brighter(k) {
    k = k == null ? _color.brighter : Math.pow(_color.brighter, k);
    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
  },

  darker(k) {
    k = k == null ? _color.darker : Math.pow(_color.darker, k);
    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
  },

  rgb() {
    var h = isNaN(this.h) ? 0 : (this.h + 120) * _math.radians,
        l = +this.l,
        a = isNaN(this.s) ? 0 : this.s * l * (1 - l),
        cosh = Math.cos(h),
        sinh = Math.sin(h);
    return new _color.Rgb(255 * (l + a * (A * cosh + B * sinh)), 255 * (l + a * (C * cosh + D * sinh)), 255 * (l + a * (E * cosh)), this.opacity);
  }

}));
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-color/src/math.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.radians = exports.degrees = void 0;
const radians = Math.PI / 180;
exports.radians = radians;
const degrees = 180 / Math.PI;
exports.degrees = degrees;
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-color/src/lab.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Hcl = Hcl;
exports.Lab = Lab;
exports.default = lab;
exports.gray = gray;
exports.hcl = hcl;
exports.lch = lch;

var _define = _interopRequireWildcard(require("./define.js"));

var _color = require("./color.js");

var _math = require("./math.js");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// https://observablehq.com/@mbostock/lab-and-rgb
const K = 18,
      Xn = 0.96422,
      Yn = 1,
      Zn = 0.82521,
      t0 = 4 / 29,
      t1 = 6 / 29,
      t2 = 3 * t1 * t1,
      t3 = t1 * t1 * t1;

function labConvert(o) {
  if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);
  if (o instanceof Hcl) return hcl2lab(o);
  if (!(o instanceof _color.Rgb)) o = (0, _color.rgbConvert)(o);
  var r = rgb2lrgb(o.r),
      g = rgb2lrgb(o.g),
      b = rgb2lrgb(o.b),
      y = xyz2lab((0.2225045 * r + 0.7168786 * g + 0.0606169 * b) / Yn),
      x,
      z;
  if (r === g && g === b) x = z = y;else {
    x = xyz2lab((0.4360747 * r + 0.3850649 * g + 0.1430804 * b) / Xn);
    z = xyz2lab((0.0139322 * r + 0.0971045 * g + 0.7141733 * b) / Zn);
  }
  return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);
}

function gray(l, opacity) {
  return new Lab(l, 0, 0, opacity == null ? 1 : opacity);
}

function lab(l, a, b, opacity) {
  return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);
}

function Lab(l, a, b, opacity) {
  this.l = +l;
  this.a = +a;
  this.b = +b;
  this.opacity = +opacity;
}

(0, _define.default)(Lab, lab, (0, _define.extend)(_color.Color, {
  brighter(k) {
    return new Lab(this.l + K * (k == null ? 1 : k), this.a, this.b, this.opacity);
  },

  darker(k) {
    return new Lab(this.l - K * (k == null ? 1 : k), this.a, this.b, this.opacity);
  },

  rgb() {
    var y = (this.l + 16) / 116,
        x = isNaN(this.a) ? y : y + this.a / 500,
        z = isNaN(this.b) ? y : y - this.b / 200;
    x = Xn * lab2xyz(x);
    y = Yn * lab2xyz(y);
    z = Zn * lab2xyz(z);
    return new _color.Rgb(lrgb2rgb(3.1338561 * x - 1.6168667 * y - 0.4906146 * z), lrgb2rgb(-0.9787684 * x + 1.9161415 * y + 0.0334540 * z), lrgb2rgb(0.0719453 * x - 0.2289914 * y + 1.4052427 * z), this.opacity);
  }

}));

function xyz2lab(t) {
  return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;
}

function lab2xyz(t) {
  return t > t1 ? t * t * t : t2 * (t - t0);
}

function lrgb2rgb(x) {
  return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);
}

function rgb2lrgb(x) {
  return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);
}

function hclConvert(o) {
  if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);
  if (!(o instanceof Lab)) o = labConvert(o);
  if (o.a === 0 && o.b === 0) return new Hcl(NaN, 0 < o.l && o.l < 100 ? 0 : NaN, o.l, o.opacity);

  var h = Math.atan2(o.b, o.a) * _math.degrees;

  return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
}

function lch(l, c, h, opacity) {
  return arguments.length === 1 ? hclConvert(l) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
}

function hcl(h, c, l, opacity) {
  return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
}

function Hcl(h, c, l, opacity) {
  this.h = +h;
  this.c = +c;
  this.l = +l;
  this.opacity = +opacity;
}

function hcl2lab(o) {
  if (isNaN(o.h)) return new Lab(o.l, 0, 0, o.opacity);
  var h = o.h * _math.radians;
  return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);
}

(0, _define.default)(Hcl, hcl, (0, _define.extend)(_color.Color, {
  brighter(k) {
    return new Hcl(this.h, this.c, this.l + K * (k == null ? 1 : k), this.opacity);
  },

  darker(k) {
    return new Hcl(this.h, this.c, this.l - K * (k == null ? 1 : k), this.opacity);
  },

  rgb() {
    return hcl2lab(this).rgb();
  }

}));
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-timer/src/timer.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Timer = Timer;
exports.now = now;
exports.timer = timer;
exports.timerFlush = timerFlush;
var frame = 0,
    // is an animation frame pending?
timeout = 0,
    // is a timeout pending?
interval = 0,
    // are any timers active?
pokeDelay = 1000,
    // how frequently we check for clock skew
taskHead,
    taskTail,
    clockLast = 0,
    clockNow = 0,
    clockSkew = 0,
    clock = typeof performance === "object" && performance.now ? performance : Date,
    setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function (f) {
  setTimeout(f, 17);
};

function now() {
  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
}

function clearNow() {
  clockNow = 0;
}

function Timer() {
  this._call = this._time = this._next = null;
}

Timer.prototype = timer.prototype = {
  constructor: Timer,
  restart: function (callback, delay, time) {
    if (typeof callback !== "function") throw new TypeError("callback is not a function");
    time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);

    if (!this._next && taskTail !== this) {
      if (taskTail) taskTail._next = this;else taskHead = this;
      taskTail = this;
    }

    this._call = callback;
    this._time = time;
    sleep();
  },
  stop: function () {
    if (this._call) {
      this._call = null;
      this._time = Infinity;
      sleep();
    }
  }
};

function timer(callback, delay, time) {
  var t = new Timer();
  t.restart(callback, delay, time);
  return t;
}

function timerFlush() {
  now(); // Get the current time, if not already set.

  ++frame; // Pretend we’ve set an alarm, if we haven’t already.

  var t = taskHead,
      e;

  while (t) {
    if ((e = clockNow - t._time) >= 0) t._call.call(undefined, e);
    t = t._next;
  }

  --frame;
}

function wake() {
  clockNow = (clockLast = clock.now()) + clockSkew;
  frame = timeout = 0;

  try {
    timerFlush();
  } finally {
    frame = 0;
    nap();
    clockNow = 0;
  }
}

function poke() {
  var now = clock.now(),
      delay = now - clockLast;
  if (delay > pokeDelay) clockSkew -= delay, clockLast = now;
}

function nap() {
  var t0,
      t1 = taskHead,
      t2,
      time = Infinity;

  while (t1) {
    if (t1._call) {
      if (time > t1._time) time = t1._time;
      t0 = t1, t1 = t1._next;
    } else {
      t2 = t1._next, t1._next = null;
      t1 = t0 ? t0._next = t2 : taskHead = t2;
    }
  }

  taskTail = t0;
  sleep(time);
}

function sleep(time) {
  if (frame) return; // Soonest alarm already set, or will be.

  if (timeout) timeout = clearTimeout(timeout);
  var delay = time - clockNow; // Strictly less than if we recomputed clockNow.

  if (delay > 24) {
    if (time < Infinity) timeout = setTimeout(wake, time - clock.now() - clockSkew);
    if (interval) interval = clearInterval(interval);
  } else {
    if (!interval) clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
    frame = 1, setFrame(wake);
  }
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-timer/src/timeout.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _timer = require("./timer.js");

function _default(callback, delay, time) {
  var t = new _timer.Timer();
  delay = delay == null ? 0 : +delay;
  t.restart(elapsed => {
    t.stop();
    callback(elapsed + delay);
  }, delay, time);
  return t;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-timer/src/interval.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _timer = require("./timer.js");

function _default(callback, delay, time) {
  var t = new _timer.Timer(),
      total = delay;
  if (delay == null) return t.restart(callback, delay, time), t;
  t._restart = t.restart;

  t.restart = function (callback, delay, time) {
    delay = +delay, time = time == null ? (0, _timer.now)() : +time;

    t._restart(function tick(elapsed) {
      elapsed += total;

      t._restart(tick, total += delay, time);

      callback(elapsed);
    }, delay, time);
  };

  t.restart(callback, delay, time);
  return t;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-timer/src/index.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "interval", {
  enumerable: true,
  get: function () {
    return _interval.default;
  }
});
Object.defineProperty(exports, "now", {
  enumerable: true,
  get: function () {
    return _timer.now;
  }
});
Object.defineProperty(exports, "timeout", {
  enumerable: true,
  get: function () {
    return _timeout.default;
  }
});
Object.defineProperty(exports, "timer", {
  enumerable: true,
  get: function () {
    return _timer.timer;
  }
});
Object.defineProperty(exports, "timerFlush", {
  enumerable: true,
  get: function () {
    return _timer.timerFlush;
  }
});

var _timer = require("./timer.js");

var _timeout = _interopRequireDefault(require("./timeout.js"));

var _interval = _interopRequireDefault(require("./interval.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-time-format/src/isoParse.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _isoFormat = require("./isoFormat.js");

var _defaultLocale = require("./defaultLocale.js");

function parseIsoNative(string) {
  var date = new Date(string);
  return isNaN(date) ? null : date;
}

var parseIso = +new Date("2000-01-01T00:00:00.000Z") ? parseIsoNative : (0, _defaultLocale.utcParse)(_isoFormat.isoSpecifier);
var _default = parseIso;
exports.default = _default;
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-time-format/src/index.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "isoFormat", {
  enumerable: true,
  get: function () {
    return _isoFormat.default;
  }
});
Object.defineProperty(exports, "isoParse", {
  enumerable: true,
  get: function () {
    return _isoParse.default;
  }
});
Object.defineProperty(exports, "timeFormat", {
  enumerable: true,
  get: function () {
    return _defaultLocale.timeFormat;
  }
});
Object.defineProperty(exports, "timeFormatDefaultLocale", {
  enumerable: true,
  get: function () {
    return _defaultLocale.default;
  }
});
Object.defineProperty(exports, "timeFormatLocale", {
  enumerable: true,
  get: function () {
    return _locale.default;
  }
});
Object.defineProperty(exports, "timeParse", {
  enumerable: true,
  get: function () {
    return _defaultLocale.timeParse;
  }
});
Object.defineProperty(exports, "utcFormat", {
  enumerable: true,
  get: function () {
    return _defaultLocale.utcFormat;
  }
});
Object.defineProperty(exports, "utcParse", {
  enumerable: true,
  get: function () {
    return _defaultLocale.utcParse;
  }
});

var _defaultLocale = _interopRequireWildcard(require("./defaultLocale.js"));

var _locale = _interopRequireDefault(require("./locale.js"));

var _isoFormat = _interopRequireDefault(require("./isoFormat.js"));

var _isoParse = _interopRequireDefault(require("./isoParse.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-time-format/src/defaultLocale.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = defaultLocale;
exports.utcParse = exports.utcFormat = exports.timeParse = exports.timeFormat = void 0;

var _locale = _interopRequireDefault(require("./locale.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var locale;
var timeFormat;
exports.timeFormat = timeFormat;
var timeParse;
exports.timeParse = timeParse;
var utcFormat;
exports.utcFormat = utcFormat;
var utcParse;
exports.utcParse = utcParse;
defaultLocale({
  dateTime: "%x, %X",
  date: "%-m/%-d/%Y",
  time: "%-I:%M:%S %p",
  periods: ["AM", "PM"],
  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
});

function defaultLocale(definition) {
  locale = (0, _locale.default)(definition);
  exports.timeFormat = timeFormat = locale.format;
  exports.timeParse = timeParse = locale.parse;
  exports.utcFormat = utcFormat = locale.utcFormat;
  exports.utcParse = utcParse = locale.utcParse;
  return locale;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-time-format/src/isoFormat.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isoSpecifier = exports.default = void 0;

var _defaultLocale = require("./defaultLocale.js");

var isoSpecifier = "%Y-%m-%dT%H:%M:%S.%LZ";
exports.isoSpecifier = isoSpecifier;

function formatIsoNative(date) {
  return date.toISOString();
}

var formatIso = Date.prototype.toISOString ? formatIsoNative : (0, _defaultLocale.utcFormat)(isoSpecifier);
var _default = formatIso;
exports.default = _default;
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-time-format/src/locale.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = formatLocale;

var _index = require("../../../lib-vendor/d3-time/src/index.js");

function localDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
    date.setFullYear(d.y);
    return date;
  }

  return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
}

function utcDate(d) {
  if (0 <= d.y && d.y < 100) {
    var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
    date.setUTCFullYear(d.y);
    return date;
  }

  return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
}

function newDate(y, m, d) {
  return {
    y: y,
    m: m,
    d: d,
    H: 0,
    M: 0,
    S: 0,
    L: 0
  };
}

function formatLocale(locale) {
  var locale_dateTime = locale.dateTime,
      locale_date = locale.date,
      locale_time = locale.time,
      locale_periods = locale.periods,
      locale_weekdays = locale.days,
      locale_shortWeekdays = locale.shortDays,
      locale_months = locale.months,
      locale_shortMonths = locale.shortMonths;
  var periodRe = formatRe(locale_periods),
      periodLookup = formatLookup(locale_periods),
      weekdayRe = formatRe(locale_weekdays),
      weekdayLookup = formatLookup(locale_weekdays),
      shortWeekdayRe = formatRe(locale_shortWeekdays),
      shortWeekdayLookup = formatLookup(locale_shortWeekdays),
      monthRe = formatRe(locale_months),
      monthLookup = formatLookup(locale_months),
      shortMonthRe = formatRe(locale_shortMonths),
      shortMonthLookup = formatLookup(locale_shortMonths);
  var formats = {
    "a": formatShortWeekday,
    "A": formatWeekday,
    "b": formatShortMonth,
    "B": formatMonth,
    "c": null,
    "d": formatDayOfMonth,
    "e": formatDayOfMonth,
    "f": formatMicroseconds,
    "g": formatYearISO,
    "G": formatFullYearISO,
    "H": formatHour24,
    "I": formatHour12,
    "j": formatDayOfYear,
    "L": formatMilliseconds,
    "m": formatMonthNumber,
    "M": formatMinutes,
    "p": formatPeriod,
    "q": formatQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatSeconds,
    "u": formatWeekdayNumberMonday,
    "U": formatWeekNumberSunday,
    "V": formatWeekNumberISO,
    "w": formatWeekdayNumberSunday,
    "W": formatWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatYear,
    "Y": formatFullYear,
    "Z": formatZone,
    "%": formatLiteralPercent
  };
  var utcFormats = {
    "a": formatUTCShortWeekday,
    "A": formatUTCWeekday,
    "b": formatUTCShortMonth,
    "B": formatUTCMonth,
    "c": null,
    "d": formatUTCDayOfMonth,
    "e": formatUTCDayOfMonth,
    "f": formatUTCMicroseconds,
    "g": formatUTCYearISO,
    "G": formatUTCFullYearISO,
    "H": formatUTCHour24,
    "I": formatUTCHour12,
    "j": formatUTCDayOfYear,
    "L": formatUTCMilliseconds,
    "m": formatUTCMonthNumber,
    "M": formatUTCMinutes,
    "p": formatUTCPeriod,
    "q": formatUTCQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatUTCSeconds,
    "u": formatUTCWeekdayNumberMonday,
    "U": formatUTCWeekNumberSunday,
    "V": formatUTCWeekNumberISO,
    "w": formatUTCWeekdayNumberSunday,
    "W": formatUTCWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatUTCYear,
    "Y": formatUTCFullYear,
    "Z": formatUTCZone,
    "%": formatLiteralPercent
  };
  var parses = {
    "a": parseShortWeekday,
    "A": parseWeekday,
    "b": parseShortMonth,
    "B": parseMonth,
    "c": parseLocaleDateTime,
    "d": parseDayOfMonth,
    "e": parseDayOfMonth,
    "f": parseMicroseconds,
    "g": parseYear,
    "G": parseFullYear,
    "H": parseHour24,
    "I": parseHour24,
    "j": parseDayOfYear,
    "L": parseMilliseconds,
    "m": parseMonthNumber,
    "M": parseMinutes,
    "p": parsePeriod,
    "q": parseQuarter,
    "Q": parseUnixTimestamp,
    "s": parseUnixTimestampSeconds,
    "S": parseSeconds,
    "u": parseWeekdayNumberMonday,
    "U": parseWeekNumberSunday,
    "V": parseWeekNumberISO,
    "w": parseWeekdayNumberSunday,
    "W": parseWeekNumberMonday,
    "x": parseLocaleDate,
    "X": parseLocaleTime,
    "y": parseYear,
    "Y": parseFullYear,
    "Z": parseZone,
    "%": parseLiteralPercent
  }; // These recursive directive definitions must be deferred.

  formats.x = newFormat(locale_date, formats);
  formats.X = newFormat(locale_time, formats);
  formats.c = newFormat(locale_dateTime, formats);
  utcFormats.x = newFormat(locale_date, utcFormats);
  utcFormats.X = newFormat(locale_time, utcFormats);
  utcFormats.c = newFormat(locale_dateTime, utcFormats);

  function newFormat(specifier, formats) {
    return function (date) {
      var string = [],
          i = -1,
          j = 0,
          n = specifier.length,
          c,
          pad,
          format;
      if (!(date instanceof Date)) date = new Date(+date);

      while (++i < n) {
        if (specifier.charCodeAt(i) === 37) {
          string.push(specifier.slice(j, i));
          if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);else pad = c === "e" ? " " : "0";
          if (format = formats[c]) c = format(date, pad);
          string.push(c);
          j = i + 1;
        }
      }

      string.push(specifier.slice(j, i));
      return string.join("");
    };
  }

  function newParse(specifier, Z) {
    return function (string) {
      var d = newDate(1900, undefined, 1),
          i = parseSpecifier(d, specifier, string += "", 0),
          week,
          day;
      if (i != string.length) return null; // If a UNIX timestamp is specified, return it.

      if ("Q" in d) return new Date(d.Q);
      if ("s" in d) return new Date(d.s * 1000 + ("L" in d ? d.L : 0)); // If this is utcParse, never use the local timezone.

      if (Z && !("Z" in d)) d.Z = 0; // The am-pm flag is 0 for AM, and 1 for PM.

      if ("p" in d) d.H = d.H % 12 + d.p * 12; // If the month was not specified, inherit from the quarter.

      if (d.m === undefined) d.m = "q" in d ? d.q : 0; // Convert day-of-week and week-of-year to day-of-year.

      if ("V" in d) {
        if (d.V < 1 || d.V > 53) return null;
        if (!("w" in d)) d.w = 1;

        if ("Z" in d) {
          week = utcDate(newDate(d.y, 0, 1)), day = week.getUTCDay();
          week = day > 4 || day === 0 ? _index.utcMonday.ceil(week) : (0, _index.utcMonday)(week);
          week = _index.utcDay.offset(week, (d.V - 1) * 7);
          d.y = week.getUTCFullYear();
          d.m = week.getUTCMonth();
          d.d = week.getUTCDate() + (d.w + 6) % 7;
        } else {
          week = localDate(newDate(d.y, 0, 1)), day = week.getDay();
          week = day > 4 || day === 0 ? _index.timeMonday.ceil(week) : (0, _index.timeMonday)(week);
          week = _index.timeDay.offset(week, (d.V - 1) * 7);
          d.y = week.getFullYear();
          d.m = week.getMonth();
          d.d = week.getDate() + (d.w + 6) % 7;
        }
      } else if ("W" in d || "U" in d) {
        if (!("w" in d)) d.w = "u" in d ? d.u % 7 : "W" in d ? 1 : 0;
        day = "Z" in d ? utcDate(newDate(d.y, 0, 1)).getUTCDay() : localDate(newDate(d.y, 0, 1)).getDay();
        d.m = 0;
        d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day + 5) % 7 : d.w + d.U * 7 - (day + 6) % 7;
      } // If a time zone is specified, all fields are interpreted as UTC and then
      // offset according to the specified time zone.


      if ("Z" in d) {
        d.H += d.Z / 100 | 0;
        d.M += d.Z % 100;
        return utcDate(d);
      } // Otherwise, all fields are in local time.


      return localDate(d);
    };
  }

  function parseSpecifier(d, specifier, string, j) {
    var i = 0,
        n = specifier.length,
        m = string.length,
        c,
        parse;

    while (i < n) {
      if (j >= m) return -1;
      c = specifier.charCodeAt(i++);

      if (c === 37) {
        c = specifier.charAt(i++);
        parse = parses[c in pads ? specifier.charAt(i++) : c];
        if (!parse || (j = parse(d, string, j)) < 0) return -1;
      } else if (c != string.charCodeAt(j++)) {
        return -1;
      }
    }

    return j;
  }

  function parsePeriod(d, string, i) {
    var n = periodRe.exec(string.slice(i));
    return n ? (d.p = periodLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }

  function parseShortWeekday(d, string, i) {
    var n = shortWeekdayRe.exec(string.slice(i));
    return n ? (d.w = shortWeekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }

  function parseWeekday(d, string, i) {
    var n = weekdayRe.exec(string.slice(i));
    return n ? (d.w = weekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }

  function parseShortMonth(d, string, i) {
    var n = shortMonthRe.exec(string.slice(i));
    return n ? (d.m = shortMonthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }

  function parseMonth(d, string, i) {
    var n = monthRe.exec(string.slice(i));
    return n ? (d.m = monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
  }

  function parseLocaleDateTime(d, string, i) {
    return parseSpecifier(d, locale_dateTime, string, i);
  }

  function parseLocaleDate(d, string, i) {
    return parseSpecifier(d, locale_date, string, i);
  }

  function parseLocaleTime(d, string, i) {
    return parseSpecifier(d, locale_time, string, i);
  }

  function formatShortWeekday(d) {
    return locale_shortWeekdays[d.getDay()];
  }

  function formatWeekday(d) {
    return locale_weekdays[d.getDay()];
  }

  function formatShortMonth(d) {
    return locale_shortMonths[d.getMonth()];
  }

  function formatMonth(d) {
    return locale_months[d.getMonth()];
  }

  function formatPeriod(d) {
    return locale_periods[+(d.getHours() >= 12)];
  }

  function formatQuarter(d) {
    return 1 + ~~(d.getMonth() / 3);
  }

  function formatUTCShortWeekday(d) {
    return locale_shortWeekdays[d.getUTCDay()];
  }

  function formatUTCWeekday(d) {
    return locale_weekdays[d.getUTCDay()];
  }

  function formatUTCShortMonth(d) {
    return locale_shortMonths[d.getUTCMonth()];
  }

  function formatUTCMonth(d) {
    return locale_months[d.getUTCMonth()];
  }

  function formatUTCPeriod(d) {
    return locale_periods[+(d.getUTCHours() >= 12)];
  }

  function formatUTCQuarter(d) {
    return 1 + ~~(d.getUTCMonth() / 3);
  }

  return {
    format: function (specifier) {
      var f = newFormat(specifier += "", formats);

      f.toString = function () {
        return specifier;
      };

      return f;
    },
    parse: function (specifier) {
      var p = newParse(specifier += "", false);

      p.toString = function () {
        return specifier;
      };

      return p;
    },
    utcFormat: function (specifier) {
      var f = newFormat(specifier += "", utcFormats);

      f.toString = function () {
        return specifier;
      };

      return f;
    },
    utcParse: function (specifier) {
      var p = newParse(specifier += "", true);

      p.toString = function () {
        return specifier;
      };

      return p;
    }
  };
}

var pads = {
  "-": "",
  "_": " ",
  "0": "0"
},
    numberRe = /^\s*\d+/,
    // note: ignores next directive
percentRe = /^%/,
    requoteRe = /[\\^$*+?|[\]().{}]/g;

function pad(value, fill, width) {
  var sign = value < 0 ? "-" : "",
      string = (sign ? -value : value) + "",
      length = string.length;
  return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
}

function requote(s) {
  return s.replace(requoteRe, "\\$&");
}

function formatRe(names) {
  return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
}

function formatLookup(names) {
  return new Map(names.map((name, i) => [name.toLowerCase(), i]));
}

function parseWeekdayNumberSunday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.w = +n[0], i + n[0].length) : -1;
}

function parseWeekdayNumberMonday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.u = +n[0], i + n[0].length) : -1;
}

function parseWeekNumberSunday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.U = +n[0], i + n[0].length) : -1;
}

function parseWeekNumberISO(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.V = +n[0], i + n[0].length) : -1;
}

function parseWeekNumberMonday(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.W = +n[0], i + n[0].length) : -1;
}

function parseFullYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 4));
  return n ? (d.y = +n[0], i + n[0].length) : -1;
}

function parseYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;
}

function parseZone(d, string, i) {
  var n = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i, i + 6));
  return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
}

function parseQuarter(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 1));
  return n ? (d.q = n[0] * 3 - 3, i + n[0].length) : -1;
}

function parseMonthNumber(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
}

function parseDayOfMonth(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.d = +n[0], i + n[0].length) : -1;
}

function parseDayOfYear(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 3));
  return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
}

function parseHour24(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.H = +n[0], i + n[0].length) : -1;
}

function parseMinutes(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.M = +n[0], i + n[0].length) : -1;
}

function parseSeconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 2));
  return n ? (d.S = +n[0], i + n[0].length) : -1;
}

function parseMilliseconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 3));
  return n ? (d.L = +n[0], i + n[0].length) : -1;
}

function parseMicroseconds(d, string, i) {
  var n = numberRe.exec(string.slice(i, i + 6));
  return n ? (d.L = Math.floor(n[0] / 1000), i + n[0].length) : -1;
}

function parseLiteralPercent(d, string, i) {
  var n = percentRe.exec(string.slice(i, i + 1));
  return n ? i + n[0].length : -1;
}

function parseUnixTimestamp(d, string, i) {
  var n = numberRe.exec(string.slice(i));
  return n ? (d.Q = +n[0], i + n[0].length) : -1;
}

function parseUnixTimestampSeconds(d, string, i) {
  var n = numberRe.exec(string.slice(i));
  return n ? (d.s = +n[0], i + n[0].length) : -1;
}

function formatDayOfMonth(d, p) {
  return pad(d.getDate(), p, 2);
}

function formatHour24(d, p) {
  return pad(d.getHours(), p, 2);
}

function formatHour12(d, p) {
  return pad(d.getHours() % 12 || 12, p, 2);
}

function formatDayOfYear(d, p) {
  return pad(1 + _index.timeDay.count((0, _index.timeYear)(d), d), p, 3);
}

function formatMilliseconds(d, p) {
  return pad(d.getMilliseconds(), p, 3);
}

function formatMicroseconds(d, p) {
  return formatMilliseconds(d, p) + "000";
}

function formatMonthNumber(d, p) {
  return pad(d.getMonth() + 1, p, 2);
}

function formatMinutes(d, p) {
  return pad(d.getMinutes(), p, 2);
}

function formatSeconds(d, p) {
  return pad(d.getSeconds(), p, 2);
}

function formatWeekdayNumberMonday(d) {
  var day = d.getDay();
  return day === 0 ? 7 : day;
}

function formatWeekNumberSunday(d, p) {
  return pad(_index.timeSunday.count((0, _index.timeYear)(d) - 1, d), p, 2);
}

function dISO(d) {
  var day = d.getDay();
  return day >= 4 || day === 0 ? (0, _index.timeThursday)(d) : _index.timeThursday.ceil(d);
}

function formatWeekNumberISO(d, p) {
  d = dISO(d);
  return pad(_index.timeThursday.count((0, _index.timeYear)(d), d) + ((0, _index.timeYear)(d).getDay() === 4), p, 2);
}

function formatWeekdayNumberSunday(d) {
  return d.getDay();
}

function formatWeekNumberMonday(d, p) {
  return pad(_index.timeMonday.count((0, _index.timeYear)(d) - 1, d), p, 2);
}

function formatYear(d, p) {
  return pad(d.getFullYear() % 100, p, 2);
}

function formatYearISO(d, p) {
  d = dISO(d);
  return pad(d.getFullYear() % 100, p, 2);
}

function formatFullYear(d, p) {
  return pad(d.getFullYear() % 10000, p, 4);
}

function formatFullYearISO(d, p) {
  var day = d.getDay();
  d = day >= 4 || day === 0 ? (0, _index.timeThursday)(d) : _index.timeThursday.ceil(d);
  return pad(d.getFullYear() % 10000, p, 4);
}

function formatZone(d) {
  var z = d.getTimezoneOffset();
  return (z > 0 ? "-" : (z *= -1, "+")) + pad(z / 60 | 0, "0", 2) + pad(z % 60, "0", 2);
}

function formatUTCDayOfMonth(d, p) {
  return pad(d.getUTCDate(), p, 2);
}

function formatUTCHour24(d, p) {
  return pad(d.getUTCHours(), p, 2);
}

function formatUTCHour12(d, p) {
  return pad(d.getUTCHours() % 12 || 12, p, 2);
}

function formatUTCDayOfYear(d, p) {
  return pad(1 + _index.utcDay.count((0, _index.utcYear)(d), d), p, 3);
}

function formatUTCMilliseconds(d, p) {
  return pad(d.getUTCMilliseconds(), p, 3);
}

function formatUTCMicroseconds(d, p) {
  return formatUTCMilliseconds(d, p) + "000";
}

function formatUTCMonthNumber(d, p) {
  return pad(d.getUTCMonth() + 1, p, 2);
}

function formatUTCMinutes(d, p) {
  return pad(d.getUTCMinutes(), p, 2);
}

function formatUTCSeconds(d, p) {
  return pad(d.getUTCSeconds(), p, 2);
}

function formatUTCWeekdayNumberMonday(d) {
  var dow = d.getUTCDay();
  return dow === 0 ? 7 : dow;
}

function formatUTCWeekNumberSunday(d, p) {
  return pad(_index.utcSunday.count((0, _index.utcYear)(d) - 1, d), p, 2);
}

function UTCdISO(d) {
  var day = d.getUTCDay();
  return day >= 4 || day === 0 ? (0, _index.utcThursday)(d) : _index.utcThursday.ceil(d);
}

function formatUTCWeekNumberISO(d, p) {
  d = UTCdISO(d);
  return pad(_index.utcThursday.count((0, _index.utcYear)(d), d) + ((0, _index.utcYear)(d).getUTCDay() === 4), p, 2);
}

function formatUTCWeekdayNumberSunday(d) {
  return d.getUTCDay();
}

function formatUTCWeekNumberMonday(d, p) {
  return pad(_index.utcMonday.count((0, _index.utcYear)(d) - 1, d), p, 2);
}

function formatUTCYear(d, p) {
  return pad(d.getUTCFullYear() % 100, p, 2);
}

function formatUTCYearISO(d, p) {
  d = UTCdISO(d);
  return pad(d.getUTCFullYear() % 100, p, 2);
}

function formatUTCFullYear(d, p) {
  return pad(d.getUTCFullYear() % 10000, p, 4);
}

function formatUTCFullYearISO(d, p) {
  var day = d.getUTCDay();
  d = day >= 4 || day === 0 ? (0, _index.utcThursday)(d) : _index.utcThursday.ceil(d);
  return pad(d.getUTCFullYear() % 10000, p, 4);
}

function formatUTCZone() {
  return "+0000";
}

function formatLiteralPercent() {
  return "%";
}

function formatUnixTimestamp(d) {
  return +d;
}

function formatUnixTimestampSeconds(d) {
  return Math.floor(+d / 1000);
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-interpolate/src/number.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b) {
  return a = +a, b = +b, function (t) {
    return a * (1 - t) + b * t;
  };
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-interpolate/src/discrete.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(range) {
  var n = range.length;
  return function (t) {
    return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
  };
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-interpolate/src/hsl.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hslLong = exports.default = void 0;

var _index = require("../../../lib-vendor/d3-color/src/index.js");

var _color = _interopRequireWildcard(require("./color.js"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function hsl(hue) {
  return function (start, end) {
    var h = hue((start = (0, _index.hsl)(start)).h, (end = (0, _index.hsl)(end)).h),
        s = (0, _color.default)(start.s, end.s),
        l = (0, _color.default)(start.l, end.l),
        opacity = (0, _color.default)(start.opacity, end.opacity);
    return function (t) {
      start.h = h(t);
      start.s = s(t);
      start.l = l(t);
      start.opacity = opacity(t);
      return start + "";
    };
  };
}

var _default = hsl(_color.hue);

exports.default = _default;
var hslLong = hsl(_color.default);
exports.hslLong = hslLong;
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-interpolate/src/basis.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.basis = basis;
exports.default = _default;

function basis(t1, v0, v1, v2, v3) {
  var t2 = t1 * t1,
      t3 = t2 * t1;
  return ((1 - 3 * t1 + 3 * t2 - t3) * v0 + (4 - 6 * t2 + 3 * t3) * v1 + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2 + t3 * v3) / 6;
}

function _default(values) {
  var n = values.length - 1;
  return function (t) {
    var i = t <= 0 ? t = 0 : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),
        v1 = values[i],
        v2 = values[i + 1],
        v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,
        v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
    return basis((t - i / n) * n, v0, v1, v2, v3);
  };
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-interpolate/src/object.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _value = _interopRequireDefault(require("./value.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(a, b) {
  var i = {},
      c = {},
      k;
  if (a === null || typeof a !== "object") a = {};
  if (b === null || typeof b !== "object") b = {};

  for (k in b) {
    if (k in a) {
      i[k] = (0, _value.default)(a[k], b[k]);
    } else {
      c[k] = b[k];
    }
  }

  return function (t) {
    for (k in i) c[k] = i[k](t);

    return c;
  };
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-interpolate/src/quantize.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(interpolator, n) {
  var samples = new Array(n);

  for (var i = 0; i < n; ++i) samples[i] = interpolator(i / (n - 1));

  return samples;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-interpolate/src/index.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "interpolate", {
  enumerable: true,
  get: function () {
    return _value.default;
  }
});
Object.defineProperty(exports, "interpolateArray", {
  enumerable: true,
  get: function () {
    return _array.default;
  }
});
Object.defineProperty(exports, "interpolateBasis", {
  enumerable: true,
  get: function () {
    return _basis.default;
  }
});
Object.defineProperty(exports, "interpolateBasisClosed", {
  enumerable: true,
  get: function () {
    return _basisClosed.default;
  }
});
Object.defineProperty(exports, "interpolateCubehelix", {
  enumerable: true,
  get: function () {
    return _cubehelix.default;
  }
});
Object.defineProperty(exports, "interpolateCubehelixLong", {
  enumerable: true,
  get: function () {
    return _cubehelix.cubehelixLong;
  }
});
Object.defineProperty(exports, "interpolateDate", {
  enumerable: true,
  get: function () {
    return _date.default;
  }
});
Object.defineProperty(exports, "interpolateDiscrete", {
  enumerable: true,
  get: function () {
    return _discrete.default;
  }
});
Object.defineProperty(exports, "interpolateHcl", {
  enumerable: true,
  get: function () {
    return _hcl.default;
  }
});
Object.defineProperty(exports, "interpolateHclLong", {
  enumerable: true,
  get: function () {
    return _hcl.hclLong;
  }
});
Object.defineProperty(exports, "interpolateHsl", {
  enumerable: true,
  get: function () {
    return _hsl.default;
  }
});
Object.defineProperty(exports, "interpolateHslLong", {
  enumerable: true,
  get: function () {
    return _hsl.hslLong;
  }
});
Object.defineProperty(exports, "interpolateHue", {
  enumerable: true,
  get: function () {
    return _hue.default;
  }
});
Object.defineProperty(exports, "interpolateLab", {
  enumerable: true,
  get: function () {
    return _lab.default;
  }
});
Object.defineProperty(exports, "interpolateNumber", {
  enumerable: true,
  get: function () {
    return _number.default;
  }
});
Object.defineProperty(exports, "interpolateNumberArray", {
  enumerable: true,
  get: function () {
    return _numberArray.default;
  }
});
Object.defineProperty(exports, "interpolateObject", {
  enumerable: true,
  get: function () {
    return _object.default;
  }
});
Object.defineProperty(exports, "interpolateRgb", {
  enumerable: true,
  get: function () {
    return _rgb.default;
  }
});
Object.defineProperty(exports, "interpolateRgbBasis", {
  enumerable: true,
  get: function () {
    return _rgb.rgbBasis;
  }
});
Object.defineProperty(exports, "interpolateRgbBasisClosed", {
  enumerable: true,
  get: function () {
    return _rgb.rgbBasisClosed;
  }
});
Object.defineProperty(exports, "interpolateRound", {
  enumerable: true,
  get: function () {
    return _round.default;
  }
});
Object.defineProperty(exports, "interpolateString", {
  enumerable: true,
  get: function () {
    return _string.default;
  }
});
Object.defineProperty(exports, "interpolateTransformCss", {
  enumerable: true,
  get: function () {
    return _index.interpolateTransformCss;
  }
});
Object.defineProperty(exports, "interpolateTransformSvg", {
  enumerable: true,
  get: function () {
    return _index.interpolateTransformSvg;
  }
});
Object.defineProperty(exports, "interpolateZoom", {
  enumerable: true,
  get: function () {
    return _zoom.default;
  }
});
Object.defineProperty(exports, "piecewise", {
  enumerable: true,
  get: function () {
    return _piecewise.default;
  }
});
Object.defineProperty(exports, "quantize", {
  enumerable: true,
  get: function () {
    return _quantize.default;
  }
});

var _value = _interopRequireDefault(require("./value.js"));

var _array = _interopRequireDefault(require("./array.js"));

var _basis = _interopRequireDefault(require("./basis.js"));

var _basisClosed = _interopRequireDefault(require("./basisClosed.js"));

var _date = _interopRequireDefault(require("./date.js"));

var _discrete = _interopRequireDefault(require("./discrete.js"));

var _hue = _interopRequireDefault(require("./hue.js"));

var _number = _interopRequireDefault(require("./number.js"));

var _numberArray = _interopRequireDefault(require("./numberArray.js"));

var _object = _interopRequireDefault(require("./object.js"));

var _round = _interopRequireDefault(require("./round.js"));

var _string = _interopRequireDefault(require("./string.js"));

var _index = require("./transform/index.js");

var _zoom = _interopRequireDefault(require("./zoom.js"));

var _rgb = _interopRequireWildcard(require("./rgb.js"));

var _hsl = _interopRequireWildcard(require("./hsl.js"));

var _lab = _interopRequireDefault(require("./lab.js"));

var _hcl = _interopRequireWildcard(require("./hcl.js"));

var _cubehelix = _interopRequireWildcard(require("./cubehelix.js"));

var _piecewise = _interopRequireDefault(require("./piecewise.js"));

var _quantize = _interopRequireDefault(require("./quantize.js"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-interpolate/src/zoom.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var epsilon2 = 1e-12;

function cosh(x) {
  return ((x = Math.exp(x)) + 1 / x) / 2;
}

function sinh(x) {
  return ((x = Math.exp(x)) - 1 / x) / 2;
}

function tanh(x) {
  return ((x = Math.exp(2 * x)) - 1) / (x + 1);
}

var _default = function zoomRho(rho, rho2, rho4) {
  // p0 = [ux0, uy0, w0]
  // p1 = [ux1, uy1, w1]
  function zoom(p0, p1) {
    var ux0 = p0[0],
        uy0 = p0[1],
        w0 = p0[2],
        ux1 = p1[0],
        uy1 = p1[1],
        w1 = p1[2],
        dx = ux1 - ux0,
        dy = uy1 - uy0,
        d2 = dx * dx + dy * dy,
        i,
        S; // Special case for u0 ≅ u1.

    if (d2 < epsilon2) {
      S = Math.log(w1 / w0) / rho;

      i = function (t) {
        return [ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(rho * t * S)];
      };
    } // General case.
    else {
      var d1 = Math.sqrt(d2),
          b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),
          b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),
          r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),
          r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
      S = (r1 - r0) / rho;

      i = function (t) {
        var s = t * S,
            coshr0 = cosh(r0),
            u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
        return [ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / cosh(rho * s + r0)];
      };
    }

    i.duration = S * 1000 * rho / Math.SQRT2;
    return i;
  }

  zoom.rho = function (_) {
    var _1 = Math.max(1e-3, +_),
        _2 = _1 * _1,
        _4 = _2 * _2;

    return zoomRho(_1, _2, _4);
  };

  return zoom;
}(Math.SQRT2, 2, 4);

exports.default = _default;
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-interpolate/src/color.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = nogamma;
exports.gamma = gamma;
exports.hue = hue;

var _constant = _interopRequireDefault(require("./constant.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function linear(a, d) {
  return function (t) {
    return a + t * d;
  };
}

function exponential(a, b, y) {
  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function (t) {
    return Math.pow(a + t * b, y);
  };
}

function hue(a, b) {
  var d = b - a;
  return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : (0, _constant.default)(isNaN(a) ? b : a);
}

function gamma(y) {
  return (y = +y) === 1 ? nogamma : function (a, b) {
    return b - a ? exponential(a, b, y) : (0, _constant.default)(isNaN(a) ? b : a);
  };
}

function nogamma(a, b) {
  var d = b - a;
  return d ? linear(a, d) : (0, _constant.default)(isNaN(a) ? b : a);
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-interpolate/src/hcl.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hclLong = exports.default = void 0;

var _index = require("../../../lib-vendor/d3-color/src/index.js");

var _color = _interopRequireWildcard(require("./color.js"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function hcl(hue) {
  return function (start, end) {
    var h = hue((start = (0, _index.hcl)(start)).h, (end = (0, _index.hcl)(end)).h),
        c = (0, _color.default)(start.c, end.c),
        l = (0, _color.default)(start.l, end.l),
        opacity = (0, _color.default)(start.opacity, end.opacity);
    return function (t) {
      start.h = h(t);
      start.c = c(t);
      start.l = l(t);
      start.opacity = opacity(t);
      return start + "";
    };
  };
}

var _default = hcl(_color.hue);

exports.default = _default;
var hclLong = hcl(_color.default);
exports.hclLong = hclLong;
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-interpolate/src/array.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.genericArray = genericArray;

var _value = _interopRequireDefault(require("./value.js"));

var _numberArray = _interopRequireWildcard(require("./numberArray.js"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(a, b) {
  return ((0, _numberArray.isNumberArray)(b) ? _numberArray.default : genericArray)(a, b);
}

function genericArray(a, b) {
  var nb = b ? b.length : 0,
      na = a ? Math.min(nb, a.length) : 0,
      x = new Array(na),
      c = new Array(nb),
      i;

  for (i = 0; i < na; ++i) x[i] = (0, _value.default)(a[i], b[i]);

  for (; i < nb; ++i) c[i] = b[i];

  return function (t) {
    for (i = 0; i < na; ++i) c[i] = x[i](t);

    return c;
  };
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-interpolate/src/numberArray.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.isNumberArray = isNumberArray;

function _default(a, b) {
  if (!b) b = [];
  var n = a ? Math.min(b.length, a.length) : 0,
      c = b.slice(),
      i;
  return function (t) {
    for (i = 0; i < n; ++i) c[i] = a[i] * (1 - t) + b[i] * t;

    return c;
  };
}

function isNumberArray(x) {
  return ArrayBuffer.isView(x) && !(x instanceof DataView);
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-interpolate/src/cubehelix.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.cubehelixLong = void 0;

var _index = require("../../../lib-vendor/d3-color/src/index.js");

var _color = _interopRequireWildcard(require("./color.js"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function cubehelix(hue) {
  return function cubehelixGamma(y) {
    y = +y;

    function cubehelix(start, end) {
      var h = hue((start = (0, _index.cubehelix)(start)).h, (end = (0, _index.cubehelix)(end)).h),
          s = (0, _color.default)(start.s, end.s),
          l = (0, _color.default)(start.l, end.l),
          opacity = (0, _color.default)(start.opacity, end.opacity);
      return function (t) {
        start.h = h(t);
        start.s = s(t);
        start.l = l(Math.pow(t, y));
        start.opacity = opacity(t);
        return start + "";
      };
    }

    cubehelix.gamma = cubehelixGamma;
    return cubehelix;
  }(1);
}

var _default = cubehelix(_color.hue);

exports.default = _default;
var cubehelixLong = cubehelix(_color.default);
exports.cubehelixLong = cubehelixLong;
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-interpolate/src/string.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _number = _interopRequireDefault(require("./number.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
    reB = new RegExp(reA.source, "g");

function zero(b) {
  return function () {
    return b;
  };
}

function one(b) {
  return function (t) {
    return b(t) + "";
  };
}

function _default(a, b) {
  var bi = reA.lastIndex = reB.lastIndex = 0,
      // scan index for next number in b
  am,
      // current match in a
  bm,
      // current match in b
  bs,
      // string preceding current number in b, if any
  i = -1,
      // index in s
  s = [],
      // string constants and placeholders
  q = []; // number interpolators
  // Coerce inputs to strings.

  a = a + "", b = b + ""; // Interpolate pairs of numbers in a & b.

  while ((am = reA.exec(a)) && (bm = reB.exec(b))) {
    if ((bs = bm.index) > bi) {
      // a string precedes the next number in b
      bs = b.slice(bi, bs);
      if (s[i]) s[i] += bs; // coalesce with previous string
      else s[++i] = bs;
    }

    if ((am = am[0]) === (bm = bm[0])) {
      // numbers in a & b match
      if (s[i]) s[i] += bm; // coalesce with previous string
      else s[++i] = bm;
    } else {
      // interpolate non-matching numbers
      s[++i] = null;
      q.push({
        i: i,
        x: (0, _number.default)(am, bm)
      });
    }

    bi = reB.lastIndex;
  } // Add remains of b.


  if (bi < b.length) {
    bs = b.slice(bi);
    if (s[i]) s[i] += bs; // coalesce with previous string
    else s[++i] = bs;
  } // Special optimization for only a single match.
  // Otherwise, interpolate each of the numbers and rejoin the string.


  return s.length < 2 ? q[0] ? one(q[0].x) : zero(b) : (b = q.length, function (t) {
    for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);

    return s.join("");
  });
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-interpolate/src/piecewise.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = piecewise;

var _value = _interopRequireDefault(require("./value.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function piecewise(interpolate, values) {
  if (values === undefined) values = interpolate, interpolate = _value.default;
  var i = 0,
      n = values.length - 1,
      v = values[0],
      I = new Array(n < 0 ? 0 : n);

  while (i < n) I[i] = interpolate(v, v = values[++i]);

  return function (t) {
    var i = Math.max(0, Math.min(n - 1, Math.floor(t *= n)));
    return I[i](t - i);
  };
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-interpolate/src/value.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _index = require("../../../lib-vendor/d3-color/src/index.js");

var _rgb = _interopRequireDefault(require("./rgb.js"));

var _array = require("./array.js");

var _date = _interopRequireDefault(require("./date.js"));

var _number = _interopRequireDefault(require("./number.js"));

var _object = _interopRequireDefault(require("./object.js"));

var _string = _interopRequireDefault(require("./string.js"));

var _constant = _interopRequireDefault(require("./constant.js"));

var _numberArray = _interopRequireWildcard(require("./numberArray.js"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(a, b) {
  var t = typeof b,
      c;
  return b == null || t === "boolean" ? (0, _constant.default)(b) : (t === "number" ? _number.default : t === "string" ? (c = (0, _index.color)(b)) ? (b = c, _rgb.default) : _string.default : b instanceof _index.color ? _rgb.default : b instanceof Date ? _date.default : (0, _numberArray.isNumberArray)(b) ? _numberArray.default : Array.isArray(b) ? _array.genericArray : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? _object.default : _number.default)(a, b);
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-interpolate/src/constant.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _default = x => () => x;

exports.default = _default;
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-interpolate/src/lab.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = lab;

var _index = require("../../../lib-vendor/d3-color/src/index.js");

var _color = _interopRequireDefault(require("./color.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function lab(start, end) {
  var l = (0, _color.default)((start = (0, _index.lab)(start)).l, (end = (0, _index.lab)(end)).l),
      a = (0, _color.default)(start.a, end.a),
      b = (0, _color.default)(start.b, end.b),
      opacity = (0, _color.default)(start.opacity, end.opacity);
  return function (t) {
    start.l = l(t);
    start.a = a(t);
    start.b = b(t);
    start.opacity = opacity(t);
    return start + "";
  };
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-interpolate/src/date.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b) {
  var d = new Date();
  return a = +a, b = +b, function (t) {
    return d.setTime(a * (1 - t) + b * t), d;
  };
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-interpolate/src/round.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(a, b) {
  return a = +a, b = +b, function (t) {
    return Math.round(a * (1 - t) + b * t);
  };
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-interpolate/src/hue.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _color = require("./color.js");

function _default(a, b) {
  var i = (0, _color.hue)(+a, +b);
  return function (t) {
    var x = i(t);
    return x - 360 * Math.floor(x / 360);
  };
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-interpolate/src/transform/decompose.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.identity = void 0;
var degrees = 180 / Math.PI;
var identity = {
  translateX: 0,
  translateY: 0,
  rotate: 0,
  skewX: 0,
  scaleX: 1,
  scaleY: 1
};
exports.identity = identity;

function _default(a, b, c, d, e, f) {
  var scaleX, scaleY, skewX;
  if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;
  if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;
  if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;
  if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
  return {
    translateX: e,
    translateY: f,
    rotate: Math.atan2(b, a) * degrees,
    skewX: Math.atan(skewX) * degrees,
    scaleX: scaleX,
    scaleY: scaleY
  };
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-interpolate/src/transform/index.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.interpolateTransformSvg = exports.interpolateTransformCss = void 0;

var _number = _interopRequireDefault(require("../number.js"));

var _parse = require("./parse.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function interpolateTransform(parse, pxComma, pxParen, degParen) {
  function pop(s) {
    return s.length ? s.pop() + " " : "";
  }

  function translate(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push("translate(", null, pxComma, null, pxParen);
      q.push({
        i: i - 4,
        x: (0, _number.default)(xa, xb)
      }, {
        i: i - 2,
        x: (0, _number.default)(ya, yb)
      });
    } else if (xb || yb) {
      s.push("translate(" + xb + pxComma + yb + pxParen);
    }
  }

  function rotate(a, b, s, q) {
    if (a !== b) {
      if (a - b > 180) b += 360;else if (b - a > 180) a += 360; // shortest path

      q.push({
        i: s.push(pop(s) + "rotate(", null, degParen) - 2,
        x: (0, _number.default)(a, b)
      });
    } else if (b) {
      s.push(pop(s) + "rotate(" + b + degParen);
    }
  }

  function skewX(a, b, s, q) {
    if (a !== b) {
      q.push({
        i: s.push(pop(s) + "skewX(", null, degParen) - 2,
        x: (0, _number.default)(a, b)
      });
    } else if (b) {
      s.push(pop(s) + "skewX(" + b + degParen);
    }
  }

  function scale(xa, ya, xb, yb, s, q) {
    if (xa !== xb || ya !== yb) {
      var i = s.push(pop(s) + "scale(", null, ",", null, ")");
      q.push({
        i: i - 4,
        x: (0, _number.default)(xa, xb)
      }, {
        i: i - 2,
        x: (0, _number.default)(ya, yb)
      });
    } else if (xb !== 1 || yb !== 1) {
      s.push(pop(s) + "scale(" + xb + "," + yb + ")");
    }
  }

  return function (a, b) {
    var s = [],
        // string constants and placeholders
    q = []; // number interpolators

    a = parse(a), b = parse(b);
    translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
    rotate(a.rotate, b.rotate, s, q);
    skewX(a.skewX, b.skewX, s, q);
    scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
    a = b = null; // gc

    return function (t) {
      var i = -1,
          n = q.length,
          o;

      while (++i < n) s[(o = q[i]).i] = o.x(t);

      return s.join("");
    };
  };
}

var interpolateTransformCss = interpolateTransform(_parse.parseCss, "px, ", "px)", "deg)");
exports.interpolateTransformCss = interpolateTransformCss;
var interpolateTransformSvg = interpolateTransform(_parse.parseSvg, ", ", ")", ")");
exports.interpolateTransformSvg = interpolateTransformSvg;
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-interpolate/src/transform/parse.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseCss = parseCss;
exports.parseSvg = parseSvg;

var _decompose = _interopRequireWildcard(require("./decompose.js"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var svgNode;
/* eslint-disable no-undef */

function parseCss(value) {
  const m = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value + "");
  return m.isIdentity ? _decompose.identity : (0, _decompose.default)(m.a, m.b, m.c, m.d, m.e, m.f);
}

function parseSvg(value) {
  if (value == null) return _decompose.identity;
  if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
  svgNode.setAttribute("transform", value);
  if (!(value = svgNode.transform.baseVal.consolidate())) return _decompose.identity;
  value = value.matrix;
  return (0, _decompose.default)(value.a, value.b, value.c, value.d, value.e, value.f);
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-interpolate/src/rgb.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rgbBasisClosed = exports.rgbBasis = exports.default = void 0;

var _index = require("../../../lib-vendor/d3-color/src/index.js");

var _basis = _interopRequireDefault(require("./basis.js"));

var _basisClosed = _interopRequireDefault(require("./basisClosed.js"));

var _color = _interopRequireWildcard(require("./color.js"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = function rgbGamma(y) {
  var color = (0, _color.gamma)(y);

  function rgb(start, end) {
    var r = color((start = (0, _index.rgb)(start)).r, (end = (0, _index.rgb)(end)).r),
        g = color(start.g, end.g),
        b = color(start.b, end.b),
        opacity = (0, _color.default)(start.opacity, end.opacity);
    return function (t) {
      start.r = r(t);
      start.g = g(t);
      start.b = b(t);
      start.opacity = opacity(t);
      return start + "";
    };
  }

  rgb.gamma = rgbGamma;
  return rgb;
}(1);

exports.default = _default;

function rgbSpline(spline) {
  return function (colors) {
    var n = colors.length,
        r = new Array(n),
        g = new Array(n),
        b = new Array(n),
        i,
        color;

    for (i = 0; i < n; ++i) {
      color = (0, _index.rgb)(colors[i]);
      r[i] = color.r || 0;
      g[i] = color.g || 0;
      b[i] = color.b || 0;
    }

    r = spline(r);
    g = spline(g);
    b = spline(b);
    color.opacity = 1;
    return function (t) {
      color.r = r(t);
      color.g = g(t);
      color.b = b(t);
      return color + "";
    };
  };
}

var rgbBasis = rgbSpline(_basis.default);
exports.rgbBasis = rgbBasis;
var rgbBasisClosed = rgbSpline(_basisClosed.default);
exports.rgbBasisClosed = rgbBasisClosed;
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-interpolate/src/basisClosed.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _basis = require("./basis.js");

function _default(values) {
  var n = values.length;
  return function (t) {
    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),
        v0 = values[(i + n - 1) % n],
        v1 = values[i % n],
        v2 = values[(i + 1) % n],
        v3 = values[(i + 2) % n];
    return (0, _basis.basis)((t - i / n) * n, v0, v1, v2, v3);
  };
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-time/src/duration.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.durationYear = exports.durationWeek = exports.durationSecond = exports.durationMonth = exports.durationMinute = exports.durationHour = exports.durationDay = void 0;
const durationSecond = 1000;
exports.durationSecond = durationSecond;
const durationMinute = durationSecond * 60;
exports.durationMinute = durationMinute;
const durationHour = durationMinute * 60;
exports.durationHour = durationHour;
const durationDay = durationHour * 24;
exports.durationDay = durationDay;
const durationWeek = durationDay * 7;
exports.durationWeek = durationWeek;
const durationMonth = durationDay * 30;
exports.durationMonth = durationMonth;
const durationYear = durationDay * 365;
exports.durationYear = durationYear;
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-time/src/second.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.seconds = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval.js"));

var _duration = require("./duration.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var second = (0, _interval.default)(function (date) {
  date.setTime(date - date.getMilliseconds());
}, function (date, step) {
  date.setTime(+date + step * _duration.durationSecond);
}, function (start, end) {
  return (end - start) / _duration.durationSecond;
}, function (date) {
  return date.getUTCSeconds();
});
var _default = second;
exports.default = _default;
var seconds = second.range;
exports.seconds = seconds;
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-time/src/ticks.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.utcTicks = exports.utcTickInterval = exports.timeTicks = exports.timeTickInterval = void 0;

var _index = require("../../../lib-vendor/d3-array/src/index.js");

var _duration = require("./duration.js");

var _millisecond = _interopRequireDefault(require("./millisecond.js"));

var _second = _interopRequireDefault(require("./second.js"));

var _minute = _interopRequireDefault(require("./minute.js"));

var _hour = _interopRequireDefault(require("./hour.js"));

var _day = _interopRequireDefault(require("./day.js"));

var _week = require("./week.js");

var _month = _interopRequireDefault(require("./month.js"));

var _year = _interopRequireDefault(require("./year.js"));

var _utcMinute = _interopRequireDefault(require("./utcMinute.js"));

var _utcHour = _interopRequireDefault(require("./utcHour.js"));

var _utcDay = _interopRequireDefault(require("./utcDay.js"));

var _utcWeek = require("./utcWeek.js");

var _utcMonth = _interopRequireDefault(require("./utcMonth.js"));

var _utcYear = _interopRequireDefault(require("./utcYear.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ticker(year, month, week, day, hour, minute) {
  const tickIntervals = [[_second.default, 1, _duration.durationSecond], [_second.default, 5, 5 * _duration.durationSecond], [_second.default, 15, 15 * _duration.durationSecond], [_second.default, 30, 30 * _duration.durationSecond], [minute, 1, _duration.durationMinute], [minute, 5, 5 * _duration.durationMinute], [minute, 15, 15 * _duration.durationMinute], [minute, 30, 30 * _duration.durationMinute], [hour, 1, _duration.durationHour], [hour, 3, 3 * _duration.durationHour], [hour, 6, 6 * _duration.durationHour], [hour, 12, 12 * _duration.durationHour], [day, 1, _duration.durationDay], [day, 2, 2 * _duration.durationDay], [week, 1, _duration.durationWeek], [month, 1, _duration.durationMonth], [month, 3, 3 * _duration.durationMonth], [year, 1, _duration.durationYear]];

  function ticks(start, stop, count) {
    const reverse = stop < start;
    if (reverse) [start, stop] = [stop, start];
    const interval = count && typeof count.range === "function" ? count : tickInterval(start, stop, count);
    const ticks = interval ? interval.range(start, +stop + 1) : []; // inclusive stop

    return reverse ? ticks.reverse() : ticks;
  }

  function tickInterval(start, stop, count) {
    const target = Math.abs(stop - start) / count;
    const i = (0, _index.bisector)(([,, step]) => step).right(tickIntervals, target);
    if (i === tickIntervals.length) return year.every((0, _index.tickStep)(start / _duration.durationYear, stop / _duration.durationYear, count));
    if (i === 0) return _millisecond.default.every(Math.max((0, _index.tickStep)(start, stop, count), 1));
    const [t, step] = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];
    return t.every(step);
  }

  return [ticks, tickInterval];
}

const [utcTicks, utcTickInterval] = ticker(_utcYear.default, _utcMonth.default, _utcWeek.utcSunday, _utcDay.default, _utcHour.default, _utcMinute.default);
exports.utcTickInterval = utcTickInterval;
exports.utcTicks = utcTicks;
const [timeTicks, timeTickInterval] = ticker(_year.default, _month.default, _week.sunday, _day.default, _hour.default, _minute.default);
exports.timeTickInterval = timeTickInterval;
exports.timeTicks = timeTicks;
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-time/src/utcWeek.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.utcWednesdays = exports.utcWednesday = exports.utcTuesdays = exports.utcTuesday = exports.utcThursdays = exports.utcThursday = exports.utcSundays = exports.utcSunday = exports.utcSaturdays = exports.utcSaturday = exports.utcMondays = exports.utcMonday = exports.utcFridays = exports.utcFriday = void 0;

var _interval = _interopRequireDefault(require("./interval.js"));

var _duration = require("./duration.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function utcWeekday(i) {
  return (0, _interval.default)(function (date) {
    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
    date.setUTCHours(0, 0, 0, 0);
  }, function (date, step) {
    date.setUTCDate(date.getUTCDate() + step * 7);
  }, function (start, end) {
    return (end - start) / _duration.durationWeek;
  });
}

var utcSunday = utcWeekday(0);
exports.utcSunday = utcSunday;
var utcMonday = utcWeekday(1);
exports.utcMonday = utcMonday;
var utcTuesday = utcWeekday(2);
exports.utcTuesday = utcTuesday;
var utcWednesday = utcWeekday(3);
exports.utcWednesday = utcWednesday;
var utcThursday = utcWeekday(4);
exports.utcThursday = utcThursday;
var utcFriday = utcWeekday(5);
exports.utcFriday = utcFriday;
var utcSaturday = utcWeekday(6);
exports.utcSaturday = utcSaturday;
var utcSundays = utcSunday.range;
exports.utcSundays = utcSundays;
var utcMondays = utcMonday.range;
exports.utcMondays = utcMondays;
var utcTuesdays = utcTuesday.range;
exports.utcTuesdays = utcTuesdays;
var utcWednesdays = utcWednesday.range;
exports.utcWednesdays = utcWednesdays;
var utcThursdays = utcThursday.range;
exports.utcThursdays = utcThursdays;
var utcFridays = utcFriday.range;
exports.utcFridays = utcFridays;
var utcSaturdays = utcSaturday.range;
exports.utcSaturdays = utcSaturdays;
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-time/src/utcMonth.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.utcMonths = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var utcMonth = (0, _interval.default)(function (date) {
  date.setUTCDate(1);
  date.setUTCHours(0, 0, 0, 0);
}, function (date, step) {
  date.setUTCMonth(date.getUTCMonth() + step);
}, function (start, end) {
  return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
}, function (date) {
  return date.getUTCMonth();
});
var _default = utcMonth;
exports.default = _default;
var utcMonths = utcMonth.range;
exports.utcMonths = utcMonths;
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-time/src/utcMinute.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.utcMinutes = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval.js"));

var _duration = require("./duration.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var utcMinute = (0, _interval.default)(function (date) {
  date.setUTCSeconds(0, 0);
}, function (date, step) {
  date.setTime(+date + step * _duration.durationMinute);
}, function (start, end) {
  return (end - start) / _duration.durationMinute;
}, function (date) {
  return date.getUTCMinutes();
});
var _default = utcMinute;
exports.default = _default;
var utcMinutes = utcMinute.range;
exports.utcMinutes = utcMinutes;
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-time/src/utcHour.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.utcHours = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval.js"));

var _duration = require("./duration.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var utcHour = (0, _interval.default)(function (date) {
  date.setUTCMinutes(0, 0, 0);
}, function (date, step) {
  date.setTime(+date + step * _duration.durationHour);
}, function (start, end) {
  return (end - start) / _duration.durationHour;
}, function (date) {
  return date.getUTCHours();
});
var _default = utcHour;
exports.default = _default;
var utcHours = utcHour.range;
exports.utcHours = utcHours;
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-time/src/interval.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = newInterval;
var t0 = new Date(),
    t1 = new Date();

function newInterval(floori, offseti, count, field) {
  function interval(date) {
    return floori(date = arguments.length === 0 ? new Date() : new Date(+date)), date;
  }

  interval.floor = function (date) {
    return floori(date = new Date(+date)), date;
  };

  interval.ceil = function (date) {
    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
  };

  interval.round = function (date) {
    var d0 = interval(date),
        d1 = interval.ceil(date);
    return date - d0 < d1 - date ? d0 : d1;
  };

  interval.offset = function (date, step) {
    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;
  };

  interval.range = function (start, stop, step) {
    var range = [],
        previous;
    start = interval.ceil(start);
    step = step == null ? 1 : Math.floor(step);
    if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date

    do range.push(previous = new Date(+start)), offseti(start, step), floori(start); while (previous < start && start < stop);

    return range;
  };

  interval.filter = function (test) {
    return newInterval(function (date) {
      if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);
    }, function (date, step) {
      if (date >= date) {
        if (step < 0) while (++step <= 0) {
          while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty

        } else while (--step >= 0) {
          while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty

        }
      }
    });
  };

  if (count) {
    interval.count = function (start, end) {
      t0.setTime(+start), t1.setTime(+end);
      floori(t0), floori(t1);
      return Math.floor(count(t0, t1));
    };

    interval.every = function (step) {
      step = Math.floor(step);
      return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {
        return field(d) % step === 0;
      } : function (d) {
        return interval.count(0, d) % step === 0;
      });
    };
  }

  return interval;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-time/src/index.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "timeDay", {
  enumerable: true,
  get: function () {
    return _day.default;
  }
});
Object.defineProperty(exports, "timeDays", {
  enumerable: true,
  get: function () {
    return _day.days;
  }
});
Object.defineProperty(exports, "timeFriday", {
  enumerable: true,
  get: function () {
    return _week.friday;
  }
});
Object.defineProperty(exports, "timeFridays", {
  enumerable: true,
  get: function () {
    return _week.fridays;
  }
});
Object.defineProperty(exports, "timeHour", {
  enumerable: true,
  get: function () {
    return _hour.default;
  }
});
Object.defineProperty(exports, "timeHours", {
  enumerable: true,
  get: function () {
    return _hour.hours;
  }
});
Object.defineProperty(exports, "timeInterval", {
  enumerable: true,
  get: function () {
    return _interval.default;
  }
});
Object.defineProperty(exports, "timeMillisecond", {
  enumerable: true,
  get: function () {
    return _millisecond.default;
  }
});
Object.defineProperty(exports, "timeMilliseconds", {
  enumerable: true,
  get: function () {
    return _millisecond.milliseconds;
  }
});
Object.defineProperty(exports, "timeMinute", {
  enumerable: true,
  get: function () {
    return _minute.default;
  }
});
Object.defineProperty(exports, "timeMinutes", {
  enumerable: true,
  get: function () {
    return _minute.minutes;
  }
});
Object.defineProperty(exports, "timeMonday", {
  enumerable: true,
  get: function () {
    return _week.monday;
  }
});
Object.defineProperty(exports, "timeMondays", {
  enumerable: true,
  get: function () {
    return _week.mondays;
  }
});
Object.defineProperty(exports, "timeMonth", {
  enumerable: true,
  get: function () {
    return _month.default;
  }
});
Object.defineProperty(exports, "timeMonths", {
  enumerable: true,
  get: function () {
    return _month.months;
  }
});
Object.defineProperty(exports, "timeSaturday", {
  enumerable: true,
  get: function () {
    return _week.saturday;
  }
});
Object.defineProperty(exports, "timeSaturdays", {
  enumerable: true,
  get: function () {
    return _week.saturdays;
  }
});
Object.defineProperty(exports, "timeSecond", {
  enumerable: true,
  get: function () {
    return _second.default;
  }
});
Object.defineProperty(exports, "timeSeconds", {
  enumerable: true,
  get: function () {
    return _second.seconds;
  }
});
Object.defineProperty(exports, "timeSunday", {
  enumerable: true,
  get: function () {
    return _week.sunday;
  }
});
Object.defineProperty(exports, "timeSundays", {
  enumerable: true,
  get: function () {
    return _week.sundays;
  }
});
Object.defineProperty(exports, "timeThursday", {
  enumerable: true,
  get: function () {
    return _week.thursday;
  }
});
Object.defineProperty(exports, "timeThursdays", {
  enumerable: true,
  get: function () {
    return _week.thursdays;
  }
});
Object.defineProperty(exports, "timeTickInterval", {
  enumerable: true,
  get: function () {
    return _ticks.timeTickInterval;
  }
});
Object.defineProperty(exports, "timeTicks", {
  enumerable: true,
  get: function () {
    return _ticks.timeTicks;
  }
});
Object.defineProperty(exports, "timeTuesday", {
  enumerable: true,
  get: function () {
    return _week.tuesday;
  }
});
Object.defineProperty(exports, "timeTuesdays", {
  enumerable: true,
  get: function () {
    return _week.tuesdays;
  }
});
Object.defineProperty(exports, "timeWednesday", {
  enumerable: true,
  get: function () {
    return _week.wednesday;
  }
});
Object.defineProperty(exports, "timeWednesdays", {
  enumerable: true,
  get: function () {
    return _week.wednesdays;
  }
});
Object.defineProperty(exports, "timeWeek", {
  enumerable: true,
  get: function () {
    return _week.sunday;
  }
});
Object.defineProperty(exports, "timeWeeks", {
  enumerable: true,
  get: function () {
    return _week.sundays;
  }
});
Object.defineProperty(exports, "timeYear", {
  enumerable: true,
  get: function () {
    return _year.default;
  }
});
Object.defineProperty(exports, "timeYears", {
  enumerable: true,
  get: function () {
    return _year.years;
  }
});
Object.defineProperty(exports, "utcDay", {
  enumerable: true,
  get: function () {
    return _utcDay.default;
  }
});
Object.defineProperty(exports, "utcDays", {
  enumerable: true,
  get: function () {
    return _utcDay.utcDays;
  }
});
Object.defineProperty(exports, "utcFriday", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcFriday;
  }
});
Object.defineProperty(exports, "utcFridays", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcFridays;
  }
});
Object.defineProperty(exports, "utcHour", {
  enumerable: true,
  get: function () {
    return _utcHour.default;
  }
});
Object.defineProperty(exports, "utcHours", {
  enumerable: true,
  get: function () {
    return _utcHour.utcHours;
  }
});
Object.defineProperty(exports, "utcMillisecond", {
  enumerable: true,
  get: function () {
    return _millisecond.default;
  }
});
Object.defineProperty(exports, "utcMilliseconds", {
  enumerable: true,
  get: function () {
    return _millisecond.milliseconds;
  }
});
Object.defineProperty(exports, "utcMinute", {
  enumerable: true,
  get: function () {
    return _utcMinute.default;
  }
});
Object.defineProperty(exports, "utcMinutes", {
  enumerable: true,
  get: function () {
    return _utcMinute.utcMinutes;
  }
});
Object.defineProperty(exports, "utcMonday", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcMonday;
  }
});
Object.defineProperty(exports, "utcMondays", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcMondays;
  }
});
Object.defineProperty(exports, "utcMonth", {
  enumerable: true,
  get: function () {
    return _utcMonth.default;
  }
});
Object.defineProperty(exports, "utcMonths", {
  enumerable: true,
  get: function () {
    return _utcMonth.utcMonths;
  }
});
Object.defineProperty(exports, "utcSaturday", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcSaturday;
  }
});
Object.defineProperty(exports, "utcSaturdays", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcSaturdays;
  }
});
Object.defineProperty(exports, "utcSecond", {
  enumerable: true,
  get: function () {
    return _second.default;
  }
});
Object.defineProperty(exports, "utcSeconds", {
  enumerable: true,
  get: function () {
    return _second.seconds;
  }
});
Object.defineProperty(exports, "utcSunday", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcSunday;
  }
});
Object.defineProperty(exports, "utcSundays", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcSundays;
  }
});
Object.defineProperty(exports, "utcThursday", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcThursday;
  }
});
Object.defineProperty(exports, "utcThursdays", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcThursdays;
  }
});
Object.defineProperty(exports, "utcTickInterval", {
  enumerable: true,
  get: function () {
    return _ticks.utcTickInterval;
  }
});
Object.defineProperty(exports, "utcTicks", {
  enumerable: true,
  get: function () {
    return _ticks.utcTicks;
  }
});
Object.defineProperty(exports, "utcTuesday", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcTuesday;
  }
});
Object.defineProperty(exports, "utcTuesdays", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcTuesdays;
  }
});
Object.defineProperty(exports, "utcWednesday", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcWednesday;
  }
});
Object.defineProperty(exports, "utcWednesdays", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcWednesdays;
  }
});
Object.defineProperty(exports, "utcWeek", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcSunday;
  }
});
Object.defineProperty(exports, "utcWeeks", {
  enumerable: true,
  get: function () {
    return _utcWeek.utcSundays;
  }
});
Object.defineProperty(exports, "utcYear", {
  enumerable: true,
  get: function () {
    return _utcYear.default;
  }
});
Object.defineProperty(exports, "utcYears", {
  enumerable: true,
  get: function () {
    return _utcYear.utcYears;
  }
});

var _interval = _interopRequireDefault(require("./interval.js"));

var _millisecond = _interopRequireWildcard(require("./millisecond.js"));

var _second = _interopRequireWildcard(require("./second.js"));

var _minute = _interopRequireWildcard(require("./minute.js"));

var _hour = _interopRequireWildcard(require("./hour.js"));

var _day = _interopRequireWildcard(require("./day.js"));

var _week = require("./week.js");

var _month = _interopRequireWildcard(require("./month.js"));

var _year = _interopRequireWildcard(require("./year.js"));

var _utcMinute = _interopRequireWildcard(require("./utcMinute.js"));

var _utcHour = _interopRequireWildcard(require("./utcHour.js"));

var _utcDay = _interopRequireWildcard(require("./utcDay.js"));

var _utcWeek = require("./utcWeek.js");

var _utcMonth = _interopRequireWildcard(require("./utcMonth.js"));

var _utcYear = _interopRequireWildcard(require("./utcYear.js"));

var _ticks = require("./ticks.js");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-time/src/year.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.years = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var year = (0, _interval.default)(function (date) {
  date.setMonth(0, 1);
  date.setHours(0, 0, 0, 0);
}, function (date, step) {
  date.setFullYear(date.getFullYear() + step);
}, function (start, end) {
  return end.getFullYear() - start.getFullYear();
}, function (date) {
  return date.getFullYear();
}); // An optimized implementation for this simple case.

year.every = function (k) {
  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : (0, _interval.default)(function (date) {
    date.setFullYear(Math.floor(date.getFullYear() / k) * k);
    date.setMonth(0, 1);
    date.setHours(0, 0, 0, 0);
  }, function (date, step) {
    date.setFullYear(date.getFullYear() + step * k);
  });
};

var _default = year;
exports.default = _default;
var years = year.range;
exports.years = years;
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-time/src/week.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wednesdays = exports.wednesday = exports.tuesdays = exports.tuesday = exports.thursdays = exports.thursday = exports.sundays = exports.sunday = exports.saturdays = exports.saturday = exports.mondays = exports.monday = exports.fridays = exports.friday = void 0;

var _interval = _interopRequireDefault(require("./interval.js"));

var _duration = require("./duration.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function weekday(i) {
  return (0, _interval.default)(function (date) {
    date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
    date.setHours(0, 0, 0, 0);
  }, function (date, step) {
    date.setDate(date.getDate() + step * 7);
  }, function (start, end) {
    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * _duration.durationMinute) / _duration.durationWeek;
  });
}

var sunday = weekday(0);
exports.sunday = sunday;
var monday = weekday(1);
exports.monday = monday;
var tuesday = weekday(2);
exports.tuesday = tuesday;
var wednesday = weekday(3);
exports.wednesday = wednesday;
var thursday = weekday(4);
exports.thursday = thursday;
var friday = weekday(5);
exports.friday = friday;
var saturday = weekday(6);
exports.saturday = saturday;
var sundays = sunday.range;
exports.sundays = sundays;
var mondays = monday.range;
exports.mondays = mondays;
var tuesdays = tuesday.range;
exports.tuesdays = tuesdays;
var wednesdays = wednesday.range;
exports.wednesdays = wednesdays;
var thursdays = thursday.range;
exports.thursdays = thursdays;
var fridays = friday.range;
exports.fridays = fridays;
var saturdays = saturday.range;
exports.saturdays = saturdays;
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-time/src/month.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.months = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var month = (0, _interval.default)(function (date) {
  date.setDate(1);
  date.setHours(0, 0, 0, 0);
}, function (date, step) {
  date.setMonth(date.getMonth() + step);
}, function (start, end) {
  return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
}, function (date) {
  return date.getMonth();
});
var _default = month;
exports.default = _default;
var months = month.range;
exports.months = months;
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-time/src/utcYear.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.utcYears = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var utcYear = (0, _interval.default)(function (date) {
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
}, function (date, step) {
  date.setUTCFullYear(date.getUTCFullYear() + step);
}, function (start, end) {
  return end.getUTCFullYear() - start.getUTCFullYear();
}, function (date) {
  return date.getUTCFullYear();
}); // An optimized implementation for this simple case.

utcYear.every = function (k) {
  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : (0, _interval.default)(function (date) {
    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);
    date.setUTCMonth(0, 1);
    date.setUTCHours(0, 0, 0, 0);
  }, function (date, step) {
    date.setUTCFullYear(date.getUTCFullYear() + step * k);
  });
};

var _default = utcYear;
exports.default = _default;
var utcYears = utcYear.range;
exports.utcYears = utcYears;
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-time/src/day.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.days = void 0;

var _interval = _interopRequireDefault(require("./interval.js"));

var _duration = require("./duration.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var day = (0, _interval.default)(date => date.setHours(0, 0, 0, 0), (date, step) => date.setDate(date.getDate() + step), (start, end) => (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * _duration.durationMinute) / _duration.durationDay, date => date.getDate() - 1);
var _default = day;
exports.default = _default;
var days = day.range;
exports.days = days;
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-time/src/utcDay.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.utcDays = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval.js"));

var _duration = require("./duration.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var utcDay = (0, _interval.default)(function (date) {
  date.setUTCHours(0, 0, 0, 0);
}, function (date, step) {
  date.setUTCDate(date.getUTCDate() + step);
}, function (start, end) {
  return (end - start) / _duration.durationDay;
}, function (date) {
  return date.getUTCDate() - 1;
});
var _default = utcDay;
exports.default = _default;
var utcDays = utcDay.range;
exports.utcDays = utcDays;
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-time/src/minute.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.minutes = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval.js"));

var _duration = require("./duration.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var minute = (0, _interval.default)(function (date) {
  date.setTime(date - date.getMilliseconds() - date.getSeconds() * _duration.durationSecond);
}, function (date, step) {
  date.setTime(+date + step * _duration.durationMinute);
}, function (start, end) {
  return (end - start) / _duration.durationMinute;
}, function (date) {
  return date.getMinutes();
});
var _default = minute;
exports.default = _default;
var minutes = minute.range;
exports.minutes = minutes;
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-time/src/millisecond.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.milliseconds = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var millisecond = (0, _interval.default)(function () {// noop
}, function (date, step) {
  date.setTime(+date + step);
}, function (start, end) {
  return end - start;
}); // An optimized implementation for this simple case.

millisecond.every = function (k) {
  k = Math.floor(k);
  if (!isFinite(k) || !(k > 0)) return null;
  if (!(k > 1)) return millisecond;
  return (0, _interval.default)(function (date) {
    date.setTime(Math.floor(date / k) * k);
  }, function (date, step) {
    date.setTime(+date + step * k);
  }, function (start, end) {
    return (end - start) / k;
  });
};

var _default = millisecond;
exports.default = _default;
var milliseconds = millisecond.range;
exports.milliseconds = milliseconds;
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-time/src/hour.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hours = exports.default = void 0;

var _interval = _interopRequireDefault(require("./interval.js"));

var _duration = require("./duration.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var hour = (0, _interval.default)(function (date) {
  date.setTime(date - date.getMilliseconds() - date.getSeconds() * _duration.durationSecond - date.getMinutes() * _duration.durationMinute);
}, function (date, step) {
  date.setTime(+date + step * _duration.durationHour);
}, function (start, end) {
  return (end - start) / _duration.durationHour;
}, function (date) {
  return date.getHours();
});
var _default = hour;
exports.default = _default;
var hours = hour.range;
exports.hours = hours;
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-path/src/index.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "path", {
  enumerable: true,
  get: function () {
    return _path.default;
  }
});

var _path = _interopRequireDefault(require("./path.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-path/src/path.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
const pi = Math.PI,
      tau = 2 * pi,
      epsilon = 1e-6,
      tauEpsilon = tau - epsilon;

function Path() {
  this._x0 = this._y0 = // start of current subpath
  this._x1 = this._y1 = null; // end of current subpath

  this._ = "";
}

function path() {
  return new Path();
}

Path.prototype = path.prototype = {
  constructor: Path,
  moveTo: function (x, y) {
    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y);
  },
  closePath: function () {
    if (this._x1 !== null) {
      this._x1 = this._x0, this._y1 = this._y0;
      this._ += "Z";
    }
  },
  lineTo: function (x, y) {
    this._ += "L" + (this._x1 = +x) + "," + (this._y1 = +y);
  },
  quadraticCurveTo: function (x1, y1, x, y) {
    this._ += "Q" + +x1 + "," + +y1 + "," + (this._x1 = +x) + "," + (this._y1 = +y);
  },
  bezierCurveTo: function (x1, y1, x2, y2, x, y) {
    this._ += "C" + +x1 + "," + +y1 + "," + +x2 + "," + +y2 + "," + (this._x1 = +x) + "," + (this._y1 = +y);
  },
  arcTo: function (x1, y1, x2, y2, r) {
    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
    var x0 = this._x1,
        y0 = this._y1,
        x21 = x2 - x1,
        y21 = y2 - y1,
        x01 = x0 - x1,
        y01 = y0 - y1,
        l01_2 = x01 * x01 + y01 * y01; // Is the radius negative? Error.

    if (r < 0) throw new Error("negative radius: " + r); // Is this path empty? Move to (x1,y1).

    if (this._x1 === null) {
      this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);
    } // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.
    else if (!(l01_2 > epsilon)) ; // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?
    // Equivalently, is (x1,y1) coincident with (x2,y2)?
    // Or, is the radius zero? Line to (x1,y1).
    else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {
      this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);
    } // Otherwise, draw an arc!
    else {
      var x20 = x2 - x0,
          y20 = y2 - y0,
          l21_2 = x21 * x21 + y21 * y21,
          l20_2 = x20 * x20 + y20 * y20,
          l21 = Math.sqrt(l21_2),
          l01 = Math.sqrt(l01_2),
          l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),
          t01 = l / l01,
          t21 = l / l21; // If the start tangent is not coincident with (x0,y0), line to.

      if (Math.abs(t01 - 1) > epsilon) {
        this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);
      }

      this._ += "A" + r + "," + r + ",0,0," + +(y01 * x20 > x01 * y20) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
    }
  },
  arc: function (x, y, r, a0, a1, ccw) {
    x = +x, y = +y, r = +r, ccw = !!ccw;
    var dx = r * Math.cos(a0),
        dy = r * Math.sin(a0),
        x0 = x + dx,
        y0 = y + dy,
        cw = 1 ^ ccw,
        da = ccw ? a0 - a1 : a1 - a0; // Is the radius negative? Error.

    if (r < 0) throw new Error("negative radius: " + r); // Is this path empty? Move to (x0,y0).

    if (this._x1 === null) {
      this._ += "M" + x0 + "," + y0;
    } // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).
    else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {
      this._ += "L" + x0 + "," + y0;
    } // Is this arc empty? We’re done.


    if (!r) return; // Does the angle go the wrong way? Flip the direction.

    if (da < 0) da = da % tau + tau; // Is this a complete circle? Draw two arcs to complete the circle.

    if (da > tauEpsilon) {
      this._ += "A" + r + "," + r + ",0,1," + cw + "," + (x - dx) + "," + (y - dy) + "A" + r + "," + r + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);
    } // Is this arc non-empty? Draw an arc!
    else if (da > epsilon) {
      this._ += "A" + r + "," + r + ",0," + +(da >= pi) + "," + cw + "," + (this._x1 = x + r * Math.cos(a1)) + "," + (this._y1 = y + r * Math.sin(a1));
    }
  },
  rect: function (x, y, w, h) {
    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y) + "h" + +w + "v" + +h + "h" + -w + "Z";
  },
  toString: function () {
    return this._;
  }
};
var _default = path;
exports.default = _default;
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-voronoi/src/Cell.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cellHalfedgeEnd = cellHalfedgeEnd;
exports.cellHalfedgeStart = cellHalfedgeStart;
exports.clipCells = clipCells;
exports.createCell = createCell;
exports.sortCellHalfedges = sortCellHalfedges;

var _Edge = require("./Edge");

var _Diagram = require("./Diagram");

function createCell(site) {
  return _Diagram.cells[site.index] = {
    site: site,
    halfedges: []
  };
}

function cellHalfedgeAngle(cell, edge) {
  var site = cell.site,
      va = edge.left,
      vb = edge.right;
  if (site === vb) vb = va, va = site;
  if (vb) return Math.atan2(vb[1] - va[1], vb[0] - va[0]);
  if (site === va) va = edge[1], vb = edge[0];else va = edge[0], vb = edge[1];
  return Math.atan2(va[0] - vb[0], vb[1] - va[1]);
}

function cellHalfedgeStart(cell, edge) {
  return edge[+(edge.left !== cell.site)];
}

function cellHalfedgeEnd(cell, edge) {
  return edge[+(edge.left === cell.site)];
}

function sortCellHalfedges() {
  for (var i = 0, n = _Diagram.cells.length, cell, halfedges, j, m; i < n; ++i) {
    if ((cell = _Diagram.cells[i]) && (m = (halfedges = cell.halfedges).length)) {
      var index = new Array(m),
          array = new Array(m);

      for (j = 0; j < m; ++j) index[j] = j, array[j] = cellHalfedgeAngle(cell, _Diagram.edges[halfedges[j]]);

      index.sort(function (i, j) {
        return array[j] - array[i];
      });

      for (j = 0; j < m; ++j) array[j] = halfedges[index[j]];

      for (j = 0; j < m; ++j) halfedges[j] = array[j];
    }
  }
}

function clipCells(x0, y0, x1, y1) {
  var nCells = _Diagram.cells.length,
      iCell,
      cell,
      site,
      iHalfedge,
      halfedges,
      nHalfedges,
      start,
      startX,
      startY,
      end,
      endX,
      endY,
      cover = true;

  for (iCell = 0; iCell < nCells; ++iCell) {
    if (cell = _Diagram.cells[iCell]) {
      site = cell.site;
      halfedges = cell.halfedges;
      iHalfedge = halfedges.length; // Remove any dangling clipped edges.

      while (iHalfedge--) {
        if (!_Diagram.edges[halfedges[iHalfedge]]) {
          halfedges.splice(iHalfedge, 1);
        }
      } // Insert any border edges as necessary.


      iHalfedge = 0, nHalfedges = halfedges.length;

      while (iHalfedge < nHalfedges) {
        end = cellHalfedgeEnd(cell, _Diagram.edges[halfedges[iHalfedge]]), endX = end[0], endY = end[1];
        start = cellHalfedgeStart(cell, _Diagram.edges[halfedges[++iHalfedge % nHalfedges]]), startX = start[0], startY = start[1];

        if (Math.abs(endX - startX) > _Diagram.epsilon || Math.abs(endY - startY) > _Diagram.epsilon) {
          halfedges.splice(iHalfedge, 0, _Diagram.edges.push((0, _Edge.createBorderEdge)(site, end, Math.abs(endX - x0) < _Diagram.epsilon && y1 - endY > _Diagram.epsilon ? [x0, Math.abs(startX - x0) < _Diagram.epsilon ? startY : y1] : Math.abs(endY - y1) < _Diagram.epsilon && x1 - endX > _Diagram.epsilon ? [Math.abs(startY - y1) < _Diagram.epsilon ? startX : x1, y1] : Math.abs(endX - x1) < _Diagram.epsilon && endY - y0 > _Diagram.epsilon ? [x1, Math.abs(startX - x1) < _Diagram.epsilon ? startY : y0] : Math.abs(endY - y0) < _Diagram.epsilon && endX - x0 > _Diagram.epsilon ? [Math.abs(startY - y0) < _Diagram.epsilon ? startX : x0, y0] : null)) - 1);
          ++nHalfedges;
        }
      }

      if (nHalfedges) cover = false;
    }
  } // If there weren’t any edges, have the closest site cover the extent.
  // It doesn’t matter which corner of the extent we measure!


  if (cover) {
    var dx,
        dy,
        d2,
        dc = Infinity;

    for (iCell = 0, cover = null; iCell < nCells; ++iCell) {
      if (cell = _Diagram.cells[iCell]) {
        site = cell.site;
        dx = site[0] - x0;
        dy = site[1] - y0;
        d2 = dx * dx + dy * dy;
        if (d2 < dc) dc = d2, cover = cell;
      }
    }

    if (cover) {
      var v00 = [x0, y0],
          v01 = [x0, y1],
          v11 = [x1, y1],
          v10 = [x1, y0];
      cover.halfedges.push(_Diagram.edges.push((0, _Edge.createBorderEdge)(site = cover.site, v00, v01)) - 1, _Diagram.edges.push((0, _Edge.createBorderEdge)(site, v01, v11)) - 1, _Diagram.edges.push((0, _Edge.createBorderEdge)(site, v11, v10)) - 1, _Diagram.edges.push((0, _Edge.createBorderEdge)(site, v10, v00)) - 1);
    }
  } // Lastly delete any cells with no edges; these were entirely clipped.


  for (iCell = 0; iCell < nCells; ++iCell) {
    if (cell = _Diagram.cells[iCell]) {
      if (!cell.halfedges.length) {
        delete _Diagram.cells[iCell];
      }
    }
  }
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-voronoi/src/Circle.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.attachCircle = attachCircle;
exports.detachCircle = detachCircle;
exports.firstCircle = void 0;

var _RedBlackTree = require("./RedBlackTree");

var _Diagram = require("./Diagram");

var circlePool = [];
var firstCircle;
exports.firstCircle = firstCircle;

function Circle() {
  (0, _RedBlackTree.RedBlackNode)(this);
  this.x = this.y = this.arc = this.site = this.cy = null;
}

function attachCircle(arc) {
  var lArc = arc.P,
      rArc = arc.N;
  if (!lArc || !rArc) return;
  var lSite = lArc.site,
      cSite = arc.site,
      rSite = rArc.site;
  if (lSite === rSite) return;
  var bx = cSite[0],
      by = cSite[1],
      ax = lSite[0] - bx,
      ay = lSite[1] - by,
      cx = rSite[0] - bx,
      cy = rSite[1] - by;
  var d = 2 * (ax * cy - ay * cx);
  if (d >= -_Diagram.epsilon2) return;
  var ha = ax * ax + ay * ay,
      hc = cx * cx + cy * cy,
      x = (cy * ha - ay * hc) / d,
      y = (ax * hc - cx * ha) / d;
  var circle = circlePool.pop() || new Circle();
  circle.arc = arc;
  circle.site = cSite;
  circle.x = x + bx;
  circle.y = (circle.cy = y + by) + Math.sqrt(x * x + y * y); // y bottom

  arc.circle = circle;
  var before = null,
      node = _Diagram.circles._;

  while (node) {
    if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {
      if (node.L) node = node.L;else {
        before = node.P;
        break;
      }
    } else {
      if (node.R) node = node.R;else {
        before = node;
        break;
      }
    }
  }

  _Diagram.circles.insert(before, circle);

  if (!before) exports.firstCircle = firstCircle = circle;
}

function detachCircle(arc) {
  var circle = arc.circle;

  if (circle) {
    if (!circle.P) exports.firstCircle = firstCircle = circle.N;

    _Diagram.circles.remove(circle);

    circlePool.push(circle);
    (0, _RedBlackTree.RedBlackNode)(circle);
    arc.circle = null;
  }
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-voronoi/src/Beach.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addBeach = addBeach;
exports.removeBeach = removeBeach;

var _RedBlackTree = require("./RedBlackTree");

var _Cell = require("./Cell");

var _Circle = require("./Circle");

var _Edge = require("./Edge");

var _Diagram = require("./Diagram");

var beachPool = [];

function Beach() {
  (0, _RedBlackTree.RedBlackNode)(this);
  this.edge = this.site = this.circle = null;
}

function createBeach(site) {
  var beach = beachPool.pop() || new Beach();
  beach.site = site;
  return beach;
}

function detachBeach(beach) {
  (0, _Circle.detachCircle)(beach);

  _Diagram.beaches.remove(beach);

  beachPool.push(beach);
  (0, _RedBlackTree.RedBlackNode)(beach);
}

function removeBeach(beach) {
  var circle = beach.circle,
      x = circle.x,
      y = circle.cy,
      vertex = [x, y],
      previous = beach.P,
      next = beach.N,
      disappearing = [beach];
  detachBeach(beach);
  var lArc = previous;

  while (lArc.circle && Math.abs(x - lArc.circle.x) < _Diagram.epsilon && Math.abs(y - lArc.circle.cy) < _Diagram.epsilon) {
    previous = lArc.P;
    disappearing.unshift(lArc);
    detachBeach(lArc);
    lArc = previous;
  }

  disappearing.unshift(lArc);
  (0, _Circle.detachCircle)(lArc);
  var rArc = next;

  while (rArc.circle && Math.abs(x - rArc.circle.x) < _Diagram.epsilon && Math.abs(y - rArc.circle.cy) < _Diagram.epsilon) {
    next = rArc.N;
    disappearing.push(rArc);
    detachBeach(rArc);
    rArc = next;
  }

  disappearing.push(rArc);
  (0, _Circle.detachCircle)(rArc);
  var nArcs = disappearing.length,
      iArc;

  for (iArc = 1; iArc < nArcs; ++iArc) {
    rArc = disappearing[iArc];
    lArc = disappearing[iArc - 1];
    (0, _Edge.setEdgeEnd)(rArc.edge, lArc.site, rArc.site, vertex);
  }

  lArc = disappearing[0];
  rArc = disappearing[nArcs - 1];
  rArc.edge = (0, _Edge.createEdge)(lArc.site, rArc.site, null, vertex);
  (0, _Circle.attachCircle)(lArc);
  (0, _Circle.attachCircle)(rArc);
}

function addBeach(site) {
  var x = site[0],
      directrix = site[1],
      lArc,
      rArc,
      dxl,
      dxr,
      node = _Diagram.beaches._;

  while (node) {
    dxl = leftBreakPoint(node, directrix) - x;
    if (dxl > _Diagram.epsilon) node = node.L;else {
      dxr = x - rightBreakPoint(node, directrix);

      if (dxr > _Diagram.epsilon) {
        if (!node.R) {
          lArc = node;
          break;
        }

        node = node.R;
      } else {
        if (dxl > -_Diagram.epsilon) {
          lArc = node.P;
          rArc = node;
        } else if (dxr > -_Diagram.epsilon) {
          lArc = node;
          rArc = node.N;
        } else {
          lArc = rArc = node;
        }

        break;
      }
    }
  }

  (0, _Cell.createCell)(site);
  var newArc = createBeach(site);

  _Diagram.beaches.insert(lArc, newArc);

  if (!lArc && !rArc) return;

  if (lArc === rArc) {
    (0, _Circle.detachCircle)(lArc);
    rArc = createBeach(lArc.site);

    _Diagram.beaches.insert(newArc, rArc);

    newArc.edge = rArc.edge = (0, _Edge.createEdge)(lArc.site, newArc.site);
    (0, _Circle.attachCircle)(lArc);
    (0, _Circle.attachCircle)(rArc);
    return;
  }

  if (!rArc) {
    // && lArc
    newArc.edge = (0, _Edge.createEdge)(lArc.site, newArc.site);
    return;
  } // else lArc !== rArc


  (0, _Circle.detachCircle)(lArc);
  (0, _Circle.detachCircle)(rArc);
  var lSite = lArc.site,
      ax = lSite[0],
      ay = lSite[1],
      bx = site[0] - ax,
      by = site[1] - ay,
      rSite = rArc.site,
      cx = rSite[0] - ax,
      cy = rSite[1] - ay,
      d = 2 * (bx * cy - by * cx),
      hb = bx * bx + by * by,
      hc = cx * cx + cy * cy,
      vertex = [(cy * hb - by * hc) / d + ax, (bx * hc - cx * hb) / d + ay];
  (0, _Edge.setEdgeEnd)(rArc.edge, lSite, rSite, vertex);
  newArc.edge = (0, _Edge.createEdge)(lSite, site, null, vertex);
  rArc.edge = (0, _Edge.createEdge)(site, rSite, null, vertex);
  (0, _Circle.attachCircle)(lArc);
  (0, _Circle.attachCircle)(rArc);
}

function leftBreakPoint(arc, directrix) {
  var site = arc.site,
      rfocx = site[0],
      rfocy = site[1],
      pby2 = rfocy - directrix;
  if (!pby2) return rfocx;
  var lArc = arc.P;
  if (!lArc) return -Infinity;
  site = lArc.site;
  var lfocx = site[0],
      lfocy = site[1],
      plby2 = lfocy - directrix;
  if (!plby2) return lfocx;
  var hl = lfocx - rfocx,
      aby2 = 1 / pby2 - 1 / plby2,
      b = hl / plby2;
  if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;
  return (rfocx + lfocx) / 2;
}

function rightBreakPoint(arc, directrix) {
  var rArc = arc.N;
  if (rArc) return leftBreakPoint(rArc, directrix);
  var site = arc.site;
  return site[1] === directrix ? site[0] : Infinity;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-voronoi/src/RedBlackTree.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RedBlackNode = RedBlackNode;
exports.default = void 0;

function RedBlackTree() {
  this._ = null; // root node
}

function RedBlackNode(node) {
  node.U = // parent node
  node.C = // color - true for red, false for black
  node.L = // left node
  node.R = // right node
  node.P = // previous node
  node.N = null; // next node
}

RedBlackTree.prototype = {
  constructor: RedBlackTree,
  insert: function (after, node) {
    var parent, grandpa, uncle;

    if (after) {
      node.P = after;
      node.N = after.N;
      if (after.N) after.N.P = node;
      after.N = node;

      if (after.R) {
        after = after.R;

        while (after.L) after = after.L;

        after.L = node;
      } else {
        after.R = node;
      }

      parent = after;
    } else if (this._) {
      after = RedBlackFirst(this._);
      node.P = null;
      node.N = after;
      after.P = after.L = node;
      parent = after;
    } else {
      node.P = node.N = null;
      this._ = node;
      parent = null;
    }

    node.L = node.R = null;
    node.U = parent;
    node.C = true;
    after = node;

    while (parent && parent.C) {
      grandpa = parent.U;

      if (parent === grandpa.L) {
        uncle = grandpa.R;

        if (uncle && uncle.C) {
          parent.C = uncle.C = false;
          grandpa.C = true;
          after = grandpa;
        } else {
          if (after === parent.R) {
            RedBlackRotateLeft(this, parent);
            after = parent;
            parent = after.U;
          }

          parent.C = false;
          grandpa.C = true;
          RedBlackRotateRight(this, grandpa);
        }
      } else {
        uncle = grandpa.L;

        if (uncle && uncle.C) {
          parent.C = uncle.C = false;
          grandpa.C = true;
          after = grandpa;
        } else {
          if (after === parent.L) {
            RedBlackRotateRight(this, parent);
            after = parent;
            parent = after.U;
          }

          parent.C = false;
          grandpa.C = true;
          RedBlackRotateLeft(this, grandpa);
        }
      }

      parent = after.U;
    }

    this._.C = false;
  },
  remove: function (node) {
    if (node.N) node.N.P = node.P;
    if (node.P) node.P.N = node.N;
    node.N = node.P = null;
    var parent = node.U,
        sibling,
        left = node.L,
        right = node.R,
        next,
        red;
    if (!left) next = right;else if (!right) next = left;else next = RedBlackFirst(right);

    if (parent) {
      if (parent.L === node) parent.L = next;else parent.R = next;
    } else {
      this._ = next;
    }

    if (left && right) {
      red = next.C;
      next.C = node.C;
      next.L = left;
      left.U = next;

      if (next !== right) {
        parent = next.U;
        next.U = node.U;
        node = next.R;
        parent.L = node;
        next.R = right;
        right.U = next;
      } else {
        next.U = parent;
        parent = next;
        node = next.R;
      }
    } else {
      red = node.C;
      node = next;
    }

    if (node) node.U = parent;
    if (red) return;

    if (node && node.C) {
      node.C = false;
      return;
    }

    do {
      if (node === this._) break;

      if (node === parent.L) {
        sibling = parent.R;

        if (sibling.C) {
          sibling.C = false;
          parent.C = true;
          RedBlackRotateLeft(this, parent);
          sibling = parent.R;
        }

        if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
          if (!sibling.R || !sibling.R.C) {
            sibling.L.C = false;
            sibling.C = true;
            RedBlackRotateRight(this, sibling);
            sibling = parent.R;
          }

          sibling.C = parent.C;
          parent.C = sibling.R.C = false;
          RedBlackRotateLeft(this, parent);
          node = this._;
          break;
        }
      } else {
        sibling = parent.L;

        if (sibling.C) {
          sibling.C = false;
          parent.C = true;
          RedBlackRotateRight(this, parent);
          sibling = parent.L;
        }

        if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
          if (!sibling.L || !sibling.L.C) {
            sibling.R.C = false;
            sibling.C = true;
            RedBlackRotateLeft(this, sibling);
            sibling = parent.L;
          }

          sibling.C = parent.C;
          parent.C = sibling.L.C = false;
          RedBlackRotateRight(this, parent);
          node = this._;
          break;
        }
      }

      sibling.C = true;
      node = parent;
      parent = parent.U;
    } while (!node.C);

    if (node) node.C = false;
  }
};

function RedBlackRotateLeft(tree, node) {
  var p = node,
      q = node.R,
      parent = p.U;

  if (parent) {
    if (parent.L === p) parent.L = q;else parent.R = q;
  } else {
    tree._ = q;
  }

  q.U = parent;
  p.U = q;
  p.R = q.L;
  if (p.R) p.R.U = p;
  q.L = p;
}

function RedBlackRotateRight(tree, node) {
  var p = node,
      q = node.L,
      parent = p.U;

  if (parent) {
    if (parent.L === p) parent.L = q;else parent.R = q;
  } else {
    tree._ = q;
  }

  q.U = parent;
  p.U = q;
  p.L = q.R;
  if (p.L) p.L.U = p;
  q.R = p;
}

function RedBlackFirst(node) {
  while (node.L) node = node.L;

  return node;
}

var _default = RedBlackTree;
exports.default = _default;
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-voronoi/src/index.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "voronoi", {
  enumerable: true,
  get: function () {
    return _voronoi.default;
  }
});

var _voronoi = _interopRequireDefault(require("./voronoi"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-voronoi/src/Diagram.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.circles = exports.cells = exports.beaches = void 0;
exports.default = Diagram;
exports.epsilon2 = exports.epsilon = exports.edges = void 0;

var _Beach = require("./Beach");

var _Cell = require("./Cell");

var _Circle = require("./Circle");

var _Edge = require("./Edge");

var _RedBlackTree = _interopRequireDefault(require("./RedBlackTree"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var epsilon = 1e-6;
exports.epsilon = epsilon;
var epsilon2 = 1e-12;
exports.epsilon2 = epsilon2;
var beaches;
exports.beaches = beaches;
var cells;
exports.cells = cells;
var circles;
exports.circles = circles;
var edges;
exports.edges = edges;

function triangleArea(a, b, c) {
  return (a[0] - c[0]) * (b[1] - a[1]) - (a[0] - b[0]) * (c[1] - a[1]);
}

function lexicographic(a, b) {
  return b[1] - a[1] || b[0] - a[0];
}

function Diagram(sites, extent) {
  var site = sites.sort(lexicographic).pop(),
      x,
      y,
      circle;
  exports.edges = edges = [];
  exports.cells = cells = new Array(sites.length);
  exports.beaches = beaches = new _RedBlackTree.default();
  exports.circles = circles = new _RedBlackTree.default();

  while (true) {
    circle = _Circle.firstCircle;

    if (site && (!circle || site[1] < circle.y || site[1] === circle.y && site[0] < circle.x)) {
      if (site[0] !== x || site[1] !== y) {
        (0, _Beach.addBeach)(site);
        x = site[0], y = site[1];
      }

      site = sites.pop();
    } else if (circle) {
      (0, _Beach.removeBeach)(circle.arc);
    } else {
      break;
    }
  }

  (0, _Cell.sortCellHalfedges)();

  if (extent) {
    var x0 = +extent[0][0],
        y0 = +extent[0][1],
        x1 = +extent[1][0],
        y1 = +extent[1][1];
    (0, _Edge.clipEdges)(x0, y0, x1, y1);
    (0, _Cell.clipCells)(x0, y0, x1, y1);
  }

  this.edges = edges;
  this.cells = cells;
  exports.beaches = beaches = exports.circles = circles = exports.edges = edges = exports.cells = cells = null;
}

Diagram.prototype = {
  constructor: Diagram,
  polygons: function () {
    var edges = this.edges;
    return this.cells.map(function (cell) {
      var polygon = cell.halfedges.map(function (i) {
        return (0, _Cell.cellHalfedgeStart)(cell, edges[i]);
      });
      polygon.data = cell.site.data;
      return polygon;
    });
  },
  triangles: function () {
    var triangles = [],
        edges = this.edges;
    this.cells.forEach(function (cell, i) {
      if (!(m = (halfedges = cell.halfedges).length)) return;
      var site = cell.site,
          halfedges,
          j = -1,
          m,
          s0,
          e1 = edges[halfedges[m - 1]],
          s1 = e1.left === site ? e1.right : e1.left;

      while (++j < m) {
        s0 = s1;
        e1 = edges[halfedges[j]];
        s1 = e1.left === site ? e1.right : e1.left;

        if (s0 && s1 && i < s0.index && i < s1.index && triangleArea(site, s0, s1) < 0) {
          triangles.push([site.data, s0.data, s1.data]);
        }
      }
    });
    return triangles;
  },
  links: function () {
    return this.edges.filter(function (edge) {
      return edge.right;
    }).map(function (edge) {
      return {
        source: edge.left.data,
        target: edge.right.data
      };
    });
  },
  find: function (x, y, radius) {
    var that = this,
        i0,
        i1 = that._found || 0,
        n = that.cells.length,
        cell; // Use the previously-found cell, or start with an arbitrary one.

    while (!(cell = that.cells[i1])) if (++i1 >= n) return null;

    var dx = x - cell.site[0],
        dy = y - cell.site[1],
        d2 = dx * dx + dy * dy; // Traverse the half-edges to find a closer cell, if any.

    do {
      cell = that.cells[i0 = i1], i1 = null;
      cell.halfedges.forEach(function (e) {
        var edge = that.edges[e],
            v = edge.left;
        if ((v === cell.site || !v) && !(v = edge.right)) return;
        var vx = x - v[0],
            vy = y - v[1],
            v2 = vx * vx + vy * vy;
        if (v2 < d2) d2 = v2, i1 = v.index;
      });
    } while (i1 !== null);

    that._found = i0;
    return radius == null || d2 <= radius * radius ? cell.site : null;
  }
};
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-voronoi/src/Edge.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.clipEdges = clipEdges;
exports.createBorderEdge = createBorderEdge;
exports.createEdge = createEdge;
exports.setEdgeEnd = setEdgeEnd;

var _Diagram = require("./Diagram");

function createEdge(left, right, v0, v1) {
  var edge = [null, null],
      index = _Diagram.edges.push(edge) - 1;
  edge.left = left;
  edge.right = right;
  if (v0) setEdgeEnd(edge, left, right, v0);
  if (v1) setEdgeEnd(edge, right, left, v1);

  _Diagram.cells[left.index].halfedges.push(index);

  _Diagram.cells[right.index].halfedges.push(index);

  return edge;
}

function createBorderEdge(left, v0, v1) {
  var edge = [v0, v1];
  edge.left = left;
  return edge;
}

function setEdgeEnd(edge, left, right, vertex) {
  if (!edge[0] && !edge[1]) {
    edge[0] = vertex;
    edge.left = left;
    edge.right = right;
  } else if (edge.left === right) {
    edge[1] = vertex;
  } else {
    edge[0] = vertex;
  }
} // Liang–Barsky line clipping.


function clipEdge(edge, x0, y0, x1, y1) {
  var a = edge[0],
      b = edge[1],
      ax = a[0],
      ay = a[1],
      bx = b[0],
      by = b[1],
      t0 = 0,
      t1 = 1,
      dx = bx - ax,
      dy = by - ay,
      r;
  r = x0 - ax;
  if (!dx && r > 0) return;
  r /= dx;

  if (dx < 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  } else if (dx > 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  }

  r = x1 - ax;
  if (!dx && r < 0) return;
  r /= dx;

  if (dx < 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  } else if (dx > 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  }

  r = y0 - ay;
  if (!dy && r > 0) return;
  r /= dy;

  if (dy < 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  } else if (dy > 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  }

  r = y1 - ay;
  if (!dy && r < 0) return;
  r /= dy;

  if (dy < 0) {
    if (r > t1) return;
    if (r > t0) t0 = r;
  } else if (dy > 0) {
    if (r < t0) return;
    if (r < t1) t1 = r;
  }

  if (!(t0 > 0) && !(t1 < 1)) return true; // TODO Better check?

  if (t0 > 0) edge[0] = [ax + t0 * dx, ay + t0 * dy];
  if (t1 < 1) edge[1] = [ax + t1 * dx, ay + t1 * dy];
  return true;
}

function connectEdge(edge, x0, y0, x1, y1) {
  var v1 = edge[1];
  if (v1) return true;
  var v0 = edge[0],
      left = edge.left,
      right = edge.right,
      lx = left[0],
      ly = left[1],
      rx = right[0],
      ry = right[1],
      fx = (lx + rx) / 2,
      fy = (ly + ry) / 2,
      fm,
      fb;

  if (ry === ly) {
    if (fx < x0 || fx >= x1) return;

    if (lx > rx) {
      if (!v0) v0 = [fx, y0];else if (v0[1] >= y1) return;
      v1 = [fx, y1];
    } else {
      if (!v0) v0 = [fx, y1];else if (v0[1] < y0) return;
      v1 = [fx, y0];
    }
  } else {
    fm = (lx - rx) / (ry - ly);
    fb = fy - fm * fx;

    if (fm < -1 || fm > 1) {
      if (lx > rx) {
        if (!v0) v0 = [(y0 - fb) / fm, y0];else if (v0[1] >= y1) return;
        v1 = [(y1 - fb) / fm, y1];
      } else {
        if (!v0) v0 = [(y1 - fb) / fm, y1];else if (v0[1] < y0) return;
        v1 = [(y0 - fb) / fm, y0];
      }
    } else {
      if (ly < ry) {
        if (!v0) v0 = [x0, fm * x0 + fb];else if (v0[0] >= x1) return;
        v1 = [x1, fm * x1 + fb];
      } else {
        if (!v0) v0 = [x1, fm * x1 + fb];else if (v0[0] < x0) return;
        v1 = [x0, fm * x0 + fb];
      }
    }
  }

  edge[0] = v0;
  edge[1] = v1;
  return true;
}

function clipEdges(x0, y0, x1, y1) {
  var i = _Diagram.edges.length,
      edge;

  while (i--) {
    if (!connectEdge(edge = _Diagram.edges[i], x0, y0, x1, y1) || !clipEdge(edge, x0, y0, x1, y1) || !(Math.abs(edge[0][0] - edge[1][0]) > _Diagram.epsilon || Math.abs(edge[0][1] - edge[1][1]) > _Diagram.epsilon)) {
      delete _Diagram.edges[i];
    }
  }
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-voronoi/src/constant.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _default(x) {
  return function () {
    return x;
  };
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-voronoi/src/point.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.x = x;
exports.y = y;

function x(d) {
  return d[0];
}

function y(d) {
  return d[1];
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-voronoi/src/voronoi.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _constant = _interopRequireDefault(require("./constant"));

var _point = require("./point");

var _Diagram = _interopRequireWildcard(require("./Diagram"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default() {
  var x = _point.x,
      y = _point.y,
      extent = null;

  function voronoi(data) {
    return new _Diagram.default(data.map(function (d, i) {
      var s = [Math.round(x(d, i, data) / _Diagram.epsilon) * _Diagram.epsilon, Math.round(y(d, i, data) / _Diagram.epsilon) * _Diagram.epsilon];
      s.index = i;
      s.data = d;
      return s;
    }), extent);
  }

  voronoi.polygons = function (data) {
    return voronoi(data).polygons();
  };

  voronoi.links = function (data) {
    return voronoi(data).links();
  };

  voronoi.triangles = function (data) {
    return voronoi(data).triangles();
  };

  voronoi.x = function (_) {
    return arguments.length ? (x = typeof _ === "function" ? _ : (0, _constant.default)(+_), voronoi) : x;
  };

  voronoi.y = function (_) {
    return arguments.length ? (y = typeof _ === "function" ? _ : (0, _constant.default)(+_), voronoi) : y;
  };

  voronoi.extent = function (_) {
    return arguments.length ? (extent = _ == null ? null : [[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]], voronoi) : extent && [[extent[0][0], extent[0][1]], [extent[1][0], extent[1][1]]];
  };

  voronoi.size = function (_) {
    return arguments.length ? (extent = _ == null ? null : [[0, 0], [+_[0], +_[1]]], voronoi) : extent && [extent[1][0] - extent[0][0], extent[1][1] - extent[0][1]];
  };

  return voronoi;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-ease/src/linear.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.linear = void 0;

const linear = t => +t;

exports.linear = linear;
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-ease/src/circle.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.circleIn = circleIn;
exports.circleInOut = circleInOut;
exports.circleOut = circleOut;

function circleIn(t) {
  return 1 - Math.sqrt(1 - t * t);
}

function circleOut(t) {
  return Math.sqrt(1 - --t * t);
}

function circleInOut(t) {
  return ((t *= 2) <= 1 ? 1 - Math.sqrt(1 - t * t) : Math.sqrt(1 - (t -= 2) * t) + 1) / 2;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-ease/src/poly.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.polyOut = exports.polyInOut = exports.polyIn = void 0;
var exponent = 3;

var polyIn = function custom(e) {
  e = +e;

  function polyIn(t) {
    return Math.pow(t, e);
  }

  polyIn.exponent = custom;
  return polyIn;
}(exponent);

exports.polyIn = polyIn;

var polyOut = function custom(e) {
  e = +e;

  function polyOut(t) {
    return 1 - Math.pow(1 - t, e);
  }

  polyOut.exponent = custom;
  return polyOut;
}(exponent);

exports.polyOut = polyOut;

var polyInOut = function custom(e) {
  e = +e;

  function polyInOut(t) {
    return ((t *= 2) <= 1 ? Math.pow(t, e) : 2 - Math.pow(2 - t, e)) / 2;
  }

  polyInOut.exponent = custom;
  return polyInOut;
}(exponent);

exports.polyInOut = polyInOut;
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-ease/src/quad.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.quadIn = quadIn;
exports.quadInOut = quadInOut;
exports.quadOut = quadOut;

function quadIn(t) {
  return t * t;
}

function quadOut(t) {
  return t * (2 - t);
}

function quadInOut(t) {
  return ((t *= 2) <= 1 ? t * t : --t * (2 - t) + 1) / 2;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-ease/src/index.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "easeBack", {
  enumerable: true,
  get: function () {
    return _back.backInOut;
  }
});
Object.defineProperty(exports, "easeBackIn", {
  enumerable: true,
  get: function () {
    return _back.backIn;
  }
});
Object.defineProperty(exports, "easeBackInOut", {
  enumerable: true,
  get: function () {
    return _back.backInOut;
  }
});
Object.defineProperty(exports, "easeBackOut", {
  enumerable: true,
  get: function () {
    return _back.backOut;
  }
});
Object.defineProperty(exports, "easeBounce", {
  enumerable: true,
  get: function () {
    return _bounce.bounceOut;
  }
});
Object.defineProperty(exports, "easeBounceIn", {
  enumerable: true,
  get: function () {
    return _bounce.bounceIn;
  }
});
Object.defineProperty(exports, "easeBounceInOut", {
  enumerable: true,
  get: function () {
    return _bounce.bounceInOut;
  }
});
Object.defineProperty(exports, "easeBounceOut", {
  enumerable: true,
  get: function () {
    return _bounce.bounceOut;
  }
});
Object.defineProperty(exports, "easeCircle", {
  enumerable: true,
  get: function () {
    return _circle.circleInOut;
  }
});
Object.defineProperty(exports, "easeCircleIn", {
  enumerable: true,
  get: function () {
    return _circle.circleIn;
  }
});
Object.defineProperty(exports, "easeCircleInOut", {
  enumerable: true,
  get: function () {
    return _circle.circleInOut;
  }
});
Object.defineProperty(exports, "easeCircleOut", {
  enumerable: true,
  get: function () {
    return _circle.circleOut;
  }
});
Object.defineProperty(exports, "easeCubic", {
  enumerable: true,
  get: function () {
    return _cubic.cubicInOut;
  }
});
Object.defineProperty(exports, "easeCubicIn", {
  enumerable: true,
  get: function () {
    return _cubic.cubicIn;
  }
});
Object.defineProperty(exports, "easeCubicInOut", {
  enumerable: true,
  get: function () {
    return _cubic.cubicInOut;
  }
});
Object.defineProperty(exports, "easeCubicOut", {
  enumerable: true,
  get: function () {
    return _cubic.cubicOut;
  }
});
Object.defineProperty(exports, "easeElastic", {
  enumerable: true,
  get: function () {
    return _elastic.elasticOut;
  }
});
Object.defineProperty(exports, "easeElasticIn", {
  enumerable: true,
  get: function () {
    return _elastic.elasticIn;
  }
});
Object.defineProperty(exports, "easeElasticInOut", {
  enumerable: true,
  get: function () {
    return _elastic.elasticInOut;
  }
});
Object.defineProperty(exports, "easeElasticOut", {
  enumerable: true,
  get: function () {
    return _elastic.elasticOut;
  }
});
Object.defineProperty(exports, "easeExp", {
  enumerable: true,
  get: function () {
    return _exp.expInOut;
  }
});
Object.defineProperty(exports, "easeExpIn", {
  enumerable: true,
  get: function () {
    return _exp.expIn;
  }
});
Object.defineProperty(exports, "easeExpInOut", {
  enumerable: true,
  get: function () {
    return _exp.expInOut;
  }
});
Object.defineProperty(exports, "easeExpOut", {
  enumerable: true,
  get: function () {
    return _exp.expOut;
  }
});
Object.defineProperty(exports, "easeLinear", {
  enumerable: true,
  get: function () {
    return _linear.linear;
  }
});
Object.defineProperty(exports, "easePoly", {
  enumerable: true,
  get: function () {
    return _poly.polyInOut;
  }
});
Object.defineProperty(exports, "easePolyIn", {
  enumerable: true,
  get: function () {
    return _poly.polyIn;
  }
});
Object.defineProperty(exports, "easePolyInOut", {
  enumerable: true,
  get: function () {
    return _poly.polyInOut;
  }
});
Object.defineProperty(exports, "easePolyOut", {
  enumerable: true,
  get: function () {
    return _poly.polyOut;
  }
});
Object.defineProperty(exports, "easeQuad", {
  enumerable: true,
  get: function () {
    return _quad.quadInOut;
  }
});
Object.defineProperty(exports, "easeQuadIn", {
  enumerable: true,
  get: function () {
    return _quad.quadIn;
  }
});
Object.defineProperty(exports, "easeQuadInOut", {
  enumerable: true,
  get: function () {
    return _quad.quadInOut;
  }
});
Object.defineProperty(exports, "easeQuadOut", {
  enumerable: true,
  get: function () {
    return _quad.quadOut;
  }
});
Object.defineProperty(exports, "easeSin", {
  enumerable: true,
  get: function () {
    return _sin.sinInOut;
  }
});
Object.defineProperty(exports, "easeSinIn", {
  enumerable: true,
  get: function () {
    return _sin.sinIn;
  }
});
Object.defineProperty(exports, "easeSinInOut", {
  enumerable: true,
  get: function () {
    return _sin.sinInOut;
  }
});
Object.defineProperty(exports, "easeSinOut", {
  enumerable: true,
  get: function () {
    return _sin.sinOut;
  }
});

var _linear = require("./linear.js");

var _quad = require("./quad.js");

var _cubic = require("./cubic.js");

var _poly = require("./poly.js");

var _sin = require("./sin.js");

var _exp = require("./exp.js");

var _circle = require("./circle.js");

var _bounce = require("./bounce.js");

var _back = require("./back.js");

var _elastic = require("./elastic.js");
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-ease/src/cubic.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cubicIn = cubicIn;
exports.cubicInOut = cubicInOut;
exports.cubicOut = cubicOut;

function cubicIn(t) {
  return t * t * t;
}

function cubicOut(t) {
  return --t * t * t + 1;
}

function cubicInOut(t) {
  return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-ease/src/math.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.tpmt = tpmt;

// tpmt is two power minus ten times t scaled to [0,1]
function tpmt(x) {
  return (Math.pow(2, -10 * x) - 0.0009765625) * 1.0009775171065494;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-ease/src/sin.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sinIn = sinIn;
exports.sinInOut = sinInOut;
exports.sinOut = sinOut;
var pi = Math.PI,
    halfPi = pi / 2;

function sinIn(t) {
  return +t === 1 ? 1 : 1 - Math.cos(t * halfPi);
}

function sinOut(t) {
  return Math.sin(t * halfPi);
}

function sinInOut(t) {
  return (1 - Math.cos(pi * t)) / 2;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-ease/src/exp.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.expIn = expIn;
exports.expInOut = expInOut;
exports.expOut = expOut;

var _math = require("./math.js");

function expIn(t) {
  return (0, _math.tpmt)(1 - +t);
}

function expOut(t) {
  return 1 - (0, _math.tpmt)(t);
}

function expInOut(t) {
  return ((t *= 2) <= 1 ? (0, _math.tpmt)(1 - t) : 2 - (0, _math.tpmt)(t - 1)) / 2;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-ease/src/back.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.backOut = exports.backInOut = exports.backIn = void 0;
var overshoot = 1.70158;

var backIn = function custom(s) {
  s = +s;

  function backIn(t) {
    return (t = +t) * t * (s * (t - 1) + t);
  }

  backIn.overshoot = custom;
  return backIn;
}(overshoot);

exports.backIn = backIn;

var backOut = function custom(s) {
  s = +s;

  function backOut(t) {
    return --t * t * ((t + 1) * s + t) + 1;
  }

  backOut.overshoot = custom;
  return backOut;
}(overshoot);

exports.backOut = backOut;

var backInOut = function custom(s) {
  s = +s;

  function backInOut(t) {
    return ((t *= 2) < 1 ? t * t * ((s + 1) * t - s) : (t -= 2) * t * ((s + 1) * t + s) + 2) / 2;
  }

  backInOut.overshoot = custom;
  return backInOut;
}(overshoot);

exports.backInOut = backInOut;
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-ease/src/bounce.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bounceIn = bounceIn;
exports.bounceInOut = bounceInOut;
exports.bounceOut = bounceOut;
var b1 = 4 / 11,
    b2 = 6 / 11,
    b3 = 8 / 11,
    b4 = 3 / 4,
    b5 = 9 / 11,
    b6 = 10 / 11,
    b7 = 15 / 16,
    b8 = 21 / 22,
    b9 = 63 / 64,
    b0 = 1 / b1 / b1;

function bounceIn(t) {
  return 1 - bounceOut(1 - t);
}

function bounceOut(t) {
  return (t = +t) < b1 ? b0 * t * t : t < b3 ? b0 * (t -= b2) * t + b4 : t < b6 ? b0 * (t -= b5) * t + b7 : b0 * (t -= b8) * t + b9;
}

function bounceInOut(t) {
  return ((t *= 2) <= 1 ? 1 - bounceOut(1 - t) : bounceOut(t - 1) + 1) / 2;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/d3-ease/src/elastic.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.elasticOut = exports.elasticInOut = exports.elasticIn = void 0;

var _math = require("./math.js");

var tau = 2 * Math.PI,
    amplitude = 1,
    period = 0.3;

var elasticIn = function custom(a, p) {
  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

  function elasticIn(t) {
    return a * (0, _math.tpmt)(- --t) * Math.sin((s - t) / p);
  }

  elasticIn.amplitude = function (a) {
    return custom(a, p * tau);
  };

  elasticIn.period = function (p) {
    return custom(a, p);
  };

  return elasticIn;
}(amplitude, period);

exports.elasticIn = elasticIn;

var elasticOut = function custom(a, p) {
  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

  function elasticOut(t) {
    return 1 - a * (0, _math.tpmt)(t = +t) * Math.sin((t + s) / p);
  }

  elasticOut.amplitude = function (a) {
    return custom(a, p * tau);
  };

  elasticOut.period = function (p) {
    return custom(a, p);
  };

  return elasticOut;
}(amplitude, period);

exports.elasticOut = elasticOut;

var elasticInOut = function custom(a, p) {
  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

  function elasticInOut(t) {
    return ((t = t * 2 - 1) < 0 ? a * (0, _math.tpmt)(-t) * Math.sin((s - t) / p) : 2 - a * (0, _math.tpmt)(t) * Math.sin((s + t) / p)) / 2;
  }

  elasticInOut.amplitude = function (a) {
    return custom(a, p * tau);
  };

  elasticInOut.period = function (p) {
    return custom(a, p);
  };

  return elasticInOut;
}(amplitude, period);

exports.elasticInOut = elasticInOut;
----------------------------------------
File: ./animations/node_modules/victory-vendor/lib-vendor/internmap/src/index.js
----------------------------------------
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InternSet = exports.InternMap = void 0;

class InternMap extends Map {
  constructor(entries, key = keyof) {
    super();
    Object.defineProperties(this, {
      _intern: {
        value: new Map()
      },
      _key: {
        value: key
      }
    });
    if (entries != null) for (const [key, value] of entries) this.set(key, value);
  }

  get(key) {
    return super.get(intern_get(this, key));
  }

  has(key) {
    return super.has(intern_get(this, key));
  }

  set(key, value) {
    return super.set(intern_set(this, key), value);
  }

  delete(key) {
    return super.delete(intern_delete(this, key));
  }

}

exports.InternMap = InternMap;

class InternSet extends Set {
  constructor(values, key = keyof) {
    super();
    Object.defineProperties(this, {
      _intern: {
        value: new Map()
      },
      _key: {
        value: key
      }
    });
    if (values != null) for (const value of values) this.add(value);
  }

  has(value) {
    return super.has(intern_get(this, value));
  }

  add(value) {
    return super.add(intern_set(this, value));
  }

  delete(value) {
    return super.delete(intern_delete(this, value));
  }

}

exports.InternSet = InternSet;

function intern_get({
  _intern,
  _key
}, value) {
  const key = _key(value);

  return _intern.has(key) ? _intern.get(key) : value;
}

function intern_set({
  _intern,
  _key
}, value) {
  const key = _key(value);

  if (_intern.has(key)) return _intern.get(key);

  _intern.set(key, value);

  return value;
}

function intern_delete({
  _intern,
  _key
}, value) {
  const key = _key(value);

  if (_intern.has(key)) {
    value = _intern.get(key);

    _intern.delete(key);
  }

  return value;
}

function keyof(value) {
  return value !== null && typeof value === "object" ? value.valueOf() : value;
}
----------------------------------------
File: ./animations/node_modules/victory-vendor/d3-array.d.ts
----------------------------------------

// `victory-vendor/d3-array` (TypeScript)
//
// Export the type definitions for this package:
export * from "d3-array";

----------------------------------------
File: ./animations/node_modules/victory-vendor/d3-shape.js
----------------------------------------

// `victory-vendor/d3-shape` (CommonJS)
// See upstream license: https://github.com/d3/d3-shape/blob/main/LICENSE
//
// This file only exists for tooling that doesn't work yet with package.json:exports
// by proxying through the CommonJS version.
module.exports = require("./lib/d3-shape");

----------------------------------------
File: ./animations/node_modules/victory-vendor/d3-ease.d.ts
----------------------------------------

// `victory-vendor/d3-ease` (TypeScript)
//
// Export the type definitions for this package:
export * from "d3-ease";

----------------------------------------
File: ./animations/node_modules/d3-format/dist/d3-format.min.js
----------------------------------------
// https://d3js.org/d3-format/ v3.1.0 Copyright 2010-2021 Mike Bostock
!function(t,i){"object"==typeof exports&&"undefined"!=typeof module?i(exports):"function"==typeof define&&define.amd?define(["exports"],i):i((t="undefined"!=typeof globalThis?globalThis:t||self).d3=t.d3||{})}(this,(function(t){"use strict";function i(t,i){if((r=(t=i?t.toExponential(i-1):t.toExponential()).indexOf("e"))<0)return null;var r,n=t.slice(0,r);return[n.length>1?n[0]+n.slice(2):n,+t.slice(r+1)]}function r(t){return(t=i(Math.abs(t)))?t[1]:NaN}var n,e=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function o(t){if(!(i=e.exec(t)))throw new Error("invalid format: "+t);var i;return new a({fill:i[1],align:i[2],sign:i[3],symbol:i[4],zero:i[5],width:i[6],comma:i[7],precision:i[8]&&i[8].slice(1),trim:i[9],type:i[10]})}function a(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}function s(t,r){var n=i(t,r);if(!n)return t+"";var e=n[0],o=n[1];return o<0?"0."+new Array(-o).join("0")+e:e.length>o+1?e.slice(0,o+1)+"."+e.slice(o+1):e+new Array(o-e.length+2).join("0")}o.prototype=a.prototype,a.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var c={"%":(t,i)=>(100*t).toFixed(i),b:t=>Math.round(t).toString(2),c:t=>t+"",d:function(t){return Math.abs(t=Math.round(t))>=1e21?t.toLocaleString("en").replace(/,/g,""):t.toString(10)},e:(t,i)=>t.toExponential(i),f:(t,i)=>t.toFixed(i),g:(t,i)=>t.toPrecision(i),o:t=>Math.round(t).toString(8),p:(t,i)=>s(100*t,i),r:s,s:function(t,r){var e=i(t,r);if(!e)return t+"";var o=e[0],a=e[1],s=a-(n=3*Math.max(-8,Math.min(8,Math.floor(a/3))))+1,c=o.length;return s===c?o:s>c?o+new Array(s-c+1).join("0"):s>0?o.slice(0,s)+"."+o.slice(s):"0."+new Array(1-s).join("0")+i(t,Math.max(0,r+s-1))[0]},X:t=>Math.round(t).toString(16).toUpperCase(),x:t=>Math.round(t).toString(16)};function h(t){return t}var l,u=Array.prototype.map,f=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function d(t){var i,e,a=void 0===t.grouping||void 0===t.thousands?h:(i=u.call(t.grouping,Number),e=t.thousands+"",function(t,r){for(var n=t.length,o=[],a=0,s=i[0],c=0;n>0&&s>0&&(c+s+1>r&&(s=Math.max(1,r-c)),o.push(t.substring(n-=s,n+s)),!((c+=s+1)>r));)s=i[a=(a+1)%i.length];return o.reverse().join(e)}),s=void 0===t.currency?"":t.currency[0]+"",l=void 0===t.currency?"":t.currency[1]+"",d=void 0===t.decimal?".":t.decimal+"",m=void 0===t.numerals?h:function(t){return function(i){return i.replace(/[0-9]/g,(function(i){return t[+i]}))}}(u.call(t.numerals,String)),p=void 0===t.percent?"%":t.percent+"",g=void 0===t.minus?"−":t.minus+"",v=void 0===t.nan?"NaN":t.nan+"";function M(t){var i=(t=o(t)).fill,r=t.align,e=t.sign,h=t.symbol,u=t.zero,M=t.width,y=t.comma,x=t.precision,b=t.trim,w=t.type;"n"===w?(y=!0,w="g"):c[w]||(void 0===x&&(x=12),b=!0,w="g"),(u||"0"===i&&"="===r)&&(u=!0,i="0",r="=");var S="$"===h?s:"#"===h&&/[boxX]/.test(w)?"0"+w.toLowerCase():"",j="$"===h?l:/[%p]/.test(w)?p:"",k=c[w],P=/[defgprs%]/.test(w);function z(t){var o,s,c,h=S,l=j;if("c"===w)l=k(t)+l,t="";else{var p=(t=+t)<0||1/t<0;if(t=isNaN(t)?v:k(Math.abs(t),x),b&&(t=function(t){t:for(var i,r=t.length,n=1,e=-1;n<r;++n)switch(t[n]){case".":e=i=n;break;case"0":0===e&&(e=n),i=n;break;default:if(!+t[n])break t;e>0&&(e=0)}return e>0?t.slice(0,e)+t.slice(i+1):t}(t)),p&&0==+t&&"+"!==e&&(p=!1),h=(p?"("===e?e:g:"-"===e||"("===e?"":e)+h,l=("s"===w?f[8+n/3]:"")+l+(p&&"("===e?")":""),P)for(o=-1,s=t.length;++o<s;)if(48>(c=t.charCodeAt(o))||c>57){l=(46===c?d+t.slice(o+1):t.slice(o))+l,t=t.slice(0,o);break}}y&&!u&&(t=a(t,1/0));var z=h.length+t.length+l.length,A=z<M?new Array(M-z+1).join(i):"";switch(y&&u&&(t=a(A+t,A.length?M-l.length:1/0),A=""),r){case"<":t=h+t+l+A;break;case"=":t=h+A+t+l;break;case"^":t=A.slice(0,z=A.length>>1)+h+t+l+A.slice(z);break;default:t=A+h+t+l}return m(t)}return x=void 0===x?6:/[gprs]/.test(w)?Math.max(1,Math.min(21,x)):Math.max(0,Math.min(20,x)),z.toString=function(){return t+""},z}return{format:M,formatPrefix:function(t,i){var n=M(((t=o(t)).type="f",t)),e=3*Math.max(-8,Math.min(8,Math.floor(r(i)/3))),a=Math.pow(10,-e),s=f[8+e/3];return function(t){return n(a*t)+s}}}}function m(i){return l=d(i),t.format=l.format,t.formatPrefix=l.formatPrefix,l}t.format=void 0,t.formatPrefix=void 0,m({thousands:",",grouping:[3],currency:["$",""]}),t.FormatSpecifier=a,t.formatDefaultLocale=m,t.formatLocale=d,t.formatSpecifier=o,t.precisionFixed=function(t){return Math.max(0,-r(Math.abs(t)))},t.precisionPrefix=function(t,i){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(r(i)/3)))-r(Math.abs(t)))},t.precisionRound=function(t,i){return t=Math.abs(t),i=Math.abs(i)-t,Math.max(0,r(i)-r(t))+1},Object.defineProperty(t,"__esModule",{value:!0})}));

----------------------------------------
File: ./animations/node_modules/d3-format/dist/d3-format.js
----------------------------------------
// https://d3js.org/d3-format/ v3.1.0 Copyright 2010-2021 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
typeof define === 'function' && define.amd ? define(['exports'], factory) :
(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.d3 = global.d3 || {}));
})(this, (function (exports) { 'use strict';

function formatDecimal(x) {
  return Math.abs(x = Math.round(x)) >= 1e21
      ? x.toLocaleString("en").replace(/,/g, "")
      : x.toString(10);
}

// Computes the decimal coefficient and exponent of the specified number x with
// significant digits p, where x is positive and p is in [1, 21] or undefined.
// For example, formatDecimalParts(1.23) returns ["123", 0].
function formatDecimalParts(x, p) {
  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity
  var i, coefficient = x.slice(0, i);

  // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
  // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).
  return [
    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
    +x.slice(i + 1)
  ];
}

function exponent(x) {
  return x = formatDecimalParts(Math.abs(x)), x ? x[1] : NaN;
}

function formatGroup(grouping, thousands) {
  return function(value, width) {
    var i = value.length,
        t = [],
        j = 0,
        g = grouping[0],
        length = 0;

    while (i > 0 && g > 0) {
      if (length + g + 1 > width) g = Math.max(1, width - length);
      t.push(value.substring(i -= g, i + g));
      if ((length += g + 1) > width) break;
      g = grouping[j = (j + 1) % grouping.length];
    }

    return t.reverse().join(thousands);
  };
}

function formatNumerals(numerals) {
  return function(value) {
    return value.replace(/[0-9]/g, function(i) {
      return numerals[+i];
    });
  };
}

// [[fill]align][sign][symbol][0][width][,][.precision][~][type]
var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;

function formatSpecifier(specifier) {
  if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);
  var match;
  return new FormatSpecifier({
    fill: match[1],
    align: match[2],
    sign: match[3],
    symbol: match[4],
    zero: match[5],
    width: match[6],
    comma: match[7],
    precision: match[8] && match[8].slice(1),
    trim: match[9],
    type: match[10]
  });
}

formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof

function FormatSpecifier(specifier) {
  this.fill = specifier.fill === undefined ? " " : specifier.fill + "";
  this.align = specifier.align === undefined ? ">" : specifier.align + "";
  this.sign = specifier.sign === undefined ? "-" : specifier.sign + "";
  this.symbol = specifier.symbol === undefined ? "" : specifier.symbol + "";
  this.zero = !!specifier.zero;
  this.width = specifier.width === undefined ? undefined : +specifier.width;
  this.comma = !!specifier.comma;
  this.precision = specifier.precision === undefined ? undefined : +specifier.precision;
  this.trim = !!specifier.trim;
  this.type = specifier.type === undefined ? "" : specifier.type + "";
}

FormatSpecifier.prototype.toString = function() {
  return this.fill
      + this.align
      + this.sign
      + this.symbol
      + (this.zero ? "0" : "")
      + (this.width === undefined ? "" : Math.max(1, this.width | 0))
      + (this.comma ? "," : "")
      + (this.precision === undefined ? "" : "." + Math.max(0, this.precision | 0))
      + (this.trim ? "~" : "")
      + this.type;
};

// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.
function formatTrim(s) {
  out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {
    switch (s[i]) {
      case ".": i0 = i1 = i; break;
      case "0": if (i0 === 0) i0 = i; i1 = i; break;
      default: if (!+s[i]) break out; if (i0 > 0) i0 = 0; break;
    }
  }
  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
}

var prefixExponent;

function formatPrefixAuto(x, p) {
  var d = formatDecimalParts(x, p);
  if (!d) return x + "";
  var coefficient = d[0],
      exponent = d[1],
      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,
      n = coefficient.length;
  return i === n ? coefficient
      : i > n ? coefficient + new Array(i - n + 1).join("0")
      : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i)
      : "0." + new Array(1 - i).join("0") + formatDecimalParts(x, Math.max(0, p + i - 1))[0]; // less than 1y!
}

function formatRounded(x, p) {
  var d = formatDecimalParts(x, p);
  if (!d) return x + "";
  var coefficient = d[0],
      exponent = d[1];
  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient
      : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1)
      : coefficient + new Array(exponent - coefficient.length + 2).join("0");
}

var formatTypes = {
  "%": (x, p) => (x * 100).toFixed(p),
  "b": (x) => Math.round(x).toString(2),
  "c": (x) => x + "",
  "d": formatDecimal,
  "e": (x, p) => x.toExponential(p),
  "f": (x, p) => x.toFixed(p),
  "g": (x, p) => x.toPrecision(p),
  "o": (x) => Math.round(x).toString(8),
  "p": (x, p) => formatRounded(x * 100, p),
  "r": formatRounded,
  "s": formatPrefixAuto,
  "X": (x) => Math.round(x).toString(16).toUpperCase(),
  "x": (x) => Math.round(x).toString(16)
};

function identity(x) {
  return x;
}

var map = Array.prototype.map,
    prefixes = ["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];

function formatLocale(locale) {
  var group = locale.grouping === undefined || locale.thousands === undefined ? identity : formatGroup(map.call(locale.grouping, Number), locale.thousands + ""),
      currencyPrefix = locale.currency === undefined ? "" : locale.currency[0] + "",
      currencySuffix = locale.currency === undefined ? "" : locale.currency[1] + "",
      decimal = locale.decimal === undefined ? "." : locale.decimal + "",
      numerals = locale.numerals === undefined ? identity : formatNumerals(map.call(locale.numerals, String)),
      percent = locale.percent === undefined ? "%" : locale.percent + "",
      minus = locale.minus === undefined ? "−" : locale.minus + "",
      nan = locale.nan === undefined ? "NaN" : locale.nan + "";

  function newFormat(specifier) {
    specifier = formatSpecifier(specifier);

    var fill = specifier.fill,
        align = specifier.align,
        sign = specifier.sign,
        symbol = specifier.symbol,
        zero = specifier.zero,
        width = specifier.width,
        comma = specifier.comma,
        precision = specifier.precision,
        trim = specifier.trim,
        type = specifier.type;

    // The "n" type is an alias for ",g".
    if (type === "n") comma = true, type = "g";

    // The "" type, and any invalid type, is an alias for ".12~g".
    else if (!formatTypes[type]) precision === undefined && (precision = 12), trim = true, type = "g";

    // If zero fill is specified, padding goes after sign and before digits.
    if (zero || (fill === "0" && align === "=")) zero = true, fill = "0", align = "=";

    // Compute the prefix and suffix.
    // For SI-prefix, the suffix is lazily computed.
    var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",
        suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : "";

    // What format function should we use?
    // Is this an integer type?
    // Can this type generate exponential notation?
    var formatType = formatTypes[type],
        maybeSuffix = /[defgprs%]/.test(type);

    // Set the default precision if not specified,
    // or clamp the specified precision to the supported range.
    // For significant precision, it must be in [1, 21].
    // For fixed precision, it must be in [0, 20].
    precision = precision === undefined ? 6
        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))
        : Math.max(0, Math.min(20, precision));

    function format(value) {
      var valuePrefix = prefix,
          valueSuffix = suffix,
          i, n, c;

      if (type === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value;

        // Determine the sign. -0 is not less than 0, but 1 / -0 is!
        var valueNegative = value < 0 || 1 / value < 0;

        // Perform the initial formatting.
        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);

        // Trim insignificant zeros.
        if (trim) value = formatTrim(value);

        // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.
        if (valueNegative && +value === 0 && sign !== "+") valueNegative = false;

        // Compute the prefix and suffix.
        valuePrefix = (valueNegative ? (sign === "(" ? sign : minus) : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
        valueSuffix = (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : "");

        // Break the formatted value into the integer “value” part that can be
        // grouped, and fractional or exponential “suffix” part that is not.
        if (maybeSuffix) {
          i = -1, n = value.length;
          while (++i < n) {
            if (c = value.charCodeAt(i), 48 > c || c > 57) {
              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
              value = value.slice(0, i);
              break;
            }
          }
        }
      }

      // If the fill character is not "0", grouping is applied before padding.
      if (comma && !zero) value = group(value, Infinity);

      // Compute the padding.
      var length = valuePrefix.length + value.length + valueSuffix.length,
          padding = length < width ? new Array(width - length + 1).join(fill) : "";

      // If the fill character is "0", grouping is applied after padding.
      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";

      // Reconstruct the final output based on the desired alignment.
      switch (align) {
        case "<": value = valuePrefix + value + valueSuffix + padding; break;
        case "=": value = valuePrefix + padding + value + valueSuffix; break;
        case "^": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;
        default: value = padding + valuePrefix + value + valueSuffix; break;
      }

      return numerals(value);
    }

    format.toString = function() {
      return specifier + "";
    };

    return format;
  }

  function formatPrefix(specifier, value) {
    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)),
        e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,
        k = Math.pow(10, -e),
        prefix = prefixes[8 + e / 3];
    return function(value) {
      return f(k * value) + prefix;
    };
  }

  return {
    format: newFormat,
    formatPrefix: formatPrefix
  };
}

var locale;
exports.format = void 0;
exports.formatPrefix = void 0;

defaultLocale({
  thousands: ",",
  grouping: [3],
  currency: ["$", ""]
});

function defaultLocale(definition) {
  locale = formatLocale(definition);
  exports.format = locale.format;
  exports.formatPrefix = locale.formatPrefix;
  return locale;
}

function precisionFixed(step) {
  return Math.max(0, -exponent(Math.abs(step)));
}

function precisionPrefix(step, value) {
  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));
}

function precisionRound(step, max) {
  step = Math.abs(step), max = Math.abs(max) - step;
  return Math.max(0, exponent(max) - exponent(step)) + 1;
}

exports.FormatSpecifier = FormatSpecifier;
exports.formatDefaultLocale = defaultLocale;
exports.formatLocale = formatLocale;
exports.formatSpecifier = formatSpecifier;
exports.precisionFixed = precisionFixed;
exports.precisionPrefix = precisionPrefix;
exports.precisionRound = precisionRound;

Object.defineProperty(exports, '__esModule', { value: true });

}));

----------------------------------------
File: ./animations/node_modules/d3-format/README.md
----------------------------------------
# d3-format

Ever noticed how sometimes JavaScript doesn’t display numbers the way you expect? Like, you tried to print tenths with a simple loop:

```js
for (let i = 0; i < 10; ++i) {
  console.log(0.1 * i);
}
```

And you got this:

```js
0
0.1
0.2
0.30000000000000004
0.4
0.5
0.6000000000000001
0.7000000000000001
0.8
0.9
```

Welcome to [binary floating point](https://en.wikipedia.org/wiki/Double-precision_floating-point_format)! ಠ_ಠ

Yet rounding error is not the only reason to customize number formatting. A table of numbers should be formatted consistently for comparison; above, 0.0 would be better than 0. Large numbers should have grouped digits (e.g., 42,000) or be in scientific or metric notation (4.2e+4, 42k). Currencies should have fixed precision ($3.50). Reported numerical results should be rounded to significant digits (4021 becomes 4000). Number formats should appropriate to the reader’s locale (42.000,00 or 42,000.00). The list goes on.

Formatting numbers for human consumption is the purpose of d3-format, which is modeled after Python 3’s [format specification mini-language](https://docs.python.org/3/library/string.html#format-specification-mini-language) ([PEP 3101](https://www.python.org/dev/peps/pep-3101/)). Revisiting the example above:

```js
const f = d3.format(".1f");
for (let i = 0; i < 10; ++i) {
  console.log(f(0.1 * i));
}
```

Now you get this:

```js
0.0
0.1
0.2
0.3
0.4
0.5
0.6
0.7
0.8
0.9
```

But d3-format is much more than an alias for [number.toFixed](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed)! A few more examples:

```js
d3.format(".0%")(0.123);  // rounded percentage, "12%"
d3.format("($.2f")(-3.5); // localized fixed-point currency, "(£3.50)"
d3.format("+20")(42);     // space-filled and signed, "                 +42"
d3.format(".^20")(42);    // dot-filled and centered, ".........42........."
d3.format(".2s")(42e6);   // SI-prefix with two significant digits, "42M"
d3.format("#x")(48879);   // prefixed lowercase hexadecimal, "0xbeef"
d3.format(",.2r")(4223);  // grouped thousands with two significant digits, "4,200"
```

See [*locale*.format](#locale_format) for a detailed specification, and try running [d3.formatSpecifier](#formatSpecifier) on the above formats to decode their meaning.

## Installing

If you use npm, `npm install d3-format`. You can also download the [latest release on GitHub](https://github.com/d3/d3-format/releases/latest). In modern browsers, you can import d3-format from Skypack:

```html
<script type="module">

import {format} from "https://cdn.skypack.dev/d3-format@3";

const f = format(".2s");

</script>
```

For legacy environments, you can load d3-format’s UMD bundle from an npm-based CDN such as jsDelivr; a `d3` global is exported:

```html
<script src="https://cdn.jsdelivr.net/npm/d3-format@3"></script>
<script>

var f = d3.format(".2s");

</script>
```

Locale files are published to npm and can be loaded using [d3.json](https://github.com/d3/d3-fetch/blob/master/README.md#json). For example, to set Russian as the default locale:

```js
const locale = await d3.json("https://cdn.jsdelivr.net/npm/d3-format@3/locale/ru-RU.json");
d3.formatDefaultLocale(locale);
const f = d3.format("$,");
console.log(f(1234.56)); // 1 234,56 руб.
```

[Try d3-format in your browser.](https://observablehq.com/@d3/d3-format)

## API Reference

<a name="format" href="#format">#</a> d3.<b>format</b>(<i>specifier</i>) [<>](https://github.com/d3/d3-format/blob/main/src/defaultLocale.js#L4 "Source")

An alias for [*locale*.format](#locale_format) on the [default locale](#formatDefaultLocale).

<a name="formatPrefix" href="#formatPrefix">#</a> d3.<b>formatPrefix</b>(<i>specifier</i>, <i>value</i>) [<>](https://github.com/d3/d3-format/blob/main/src/defaultLocale.js#L5 "Source")

An alias for [*locale*.formatPrefix](#locale_formatPrefix) on the [default locale](#formatDefaultLocale).

<a name="locale_format" href="#locale_format">#</a> <i>locale</i>.<b>format</b>(<i>specifier</i>) [<>](https://github.com/d3/d3-format/blob/main/src/locale.js#L18 "Source")

Returns a new format function for the given string *specifier*. The returned function takes a number as the only argument, and returns a string representing the formatted number. The general form of a specifier is:

```
[​[fill]align][sign][symbol][0][width][,][.precision][~][type]
```

The *fill* can be any character. The presence of a fill character is signaled by the *align* character following it, which must be one of the following:

* `>` - Forces the field to be right-aligned within the available space. (Default behavior).
* `<` - Forces the field to be left-aligned within the available space.
* `^` - Forces the field to be centered within the available space.
* `=` - like `>`, but with any sign and symbol to the left of any padding.

The *sign* can be:

* `-` - nothing for zero or positive and a minus sign for negative. (Default behavior.)
* `+` - a plus sign for zero or positive and a minus sign for negative.
* `(` - nothing for zero or positive and parentheses for negative.
* ` ` (space) - a space for zero or positive and a minus sign for negative.

The *symbol* can be:

* `$` - apply currency symbols per the locale definition.
* `#` - for binary, octal, or hexadecimal notation, prefix by `0b`, `0o`, or `0x`, respectively.

The *zero* (`0`) option enables zero-padding; this implicitly sets *fill* to `0` and *align* to `=`. The *width* defines the minimum field width; if not specified, then the width will be determined by the content. The *comma* (`,`) option enables the use of a group separator, such as a comma for thousands.

Depending on the *type*, the *precision* either indicates the number of digits that follow the decimal point (types `f` and `%`), or the number of significant digits (types `​`, `e`, `g`, `r`, `s` and `p`). If the precision is not specified, it defaults to 6 for all types except `​` (none), which defaults to 12. Precision is ignored for integer formats (types `b`, `o`, `d`, `x`, and `X`) and character data (type `c`). See [precisionFixed](#precisionFixed) and [precisionRound](#precisionRound) for help picking an appropriate precision.

The `~` option trims insignificant trailing zeros across all format types. This is most commonly used in conjunction with types `r`, `e`, `s` and `%`. For example:

```js
d3.format("s")(1500);  // "1.50000k"
d3.format("~s")(1500); // "1.5k"
```

The available *type* values are:

* `e` - exponent notation.
* `f` - fixed point notation.
* `g` - either decimal or exponent notation, rounded to significant digits.
* `r` - decimal notation, rounded to significant digits.
* `s` - decimal notation with an [SI prefix](#locale_formatPrefix), rounded to significant digits.
* `%` - multiply by 100, and then decimal notation with a percent sign.
* `p` - multiply by 100, round to significant digits, and then decimal notation with a percent sign.
* `b` - binary notation, rounded to integer.
* `o` - octal notation, rounded to integer.
* `d` - decimal notation, rounded to integer.
* `x` - hexadecimal notation, using lower-case letters, rounded to integer.
* `X` - hexadecimal notation, using upper-case letters, rounded to integer.
* `c` - character data, for a string of text.

The type `​` (none) is also supported as shorthand for `~g` (with a default precision of 12 instead of 6), and the type `n` is shorthand for `,g`. For the `g`, `n` and `​` (none) types, decimal notation is used if the resulting string would have *precision* or fewer digits; otherwise, exponent notation is used. For example:

```js
d3.format(".2")(42);  // "42"
d3.format(".2")(4.2); // "4.2"
d3.format(".1")(42);  // "4e+1"
d3.format(".1")(4.2); // "4"
```

<a name="locale_formatPrefix" href="#locale_formatPrefix">#</a> <i>locale</i>.<b>formatPrefix</b>(<i>specifier</i>, <i>value</i>) [<>](https://github.com/d3/d3-format/blob/main/src/locale.js#L127 "Source")

Equivalent to [*locale*.format](#locale_format), except the returned function will convert values to the units of the appropriate [SI prefix](https://en.wikipedia.org/wiki/Metric_prefix#List_of_SI_prefixes) for the specified numeric reference *value* before formatting in fixed point notation. The following prefixes are supported:

* `y` - yocto, 10⁻²⁴
* `z` - zepto, 10⁻²¹
* `a` - atto, 10⁻¹⁸
* `f` - femto, 10⁻¹⁵
* `p` - pico, 10⁻¹²
* `n` - nano, 10⁻⁹
* `µ` - micro, 10⁻⁶
* `m` - milli, 10⁻³
* `​` (none) - 10⁰
* `k` - kilo, 10³
* `M` - mega, 10⁶
* `G` - giga, 10⁹
* `T` - tera, 10¹²
* `P` - peta, 10¹⁵
* `E` - exa, 10¹⁸
* `Z` - zetta, 10²¹
* `Y` - yotta, 10²⁴

Unlike [*locale*.format](#locale_format) with the `s` format type, this method returns a formatter with a consistent SI prefix, rather than computing the prefix dynamically for each number. In addition, the *precision* for the given *specifier* represents the number of digits past the decimal point (as with `f` fixed point notation), not the number of significant digits. For example:

```js
const f = d3.formatPrefix(",.0", 1e-6);
f(0.00042); // "420µ"
f(0.0042); // "4,200µ"
```

This method is useful when formatting multiple numbers in the same units for easy comparison. See [precisionPrefix](#precisionPrefix) for help picking an appropriate precision, and [bl.ocks.org/9764126](http://bl.ocks.org/mbostock/9764126) for an example.

<a name="formatSpecifier" href="#formatSpecifier">#</a> d3.<b>formatSpecifier</b>(<i>specifier</i>) [<>](https://github.com/d3/d3-format/blob/main/src/formatSpecifier.js "Source")

Parses the specified *specifier*, returning an object with exposed fields that correspond to the [format specification mini-language](#locale_format) and a toString method that reconstructs the specifier. For example, `formatSpecifier("s")` returns:

```js
FormatSpecifier {
  "fill": " ",
  "align": ">",
  "sign": "-",
  "symbol": "",
  "zero": false,
  "width": undefined,
  "comma": false,
  "precision": undefined,
  "trim": false,
  "type": "s"
}
```

This method is useful for understanding how format specifiers are parsed and for deriving new specifiers. For example, you might compute an appropriate precision based on the numbers you want to format using [precisionFixed](#precisionFixed) and then create a new format:

```js
const s = d3.formatSpecifier("f");
s.precision = d3.precisionFixed(0.01);
const f = d3.format(s);
f(42); // "42.00";
```

<a name="FormatSpecifier" href="#FormatSpecifier">#</a> new d3.<b>FormatSpecifier</b>(<i>specifier</i>) [<>](https://github.com/d3/d3-format/blob/main/src/formatSpecifier.js "Source")

Given the specified *specifier* object, returning an object with exposed fields that correspond to the [format specification mini-language](#locale_format) and a toString method that reconstructs the specifier. For example, `new FormatSpecifier({type: "s"})` returns:

```js
FormatSpecifier {
  "fill": " ",
  "align": ">",
  "sign": "-",
  "symbol": "",
  "zero": false,
  "width": undefined,
  "comma": false,
  "precision": undefined,
  "trim": false,
  "type": "s"
}
```

<a name="precisionFixed" href="#precisionFixed">#</a> d3.<b>precisionFixed</b>(<i>step</i>) [<>](https://github.com/d3/d3-format/blob/main/src/precisionFixed.js "Source")

Returns a suggested decimal precision for fixed point notation given the specified numeric *step* value. The *step* represents the minimum absolute difference between values that will be formatted. (This assumes that the values to be formatted are also multiples of *step*.) For example, given the numbers 1, 1.5, and 2, the *step* should be 0.5 and the suggested precision is 1:

```js
const p = d3.precisionFixed(0.5);
const f = d3.format("." + p + "f");
f(1);   // "1.0"
f(1.5); // "1.5"
f(2);   // "2.0"
```

Whereas for the numbers 1, 2 and 3, the *step* should be 1 and the suggested precision is 0:

```js
const p = d3.precisionFixed(1);
const f = d3.format("." + p + "f");
f(1); // "1"
f(2); // "2"
f(3); // "3"
```

Note: for the `%` format type, subtract two:

```js
const p = Math.max(0, d3.precisionFixed(0.05) - 2);
const f = d3.format("." + p + "%");
f(0.45); // "45%"
f(0.50); // "50%"
f(0.55); // "55%"
```

<a name="precisionPrefix" href="#precisionPrefix">#</a> d3.<b>precisionPrefix</b>(<i>step</i>, <i>value</i>) [<>](https://github.com/d3/d3-format/blob/main/src/precisionPrefix.js "Source")

Returns a suggested decimal precision for use with [*locale*.formatPrefix](#locale_formatPrefix) given the specified numeric *step* and reference *value*. The *step* represents the minimum absolute difference between values that will be formatted, and *value* determines which SI prefix will be used. (This assumes that the values to be formatted are also multiples of *step*.) For example, given the numbers 1.1e6, 1.2e6, and 1.3e6, the *step* should be 1e5, the *value* could be 1.3e6, and the suggested precision is 1:

```js
const p = d3.precisionPrefix(1e5, 1.3e6);
const f = d3.formatPrefix("." + p, 1.3e6);
f(1.1e6); // "1.1M"
f(1.2e6); // "1.2M"
f(1.3e6); // "1.3M"
```

<a name="precisionRound" href="#precisionRound">#</a> d3.<b>precisionRound</b>(<i>step</i>, <i>max</i>) [<>](https://github.com/d3/d3-format/blob/main/src/precisionRound.js "Source")

Returns a suggested decimal precision for format types that round to significant digits given the specified numeric *step* and *max* values. The *step* represents the minimum absolute difference between values that will be formatted, and the *max* represents the largest absolute value that will be formatted. (This assumes that the values to be formatted are also multiples of *step*.) For example, given the numbers 0.99, 1.0, and 1.01, the *step* should be 0.01, the *max* should be 1.01, and the suggested precision is 3:

```js
const p = d3.precisionRound(0.01, 1.01);
const f = d3.format("." + p + "r");
f(0.99); // "0.990"
f(1.0);  // "1.00"
f(1.01); // "1.01"
```

Whereas for the numbers 0.9, 1.0, and 1.1, the *step* should be 0.1, the *max* should be 1.1, and the suggested precision is 2:

```js
const p = d3.precisionRound(0.1, 1.1);
const f = d3.format("." + p + "r");
f(0.9); // "0.90"
f(1.0); // "1.0"
f(1.1); // "1.1"
```

Note: for the `e` format type, subtract one:

```js
const p = Math.max(0, d3.precisionRound(0.01, 1.01) - 1);
const f = d3.format("." + p + "e");
f(0.01); // "1.00e-2"
f(1.01); // "1.01e+0"
```

### Locales

<a name="formatLocale" href="#formatLocale">#</a> d3.<b>formatLocale</b>(<i>definition</i>) [<>](https://github.com/d3/d3-format/blob/main/src/locale.js "Source")

Returns a *locale* object for the specified *definition* with [*locale*.format](#locale_format) and [*locale*.formatPrefix](#locale_formatPrefix) methods. The *definition* must include the following properties:

* `decimal` - the decimal point (e.g., `"."`).
* `thousands` - the group separator (e.g., `","`).
* `grouping` - the array of group sizes (e.g., `[3]`), cycled as needed.
* `currency` - the currency prefix and suffix (e.g., `["$", ""]`).
* `numerals` - optional; an array of ten strings to replace the numerals 0-9.
* `percent` - optional; the percent sign (defaults to `"%"`).
* `minus` - optional; the minus sign (defaults to `"−"`).
* `nan` - optional; the not-a-number value (defaults `"NaN"`).

Note that the *thousands* property is a misnomer, as the grouping definition allows groups other than thousands.

<a name="formatDefaultLocale" href="#formatDefaultLocale">#</a> d3.<b>formatDefaultLocale</b>(<i>definition</i>) [<>](https://github.com/d3/d3-format/blob/main/src/defaultLocale.js "Source")

Equivalent to [d3.formatLocale](#formatLocale), except it also redefines [d3.format](#format) and [d3.formatPrefix](#formatPrefix) to the new locale’s [*locale*.format](#locale_format) and [*locale*.formatPrefix](#locale_formatPrefix). If you do not set a default locale, it defaults to [U.S. English](https://github.com/d3/d3-format/blob/main/locale/en-US.json).

----------------------------------------
File: ./animations/node_modules/d3-format/src/formatGroup.js
----------------------------------------
export default function(grouping, thousands) {
  return function(value, width) {
    var i = value.length,
        t = [],
        j = 0,
        g = grouping[0],
        length = 0;

    while (i > 0 && g > 0) {
      if (length + g + 1 > width) g = Math.max(1, width - length);
      t.push(value.substring(i -= g, i + g));
      if ((length += g + 1) > width) break;
      g = grouping[j = (j + 1) % grouping.length];
    }

    return t.reverse().join(thousands);
  };
}

----------------------------------------
File: ./animations/node_modules/d3-format/src/formatDecimal.js
----------------------------------------
export default function(x) {
  return Math.abs(x = Math.round(x)) >= 1e21
      ? x.toLocaleString("en").replace(/,/g, "")
      : x.toString(10);
}

// Computes the decimal coefficient and exponent of the specified number x with
// significant digits p, where x is positive and p is in [1, 21] or undefined.
// For example, formatDecimalParts(1.23) returns ["123", 0].
export function formatDecimalParts(x, p) {
  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity
  var i, coefficient = x.slice(0, i);

  // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
  // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).
  return [
    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
    +x.slice(i + 1)
  ];
}

----------------------------------------
File: ./animations/node_modules/d3-format/src/formatSpecifier.js
----------------------------------------
// [[fill]align][sign][symbol][0][width][,][.precision][~][type]
var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;

export default function formatSpecifier(specifier) {
  if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);
  var match;
  return new FormatSpecifier({
    fill: match[1],
    align: match[2],
    sign: match[3],
    symbol: match[4],
    zero: match[5],
    width: match[6],
    comma: match[7],
    precision: match[8] && match[8].slice(1),
    trim: match[9],
    type: match[10]
  });
}

formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof

export function FormatSpecifier(specifier) {
  this.fill = specifier.fill === undefined ? " " : specifier.fill + "";
  this.align = specifier.align === undefined ? ">" : specifier.align + "";
  this.sign = specifier.sign === undefined ? "-" : specifier.sign + "";
  this.symbol = specifier.symbol === undefined ? "" : specifier.symbol + "";
  this.zero = !!specifier.zero;
  this.width = specifier.width === undefined ? undefined : +specifier.width;
  this.comma = !!specifier.comma;
  this.precision = specifier.precision === undefined ? undefined : +specifier.precision;
  this.trim = !!specifier.trim;
  this.type = specifier.type === undefined ? "" : specifier.type + "";
}

FormatSpecifier.prototype.toString = function() {
  return this.fill
      + this.align
      + this.sign
      + this.symbol
      + (this.zero ? "0" : "")
      + (this.width === undefined ? "" : Math.max(1, this.width | 0))
      + (this.comma ? "," : "")
      + (this.precision === undefined ? "" : "." + Math.max(0, this.precision | 0))
      + (this.trim ? "~" : "")
      + this.type;
};

----------------------------------------
File: ./animations/node_modules/d3-format/src/formatNumerals.js
----------------------------------------
export default function(numerals) {
  return function(value) {
    return value.replace(/[0-9]/g, function(i) {
      return numerals[+i];
    });
  };
}

----------------------------------------
File: ./animations/node_modules/d3-format/src/precisionFixed.js
----------------------------------------
import exponent from "./exponent.js";

export default function(step) {
  return Math.max(0, -exponent(Math.abs(step)));
}

----------------------------------------
File: ./animations/node_modules/d3-format/src/index.js
----------------------------------------
export {default as formatDefaultLocale, format, formatPrefix} from "./defaultLocale.js";
export {default as formatLocale} from "./locale.js";
export {default as formatSpecifier, FormatSpecifier} from "./formatSpecifier.js";
export {default as precisionFixed} from "./precisionFixed.js";
export {default as precisionPrefix} from "./precisionPrefix.js";
export {default as precisionRound} from "./precisionRound.js";

----------------------------------------
File: ./animations/node_modules/d3-format/src/defaultLocale.js
----------------------------------------
import formatLocale from "./locale.js";

var locale;
export var format;
export var formatPrefix;

defaultLocale({
  thousands: ",",
  grouping: [3],
  currency: ["$", ""]
});

export default function defaultLocale(definition) {
  locale = formatLocale(definition);
  format = locale.format;
  formatPrefix = locale.formatPrefix;
  return locale;
}

----------------------------------------
File: ./animations/node_modules/d3-format/src/precisionRound.js
----------------------------------------
import exponent from "./exponent.js";

export default function(step, max) {
  step = Math.abs(step), max = Math.abs(max) - step;
  return Math.max(0, exponent(max) - exponent(step)) + 1;
}

----------------------------------------
File: ./animations/node_modules/d3-format/src/formatTrim.js
----------------------------------------
// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.
export default function(s) {
  out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {
    switch (s[i]) {
      case ".": i0 = i1 = i; break;
      case "0": if (i0 === 0) i0 = i; i1 = i; break;
      default: if (!+s[i]) break out; if (i0 > 0) i0 = 0; break;
    }
  }
  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
}

----------------------------------------
File: ./animations/node_modules/d3-format/src/formatRounded.js
----------------------------------------
import {formatDecimalParts} from "./formatDecimal.js";

export default function(x, p) {
  var d = formatDecimalParts(x, p);
  if (!d) return x + "";
  var coefficient = d[0],
      exponent = d[1];
  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient
      : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1)
      : coefficient + new Array(exponent - coefficient.length + 2).join("0");
}

----------------------------------------
File: ./animations/node_modules/d3-format/src/identity.js
----------------------------------------
export default function(x) {
  return x;
}

----------------------------------------
File: ./animations/node_modules/d3-format/src/formatPrefixAuto.js
----------------------------------------
import {formatDecimalParts} from "./formatDecimal.js";

export var prefixExponent;

export default function(x, p) {
  var d = formatDecimalParts(x, p);
  if (!d) return x + "";
  var coefficient = d[0],
      exponent = d[1],
      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,
      n = coefficient.length;
  return i === n ? coefficient
      : i > n ? coefficient + new Array(i - n + 1).join("0")
      : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i)
      : "0." + new Array(1 - i).join("0") + formatDecimalParts(x, Math.max(0, p + i - 1))[0]; // less than 1y!
}

----------------------------------------
File: ./animations/node_modules/d3-format/src/formatTypes.js
----------------------------------------
import formatDecimal from "./formatDecimal.js";
import formatPrefixAuto from "./formatPrefixAuto.js";
import formatRounded from "./formatRounded.js";

export default {
  "%": (x, p) => (x * 100).toFixed(p),
  "b": (x) => Math.round(x).toString(2),
  "c": (x) => x + "",
  "d": formatDecimal,
  "e": (x, p) => x.toExponential(p),
  "f": (x, p) => x.toFixed(p),
  "g": (x, p) => x.toPrecision(p),
  "o": (x) => Math.round(x).toString(8),
  "p": (x, p) => formatRounded(x * 100, p),
  "r": formatRounded,
  "s": formatPrefixAuto,
  "X": (x) => Math.round(x).toString(16).toUpperCase(),
  "x": (x) => Math.round(x).toString(16)
};

----------------------------------------
File: ./animations/node_modules/d3-format/src/precisionPrefix.js
----------------------------------------
import exponent from "./exponent.js";

export default function(step, value) {
  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));
}

----------------------------------------
File: ./animations/node_modules/d3-format/src/locale.js
----------------------------------------
import exponent from "./exponent.js";
import formatGroup from "./formatGroup.js";
import formatNumerals from "./formatNumerals.js";
import formatSpecifier from "./formatSpecifier.js";
import formatTrim from "./formatTrim.js";
import formatTypes from "./formatTypes.js";
import {prefixExponent} from "./formatPrefixAuto.js";
import identity from "./identity.js";

var map = Array.prototype.map,
    prefixes = ["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];

export default function(locale) {
  var group = locale.grouping === undefined || locale.thousands === undefined ? identity : formatGroup(map.call(locale.grouping, Number), locale.thousands + ""),
      currencyPrefix = locale.currency === undefined ? "" : locale.currency[0] + "",
      currencySuffix = locale.currency === undefined ? "" : locale.currency[1] + "",
      decimal = locale.decimal === undefined ? "." : locale.decimal + "",
      numerals = locale.numerals === undefined ? identity : formatNumerals(map.call(locale.numerals, String)),
      percent = locale.percent === undefined ? "%" : locale.percent + "",
      minus = locale.minus === undefined ? "−" : locale.minus + "",
      nan = locale.nan === undefined ? "NaN" : locale.nan + "";

  function newFormat(specifier) {
    specifier = formatSpecifier(specifier);

    var fill = specifier.fill,
        align = specifier.align,
        sign = specifier.sign,
        symbol = specifier.symbol,
        zero = specifier.zero,
        width = specifier.width,
        comma = specifier.comma,
        precision = specifier.precision,
        trim = specifier.trim,
        type = specifier.type;

    // The "n" type is an alias for ",g".
    if (type === "n") comma = true, type = "g";

    // The "" type, and any invalid type, is an alias for ".12~g".
    else if (!formatTypes[type]) precision === undefined && (precision = 12), trim = true, type = "g";

    // If zero fill is specified, padding goes after sign and before digits.
    if (zero || (fill === "0" && align === "=")) zero = true, fill = "0", align = "=";

    // Compute the prefix and suffix.
    // For SI-prefix, the suffix is lazily computed.
    var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",
        suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : "";

    // What format function should we use?
    // Is this an integer type?
    // Can this type generate exponential notation?
    var formatType = formatTypes[type],
        maybeSuffix = /[defgprs%]/.test(type);

    // Set the default precision if not specified,
    // or clamp the specified precision to the supported range.
    // For significant precision, it must be in [1, 21].
    // For fixed precision, it must be in [0, 20].
    precision = precision === undefined ? 6
        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))
        : Math.max(0, Math.min(20, precision));

    function format(value) {
      var valuePrefix = prefix,
          valueSuffix = suffix,
          i, n, c;

      if (type === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value;

        // Determine the sign. -0 is not less than 0, but 1 / -0 is!
        var valueNegative = value < 0 || 1 / value < 0;

        // Perform the initial formatting.
        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);

        // Trim insignificant zeros.
        if (trim) value = formatTrim(value);

        // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.
        if (valueNegative && +value === 0 && sign !== "+") valueNegative = false;

        // Compute the prefix and suffix.
        valuePrefix = (valueNegative ? (sign === "(" ? sign : minus) : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
        valueSuffix = (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : "");

        // Break the formatted value into the integer “value” part that can be
        // grouped, and fractional or exponential “suffix” part that is not.
        if (maybeSuffix) {
          i = -1, n = value.length;
          while (++i < n) {
            if (c = value.charCodeAt(i), 48 > c || c > 57) {
              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
              value = value.slice(0, i);
              break;
            }
          }
        }
      }

      // If the fill character is not "0", grouping is applied before padding.
      if (comma && !zero) value = group(value, Infinity);

      // Compute the padding.
      var length = valuePrefix.length + value.length + valueSuffix.length,
          padding = length < width ? new Array(width - length + 1).join(fill) : "";

      // If the fill character is "0", grouping is applied after padding.
      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";

      // Reconstruct the final output based on the desired alignment.
      switch (align) {
        case "<": value = valuePrefix + value + valueSuffix + padding; break;
        case "=": value = valuePrefix + padding + value + valueSuffix; break;
        case "^": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;
        default: value = padding + valuePrefix + value + valueSuffix; break;
      }

      return numerals(value);
    }

    format.toString = function() {
      return specifier + "";
    };

    return format;
  }

  function formatPrefix(specifier, value) {
    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)),
        e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,
        k = Math.pow(10, -e),
        prefix = prefixes[8 + e / 3];
    return function(value) {
      return f(k * value) + prefix;
    };
  }

  return {
    format: newFormat,
    formatPrefix: formatPrefix
  };
}

----------------------------------------
File: ./animations/node_modules/d3-format/src/exponent.js
----------------------------------------
import {formatDecimalParts} from "./formatDecimal.js";

export default function(x) {
  return x = formatDecimalParts(Math.abs(x)), x ? x[1] : NaN;
}

----------------------------------------
File: ./animations/node_modules/define-data-property/test/index.js
----------------------------------------
'use strict';

var test = require('tape');
var v = require('es-value-fixtures');
var forEach = require('for-each');
var inspect = require('object-inspect');
var hasOwn = require('hasown');
var hasPropertyDescriptors = require('has-property-descriptors')();
var getOwnPropertyDescriptors = require('object.getownpropertydescriptors');
var ownKeys = require('reflect.ownkeys');

var defineDataProperty = require('../');

test('defineDataProperty', function (t) {
	t.test('argument validation', function (st) {
		forEach(v.primitives, function (nonObject) {
			st['throws'](
				// @ts-expect-error
				function () { defineDataProperty(nonObject, 'key', 'value'); },
				TypeError,
				'throws on non-object input: ' + inspect(nonObject)
			);
		});

		forEach(v.nonPropertyKeys, function (nonPropertyKey) {
			st['throws'](
				// @ts-expect-error
				function () { defineDataProperty({}, nonPropertyKey, 'value'); },
				TypeError,
				'throws on non-PropertyKey input: ' + inspect(nonPropertyKey)
			);
		});

		forEach(v.nonBooleans, function (nonBoolean) {
			if (nonBoolean !== null) {
				st['throws'](
					// @ts-expect-error
					function () { defineDataProperty({}, 'key', 'value', nonBoolean); },
					TypeError,
					'throws on non-boolean nonEnumerable: ' + inspect(nonBoolean)
				);

				st['throws'](
					// @ts-expect-error
					function () { defineDataProperty({}, 'key', 'value', false, nonBoolean); },
					TypeError,
					'throws on non-boolean nonWritable: ' + inspect(nonBoolean)
				);

				st['throws'](
					// @ts-expect-error
					function () { defineDataProperty({}, 'key', 'value', false, false, nonBoolean); },
					TypeError,
					'throws on non-boolean nonConfigurable: ' + inspect(nonBoolean)
				);
			}
		});

		st.end();
	});

	t.test('normal data property', function (st) {
		/** @type {Record<PropertyKey, string>} */
		var obj = { existing: 'existing property' };
		st.ok(hasOwn(obj, 'existing'), 'has initial own property');
		st.equal(obj.existing, 'existing property', 'has expected initial value');

		var res = defineDataProperty(obj, 'added', 'added property');
		st.equal(res, void undefined, 'returns `undefined`');
		st.ok(hasOwn(obj, 'added'), 'has expected own property');
		st.equal(obj.added, 'added property', 'has expected value');

		defineDataProperty(obj, 'existing', 'new value');
		st.ok(hasOwn(obj, 'existing'), 'still has expected own property');
		st.equal(obj.existing, 'new value', 'has new expected value');

		defineDataProperty(obj, 'explicit1', 'new value', false);
		st.ok(hasOwn(obj, 'explicit1'), 'has expected own property (explicit enumerable)');
		st.equal(obj.explicit1, 'new value', 'has new expected value (explicit enumerable)');

		defineDataProperty(obj, 'explicit2', 'new value', false, false);
		st.ok(hasOwn(obj, 'explicit2'), 'has expected own property (explicit writable)');
		st.equal(obj.explicit2, 'new value', 'has new expected value (explicit writable)');

		defineDataProperty(obj, 'explicit3', 'new value', false, false, false);
		st.ok(hasOwn(obj, 'explicit3'), 'has expected own property (explicit configurable)');
		st.equal(obj.explicit3, 'new value', 'has new expected value (explicit configurable)');

		st.end();
	});

	t.test('loose mode', { skip: !hasPropertyDescriptors }, function (st) {
		var obj = { existing: 'existing property' };

		defineDataProperty(obj, 'added', 'added value 1', true, null, null, true);
		st.deepEqual(
			getOwnPropertyDescriptors(obj),
			{
				existing: {
					configurable: true,
					enumerable: true,
					value: 'existing property',
					writable: true
				},
				added: {
					configurable: true,
					enumerable: !hasPropertyDescriptors,
					value: 'added value 1',
					writable: true
				}
			},
			'in loose mode, obj still adds property 1'
		);

		defineDataProperty(obj, 'added', 'added value 2', false, true, null, true);
		st.deepEqual(
			getOwnPropertyDescriptors(obj),
			{
				existing: {
					configurable: true,
					enumerable: true,
					value: 'existing property',
					writable: true
				},
				added: {
					configurable: true,
					enumerable: true,
					value: 'added value 2',
					writable: !hasPropertyDescriptors
				}
			},
			'in loose mode, obj still adds property 2'
		);

		defineDataProperty(obj, 'added', 'added value 3', false, false, true, true);
		st.deepEqual(
			getOwnPropertyDescriptors(obj),
			{
				existing: {
					configurable: true,
					enumerable: true,
					value: 'existing property',
					writable: true
				},
				added: {
					configurable: !hasPropertyDescriptors,
					enumerable: true,
					value: 'added value 3',
					writable: true
				}
			},
			'in loose mode, obj still adds property 3'
		);

		st.end();
	});

	t.test('non-normal data property, ES3', { skip: hasPropertyDescriptors }, function (st) {
		/** @type {Record<PropertyKey, string>} */
		var obj = { existing: 'existing property' };

		st['throws'](
			function () { defineDataProperty(obj, 'added', 'added value', true); },
			SyntaxError,
			'nonEnumerable throws a Syntax Error'
		);

		st['throws'](
			function () { defineDataProperty(obj, 'added', 'added value', false, true); },
			SyntaxError,
			'nonWritable throws a Syntax Error'
		);

		st['throws'](
			function () { defineDataProperty(obj, 'added', 'added value', false, false, true); },
			SyntaxError,
			'nonWritable throws a Syntax Error'
		);

		st.deepEqual(
			ownKeys(obj),
			['existing'],
			'obj still has expected keys'
		);
		st.equal(obj.existing, 'existing property', 'obj still has expected values');

		st.end();
	});

	t.test('new non-normal data property, ES5+', { skip: !hasPropertyDescriptors }, function (st) {
		/** @type {Record<PropertyKey, string>} */
		var obj = { existing: 'existing property' };

		defineDataProperty(obj, 'nonEnum', null, true);
		defineDataProperty(obj, 'nonWrit', null, false, true);
		defineDataProperty(obj, 'nonConf', null, false, false, true);

		st.deepEqual(
			getOwnPropertyDescriptors(obj),
			{
				existing: {
					configurable: true,
					enumerable: true,
					value: 'existing property',
					writable: true
				},
				nonEnum: {
					configurable: true,
					enumerable: false,
					value: null,
					writable: true
				},
				nonWrit: {
					configurable: true,
					enumerable: true,
					value: null,
					writable: false
				},
				nonConf: {
					configurable: false,
					enumerable: true,
					value: null,
					writable: true
				}
			},
			'obj has expected property descriptors'
		);

		st.end();
	});

	t.test('existing non-normal data property, ES5+', { skip: !hasPropertyDescriptors }, function (st) {
		// test case changing an existing non-normal property

		/** @type {Record<string, null | string>} */
		var obj = {};
		Object.defineProperty(obj, 'nonEnum', { configurable: true, enumerable: false, value: null, writable: true });
		Object.defineProperty(obj, 'nonWrit', { configurable: true, enumerable: true, value: null, writable: false });
		Object.defineProperty(obj, 'nonConf', { configurable: false, enumerable: true, value: null, writable: true });

		st.deepEqual(
			getOwnPropertyDescriptors(obj),
			{
				nonEnum: {
					configurable: true,
					enumerable: false,
					value: null,
					writable: true
				},
				nonWrit: {
					configurable: true,
					enumerable: true,
					value: null,
					writable: false
				},
				nonConf: {
					configurable: false,
					enumerable: true,
					value: null,
					writable: true
				}
			},
			'obj initially has expected property descriptors'
		);

		defineDataProperty(obj, 'nonEnum', 'new value', false);
		defineDataProperty(obj, 'nonWrit', 'new value', false, false);
		st['throws'](
			function () { defineDataProperty(obj, 'nonConf', 'new value', false, false, false); },
			TypeError,
			'can not alter a nonconfigurable property'
		);

		st.deepEqual(
			getOwnPropertyDescriptors(obj),
			{
				nonEnum: {
					configurable: true,
					enumerable: true,
					value: 'new value',
					writable: true
				},
				nonWrit: {
					configurable: true,
					enumerable: true,
					value: 'new value',
					writable: true
				},
				nonConf: {
					configurable: false,
					enumerable: true,
					value: null,
					writable: true
				}
			},
			'obj ends up with expected property descriptors'
		);

		st.end();
	});

	t.test('frozen object, ES5+', { skip: !hasPropertyDescriptors }, function (st) {
		var frozen = Object.freeze({ existing: true });

		st['throws'](
			function () { defineDataProperty(frozen, 'existing', 'new value'); },
			TypeError,
			'frozen object can not modify an existing property'
		);

		st['throws'](
			function () { defineDataProperty(frozen, 'new', 'new property'); },
			TypeError,
			'frozen object can not add a new property'
		);

		st.end();
	});

	t.test('sealed object, ES5+', { skip: !hasPropertyDescriptors }, function (st) {
		var sealed = Object.seal({ existing: true });
		st.deepEqual(
			Object.getOwnPropertyDescriptor(sealed, 'existing'),
			{
				configurable: false,
				enumerable: true,
				value: true,
				writable: true
			},
			'existing value on sealed object has expected descriptor'
		);

		defineDataProperty(sealed, 'existing', 'new value');

		st.deepEqual(
			Object.getOwnPropertyDescriptor(sealed, 'existing'),
			{
				configurable: false,
				enumerable: true,
				value: 'new value',
				writable: true
			},
			'existing value on sealed object has changed descriptor'
		);

		st['throws'](
			function () { defineDataProperty(sealed, 'new', 'new property'); },
			TypeError,
			'sealed object can not add a new property'
		);

		st.end();
	});

	t.test('nonextensible object, ES5+', { skip: !hasPropertyDescriptors }, function (st) {
		var nonExt = Object.preventExtensions({ existing: true });

		st.deepEqual(
			Object.getOwnPropertyDescriptor(nonExt, 'existing'),
			{
				configurable: true,
				enumerable: true,
				value: true,
				writable: true
			},
			'existing value on non-extensible object has expected descriptor'
		);

		defineDataProperty(nonExt, 'existing', 'new value', true);

		st.deepEqual(
			Object.getOwnPropertyDescriptor(nonExt, 'existing'),
			{
				configurable: true,
				enumerable: false,
				value: 'new value',
				writable: true
			},
			'existing value on non-extensible object has changed descriptor'
		);

		st['throws'](
			function () { defineDataProperty(nonExt, 'new', 'new property'); },
			TypeError,
			'non-extensible object can not add a new property'
		);

		st.end();
	});

	t.end();
});

----------------------------------------
File: ./animations/node_modules/define-data-property/CHANGELOG.md
----------------------------------------
# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

## [v1.1.4](https://github.com/ljharb/define-data-property/compare/v1.1.3...v1.1.4) - 2024-02-13

### Commits

- [Refactor] use `es-define-property` [`90f2f4c`](https://github.com/ljharb/define-data-property/commit/90f2f4cc20298401e71c28e1e08888db12021453)
- [Dev Deps] update `@types/object.getownpropertydescriptors` [`cd929d9`](https://github.com/ljharb/define-data-property/commit/cd929d9a04f5f2fdcfa9d5be140940b91a083153)

## [v1.1.3](https://github.com/ljharb/define-data-property/compare/v1.1.2...v1.1.3) - 2024-02-12

### Commits

- [types] hand-write d.ts instead of emitting it [`0cbc988`](https://github.com/ljharb/define-data-property/commit/0cbc988203c105f2d97948327c7167ebd33bd318)
- [meta] simplify `exports` [`690781e`](https://github.com/ljharb/define-data-property/commit/690781eed28bbf2d6766237efda0ba6dd591609e)
- [Dev Deps] update `hasown`; clean up DT packages [`6cdfd1c`](https://github.com/ljharb/define-data-property/commit/6cdfd1cb2d91d791bfd18cda5d5cab232fd5d8fc)
- [actions] cleanup [`3142bc6`](https://github.com/ljharb/define-data-property/commit/3142bc6a4bc406a51f5b04f31e98562a27f35ffd)
- [meta] add `funding` [`8474423`](https://github.com/ljharb/define-data-property/commit/847442391a79779af3e0f1bf0b5bb923552b7804)
- [Deps] update `get-intrinsic` [`3e9be00`](https://github.com/ljharb/define-data-property/commit/3e9be00e07784ba34e7c77d8bc0fdbc832ad61de)

## [v1.1.2](https://github.com/ljharb/define-data-property/compare/v1.1.1...v1.1.2) - 2024-02-05

### Commits

- [Dev Deps] update @types packages, `object-inspect`, `tape`, `typescript` [`df41bf8`](https://github.com/ljharb/define-data-property/commit/df41bf84ca3456be6226055caab44e38e3a7fd2f)
- [Dev Deps] update DT packages, `aud`, `npmignore`, `tape`, typescript` [`fab0e4e`](https://github.com/ljharb/define-data-property/commit/fab0e4ec709ee02b79f42d6db3ee5f26e0a34b8a)
- [Dev Deps] use `hasown` instead of `has` [`aa51ef9`](https://github.com/ljharb/define-data-property/commit/aa51ef93f6403d49d9bb72a807bcdb6e418978c0)
- [Refactor] use `es-errors`, so things that only need those do not need `get-intrinsic` [`d89be50`](https://github.com/ljharb/define-data-property/commit/d89be50571175888d391238605122679f7e65ffc)
- [Deps] update `has-property-descriptors` [`7af887c`](https://github.com/ljharb/define-data-property/commit/7af887c9083b59b195b0079e04815cfed9fcee2b)
- [Deps] update `get-intrinsic` [`bb8728e`](https://github.com/ljharb/define-data-property/commit/bb8728ec42cd998505a7157ae24853a560c20646)

## [v1.1.1](https://github.com/ljharb/define-data-property/compare/v1.1.0...v1.1.1) - 2023-10-12

### Commits

- [Tests] fix tests in ES3 engines [`5c6920e`](https://github.com/ljharb/define-data-property/commit/5c6920edd1f52f675b02f417e539c28135b43f94)
- [Dev Deps] update `@types/es-value-fixtures`, `@types/for-each`, `@types/gopd`, `@types/has-property-descriptors`, `tape`, `typescript` [`7d82dfc`](https://github.com/ljharb/define-data-property/commit/7d82dfc20f778b4465bba06335dd53f6f431aea3)
- [Fix] IE 8 has a broken `Object.defineProperty` [`0672e1a`](https://github.com/ljharb/define-data-property/commit/0672e1af2a9fcc787e7c23b96dea60d290df5548)
- [meta] emit types on prepack [`73acb1f`](https://github.com/ljharb/define-data-property/commit/73acb1f903c21b314ec7156bf10f73c7910530c0)
- [Dev Deps] update `tape`, `typescript` [`9489a77`](https://github.com/ljharb/define-data-property/commit/9489a7738bf2ecf0ac71d5b78ec4ca6ad7ba0142)

## [v1.1.0](https://github.com/ljharb/define-data-property/compare/v1.0.1...v1.1.0) - 2023-09-13

### Commits

- [New] add `loose` arg [`155235a`](https://github.com/ljharb/define-data-property/commit/155235a4c4d7741f6de01cd87c99599a56654b72)
- [New] allow `null` to be passed for the non* args [`7d2fa5f`](https://github.com/ljharb/define-data-property/commit/7d2fa5f06be0392736c13b126f7cd38979f34792)

## [v1.0.1](https://github.com/ljharb/define-data-property/compare/v1.0.0...v1.0.1) - 2023-09-12

### Commits

- [meta] add TS types [`43d763c`](https://github.com/ljharb/define-data-property/commit/43d763c6c883f652de1c9c02ef6216ee507ffa69)
- [Dev Deps] update `@types/tape`, `typescript` [`f444985`](https://github.com/ljharb/define-data-property/commit/f444985811c36f3e6448a03ad2f9b7898917f4c7)
- [meta] add `safe-publish-latest`, [`172bb10`](https://github.com/ljharb/define-data-property/commit/172bb10890896ebb160e64398f6ee55760107bee)

## v1.0.0 - 2023-09-12

### Commits

- Initial implementation, tests, readme [`5b43d6b`](https://github.com/ljharb/define-data-property/commit/5b43d6b44e675a904810467a7d4e0adb7efc3196)
- Initial commit [`35e577a`](https://github.com/ljharb/define-data-property/commit/35e577a6ba59a98befa97776d70d90f3bea9009d)
- npm init [`82a0a04`](https://github.com/ljharb/define-data-property/commit/82a0a04a321ca7de220af02d41e2745e8a9962ed)
- Only apps should have lockfiles [`96df244`](https://github.com/ljharb/define-data-property/commit/96df244a3c6f426f9a2437be825d1c6f5dd7158e)
- [meta] use `npmignore` to autogenerate an npmignore file [`a87ff18`](https://github.com/ljharb/define-data-property/commit/a87ff18cb79e14c2eb5720486c4759fd9a189375)

----------------------------------------
File: ./animations/node_modules/define-data-property/index.js
----------------------------------------
'use strict';

var $defineProperty = require('es-define-property');

var $SyntaxError = require('es-errors/syntax');
var $TypeError = require('es-errors/type');

var gopd = require('gopd');

/** @type {import('.')} */
module.exports = function defineDataProperty(
	obj,
	property,
	value
) {
	if (!obj || (typeof obj !== 'object' && typeof obj !== 'function')) {
		throw new $TypeError('`obj` must be an object or a function`');
	}
	if (typeof property !== 'string' && typeof property !== 'symbol') {
		throw new $TypeError('`property` must be a string or a symbol`');
	}
	if (arguments.length > 3 && typeof arguments[3] !== 'boolean' && arguments[3] !== null) {
		throw new $TypeError('`nonEnumerable`, if provided, must be a boolean or null');
	}
	if (arguments.length > 4 && typeof arguments[4] !== 'boolean' && arguments[4] !== null) {
		throw new $TypeError('`nonWritable`, if provided, must be a boolean or null');
	}
	if (arguments.length > 5 && typeof arguments[5] !== 'boolean' && arguments[5] !== null) {
		throw new $TypeError('`nonConfigurable`, if provided, must be a boolean or null');
	}
	if (arguments.length > 6 && typeof arguments[6] !== 'boolean') {
		throw new $TypeError('`loose`, if provided, must be a boolean');
	}

	var nonEnumerable = arguments.length > 3 ? arguments[3] : null;
	var nonWritable = arguments.length > 4 ? arguments[4] : null;
	var nonConfigurable = arguments.length > 5 ? arguments[5] : null;
	var loose = arguments.length > 6 ? arguments[6] : false;

	/* @type {false | TypedPropertyDescriptor<unknown>} */
	var desc = !!gopd && gopd(obj, property);

	if ($defineProperty) {
		$defineProperty(obj, property, {
			configurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable,
			enumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable,
			value: value,
			writable: nonWritable === null && desc ? desc.writable : !nonWritable
		});
	} else if (loose || (!nonEnumerable && !nonWritable && !nonConfigurable)) {
		// must fall back to [[Set]], and was not explicitly asked to make non-enumerable, non-writable, or non-configurable
		obj[property] = value; // eslint-disable-line no-param-reassign
	} else {
		throw new $SyntaxError('This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.');
	}
};

----------------------------------------
File: ./animations/node_modules/define-data-property/README.md
----------------------------------------
# define-data-property <sup>[![Version Badge][npm-version-svg]][package-url]</sup>

[![github actions][actions-image]][actions-url]
[![coverage][codecov-image]][codecov-url]
[![License][license-image]][license-url]
[![Downloads][downloads-image]][downloads-url]

[![npm badge][npm-badge-png]][package-url]

Define a data property on an object. Will fall back to assignment in an engine without descriptors.

The three `non*` argument can also be passed `null`, which will use the existing state if available.

The `loose` argument will mean that if you attempt to set a non-normal data property, in an environment without descriptor support, it will fall back to normal assignment.

## Usage

```javascript
var defineDataProperty = require('define-data-property');
var assert = require('assert');

var obj = {};
defineDataProperty(obj, 'key', 'value');
defineDataProperty(
	obj,
	'key2',
	'value',
	true, // nonEnumerable, optional
	false, // nonWritable, optional
	true, // nonConfigurable, optional
	false // loose, optional
);

assert.deepEqual(
	Object.getOwnPropertyDescriptors(obj),
	{
		key: {
			configurable: true,
			enumerable: true,
			value: 'value',
			writable: true,
		},
		key2: {
			configurable: false,
			enumerable: false,
			value: 'value',
			writable: true,
		},
	}
);
```

[package-url]: https://npmjs.org/package/define-data-property
[npm-version-svg]: https://versionbadg.es/ljharb/define-data-property.svg
[deps-svg]: https://david-dm.org/ljharb/define-data-property.svg
[deps-url]: https://david-dm.org/ljharb/define-data-property
[dev-deps-svg]: https://david-dm.org/ljharb/define-data-property/dev-status.svg
[dev-deps-url]: https://david-dm.org/ljharb/define-data-property#info=devDependencies
[npm-badge-png]: https://nodei.co/npm/define-data-property.png?downloads=true&stars=true
[license-image]: https://img.shields.io/npm/l/define-data-property.svg
[license-url]: LICENSE
[downloads-image]: https://img.shields.io/npm/dm/define-data-property.svg
[downloads-url]: https://npm-stat.com/charts.html?package=define-data-property
[codecov-image]: https://codecov.io/gh/ljharb/define-data-property/branch/main/graphs/badge.svg
[codecov-url]: https://app.codecov.io/gh/ljharb/define-data-property/
[actions-image]: https://img.shields.io/endpoint?url=https://github-actions-badge-u3jn4tfpocch.runkit.sh/ljharb/define-data-property
[actions-url]: https://github.com/ljharb/define-data-property/actions

----------------------------------------
File: ./animations/node_modules/define-data-property/.github/FUNDING.yml
----------------------------------------
# These are supported funding model platforms

github: [ljharb]
patreon: # Replace with a single Patreon username
open_collective: # Replace with a single Open Collective username
ko_fi: # Replace with a single Ko-fi username
tidelift: npm/define-data-property
community_bridge: # Replace with a single Community Bridge project-name e.g., cloud-foundry
liberapay: # Replace with a single Liberapay username
issuehunt: # Replace with a single IssueHunt username
otechie: # Replace with a single Otechie username
custom: # Replace with up to 4 custom sponsorship URLs e.g., ['link1', 'link2']

----------------------------------------
File: ./animations/node_modules/define-data-property/index.d.ts
----------------------------------------

declare function defineDataProperty(
    obj: Record<PropertyKey, unknown>,
    property: keyof typeof obj,
    value: typeof obj[typeof property],
    nonEnumerable?: boolean | null,
    nonWritable?: boolean | null,
    nonConfigurable?: boolean | null,
    loose?: boolean
): void;

export = defineDataProperty;
----------------------------------------
File: ./animations/node_modules/is-bigint/test/index.js
----------------------------------------
'use strict';

var test = require('tape');
var inspect = require('object-inspect');
var hasBigInts = require('has-bigints')();
var hasToStringTag = require('has-tostringtag/shams')();
var forEach = require('for-each');
var v = require('es-value-fixtures');

var isBigInt = require('../');

test('non-BigInt values', function (t) {
	/** @type {(typeof v.primitives[number] | object)[]} */
	var nonBigInts = v.nonBigInts.concat(
		Object(true),
		Object(false),
		// @ts-expect-error TS sucks with concat
		{},
		[],
		/a/g,
		new Date(),
		function () {},
		NaN,
		v.symbols
	);
	t.plan(nonBigInts.length);
	forEach(nonBigInts, function (nonBigInt) {
		t.equal(false, isBigInt(nonBigInt), inspect(nonBigInt) + ' is not a BigInt');
	});
	t.end();
});

test('faked BigInt values', function (t) {
	t.test('real BigInt valueOf', { skip: !hasBigInts }, function (st) {
		var fakeBigInt = { valueOf: function () { return BigInt(42); } };
		st.equal(false, isBigInt(fakeBigInt), 'object with valueOf returning a BigInt is not a BigInt');
		st.end();
	});

	t.test('faked @@toStringTag', { skip: !hasBigInts || !hasToStringTag }, function (st) {
		/** @type {{ valueOf(): unknown; [Symbol.toStringTag]?: unknown }} */
		var fakeBigInt = { valueOf: function () { return BigInt(42); } };
		fakeBigInt[Symbol.toStringTag] = 'BigInt';
		st.equal(false, isBigInt(fakeBigInt), 'object with fake BigInt @@toStringTag and valueOf returning a BigInt is not a BigInt');

		/** @type {{ valueOf(): unknown; [Symbol.toStringTag]?: unknown }} */
		var notSoFakeBigInt = { valueOf: function () { return 42; } };
		notSoFakeBigInt[Symbol.toStringTag] = 'BigInt';
		st.equal(false, isBigInt(notSoFakeBigInt), 'object with fake BigInt @@toStringTag and valueOf not returning a BigInt is not a BigInt');
		st.end();
	});

	var fakeBigIntString = { toString: function () { return '42n'; } };
	t.equal(false, isBigInt(fakeBigIntString), 'object with toString returning 42n is not a BigInt');

	t.end();
});

test('BigInt support', { skip: !hasBigInts }, function (t) {
	forEach(v.bigints.concat(Object(BigInt(42))), function (bigInt) {
		t.equal(true, isBigInt(bigInt), inspect(bigInt) + ' is a BigInt');
	});

	t.end();
});

----------------------------------------
File: ./animations/node_modules/is-bigint/CHANGELOG.md
----------------------------------------
# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

## [v1.1.0](https://github.com/inspect-js/is-bigint/compare/v1.0.4...v1.1.0) - 2024-12-02

### Commits

- [actions] reuse common workflows [`0e63a44`](https://github.com/inspect-js/is-bigint/commit/0e63a44e5d1f26783bd5a40d7aa32c14b50fd567)
- [meta] use `npmignore` to autogenerate an npmignore file [`47584ee`](https://github.com/inspect-js/is-bigint/commit/47584ee7ac726a5c7f5f2f5f34b97529134cf602)
- [Tests] use `for-each` and `es-value-fixtures` [`f226864`](https://github.com/inspect-js/is-bigint/commit/f22686422b46334c64b3658fba1237751d24460c)
- [New] add types [`78e2c47`](https://github.com/inspect-js/is-bigint/commit/78e2c473ff73d73eef27b7eb27695393667360e1)
- [actions] split out node 10-20, and 20+ [`4395a8d`](https://github.com/inspect-js/is-bigint/commit/4395a8d340b1aa3c4e68b37092fcbcace14de41f)
- [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `aud`, `auto-changelog`, `has-symbols`, `object-inspect`, `tape` [`c188501`](https://github.com/inspect-js/is-bigint/commit/c188501f67f4c220fcdf8d280c99e1f6af5d217e)
- [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `object-inspect`, `safe-publish-latest`, `tape` [`5360d32`](https://github.com/inspect-js/is-bigint/commit/5360d32eee0e29f09b02d3adb51086dc71160939)
- [actions] update rebase action to use reusable workflow [`d5c1775`](https://github.com/inspect-js/is-bigint/commit/d5c1775e437be97099a7e63b9bd68852b28e0ba7)
- [actions] update codecov uploader [`c7478c7`](https://github.com/inspect-js/is-bigint/commit/c7478c74498ab954917bd6a561d0ee7d0ba60a6a)
- [Dev Deps] update `@ljharb/eslint-config`, `auto-changelog`, `npmignore`, `object-inspect`, `tape` [`6fbce66`](https://github.com/inspect-js/is-bigint/commit/6fbce66ebab2ef471bfe841c8436eba3dce118c6)
- [meta] add missing `engines.node` [`6f9ed42`](https://github.com/inspect-js/is-bigint/commit/6f9ed42ed8cb00b3fccdb62d4fcc8e7ab074e194)
- [Tests] replace `aud` with `npm audit` [`21846c3`](https://github.com/inspect-js/is-bigint/commit/21846c305e5d662ec81b4922cbc57e9324ccd222)
- [Dev Deps] remove unused `has-symbols`, add missing `has-tostringtag` [`b378d94`](https://github.com/inspect-js/is-bigint/commit/b378d942933ae97ab9610d83d69b52380d6a137c)
- [Deps] update `has-bigints` [`f46c35b`](https://github.com/inspect-js/is-bigint/commit/f46c35be813c05549865477bd771300c2595496e)
- [Dev Deps] add missing peer dep [`2b9be16`](https://github.com/inspect-js/is-bigint/commit/2b9be16ab6150d588f00d037b55050d8372953a3)

## [v1.0.4](https://github.com/inspect-js/is-bigint/compare/v1.0.3...v1.0.4) - 2021-08-11

### Commits

- [eslint] remove unnecessary eslintrc file [`7220aa5`](https://github.com/inspect-js/is-bigint/commit/7220aa515c51649b48ba57bb77f92d85e27557d8)
- [readme] add github actions/codecov badges [`053a071`](https://github.com/inspect-js/is-bigint/commit/053a07123511eef5a91fd7889ae2d8323fbcf7d7)
- [Deps] add `has-bigints` as a runtime dependency [`0fc3c9d`](https://github.com/inspect-js/is-bigint/commit/0fc3c9d5165f62500ea9c27943cb302df65432f7)
- [Dev Deps] update `tape` [`145f11d`](https://github.com/inspect-js/is-bigint/commit/145f11d1d285d92b3144f48178fe0fb3b2f828d9)

## [v1.0.3](https://github.com/inspect-js/is-bigint/compare/v1.0.2...v1.0.3) - 2021-08-06

### Commits

- [Tests] use `has-tostringtag` for easier checking of Symbol.toStringTag [`3b44080`](https://github.com/inspect-js/is-bigint/commit/3b440801b69689d907b33184134f00d7e8a35f9f)
- [Dev Deps] update `auto-changelog`, `eslint`, `object-inspect`, `tape` [`e4d4a6c`](https://github.com/inspect-js/is-bigint/commit/e4d4a6c2ab743b52eda906abd1ed4b0608952533)
- [Fix] use `has-bigints` for more robust BigInt detection [`7bb9d7a`](https://github.com/inspect-js/is-bigint/commit/7bb9d7ab42214c12ce25e9f0cfe2af769388c3bb)

## [v1.0.2](https://github.com/inspect-js/is-bigint/compare/v1.0.1...v1.0.2) - 2021-05-04

### Commits

- [meta] do not publish github action workflow files [`276d677`](https://github.com/inspect-js/is-bigint/commit/276d677d1eac61e990a2f2b523c7cdef70784865)
- [actions] use `node/install` instead of `node/run`; use `codecov` action [`cea7fb6`](https://github.com/inspect-js/is-bigint/commit/cea7fb6e882ad7e2f550de2bd9317a4409bcd735)
- [readme] fix repo URLs; remove travis badge [`c8e7c36`](https://github.com/inspect-js/is-bigint/commit/c8e7c3651f3303fddafa61cf29cfbb79ea2d5d4b)
- [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `aud`, `has-symbols`, `object-inspect`, `tape` [`32f3d90`](https://github.com/inspect-js/is-bigint/commit/32f3d909363045fe5d40dde9e4db354344ab4d50)
- [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `object-inspect`, `tape` [`c2f20f5`](https://github.com/inspect-js/is-bigint/commit/c2f20f577d84e68b4e3224abb51024fbc4b9b2ba)
- [meta] remove unneeded token; update checkout action [`94e46e9`](https://github.com/inspect-js/is-bigint/commit/94e46e92a1a85ec022c8febf8d5d3c2369b46e97)
- [meta] use `prepublishOnly` script for npm 7+ [`3e663ec`](https://github.com/inspect-js/is-bigint/commit/3e663ecb09bfdc5dbaaa37aaef4adf28b5e49035)

## [v1.0.1](https://github.com/inspect-js/is-bigint/compare/v1.0.0...v1.0.1) - 2020-11-30

### Commits

- [Tests] use shared travis-ci configs [`28f1211`](https://github.com/inspect-js/is-bigint/commit/28f1211132ad2a6495d816140680fa16c12eb6f3)
- [Tests] migrate tests to Github Actions [`0998c64`](https://github.com/inspect-js/is-bigint/commit/0998c6443d603028f8b988bcdd52d23dbf513031)
- [meta] add `auto-changelog` [`2352de6`](https://github.com/inspect-js/is-bigint/commit/2352de6df8385b256d75ce50c360947243a599f6)
- [Tests] run `nyc` on all tests [`9c16a9a`](https://github.com/inspect-js/is-bigint/commit/9c16a9a5ddaf7c2c578542ab8f00dd4e72eff541)
- [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `auto-changelog`, `object-inspect`, `tape` [`4cd0edd`](https://github.com/inspect-js/is-bigint/commit/4cd0edd1917f789501291315c9eac5f895fd719e)
- [actions] add automatic rebasing / merge commit blocking [`f0f4b91`](https://github.com/inspect-js/is-bigint/commit/f0f4b91dba029dbca5b3cd27ef91c4fb8e3ec51a)
- [actions] add "Allow Edits" workflow [`7f4f46e`](https://github.com/inspect-js/is-bigint/commit/7f4f46ec07679c00e22287ec55b39ff1e4f809cf)
- [meta] create FUNDING.yml [`2d0cb9a`](https://github.com/inspect-js/is-bigint/commit/2d0cb9ae8ddf635f2c472ce49f95f717f2c432bf)
- [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `aud` [`0ee110e`](https://github.com/inspect-js/is-bigint/commit/0ee110effdcaa96d90f21a0ec6e625941f77c45a)
- [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `has-symbols`, `object-inspect`, `tape` [`5bb7f3a`](https://github.com/inspect-js/is-bigint/commit/5bb7f3a8de6ec5ee2aa573c22e41884f3d2d1cc3)
- [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `safe-publish-latest`, `tape` [`d3d67d0`](https://github.com/inspect-js/is-bigint/commit/d3d67d05f8a3f4cb07085811629f56ef872949c3)
- [Dev Deps] update `auto-changelog`, `tape` [`54e270f`](https://github.com/inspect-js/is-bigint/commit/54e270fa29856dba90f86785fa61bffc79a2825d)
- [Dev Deps] update `@ljharb/eslint-config`, `tape` [`d82bfe7`](https://github.com/inspect-js/is-bigint/commit/d82bfe75c63aeda40f7e473c57f26cea8790ba3a)
- [Dev Deps] update `auto-changelog`; add `aud` [`9c34bd1`](https://github.com/inspect-js/is-bigint/commit/9c34bd1873f08d77c82d8e54ad90c5a1a035e7ea)
- [Tests] add missing `posttest` script [`0690bd9`](https://github.com/inspect-js/is-bigint/commit/0690bd9868d4d8b43424b4224cdbb8659a1c6423)
- [meta] add `funding` field [`7ca36d0`](https://github.com/inspect-js/is-bigint/commit/7ca36d06ebcf6b01a592ecd6758bd2b39c0fb0db)
- [actions] switch Automatic Rebase workflow to `pull_request_target` event [`5ffa8da`](https://github.com/inspect-js/is-bigint/commit/5ffa8dad9f634891cf739ee118f1b43142b0f01d)
- [Dev Deps] update `eslint` [`8512c2f`](https://github.com/inspect-js/is-bigint/commit/8512c2f29a9267fe8fe19209bcf77df94f127172)
- [Tests] only audit prod deps [`f2147dc`](https://github.com/inspect-js/is-bigint/commit/f2147dc54e72594985e8f6db3932a4f0819dc4db)
- [readme] fix header [`d6eff75`](https://github.com/inspect-js/is-bigint/commit/d6eff75d00471f465768deb92867e878c27733b3)

## v1.0.0 - 2018-09-20

### Commits

- [Tests] add tests [`847f12a`](https://github.com/inspect-js/is-bigint/commit/847f12af125fcefb75ed3517550feedf7dd73e88)
- Initial commit [`b53f3c6`](https://github.com/inspect-js/is-bigint/commit/b53f3c6754e7fd7a9982ff5b1466c4dc9799dad9)
- readme [`66c15fe`](https://github.com/inspect-js/is-bigint/commit/66c15fe1a0d965b8c78bf3a3bfc289dcfec53ee1)
- Implementation [`c2c0974`](https://github.com/inspect-js/is-bigint/commit/c2c0974397825a2a56e1ea8af0546171309d4805)
- package.json [`98b174c`](https://github.com/inspect-js/is-bigint/commit/98b174c24b070053f0548e58f9b87bc9dbdf922a)
- Only apps should have lockfiles [`a77c74b`](https://github.com/inspect-js/is-bigint/commit/a77c74bd8ca5f058f1e6165ae7b33bb84adef98c)

----------------------------------------
File: ./animations/node_modules/is-bigint/index.js
----------------------------------------
'use strict';

var hasBigInts = require('has-bigints')();

if (hasBigInts) {
	var bigIntValueOf = BigInt.prototype.valueOf;
	/** @type {(value: object) => value is BigInt} */
	var tryBigInt = function tryBigIntObject(value) {
		try {
			bigIntValueOf.call(value);
			return true;
		} catch (e) {
		}
		return false;
	};

	/** @type {import('.')} */
	module.exports = function isBigInt(value) {
		if (
			value === null
			|| typeof value === 'undefined'
			|| typeof value === 'boolean'
			|| typeof value === 'string'
			|| typeof value === 'number'
			|| typeof value === 'symbol'
			|| typeof value === 'function'
		) {
			return false;
		}
		if (typeof value === 'bigint') {
			return true;
		}

		return tryBigInt(value);
	};
} else {
	/** @type {import('.')} */
	module.exports = function isBigInt(value) {
		return false && value;
	};
}

----------------------------------------
File: ./animations/node_modules/is-bigint/README.md
----------------------------------------
# is-bigint <sup>[![Version Badge][2]][1]</sup>

[![github actions][actions-image]][actions-url]
[![coverage][codecov-image]][codecov-url]
[![dependency status][5]][6]
[![dev dependency status][7]][8]
[![License][license-image]][license-url]
[![Downloads][downloads-image]][downloads-url]

[![npm badge][11]][1]

Is this an ES BigInt value?

## Example

```js
var isBigInt = require('is-bigint');
assert(!isBigInt(function () {}));
assert(!isBigInt(null));
assert(!isBigInt(function* () { yield 42; return Infinity; });
assert(!isBigInt(Symbol('foo')));

assert(isBigInt(1n));
assert(isBigInt(Object(1n)));
```

## Tests
Simply clone the repo, `npm install`, and run `npm test`

[1]: https://npmjs.org/package/is-bigint
[2]: https://versionbadg.es/inspect-js/is-bigint.svg
[5]: https://david-dm.org/inspect-js/is-bigint.svg
[6]: https://david-dm.org/inspect-js/is-bigint
[7]: https://david-dm.org/inspect-js/is-bigint/dev-status.svg
[8]: https://david-dm.org/inspect-js/is-bigint#info=devDependencies
[11]: https://nodei.co/npm/is-bigint.png?downloads=true&stars=true
[license-image]: https://img.shields.io/npm/l/is-bigint.svg
[license-url]: LICENSE
[downloads-image]: https://img.shields.io/npm/dm/is-bigint.svg
[downloads-url]: https://npm-stat.com/charts.html?package=is-bigint
[codecov-image]: https://codecov.io/gh/inspect-js/is-bigint/branch/main/graphs/badge.svg
[codecov-url]: https://app.codecov.io/gh/inspect-js/is-bigint/
[actions-image]: https://img.shields.io/endpoint?url=https://github-actions-badge-u3jn4tfpocch.runkit.sh/inspect-js/is-bigint
[actions-url]: https://github.com/inspect-js/is-bigint/actions

----------------------------------------
File: ./animations/node_modules/is-bigint/.github/FUNDING.yml
----------------------------------------
# These are supported funding model platforms

github: [ljharb]
patreon: # Replace with a single Patreon username
open_collective: # Replace with a single Open Collective username
ko_fi: # Replace with a single Ko-fi username
tidelift: npm/is-bigint
community_bridge: # Replace with a single Community Bridge project-name e.g., cloud-foundry
liberapay: # Replace with a single Liberapay username
issuehunt: # Replace with a single IssueHunt username
otechie: # Replace with a single Otechie username
custom: # Replace with up to 4 custom sponsorship URLs e.g., ['link1', 'link2']

----------------------------------------
File: ./animations/node_modules/is-bigint/index.d.ts
----------------------------------------
declare function isBigInt(value: unknown): value is (bigint | BigInt);

export = isBigInt;
----------------------------------------
File: ./animations/node_modules/which-boxed-primitive/test/index.js
----------------------------------------
'use strict';

var test = require('tape');
var inspect = require('object-inspect');
var forEach = require('for-each');
var v = require('es-value-fixtures');

var whichBoxedPrimitive = require('../');

var objects = [
	/a/g,
	new Date(),
	function () {},
	[],
	{}
].concat(v.objects);

test('isBoxedPrimitive', function (t) {
	t.test('unboxed primitives', function (st) {
		forEach(v.primitives, function (primitive) {
			st.equal(null, whichBoxedPrimitive(primitive), inspect(primitive) + ' is a primitive, but not a boxed primitive');
		});
		st.end();
	});

	t.test('boxed primitives', function (st) {
		forEach(v.primitives, function (primitive) {
			if (primitive != null) { // eslint-disable-line eqeqeq
				var boxed = Object(primitive);
				var expected = boxed.constructor.name;
				st.equal(typeof expected, 'string', 'expected is string');
				st.equal(whichBoxedPrimitive(boxed), expected, inspect(boxed) + ' is a boxed primitive: ' + expected);
			}
		});
		st.end();
	});

	t.test('non-primitive objects', function (st) {
		forEach(objects, function (object) {
			st.equal(undefined, whichBoxedPrimitive(object), inspect(object) + ' is not a primitive, boxed or otherwise');
		});
		st.end();
	});

	t.end();
});

----------------------------------------
File: ./animations/node_modules/which-boxed-primitive/CHANGELOG.md
----------------------------------------
# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

## [v1.1.1](https://github.com/inspect-js/which-boxed-primitive/compare/v1.1.0...v1.1.1) - 2024-12-15

### Commits

- [Deps] update `is-boolean-object`, `is-number-object`, `is-string`, `is-symbol` [`5266e0c`](https://github.com/inspect-js/which-boxed-primitive/commit/5266e0cb87a814e42b4e8de9574430d27e562070)
- [Dev Deps] update `@arethetypeswrong/cli`, `@ljharb/tsconfig`, `@types/tape` [`a660339`](https://github.com/inspect-js/which-boxed-primitive/commit/a66033981b3f2b4ba4261cf477fd5a6dc40b38d6)

## [v1.1.0](https://github.com/inspect-js/which-boxed-primitive/compare/v1.0.2...v1.1.0) - 2024-12-02

### Commits

- [actions] reuse common workflows [`893df44`](https://github.com/inspect-js/which-boxed-primitive/commit/893df44f4d4ad653878aa0b470fc3437f25ad240)
- [meta] use `npmignore` to autogenerate an npmignore file [`bab1ff8`](https://github.com/inspect-js/which-boxed-primitive/commit/bab1ff84d391d94a419bb22a0be3d589b16732a4)
- [Tests] use `es-value-fixtures` and `for-each` [`ecacfa0`](https://github.com/inspect-js/which-boxed-primitive/commit/ecacfa01438228830b77fc006e3d366c8227c2b3)
- [New] add types [`ab38e78`](https://github.com/inspect-js/which-boxed-primitive/commit/ab38e78885752258f1e90487f2793173a3e81e5e)
- [actions] split out node 10-20, and 20+ [`7ee9c3c`](https://github.com/inspect-js/which-boxed-primitive/commit/7ee9c3c27b31289db6970cb2024621cdef4dc5ae)
- [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `aud`, `auto-changelog`, `object-inspect`, `safe-publish-latest`, `tape` [`142215a`](https://github.com/inspect-js/which-boxed-primitive/commit/142215aeb898604e356e46708a7fad0d1113d764)
- [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `aud`, `auto-changelog`, `has-symbols`, `object-inspect`, `tape` [`3559371`](https://github.com/inspect-js/which-boxed-primitive/commit/3559371556c26688418e6ea06e52dfd51cce29e7)
- [actions] update rebase action to use reusable workflow [`928901a`](https://github.com/inspect-js/which-boxed-primitive/commit/928901a781ddcb75cec158f3d0a273100d8f3f80)
- [Deps] update `is-bigint`, `is-boolean-object`, `is-number-object`, `is-string`, `is-symbol` [`f7b14be`](https://github.com/inspect-js/which-boxed-primitive/commit/f7b14bed64b6f784221dfe229b583c512d2bcb2c)
- [Dev Deps] update `@ljharb/eslint-config`, `auto-changelog`, `npmignore`, `object-inspect`, `tape` [`5296738`](https://github.com/inspect-js/which-boxed-primitive/commit/5296738a192d9d006a5874dcc262080df108da62)
- [Deps] update `is-bigint`, `is-boolean-object`, `is-number-object`, `is-string`, `is-symbol` [`caa6d1c`](https://github.com/inspect-js/which-boxed-primitive/commit/caa6d1cb8e44c6b8100431dd643e9817f361921c)
- [meta] add missing `engines.node` [`ca40880`](https://github.com/inspect-js/which-boxed-primitive/commit/ca40880bb94282871229a7f1d678609b71f4d120)
- [Tests] replace `aud` with `npm audit` [`b0f4069`](https://github.com/inspect-js/which-boxed-primitive/commit/b0f40690697c2a963dd7100eec500f138a79f4ae)
- [Dev Deps] update `aud` [`8d0e336`](https://github.com/inspect-js/which-boxed-primitive/commit/8d0e336ee7385ed6a94d6362e62e25c54d155a2d)
- [Deps] update `is-number-object` [`eafcabf`](https://github.com/inspect-js/which-boxed-primitive/commit/eafcabf3f00c7d716bffdfc0ceeca62387349c7d)
- [Dev Deps] add missing peer dep [`ec4dd52`](https://github.com/inspect-js/which-boxed-primitive/commit/ec4dd520dbe77e33341d94479aec3b42817b4cbf)

## [v1.0.2](https://github.com/inspect-js/which-boxed-primitive/compare/v1.0.1...v1.0.2) - 2020-12-14

### Commits

- [Tests] use shared travis-ci configs [`8674582`](https://github.com/inspect-js/which-boxed-primitive/commit/86745829b6a92cff2cfb0d3c0414ec9afdc2a087)
- [Tests] migrate tests to Github Actions [`dff6643`](https://github.com/inspect-js/which-boxed-primitive/commit/dff6643405ba4d6dc6694a25904c8f72f273ece8)
- [meta] do not publish github action workflow files [`b26112a`](https://github.com/inspect-js/which-boxed-primitive/commit/b26112a4e4ac6beec8f54c734135dbf9e9ba16f9)
- [meta] make `auto-changelog` config consistent [`8d10175`](https://github.com/inspect-js/which-boxed-primitive/commit/8d10175171154cd6c8f8a016aa7fb71b5044acf6)
- [readme] fix repo URLs, remove defunct badges [`ab8db24`](https://github.com/inspect-js/which-boxed-primitive/commit/ab8db247573723dbcda68469118d08c7c2692c67)
- [Tests] run `nyc` on all tests; use `tape` runner [`7d084df`](https://github.com/inspect-js/which-boxed-primitive/commit/7d084dfc5251230e9399a81782c0b9d7ae5d1901)
- [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `aud`, `auto-changelog`, `object-inspect`, `tape` [`576f6f3`](https://github.com/inspect-js/which-boxed-primitive/commit/576f6f308aed35ef1d3392bb9472def59482ed13)
- [actions] add automatic rebasing / merge commit blocking [`97efa53`](https://github.com/inspect-js/which-boxed-primitive/commit/97efa53a307678323e63f576c07db9ff84846fd3)
- [actions] add "Allow Edits" workflow [`fb1b4f7`](https://github.com/inspect-js/which-boxed-primitive/commit/fb1b4f7cd753fcced74ac054b20c8b2bfafe7953)
- [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `has-symbols`, `object-inspect`, `safe-publish-latest` [`1e03c61`](https://github.com/inspect-js/which-boxed-primitive/commit/1e03c6153693d385833acc15178f675e6ce5ddd0)
- [Deps] update `is-boolean-object`, `is-number-object`, `is-string`, `is-symbol` [`13673df`](https://github.com/inspect-js/which-boxed-primitive/commit/13673dff6e43f0a915377c3e5740ec24e86d6bb7)
- [Dev Deps] update `auto-changelog`, `in-publish`, `tape` [`65a0e15`](https://github.com/inspect-js/which-boxed-primitive/commit/65a0e155fc46a9237692233a51ec9573621135d2)
- [Dev Deps] update `eslint`, `@ljharb/eslint-config`, `tape` [`f8a0afe`](https://github.com/inspect-js/which-boxed-primitive/commit/f8a0afea82938d64f3d2d240268afbd346d0c4da)
- [Deps] update `is-bigint`, `is-boolean-object` [`e7a1ce2`](https://github.com/inspect-js/which-boxed-primitive/commit/e7a1ce25371c00ee726f1c0cc5b6acf10d51ec50)
- [actions] switch Automatic Rebase workflow to `pull_request_target` event [`e46f193`](https://github.com/inspect-js/which-boxed-primitive/commit/e46f193298b158db5c8aba889803513e4ee38957)
- [Dev Deps] update `@ljharb/eslint-config`, `tape` [`df3da14`](https://github.com/inspect-js/which-boxed-primitive/commit/df3da1424552a5d22e203a0abf1710106bfd4ae2)
- [Dev Deps] update `auto-changelog`; add `aud` [`e2e8a12`](https://github.com/inspect-js/which-boxed-primitive/commit/e2e8a12c6fbf8c48e760ea1d1ccd5e8d2d6fbf24)
- [meta] add `funding` field [`7df404b`](https://github.com/inspect-js/which-boxed-primitive/commit/7df404b20cd50b2b87e6645b130fefa8ee98810e)
- [Dev Deps] update `auto-changelog` [`0d6b76d`](https://github.com/inspect-js/which-boxed-primitive/commit/0d6b76dbbe760581fa86a0c3f254988fe5d27770)
- [Tests] only audit prod deps [`246151c`](https://github.com/inspect-js/which-boxed-primitive/commit/246151cc1407b3b1ef42014db993f62670bd82ff)
- [meta] fix changelog [`c2d1685`](https://github.com/inspect-js/which-boxed-primitive/commit/c2d16856deffbf86e0b5029e69b65d8aa758ec3d)
- [readme] Fix spelling error [`25fb2b5`](https://github.com/inspect-js/which-boxed-primitive/commit/25fb2b56e1f708c6364923e4bae384f818ecf57f)

## [v1.0.1](https://github.com/inspect-js/which-boxed-primitive/compare/v1.0.0...v1.0.1) - 2019-08-10

### Commits

- [meta] avoid running `safe-publish-latest` when not publishing [`df44b27`](https://github.com/inspect-js/which-boxed-primitive/commit/df44b27875a8f5c3c596663ecb4a063f9fc7bde3)

## v1.0.0 - 2019-08-10

### Commits

- [Tests] add `.travis.yml` [`764b0cf`](https://github.com/inspect-js/which-boxed-primitive/commit/764b0cf75f8d2b3a0ad2056de5f4ad85d5d1b765)
- Initial commit [`da7d068`](https://github.com/inspect-js/which-boxed-primitive/commit/da7d068913d591294bf155db5d438f7804d71b9a)
- readme [`1395bb2`](https://github.com/inspect-js/which-boxed-primitive/commit/1395bb27b72137ac01e48ee398a0f54e93fd87f5)
- [Tests] add tests [`0ff580f`](https://github.com/inspect-js/which-boxed-primitive/commit/0ff580f99579cd4424af7b814bd76fcb69a2b04e)
- implementation [`8811c32`](https://github.com/inspect-js/which-boxed-primitive/commit/8811c3262a57963634cdc83ceb5bb2c5e9ae4e7e)
- npm init [`cffdea9`](https://github.com/inspect-js/which-boxed-primitive/commit/cffdea9755eabfa2f9ec62a6fcbce0c28f04495b)
- [Tests] add `npm run lint` [`a8be993`](https://github.com/inspect-js/which-boxed-primitive/commit/a8be9933fec1b21267acd847df77f6438e07e3b9)
- [meta] add FUNDING.yml [`941258c`](https://github.com/inspect-js/which-boxed-primitive/commit/941258c70c9a397466e05b614126cb8c7be77b99)
- Only apps should have lockfiles [`6857316`](https://github.com/inspect-js/which-boxed-primitive/commit/68573165d8ce842cdf15d94af82f8cccb961b8cf)
- [Tests] use `npx aud` in `posttest` [`ee48a91`](https://github.com/inspect-js/which-boxed-primitive/commit/ee48a9144bea23bde5cc47788a54d5aa7969d489)

----------------------------------------
File: ./animations/node_modules/which-boxed-primitive/index.js
----------------------------------------
'use strict';

var isString = require('is-string');
var isNumber = require('is-number-object');
var isBoolean = require('is-boolean-object');
var isSymbol = require('is-symbol');
var isBigInt = require('is-bigint');

/** @type {import('.')} */
// eslint-disable-next-line consistent-return
module.exports = function whichBoxedPrimitive(value) {
	// eslint-disable-next-line eqeqeq
	if (value == null || (typeof value !== 'object' && typeof value !== 'function')) {
		return null;
	}
	if (isString(value)) {
		return 'String';
	}
	if (isNumber(value)) {
		return 'Number';
	}
	if (isBoolean(value)) {
		return 'Boolean';
	}
	if (isSymbol(value)) {
		return 'Symbol';
	}
	if (isBigInt(value)) {
		return 'BigInt';
	}
};

----------------------------------------
File: ./animations/node_modules/which-boxed-primitive/README.md
----------------------------------------
# which-boxed-primitive <sup>[![Version Badge][2]][1]</sup>

[![dependency status][5]][6]
[![dev dependency status][7]][8]
[![License][license-image]][license-url]
[![Downloads][downloads-image]][downloads-url]

[![npm badge][11]][1]

Which kind of boxed JS primitive is this? This module works cross-realm/iframe, does not depend on `instanceof` or mutable properties, and works despite ES6 Symbol.toStringTag.

## Example

```js
var whichBoxedPrimitive = require('which-boxed-primitive');
var assert = require('assert');

// unboxed primitives return `null`
// boxed primitives return the builtin constructor name

assert.equal(whichBoxedPrimitive(undefined), null);
assert.equal(whichBoxedPrimitive(null), null);

assert.equal(whichBoxedPrimitive(false), null);
assert.equal(whichBoxedPrimitive(true), null);
assert.equal(whichBoxedPrimitive(new Boolean(false)), 'Boolean');
assert.equal(whichBoxedPrimitive(new Boolean(true)), 'Boolean');

assert.equal(whichBoxedPrimitive(42), null);
assert.equal(whichBoxedPrimitive(NaN), null);
assert.equal(whichBoxedPrimitive(Infinity), null);
assert.equal(whichBoxedPrimitive(new Number(42)), 'Number');
assert.equal(whichBoxedPrimitive(new Number(NaN)), 'Number');
assert.equal(whichBoxedPrimitive(new Number(Infinity)), 'Number');

assert.equal(whichBoxedPrimitive(''), null);
assert.equal(whichBoxedPrimitive('foo'), null);
assert.equal(whichBoxedPrimitive(new String('')), 'String');
assert.equal(whichBoxedPrimitive(new String('foo')), 'String');

assert.equal(whichBoxedPrimitive(Symbol()), null);
assert.equal(whichBoxedPrimitive(Object(Symbol()), 'Symbol');

assert.equal(whichBoxedPrimitive(42n), null);
assert.equal(whichBoxedPrimitive(Object(42n), 'BigInt');

// non-boxed-primitive objects return `undefined`
assert.equal(whichBoxedPrimitive([]), undefined);
assert.equal(whichBoxedPrimitive({}), undefined);
assert.equal(whichBoxedPrimitive(/a/g), undefined);
assert.equal(whichBoxedPrimitive(new RegExp('a', 'g')), undefined);
assert.equal(whichBoxedPrimitive(new Date()), undefined);
assert.equal(whichBoxedPrimitive(function () {}), undefined);
assert.equal(whichBoxedPrimitive(function* () {}), undefined);
assert.equal(whichBoxedPrimitive(x => x * x), undefined);
assert.equal(whichBoxedPrimitive([]), undefined);

```

## Tests
Simply clone the repo, `npm install`, and run `npm test`

[1]: https://npmjs.org/package/which-boxed-primitive
[2]: https://versionbadg.es/inspect-js/which-boxed-primitive.svg
[5]: https://david-dm.org/inspect-js/which-boxed-primitive.svg
[6]: https://david-dm.org/inspect-js/which-boxed-primitive
[7]: https://david-dm.org/inspect-js/which-boxed-primitive/dev-status.svg
[8]: https://david-dm.org/inspect-js/which-boxed-primitive#info=devDependencies
[11]: https://nodei.co/npm/which-boxed-primitive.png?downloads=true&stars=true
[license-image]: https://img.shields.io/npm/l/which-boxed-primitive.svg
[license-url]: LICENSE
[downloads-image]: https://img.shields.io/npm/dm/which-boxed-primitive.svg
[downloads-url]: https://npm-stat.com/charts.html?package=which-boxed-primitive

----------------------------------------
File: ./animations/node_modules/which-boxed-primitive/.github/FUNDING.yml
----------------------------------------
# These are supported funding model platforms

github: [ljharb]
patreon: # Replace with a single Patreon username
open_collective: # Replace with a single Open Collective username
ko_fi: # Replace with a single Ko-fi username
tidelift: npm/which-boxed-primitive
community_bridge: # Replace with a single Community Bridge project-name e.g., cloud-foundry
liberapay: # Replace with a single Liberapay username
issuehunt: # Replace with a single IssueHunt username
otechie: # Replace with a single Otechie username
custom: # Replace with up to 4 custom sponsorship URLs e.g., ['link1', 'link2']

----------------------------------------
File: ./animations/node_modules/which-boxed-primitive/index.d.ts
----------------------------------------
type primitive = string | number | bigint | boolean | symbol | null | undefined;

declare function whichBoxedPrimitive(value: primitive): null;
declare function whichBoxedPrimitive(value: BigInt): 'BigInt';
declare function whichBoxedPrimitive(value: Boolean): 'Boolean';
declare function whichBoxedPrimitive(value: Number): 'Number';
declare function whichBoxedPrimitive(value: String): 'String';
declare function whichBoxedPrimitive(value: Symbol): 'Symbol';
declare function whichBoxedPrimitive(value: unknown): undefined;

export = whichBoxedPrimitive;

----------------------------------------
File: ./animations/node_modules/jsesc/jsesc.js
----------------------------------------
'use strict';

const object = {};
const hasOwnProperty = object.hasOwnProperty;
const forOwn = (object, callback) => {
	for (const key in object) {
		if (hasOwnProperty.call(object, key)) {
			callback(key, object[key]);
		}
	}
};

const extend = (destination, source) => {
	if (!source) {
		return destination;
	}
	forOwn(source, (key, value) => {
		destination[key] = value;
	});
	return destination;
};

const forEach = (array, callback) => {
	const length = array.length;
	let index = -1;
	while (++index < length) {
		callback(array[index]);
	}
};

const fourHexEscape = (hex) => {
	return '\\u' + ('0000' + hex).slice(-4);
}

const hexadecimal = (code, lowercase) => {
	let hexadecimal = code.toString(16);
	if (lowercase) return hexadecimal;
	return hexadecimal.toUpperCase();
};

const toString = object.toString;
const isArray = Array.isArray;
const isBuffer = (value) => {
	return typeof Buffer === 'function' && Buffer.isBuffer(value);
};
const isObject = (value) => {
	// This is a very simple check, but it’s good enough for what we need.
	return toString.call(value) == '[object Object]';
};
const isString = (value) => {
	return typeof value == 'string' ||
		toString.call(value) == '[object String]';
};
const isNumber = (value) => {
	return typeof value == 'number' ||
		toString.call(value) == '[object Number]';
};
const isBigInt = (value) => {
  return typeof value == 'bigint';
};
const isFunction = (value) => {
	return typeof value == 'function';
};
const isMap = (value) => {
	return toString.call(value) == '[object Map]';
};
const isSet = (value) => {
	return toString.call(value) == '[object Set]';
};

/*--------------------------------------------------------------------------*/

// https://mathiasbynens.be/notes/javascript-escapes#single
const singleEscapes = {
	'\\': '\\\\',
	'\b': '\\b',
	'\f': '\\f',
	'\n': '\\n',
	'\r': '\\r',
	'\t': '\\t'
	// `\v` is omitted intentionally, because in IE < 9, '\v' == 'v'.
	// '\v': '\\x0B'
};
const regexSingleEscape = /[\\\b\f\n\r\t]/;

const regexDigit = /[0-9]/;
const regexWhitespace = /[\xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000]/;

const escapeEverythingRegex = /([\uD800-\uDBFF][\uDC00-\uDFFF])|([\uD800-\uDFFF])|(['"`])|[^]/g;
const escapeNonAsciiRegex = /([\uD800-\uDBFF][\uDC00-\uDFFF])|([\uD800-\uDFFF])|(['"`])|[^ !#-&\(-\[\]-_a-~]/g;

const jsesc = (argument, options) => {
	const increaseIndentation = () => {
		oldIndent = indent;
		++options.indentLevel;
		indent = options.indent.repeat(options.indentLevel)
	};
	// Handle options
	const defaults = {
		'escapeEverything': false,
		'minimal': false,
		'isScriptContext': false,
		'quotes': 'single',
		'wrap': false,
		'es6': false,
		'json': false,
		'compact': true,
		'lowercaseHex': false,
		'numbers': 'decimal',
		'indent': '\t',
		'indentLevel': 0,
		'__inline1__': false,
		'__inline2__': false
	};
	const json = options && options.json;
	if (json) {
		defaults.quotes = 'double';
		defaults.wrap = true;
	}
	options = extend(defaults, options);
	if (
		options.quotes != 'single' &&
		options.quotes != 'double' &&
		options.quotes != 'backtick'
	) {
		options.quotes = 'single';
	}
	const quote = options.quotes == 'double' ?
		'"' :
		(options.quotes == 'backtick' ?
			'`' :
			'\''
		);
	const compact = options.compact;
	const lowercaseHex = options.lowercaseHex;
	let indent = options.indent.repeat(options.indentLevel);
	let oldIndent = '';
	const inline1 = options.__inline1__;
	const inline2 = options.__inline2__;
	const newLine = compact ? '' : '\n';
	let result;
	let isEmpty = true;
	const useBinNumbers = options.numbers == 'binary';
	const useOctNumbers = options.numbers == 'octal';
	const useDecNumbers = options.numbers == 'decimal';
	const useHexNumbers = options.numbers == 'hexadecimal';

	if (json && argument && isFunction(argument.toJSON)) {
		argument = argument.toJSON();
	}

	if (!isString(argument)) {
		if (isMap(argument)) {
			if (argument.size == 0) {
				return 'new Map()';
			}
			if (!compact) {
				options.__inline1__ = true;
				options.__inline2__ = false;
			}
			return 'new Map(' + jsesc(Array.from(argument), options) + ')';
		}
		if (isSet(argument)) {
			if (argument.size == 0) {
				return 'new Set()';
			}
			return 'new Set(' + jsesc(Array.from(argument), options) + ')';
		}
		if (isBuffer(argument)) {
			if (argument.length == 0) {
				return 'Buffer.from([])';
			}
			return 'Buffer.from(' + jsesc(Array.from(argument), options) + ')';
		}
		if (isArray(argument)) {
			result = [];
			options.wrap = true;
			if (inline1) {
				options.__inline1__ = false;
				options.__inline2__ = true;
			}
			if (!inline2) {
				increaseIndentation();
			}
			forEach(argument, (value) => {
				isEmpty = false;
				if (inline2) {
					options.__inline2__ = false;
				}
				result.push(
					(compact || inline2 ? '' : indent) +
					jsesc(value, options)
				);
			});
			if (isEmpty) {
				return '[]';
			}
			if (inline2) {
				return '[' + result.join(', ') + ']';
			}
			return '[' + newLine + result.join(',' + newLine) + newLine +
				(compact ? '' : oldIndent) + ']';
		} else if (isNumber(argument) || isBigInt(argument)) {
			if (json) {
				// Some number values (e.g. `Infinity`) cannot be represented in JSON.
				// `BigInt` values less than `-Number.MAX_VALUE` or greater than
        // `Number.MAX_VALUE` cannot be represented in JSON so they will become
        // `-Infinity` or `Infinity`, respectively, and then become `null` when
        // stringified.
				return JSON.stringify(Number(argument));
			}

      let result;
			if (useDecNumbers) {
				result = String(argument);
			} else if (useHexNumbers) {
				let hexadecimal = argument.toString(16);
				if (!lowercaseHex) {
					hexadecimal = hexadecimal.toUpperCase();
				}
				result = '0x' + hexadecimal;
			} else if (useBinNumbers) {
				result = '0b' + argument.toString(2);
			} else if (useOctNumbers) {
				result = '0o' + argument.toString(8);
			}

      if (isBigInt(argument)) {
        return result + 'n';
      }
      return result;
		} else if (isBigInt(argument)) {
			if (json) {
				// `BigInt` values less than `-Number.MAX_VALUE` or greater than
        // `Number.MAX_VALUE` will become `-Infinity` or `Infinity`,
        // respectively, and cannot be represented in JSON.
				return JSON.stringify(Number(argument));
			}
      return argument + 'n';
    } else if (!isObject(argument)) {
			if (json) {
				// For some values (e.g. `undefined`, `function` objects),
				// `JSON.stringify(value)` returns `undefined` (which isn’t valid
				// JSON) instead of `'null'`.
				return JSON.stringify(argument) || 'null';
			}
			return String(argument);
		} else { // it’s an object
			result = [];
			options.wrap = true;
			increaseIndentation();
			forOwn(argument, (key, value) => {
				isEmpty = false;
				result.push(
					(compact ? '' : indent) +
					jsesc(key, options) + ':' +
					(compact ? '' : ' ') +
					jsesc(value, options)
				);
			});
			if (isEmpty) {
				return '{}';
			}
			return '{' + newLine + result.join(',' + newLine) + newLine +
				(compact ? '' : oldIndent) + '}';
		}
	}

	const regex = options.escapeEverything ? escapeEverythingRegex : escapeNonAsciiRegex;
	result = argument.replace(regex, (char, pair, lone, quoteChar, index, string) => {
		if (pair) {
			if (options.minimal) return pair;
			const first = pair.charCodeAt(0);
			const second = pair.charCodeAt(1);
			if (options.es6) {
				// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
				const codePoint = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
				const hex = hexadecimal(codePoint, lowercaseHex);
				return '\\u{' + hex + '}';
			}
			return fourHexEscape(hexadecimal(first, lowercaseHex)) + fourHexEscape(hexadecimal(second, lowercaseHex));
		}

		if (lone) {
			return fourHexEscape(hexadecimal(lone.charCodeAt(0), lowercaseHex));
		}

		if (
			char == '\0' &&
			!json &&
			!regexDigit.test(string.charAt(index + 1))
		) {
			return '\\0';
		}

		if (quoteChar) {
			if (quoteChar == quote || options.escapeEverything) {
				return '\\' + quoteChar;
			}
			return quoteChar;
		}

		if (regexSingleEscape.test(char)) {
			// no need for a `hasOwnProperty` check here
			return singleEscapes[char];
		}

		if (options.minimal && !regexWhitespace.test(char)) {
			return char;
		}

		const hex = hexadecimal(char.charCodeAt(0), lowercaseHex);
		if (json || hex.length > 2) {
			return fourHexEscape(hex);
		}

		return '\\x' + ('00' + hex).slice(-2);
	});

	if (quote == '`') {
		result = result.replace(/\$\{/g, '\\${');
	}
	if (options.isScriptContext) {
		// https://mathiasbynens.be/notes/etago
		result = result
			.replace(/<\/(script|style)/gi, '<\\/$1')
			.replace(/<!--/g, json ? '\\u003C!--' : '\\x3C!--');
	}
	if (options.wrap) {
		result = quote + result + quote;
	}
	return result;
};

jsesc.version = '3.0.2';

module.exports = jsesc;

----------------------------------------
File: ./animations/node_modules/jsesc/README.md
----------------------------------------
# jsesc

Given some data, _jsesc_ returns a stringified representation of that data. jsesc is similar to `JSON.stringify()` except:

1. it outputs JavaScript instead of JSON [by default](#json), enabling support for data structures like ES6 maps and sets;
2. it offers [many options](#api) to customize the output;
3. its output is ASCII-safe [by default](#minimal), thanks to its use of [escape sequences](https://mathiasbynens.be/notes/javascript-escapes) where needed.

For any input, jsesc generates the shortest possible valid printable-ASCII-only output. [Here’s an online demo.](https://mothereff.in/js-escapes)

jsesc’s output can be used instead of `JSON.stringify`’s to avoid [mojibake](https://en.wikipedia.org/wiki/Mojibake) and other encoding issues, or even to [avoid errors](https://twitter.com/annevk/status/380000829643571200) when passing JSON-formatted data (which may contain U+2028 LINE SEPARATOR, U+2029 PARAGRAPH SEPARATOR, or [lone surrogates](https://esdiscuss.org/topic/code-points-vs-unicode-scalar-values#content-14)) to a JavaScript parser or an UTF-8 encoder.

## Installation

Via [npm](https://www.npmjs.com/):

```bash
npm install jsesc
```

In [Node.js](https://nodejs.org/):

```js
const jsesc = require('jsesc');
```

## API

### `jsesc(value, options)`

This function takes a value and returns an escaped version of the value where any characters that are not printable ASCII symbols are escaped using the shortest possible (but valid) [escape sequences for use in JavaScript strings](https://mathiasbynens.be/notes/javascript-escapes). The first supported value type is strings:

```js
jsesc('Ich ♥ Bücher');
// → 'Ich \\u2665 B\\xFCcher'

jsesc('foo 𝌆 bar');
// → 'foo \\uD834\\uDF06 bar'
```

Instead of a string, the `value` can also be an array, an object, a map, a set, or a buffer. In such cases, `jsesc` returns a stringified version of the value where any characters that are not printable ASCII symbols are escaped in the same way.

```js
// Escaping an array
jsesc([
  'Ich ♥ Bücher', 'foo 𝌆 bar'
]);
// → '[\'Ich \\u2665 B\\xFCcher\',\'foo \\uD834\\uDF06 bar\']'

// Escaping an object
jsesc({
  'Ich ♥ Bücher': 'foo 𝌆 bar'
});
// → '{\'Ich \\u2665 B\\xFCcher\':\'foo \\uD834\\uDF06 bar\'}'
```

The optional `options` argument accepts an object with the following options:

#### `quotes`

The default value for the `quotes` option is `'single'`. This means that any occurrences of `'` in the input string are escaped as `\'`, so that the output can be used in a string literal wrapped in single quotes.

```js
jsesc('`Lorem` ipsum "dolor" sit \'amet\' etc.');
// → 'Lorem ipsum "dolor" sit \\\'amet\\\' etc.'

jsesc('`Lorem` ipsum "dolor" sit \'amet\' etc.', {
  'quotes': 'single'
});
// → '`Lorem` ipsum "dolor" sit \\\'amet\\\' etc.'
// → "`Lorem` ipsum \"dolor\" sit \\'amet\\' etc."
```

If you want to use the output as part of a string literal wrapped in double quotes, set the `quotes` option to `'double'`.

```js
jsesc('`Lorem` ipsum "dolor" sit \'amet\' etc.', {
  'quotes': 'double'
});
// → '`Lorem` ipsum \\"dolor\\" sit \'amet\' etc.'
// → "`Lorem` ipsum \\\"dolor\\\" sit 'amet' etc."
```

If you want to use the output as part of a template literal (i.e. wrapped in backticks), set the `quotes` option to `'backtick'`.

```js
jsesc('`Lorem` ipsum "dolor" sit \'amet\' etc.', {
  'quotes': 'backtick'
});
// → '\\`Lorem\\` ipsum "dolor" sit \'amet\' etc.'
// → "\\`Lorem\\` ipsum \"dolor\" sit 'amet' etc."
// → `\\\`Lorem\\\` ipsum "dolor" sit 'amet' etc.`
```

This setting also affects the output for arrays and objects:

```js
jsesc({ 'Ich ♥ Bücher': 'foo 𝌆 bar' }, {
  'quotes': 'double'
});
// → '{"Ich \\u2665 B\\xFCcher":"foo \\uD834\\uDF06 bar"}'

jsesc([ 'Ich ♥ Bücher', 'foo 𝌆 bar' ], {
  'quotes': 'double'
});
// → '["Ich \\u2665 B\\xFCcher","foo \\uD834\\uDF06 bar"]'
```

#### `numbers`

The default value for the `numbers` option is `'decimal'`. This means that any numeric values are represented using decimal integer literals. Other valid options are `binary`, `octal`, and `hexadecimal`, which result in binary integer literals, octal integer literals, and hexadecimal integer literals, respectively.

```js
jsesc(42, {
  'numbers': 'binary'
});
// → '0b101010'

jsesc(42, {
  'numbers': 'octal'
});
// → '0o52'

jsesc(42, {
  'numbers': 'decimal'
});
// → '42'

jsesc(42, {
  'numbers': 'hexadecimal'
});
// → '0x2A'
```

#### `wrap`

The `wrap` option takes a boolean value (`true` or `false`), and defaults to `false` (disabled). When enabled, the output is a valid JavaScript string literal wrapped in quotes. The type of quotes can be specified through the `quotes` setting.

```js
jsesc('Lorem ipsum "dolor" sit \'amet\' etc.', {
  'quotes': 'single',
  'wrap': true
});
// → '\'Lorem ipsum "dolor" sit \\\'amet\\\' etc.\''
// → "\'Lorem ipsum \"dolor\" sit \\\'amet\\\' etc.\'"

jsesc('Lorem ipsum "dolor" sit \'amet\' etc.', {
  'quotes': 'double',
  'wrap': true
});
// → '"Lorem ipsum \\"dolor\\" sit \'amet\' etc."'
// → "\"Lorem ipsum \\\"dolor\\\" sit \'amet\' etc.\""
```

#### `es6`

The `es6` option takes a boolean value (`true` or `false`), and defaults to `false` (disabled). When enabled, any astral Unicode symbols in the input are escaped using [ECMAScript 6 Unicode code point escape sequences](https://mathiasbynens.be/notes/javascript-escapes#unicode-code-point) instead of using separate escape sequences for each surrogate half. If backwards compatibility with ES5 environments is a concern, don’t enable this setting. If the `json` setting is enabled, the value for the `es6` setting is ignored (as if it was `false`).

```js
// By default, the `es6` option is disabled:
jsesc('foo 𝌆 bar 💩 baz');
// → 'foo \\uD834\\uDF06 bar \\uD83D\\uDCA9 baz'

// To explicitly disable it:
jsesc('foo 𝌆 bar 💩 baz', {
  'es6': false
});
// → 'foo \\uD834\\uDF06 bar \\uD83D\\uDCA9 baz'

// To enable it:
jsesc('foo 𝌆 bar 💩 baz', {
  'es6': true
});
// → 'foo \\u{1D306} bar \\u{1F4A9} baz'
```

#### `escapeEverything`

The `escapeEverything` option takes a boolean value (`true` or `false`), and defaults to `false` (disabled). When enabled, all the symbols in the output are escaped — even printable ASCII symbols.

```js
jsesc('lolwat"foo\'bar', {
  'escapeEverything': true
});
// → '\\x6C\\x6F\\x6C\\x77\\x61\\x74\\"\\x66\\x6F\\x6F\\\'\\x62\\x61\\x72'
// → "\\x6C\\x6F\\x6C\\x77\\x61\\x74\\\"\\x66\\x6F\\x6F\\'\\x62\\x61\\x72"
```

This setting also affects the output for string literals within arrays and objects.

#### `minimal`

The `minimal` option takes a boolean value (`true` or `false`), and defaults to `false` (disabled). When enabled, only a limited set of symbols in the output are escaped:

* U+0000 `\0`
* U+0008 `\b`
* U+0009 `\t`
* U+000A `\n`
* U+000C `\f`
* U+000D `\r`
* U+005C `\\`
* U+2028 `\u2028`
* U+2029 `\u2029`
* whatever symbol is being used for wrapping string literals (based on [the `quotes` option](#quotes))
* [lone surrogates](https://esdiscuss.org/topic/code-points-vs-unicode-scalar-values#content-14)

Note: with this option enabled, jsesc output is no longer guaranteed to be ASCII-safe.

```js
jsesc('foo\u2029bar\nbaz©qux𝌆flops', {
  'minimal': false
});
// → 'foo\\u2029bar\\nbaz©qux𝌆flops'
```

#### `isScriptContext`

The `isScriptContext` option takes a boolean value (`true` or `false`), and defaults to `false` (disabled). When enabled, occurrences of [`</script` and `</style`](https://mathiasbynens.be/notes/etago) in the output are escaped as `<\/script` and `<\/style`, and [`<!--`](https://mathiasbynens.be/notes/etago#comment-8) is escaped as `\x3C!--` (or `\u003C!--` when the `json` option is enabled). This setting is useful when jsesc’s output ends up as part of a `<script>` or `<style>` element in an HTML document.

```js
jsesc('foo</script>bar', {
  'isScriptContext': true
});
// → 'foo<\\/script>bar'
```

#### `compact`

The `compact` option takes a boolean value (`true` or `false`), and defaults to `true` (enabled). When enabled, the output for arrays and objects is as compact as possible; it’s not formatted nicely.

```js
jsesc({ 'Ich ♥ Bücher': 'foo 𝌆 bar' }, {
  'compact': true // this is the default
});
// → '{\'Ich \u2665 B\xFCcher\':\'foo \uD834\uDF06 bar\'}'

jsesc({ 'Ich ♥ Bücher': 'foo 𝌆 bar' }, {
  'compact': false
});
// → '{\n\t\'Ich \u2665 B\xFCcher\': \'foo \uD834\uDF06 bar\'\n}'

jsesc([ 'Ich ♥ Bücher', 'foo 𝌆 bar' ], {
  'compact': false
});
// → '[\n\t\'Ich \u2665 B\xFCcher\',\n\t\'foo \uD834\uDF06 bar\'\n]'
```

This setting has no effect on the output for strings.

#### `indent`

The `indent` option takes a string value, and defaults to `'\t'`. When the `compact` setting is disabled (`false`), the value of the `indent` option is used to format the output for arrays and objects.

```js
jsesc({ 'Ich ♥ Bücher': 'foo 𝌆 bar' }, {
  'compact': false,
  'indent': '\t' // this is the default
});
// → '{\n\t\'Ich \u2665 B\xFCcher\': \'foo \uD834\uDF06 bar\'\n}'

jsesc({ 'Ich ♥ Bücher': 'foo 𝌆 bar' }, {
  'compact': false,
  'indent': '  '
});
// → '{\n  \'Ich \u2665 B\xFCcher\': \'foo \uD834\uDF06 bar\'\n}'

jsesc([ 'Ich ♥ Bücher', 'foo 𝌆 bar' ], {
  'compact': false,
  'indent': '  '
});
// → '[\n  \'Ich \u2665 B\xFCcher\',\n\  t\'foo \uD834\uDF06 bar\'\n]'
```

This setting has no effect on the output for strings.

#### `indentLevel`

The `indentLevel` option takes a numeric value, and defaults to `0`. It represents the current indentation level, i.e. the number of times the value of [the `indent` option](#indent) is repeated.

```js
jsesc(['a', 'b', 'c'], {
  'compact': false,
  'indentLevel': 1
});
// → '[\n\t\t\'a\',\n\t\t\'b\',\n\t\t\'c\'\n\t]'

jsesc(['a', 'b', 'c'], {
  'compact': false,
  'indentLevel': 2
});
// → '[\n\t\t\t\'a\',\n\t\t\t\'b\',\n\t\t\t\'c\'\n\t\t]'
```

#### `json`

The `json` option takes a boolean value (`true` or `false`), and defaults to `false` (disabled). When enabled, the output is valid JSON. [Hexadecimal character escape sequences](https://mathiasbynens.be/notes/javascript-escapes#hexadecimal) and [the `\v` or `\0` escape sequences](https://mathiasbynens.be/notes/javascript-escapes#single) are not used. Setting `json: true` implies `quotes: 'double', wrap: true, es6: false`, although these values can still be overridden if needed — but in such cases, the output won’t be valid JSON anymore.

```js
jsesc('foo\x00bar\xFF\uFFFDbaz', {
  'json': true
});
// → '"foo\\u0000bar\\u00FF\\uFFFDbaz"'

jsesc({ 'foo\x00bar\xFF\uFFFDbaz': 'foo\x00bar\xFF\uFFFDbaz' }, {
  'json': true
});
// → '{"foo\\u0000bar\\u00FF\\uFFFDbaz":"foo\\u0000bar\\u00FF\\uFFFDbaz"}'

jsesc([ 'foo\x00bar\xFF\uFFFDbaz', 'foo\x00bar\xFF\uFFFDbaz' ], {
  'json': true
});
// → '["foo\\u0000bar\\u00FF\\uFFFDbaz","foo\\u0000bar\\u00FF\\uFFFDbaz"]'

// Values that are acceptable in JSON but aren’t strings, arrays, or object
// literals can’t be escaped, so they’ll just be preserved:
jsesc([ 'foo\x00bar', [1, '©', { 'foo': true, 'qux': null }], 42 ], {
  'json': true
});
// → '["foo\\u0000bar",[1,"\\u00A9",{"foo":true,"qux":null}],42]'
// Values that aren’t allowed in JSON are run through `JSON.stringify()`:
jsesc([ undefined, -Infinity ], {
  'json': true
});
// → '[null,null]'
```

**Note:** Using this option on objects or arrays that contain non-string values relies on `JSON.stringify()`. For legacy environments like IE ≤ 7, use [a `JSON` polyfill](http://bestiejs.github.io/json3/).

#### `lowercaseHex`

The `lowercaseHex` option takes a boolean value (`true` or `false`), and defaults to `false` (disabled). When enabled, any alphabetical hexadecimal digits in escape sequences as well as any hexadecimal integer literals (see [the `numbers` option](#numbers)) in the output are in lowercase.

```js
jsesc('Ich ♥ Bücher', {
  'lowercaseHex': true
});
// → 'Ich \\u2665 B\\xfccher'
//                    ^^

jsesc(42, {
  'numbers': 'hexadecimal',
  'lowercaseHex': true
});
// → '0x2a'
//      ^^
```

### `jsesc.version`

A string representing the semantic version number.

### Using the `jsesc` binary

To use the `jsesc` binary in your shell, simply install jsesc globally using npm:

```bash
npm install -g jsesc
```

After that you’re able to escape strings from the command line:

```bash
$ jsesc 'föo ♥ bår 𝌆 baz'
f\xF6o \u2665 b\xE5r \uD834\uDF06 baz
```

To escape arrays or objects containing string values, use the `-o`/`--object` option:

```bash
$ jsesc --object '{ "föo": "♥", "bår": "𝌆 baz" }'
{'f\xF6o':'\u2665','b\xE5r':'\uD834\uDF06 baz'}
```

To prettify the output in such cases, use the `-p`/`--pretty` option:

```bash
$ jsesc --pretty '{ "föo": "♥", "bår": "𝌆 baz" }'
{
  'f\xF6o': '\u2665',
  'b\xE5r': '\uD834\uDF06 baz'
}
```

For valid JSON output, use the `-j`/`--json` option:

```bash
$ jsesc --json --pretty '{ "föo": "♥", "bår": "𝌆 baz" }'
{
  "f\u00F6o": "\u2665",
  "b\u00E5r": "\uD834\uDF06 baz"
}
```

Read a local JSON file, escape any non-ASCII symbols, and save the result to a new file:

```bash
$ jsesc --json --object < data-raw.json > data-escaped.json
```

Or do the same with an online JSON file:

```bash
$ curl -sL "http://git.io/aorKgQ" | jsesc --json --object > data-escaped.json
```

See `jsesc --help` for the full list of options.

## Support

As of v3.0.0, jsesc supports Node.js v6+ only.

Older versions (up to jsesc v1.3.0) support Chrome 27, Firefox 3, Safari 4, Opera 10, IE 6, Node.js v6.0.0, Narwhal 0.3.2, RingoJS 0.8-0.11, PhantomJS 1.9.0, and Rhino 1.7RC4. **Note:** Using the `json` option on objects or arrays that contain non-string values relies on `JSON.parse()`. For legacy environments like IE ≤ 7, use [a `JSON` polyfill](https://bestiejs.github.io/json3/).

## Author

| [![twitter/mathias](https://gravatar.com/avatar/24e08a9ea84deb17ae121074d0f17125?s=70)](https://twitter.com/mathias "Follow @mathias on Twitter") |
|---|
| [Mathias Bynens](https://mathiasbynens.be/) |

## License

This library is available under the [MIT](https://mths.be/mit) license.

----------------------------------------
File: ./animations/node_modules/d3-contour/dist/d3-contour.js
----------------------------------------
// https://d3js.org/d3-contour/ v4.0.2 Copyright 2012-2023 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-array')) :
typeof define === 'function' && define.amd ? define(['exports', 'd3-array'], factory) :
(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.d3 = global.d3 || {}, global.d3));
})(this, (function (exports, d3Array) { 'use strict';

var array = Array.prototype;

var slice = array.slice;

function ascending(a, b) {
  return a - b;
}

function area(ring) {
  var i = 0, n = ring.length, area = ring[n - 1][1] * ring[0][0] - ring[n - 1][0] * ring[0][1];
  while (++i < n) area += ring[i - 1][1] * ring[i][0] - ring[i - 1][0] * ring[i][1];
  return area;
}

var constant = x => () => x;

function contains(ring, hole) {
  var i = -1, n = hole.length, c;
  while (++i < n) if (c = ringContains(ring, hole[i])) return c;
  return 0;
}

function ringContains(ring, point) {
  var x = point[0], y = point[1], contains = -1;
  for (var i = 0, n = ring.length, j = n - 1; i < n; j = i++) {
    var pi = ring[i], xi = pi[0], yi = pi[1], pj = ring[j], xj = pj[0], yj = pj[1];
    if (segmentContains(pi, pj, point)) return 0;
    if (((yi > y) !== (yj > y)) && ((x < (xj - xi) * (y - yi) / (yj - yi) + xi))) contains = -contains;
  }
  return contains;
}

function segmentContains(a, b, c) {
  var i; return collinear(a, b, c) && within(a[i = +(a[0] === b[0])], c[i], b[i]);
}

function collinear(a, b, c) {
  return (b[0] - a[0]) * (c[1] - a[1]) === (c[0] - a[0]) * (b[1] - a[1]);
}

function within(p, q, r) {
  return p <= q && q <= r || r <= q && q <= p;
}

function noop() {}

var cases = [
  [],
  [[[1.0, 1.5], [0.5, 1.0]]],
  [[[1.5, 1.0], [1.0, 1.5]]],
  [[[1.5, 1.0], [0.5, 1.0]]],
  [[[1.0, 0.5], [1.5, 1.0]]],
  [[[1.0, 1.5], [0.5, 1.0]], [[1.0, 0.5], [1.5, 1.0]]],
  [[[1.0, 0.5], [1.0, 1.5]]],
  [[[1.0, 0.5], [0.5, 1.0]]],
  [[[0.5, 1.0], [1.0, 0.5]]],
  [[[1.0, 1.5], [1.0, 0.5]]],
  [[[0.5, 1.0], [1.0, 0.5]], [[1.5, 1.0], [1.0, 1.5]]],
  [[[1.5, 1.0], [1.0, 0.5]]],
  [[[0.5, 1.0], [1.5, 1.0]]],
  [[[1.0, 1.5], [1.5, 1.0]]],
  [[[0.5, 1.0], [1.0, 1.5]]],
  []
];

function Contours() {
  var dx = 1,
      dy = 1,
      threshold = d3Array.thresholdSturges,
      smooth = smoothLinear;

  function contours(values) {
    var tz = threshold(values);

    // Convert number of thresholds into uniform thresholds.
    if (!Array.isArray(tz)) {
      const e = d3Array.extent(values, finite);
      tz = d3Array.ticks(...d3Array.nice(e[0], e[1], tz), tz);
      while (tz[tz.length - 1] >= e[1]) tz.pop();
      while (tz[1] < e[0]) tz.shift();
    } else {
      tz = tz.slice().sort(ascending);
    }

    return tz.map(value => contour(values, value));
  }

  // Accumulate, smooth contour rings, assign holes to exterior rings.
  // Based on https://github.com/mbostock/shapefile/blob/v0.6.2/shp/polygon.js
  function contour(values, value) {
    const v = value == null ? NaN : +value;
    if (isNaN(v)) throw new Error(`invalid value: ${value}`);

    var polygons = [],
        holes = [];

    isorings(values, v, function(ring) {
      smooth(ring, values, v);
      if (area(ring) > 0) polygons.push([ring]);
      else holes.push(ring);
    });

    holes.forEach(function(hole) {
      for (var i = 0, n = polygons.length, polygon; i < n; ++i) {
        if (contains((polygon = polygons[i])[0], hole) !== -1) {
          polygon.push(hole);
          return;
        }
      }
    });

    return {
      type: "MultiPolygon",
      value: value,
      coordinates: polygons
    };
  }

  // Marching squares with isolines stitched into rings.
  // Based on https://github.com/topojson/topojson-client/blob/v3.0.0/src/stitch.js
  function isorings(values, value, callback) {
    var fragmentByStart = new Array,
        fragmentByEnd = new Array,
        x, y, t0, t1, t2, t3;

    // Special case for the first row (y = -1, t2 = t3 = 0).
    x = y = -1;
    t1 = above(values[0], value);
    cases[t1 << 1].forEach(stitch);
    while (++x < dx - 1) {
      t0 = t1, t1 = above(values[x + 1], value);
      cases[t0 | t1 << 1].forEach(stitch);
    }
    cases[t1 << 0].forEach(stitch);

    // General case for the intermediate rows.
    while (++y < dy - 1) {
      x = -1;
      t1 = above(values[y * dx + dx], value);
      t2 = above(values[y * dx], value);
      cases[t1 << 1 | t2 << 2].forEach(stitch);
      while (++x < dx - 1) {
        t0 = t1, t1 = above(values[y * dx + dx + x + 1], value);
        t3 = t2, t2 = above(values[y * dx + x + 1], value);
        cases[t0 | t1 << 1 | t2 << 2 | t3 << 3].forEach(stitch);
      }
      cases[t1 | t2 << 3].forEach(stitch);
    }

    // Special case for the last row (y = dy - 1, t0 = t1 = 0).
    x = -1;
    t2 = values[y * dx] >= value;
    cases[t2 << 2].forEach(stitch);
    while (++x < dx - 1) {
      t3 = t2, t2 = above(values[y * dx + x + 1], value);
      cases[t2 << 2 | t3 << 3].forEach(stitch);
    }
    cases[t2 << 3].forEach(stitch);

    function stitch(line) {
      var start = [line[0][0] + x, line[0][1] + y],
          end = [line[1][0] + x, line[1][1] + y],
          startIndex = index(start),
          endIndex = index(end),
          f, g;
      if (f = fragmentByEnd[startIndex]) {
        if (g = fragmentByStart[endIndex]) {
          delete fragmentByEnd[f.end];
          delete fragmentByStart[g.start];
          if (f === g) {
            f.ring.push(end);
            callback(f.ring);
          } else {
            fragmentByStart[f.start] = fragmentByEnd[g.end] = {start: f.start, end: g.end, ring: f.ring.concat(g.ring)};
          }
        } else {
          delete fragmentByEnd[f.end];
          f.ring.push(end);
          fragmentByEnd[f.end = endIndex] = f;
        }
      } else if (f = fragmentByStart[endIndex]) {
        if (g = fragmentByEnd[startIndex]) {
          delete fragmentByStart[f.start];
          delete fragmentByEnd[g.end];
          if (f === g) {
            f.ring.push(end);
            callback(f.ring);
          } else {
            fragmentByStart[g.start] = fragmentByEnd[f.end] = {start: g.start, end: f.end, ring: g.ring.concat(f.ring)};
          }
        } else {
          delete fragmentByStart[f.start];
          f.ring.unshift(start);
          fragmentByStart[f.start = startIndex] = f;
        }
      } else {
        fragmentByStart[startIndex] = fragmentByEnd[endIndex] = {start: startIndex, end: endIndex, ring: [start, end]};
      }
    }
  }

  function index(point) {
    return point[0] * 2 + point[1] * (dx + 1) * 4;
  }

  function smoothLinear(ring, values, value) {
    ring.forEach(function(point) {
      var x = point[0],
          y = point[1],
          xt = x | 0,
          yt = y | 0,
          v1 = valid(values[yt * dx + xt]);
      if (x > 0 && x < dx && xt === x) {
        point[0] = smooth1(x, valid(values[yt * dx + xt - 1]), v1, value);
      }
      if (y > 0 && y < dy && yt === y) {
        point[1] = smooth1(y, valid(values[(yt - 1) * dx + xt]), v1, value);
      }
    });
  }

  contours.contour = contour;

  contours.size = function(_) {
    if (!arguments.length) return [dx, dy];
    var _0 = Math.floor(_[0]), _1 = Math.floor(_[1]);
    if (!(_0 >= 0 && _1 >= 0)) throw new Error("invalid size");
    return dx = _0, dy = _1, contours;
  };

  contours.thresholds = function(_) {
    return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), contours) : threshold;
  };

  contours.smooth = function(_) {
    return arguments.length ? (smooth = _ ? smoothLinear : noop, contours) : smooth === smoothLinear;
  };

  return contours;
}

// When computing the extent, ignore infinite values (as well as invalid ones).
function finite(x) {
  return isFinite(x) ? x : NaN;
}

// Is the (possibly invalid) x greater than or equal to the (known valid) value?
// Treat any invalid value as below negative infinity.
function above(x, value) {
  return x == null ? false : +x >= value;
}

// During smoothing, treat any invalid value as negative infinity.
function valid(v) {
  return v == null || isNaN(v = +v) ? -Infinity : v;
}

function smooth1(x, v0, v1, value) {
  const a = value - v0;
  const b = v1 - v0;
  const d = isFinite(a) || isFinite(b) ? a / b : Math.sign(a) / Math.sign(b);
  return isNaN(d) ? x : x + d - 0.5;
}

function defaultX(d) {
  return d[0];
}

function defaultY(d) {
  return d[1];
}

function defaultWeight() {
  return 1;
}

function density() {
  var x = defaultX,
      y = defaultY,
      weight = defaultWeight,
      dx = 960,
      dy = 500,
      r = 20, // blur radius
      k = 2, // log2(grid cell size)
      o = r * 3, // grid offset, to pad for blur
      n = (dx + o * 2) >> k, // grid width
      m = (dy + o * 2) >> k, // grid height
      threshold = constant(20);

  function grid(data) {
    var values = new Float32Array(n * m),
        pow2k = Math.pow(2, -k),
        i = -1;

    for (const d of data) {
      var xi = (x(d, ++i, data) + o) * pow2k,
          yi = (y(d, i, data) + o) * pow2k,
          wi = +weight(d, i, data);
      if (wi && xi >= 0 && xi < n && yi >= 0 && yi < m) {
        var x0 = Math.floor(xi),
            y0 = Math.floor(yi),
            xt = xi - x0 - 0.5,
            yt = yi - y0 - 0.5;
        values[x0 + y0 * n] += (1 - xt) * (1 - yt) * wi;
        values[x0 + 1 + y0 * n] += xt * (1 - yt) * wi;
        values[x0 + 1 + (y0 + 1) * n] += xt * yt * wi;
        values[x0 + (y0 + 1) * n] += (1 - xt) * yt * wi;
      }
    }

    d3Array.blur2({data: values, width: n, height: m}, r * pow2k);
    return values;
  }

  function density(data) {
    var values = grid(data),
        tz = threshold(values),
        pow4k = Math.pow(2, 2 * k);

    // Convert number of thresholds into uniform thresholds.
    if (!Array.isArray(tz)) {
      tz = d3Array.ticks(Number.MIN_VALUE, d3Array.max(values) / pow4k, tz);
    }

    return Contours()
        .size([n, m])
        .thresholds(tz.map(d => d * pow4k))
      (values)
        .map((c, i) => (c.value = +tz[i], transform(c)));
  }

  density.contours = function(data) {
    var values = grid(data),
        contours = Contours().size([n, m]),
        pow4k = Math.pow(2, 2 * k),
        contour = value => {
          value = +value;
          var c = transform(contours.contour(values, value * pow4k));
          c.value = value; // preserve exact threshold value
          return c;
        };
    Object.defineProperty(contour, "max", {get: () => d3Array.max(values) / pow4k});
    return contour;
  };

  function transform(geometry) {
    geometry.coordinates.forEach(transformPolygon);
    return geometry;
  }

  function transformPolygon(coordinates) {
    coordinates.forEach(transformRing);
  }

  function transformRing(coordinates) {
    coordinates.forEach(transformPoint);
  }

  // TODO Optimize.
  function transformPoint(coordinates) {
    coordinates[0] = coordinates[0] * Math.pow(2, k) - o;
    coordinates[1] = coordinates[1] * Math.pow(2, k) - o;
  }

  function resize() {
    o = r * 3;
    n = (dx + o * 2) >> k;
    m = (dy + o * 2) >> k;
    return density;
  }

  density.x = function(_) {
    return arguments.length ? (x = typeof _ === "function" ? _ : constant(+_), density) : x;
  };

  density.y = function(_) {
    return arguments.length ? (y = typeof _ === "function" ? _ : constant(+_), density) : y;
  };

  density.weight = function(_) {
    return arguments.length ? (weight = typeof _ === "function" ? _ : constant(+_), density) : weight;
  };

  density.size = function(_) {
    if (!arguments.length) return [dx, dy];
    var _0 = +_[0], _1 = +_[1];
    if (!(_0 >= 0 && _1 >= 0)) throw new Error("invalid size");
    return dx = _0, dy = _1, resize();
  };

  density.cellSize = function(_) {
    if (!arguments.length) return 1 << k;
    if (!((_ = +_) >= 1)) throw new Error("invalid cell size");
    return k = Math.floor(Math.log(_) / Math.LN2), resize();
  };

  density.thresholds = function(_) {
    return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), density) : threshold;
  };

  density.bandwidth = function(_) {
    if (!arguments.length) return Math.sqrt(r * (r + 1));
    if (!((_ = +_) >= 0)) throw new Error("invalid bandwidth");
    return r = (Math.sqrt(4 * _ * _ + 1) - 1) / 2, resize();
  };

  return density;
}

exports.contourDensity = density;
exports.contours = Contours;

}));

----------------------------------------
File: ./animations/node_modules/d3-contour/dist/d3-contour.min.js
----------------------------------------
// https://d3js.org/d3-contour/ v4.0.2 Copyright 2012-2023 Mike Bostock
!function(r,n){"object"==typeof exports&&"undefined"!=typeof module?n(exports,require("d3-array")):"function"==typeof define&&define.amd?define(["exports","d3-array"],n):n((r="undefined"!=typeof globalThis?globalThis:r||self).d3=r.d3||{},r.d3)}(this,(function(r,n){"use strict";var t=Array.prototype.slice;function e(r,n){return r-n}var o=r=>()=>r;function i(r,n){for(var t,e=-1,o=n.length;++e<o;)if(t=u(r,n[e]))return t;return 0}function u(r,n){for(var t=n[0],e=n[1],o=-1,i=0,u=r.length,f=u-1;i<u;f=i++){var c=r[i],h=c[0],s=c[1],l=r[f],d=l[0],g=l[1];if(a(c,l,n))return 0;s>e!=g>e&&t<(d-h)*(e-s)/(g-s)+h&&(o=-o)}return o}function a(r,n,t){var e,o,i,u;return function(r,n,t){return(n[0]-r[0])*(t[1]-r[1])==(t[0]-r[0])*(n[1]-r[1])}(r,n,t)&&(o=r[e=+(r[0]===n[0])],i=t[e],u=n[e],o<=i&&i<=u||u<=i&&i<=o)}function f(){}var c=[[],[[[1,1.5],[.5,1]]],[[[1.5,1],[1,1.5]]],[[[1.5,1],[.5,1]]],[[[1,.5],[1.5,1]]],[[[1,1.5],[.5,1]],[[1,.5],[1.5,1]]],[[[1,.5],[1,1.5]]],[[[1,.5],[.5,1]]],[[[.5,1],[1,.5]]],[[[1,1.5],[1,.5]]],[[[.5,1],[1,.5]],[[1.5,1],[1,1.5]]],[[[1.5,1],[1,.5]]],[[[.5,1],[1.5,1]]],[[[1,1.5],[1.5,1]]],[[[.5,1],[1,1.5]]],[]];function h(){var r=1,u=1,a=n.thresholdSturges,h=w;function v(r){var t=a(r);if(Array.isArray(t))t=t.slice().sort(e);else{const e=n.extent(r,s);for(t=n.ticks(...n.nice(e[0],e[1],t),t);t[t.length-1]>=e[1];)t.pop();for(;t[1]<e[0];)t.shift()}return t.map((n=>p(r,n)))}function p(n,t){const e=null==t?NaN:+t;if(isNaN(e))throw new Error(`invalid value: ${t}`);var o=[],a=[];return function(n,t,e){var o,i,a,f,h,s,d=new Array,g=new Array;o=i=-1,f=l(n[0],t),c[f<<1].forEach(v);for(;++o<r-1;)a=f,f=l(n[o+1],t),c[a|f<<1].forEach(v);c[f<<0].forEach(v);for(;++i<u-1;){for(o=-1,f=l(n[i*r+r],t),h=l(n[i*r],t),c[f<<1|h<<2].forEach(v);++o<r-1;)a=f,f=l(n[i*r+r+o+1],t),s=h,h=l(n[i*r+o+1],t),c[a|f<<1|h<<2|s<<3].forEach(v);c[f|h<<3].forEach(v)}o=-1,h=n[i*r]>=t,c[h<<2].forEach(v);for(;++o<r-1;)s=h,h=l(n[i*r+o+1],t),c[h<<2|s<<3].forEach(v);function v(r){var n,t,u=[r[0][0]+o,r[0][1]+i],a=[r[1][0]+o,r[1][1]+i],f=y(u),c=y(a);(n=g[f])?(t=d[c])?(delete g[n.end],delete d[t.start],n===t?(n.ring.push(a),e(n.ring)):d[n.start]=g[t.end]={start:n.start,end:t.end,ring:n.ring.concat(t.ring)}):(delete g[n.end],n.ring.push(a),g[n.end=c]=n):(n=d[c])?(t=g[f])?(delete d[n.start],delete g[t.end],n===t?(n.ring.push(a),e(n.ring)):d[t.start]=g[n.end]={start:t.start,end:n.end,ring:t.ring.concat(n.ring)}):(delete d[n.start],n.ring.unshift(u),d[n.start=f]=n):d[f]=g[c]={start:f,end:c,ring:[u,a]}}c[h<<3].forEach(v)}(n,e,(function(r){h(r,n,e),function(r){for(var n=0,t=r.length,e=r[t-1][1]*r[0][0]-r[t-1][0]*r[0][1];++n<t;)e+=r[n-1][1]*r[n][0]-r[n-1][0]*r[n][1];return e}(r)>0?o.push([r]):a.push(r)})),a.forEach((function(r){for(var n,t=0,e=o.length;t<e;++t)if(-1!==i((n=o[t])[0],r))return void n.push(r)})),{type:"MultiPolygon",value:t,coordinates:o}}function y(n){return 2*n[0]+n[1]*(r+1)*4}function w(n,t,e){n.forEach((function(n){var o=n[0],i=n[1],a=0|o,f=0|i,c=d(t[f*r+a]);o>0&&o<r&&a===o&&(n[0]=g(o,d(t[f*r+a-1]),c,e)),i>0&&i<u&&f===i&&(n[1]=g(i,d(t[(f-1)*r+a]),c,e))}))}return v.contour=p,v.size=function(n){if(!arguments.length)return[r,u];var t=Math.floor(n[0]),e=Math.floor(n[1]);if(!(t>=0&&e>=0))throw new Error("invalid size");return r=t,u=e,v},v.thresholds=function(r){return arguments.length?(a="function"==typeof r?r:Array.isArray(r)?o(t.call(r)):o(r),v):a},v.smooth=function(r){return arguments.length?(h=r?w:f,v):h===w},v}function s(r){return isFinite(r)?r:NaN}function l(r,n){return null!=r&&+r>=n}function d(r){return null==r||isNaN(r=+r)?-1/0:r}function g(r,n,t,e){const o=e-n,i=t-n,u=isFinite(o)||isFinite(i)?o/i:Math.sign(o)/Math.sign(i);return isNaN(u)?r:r+u-.5}function v(r){return r[0]}function p(r){return r[1]}function y(){return 1}r.contourDensity=function(){var r=v,e=p,i=y,u=960,a=500,f=20,c=2,s=3*f,l=u+2*s>>c,d=a+2*s>>c,g=o(20);function w(t){var o=new Float32Array(l*d),u=Math.pow(2,-c),a=-1;for(const n of t){var h=(r(n,++a,t)+s)*u,g=(e(n,a,t)+s)*u,v=+i(n,a,t);if(v&&h>=0&&h<l&&g>=0&&g<d){var p=Math.floor(h),y=Math.floor(g),w=h-p-.5,E=g-y-.5;o[p+y*l]+=(1-w)*(1-E)*v,o[p+1+y*l]+=w*(1-E)*v,o[p+1+(y+1)*l]+=w*E*v,o[p+(y+1)*l]+=(1-w)*E*v}}return n.blur2({data:o,width:l,height:d},f*u),o}function E(r){var t=w(r),e=g(t),o=Math.pow(2,2*c);return Array.isArray(e)||(e=n.ticks(Number.MIN_VALUE,n.max(t)/o,e)),h().size([l,d]).thresholds(e.map((r=>r*o)))(t).map(((r,n)=>(r.value=+e[n],M(r))))}function M(r){return r.coordinates.forEach(A),r}function A(r){r.forEach(N)}function N(r){r.forEach(m)}function m(r){r[0]=r[0]*Math.pow(2,c)-s,r[1]=r[1]*Math.pow(2,c)-s}function b(){return l=u+2*(s=3*f)>>c,d=a+2*s>>c,E}return E.contours=function(r){var t=w(r),e=h().size([l,d]),o=Math.pow(2,2*c),i=r=>{r=+r;var n=M(e.contour(t,r*o));return n.value=r,n};return Object.defineProperty(i,"max",{get:()=>n.max(t)/o}),i},E.x=function(n){return arguments.length?(r="function"==typeof n?n:o(+n),E):r},E.y=function(r){return arguments.length?(e="function"==typeof r?r:o(+r),E):e},E.weight=function(r){return arguments.length?(i="function"==typeof r?r:o(+r),E):i},E.size=function(r){if(!arguments.length)return[u,a];var n=+r[0],t=+r[1];if(!(n>=0&&t>=0))throw new Error("invalid size");return u=n,a=t,b()},E.cellSize=function(r){if(!arguments.length)return 1<<c;if(!((r=+r)>=1))throw new Error("invalid cell size");return c=Math.floor(Math.log(r)/Math.LN2),b()},E.thresholds=function(r){return arguments.length?(g="function"==typeof r?r:Array.isArray(r)?o(t.call(r)):o(r),E):g},E.bandwidth=function(r){if(!arguments.length)return Math.sqrt(f*(f+1));if(!((r=+r)>=0))throw new Error("invalid bandwidth");return f=(Math.sqrt(4*r*r+1)-1)/2,b()},E},r.contours=h}));

----------------------------------------
File: ./animations/node_modules/d3-contour/README.md
----------------------------------------
# d3-contour

This library computes contour polygons by applying [marching squares](https://en.wikipedia.org/wiki/Marching_squares) to a rectangular array of numeric values. For example, here is Maungawhau’s topology (the classic `volcano` dataset and `terrain.colors` from R):

[<img alt="Volcano Contours" src="./img/volcano.gif" width="420" height="295">](https://observablehq.com/@d3/volcano-contours)

For each [threshold value](#contours_thresholds), the [contour generator](#_contours) constructs a GeoJSON MultiPolygon geometry object representing the area where the input values are greater than or equal to the threshold value. The geometry is in planar coordinates, where ⟨<i>i</i> + 0.5, <i>j</i> + 0.5⟩ corresponds to element <i>i</i> + <i>jn</i> in the input values array. Here is an example that loads a GeoTIFF of surface temperatures, and another that blurs a noisy monochrome PNG to produce smooth contours of cloud fraction:

[<img alt="GeoTiff Contours" src="./img/temperature.png" width="420" height="219">](https://observablehq.com/@d3/geotiff-contours)
[<img alt="Cloud Contours" src="./img/clouds.png" width="420" height="219">](https://observablehq.com/@d3/cloud-contours)

Since the contour polygons are GeoJSON, you can transform and display them using standard tools; see [d3.geoPath](https://github.com/d3/d3-geo/blob/main/README.md#geoPath), [d3.geoProject](https://github.com/d3/d3-geo-projection/blob/main/README.md#geoProject) and [d3.geoStitch](https://github.com/d3/d3-geo-projection/blob/main/README.md#geoStitch), for example. Here the above contours of surface temperature are displayed in the Natural Earth projection:

[<img alt="GeoTiff Contours II" src="./img/reprojection.png" width="420" height="219">](https://observablehq.com/@d3/geotiff-contours-ii)

Contour plots can also visualize continuous functions by sampling. Here is the Goldstein–Price function (a test function for global optimization) and a trippy animation of *sin*(*x* + *y*)*sin*(*x* - *y*):

[<img alt="Contours" src="./img/goldstein-price.png" width="420" height="219">](https://observablehq.com/@d3/contours)
[<img alt="Animated Contours" src="./img/sin-cos.png" width="420" height="219">](https://observablehq.com/@d3/animated-contours)

Contours can also show the [estimated density](#density-estimation) of point clouds, which is especially useful to avoid overplotting in large datasets. This library implements fast two-dimensional kernel density estimation; see [d3.contourDensity](#contourDensity). Here is a scatterplot showing the relationship between the idle duration and eruption duration for Old Faithful:

[<img alt="Density Contours" src="./img/faithful.png" width="420" height="219">](https://observablehq.com/@d3/density-contours)

And here is a density contour plot showing the relationship between the weight and price of 53,940 diamonds:

[<img alt="Density Contours" src="./img/diamonds.png" width="420" height="420">](https://observablehq.com/@d3/density-contours)

## Installing

If you use npm, `npm install d3-contour`. You can also download the [latest release on GitHub](https://github.com/d3/d3-contour/releases/latest). For vanilla HTML in modern browsers, import d3-contour from jsDelivr:

```html
<script type="module">

import {contours} from "https://cdn.jsdelivr.net/npm/d3-contour@4/+esm";

const c = contours(values);

</script>
```

For legacy environments, you can load d3-contour’s UMD bundle; a `d3` global is exported:

```html
<script src="https://cdn.jsdelivr.net/npm/d3-array@3"></script>
<script src="https://cdn.jsdelivr.net/npm/d3-contour@4"></script>
<script>

// Populate a grid of n×m values where -2 ≤ x ≤ 2 and -2 ≤ y ≤ 1.
const n = 256, m = 256, values = new Array(n * m);
for (let j = 0.5, k = 0; j < m; ++j) {
  for (let i = 0.5; i < n; ++i, ++k) {
    values[k] = goldsteinPrice(i / n * 4 - 2, 1 - j / m * 3);
  }
}

// Compute the contour polygons at log-spaced intervals; returns an array of MultiPolygon.
const contours = d3.contours()
    .size([n, m])
    .thresholds(Array.from({ length: 19 }, (_, i) => Math.pow(2, i + 2)))
    (values);

// See https://en.wikipedia.org/wiki/Test_functions_for_optimization
function goldsteinPrice(x, y) {
  return (1 + Math.pow(x + y + 1, 2) * (19 - 14 * x + 3 * x * x - 14 * y + 6 * x * x + 3 * y * y))
      * (30 + Math.pow(2 * x - 3 * y, 2) * (18 - 32 * x + 12 * x * x + 48 * y - 36 * x * y + 27 * y * y));
}

</script>
```

## API Reference

<a name="contours" href="#contours">#</a> d3.<b>contours</b>() · [Source](./src/contours.js), [Examples](https://observablehq.com/collection/@d3/d3-contour)

Constructs a new contour generator with the default settings.

<a name="_contours" href="#_contours">#</a> <i>contours</i>(<i>values</i>) · [Source](./src/contours.js)

Computes the contours for the given array of *values*, returning an array of [GeoJSON](http://geojson.org/geojson-spec.html) [MultiPolygon](http://geojson.org/geojson-spec.html#multipolygon) [geometry objects](http://geojson.org/geojson-spec.html#geometry-objects). Each geometry object represents the area where the input <i>values</i> are greater than or equal to the corresponding [threshold value](#contours_thresholds); the threshold value for each geometry object is exposed as <i>geometry</i>.value.

The input *values* must be an array of length <i>n</i>×<i>m</i> where [<i>n</i>, <i>m</i>] is the contour generator’s [size](#contours_size); furthermore, each <i>values</i>[<i>i</i> + <i>jn</i>] must represent the value at the position ⟨<i>i</i>, <i>j</i>⟩. For example, to construct a 256×256 grid for the [Goldstein–Price function](https://en.wikipedia.org/wiki/Test_functions_for_optimization) where -2 ≤ <i>x</i> ≤ 2 and -2 ≤ <i>y</i> ≤ 1:

```js
var n = 256, m = 256, values = new Array(n * m);
for (var j = 0.5, k = 0; j < m; ++j) {
  for (var i = 0.5; i < n; ++i, ++k) {
    values[k] = goldsteinPrice(i / n * 4 - 2, 1 - j / m * 3);
  }
}

function goldsteinPrice(x, y) {
  return (1 + Math.pow(x + y + 1, 2) * (19 - 14 * x + 3 * x * x - 14 * y + 6 * x * x + 3 * y * y))
      * (30 + Math.pow(2 * x - 3 * y, 2) * (18 - 32 * x + 12 * x * x + 48 * y - 36 * x * y + 27 * y * y));
}
```

The returned geometry objects are typically passed to [d3.geoPath](https://github.com/d3/d3-geo/blob/main/README.md#geoPath) to display, using null or [d3.geoIdentity](https://github.com/d3/d3-geo/blob/main/README.md#geoIdentity) as the associated projection.

<a name="contours_contour" href="#contours_contour">#</a> <i>contours</i>.<b>contour</b>(<i>values</i>, <i>threshold</i>) · [Source](./src/contours.js), [Examples](https://observablehq.com/@d3/animated-contours)

Computes a single contour, returning a [GeoJSON](http://geojson.org/geojson-spec.html) [MultiPolygon](http://geojson.org/geojson-spec.html#multipolygon) [geometry object](http://geojson.org/geojson-spec.html#geometry-objects) representing the area where the input <i>values</i> are greater than or equal to the given [*threshold* value](#contours_thresholds); the threshold value for each geometry object is exposed as <i>geometry</i>.value.

The input *values* must be an array of length <i>n</i>×<i>m</i> where [<i>n</i>, <i>m</i>] is the contour generator’s [size](#contours_size); furthermore, each <i>values</i>[<i>i</i> + <i>jn</i>] must represent the value at the position ⟨<i>i</i>, <i>j</i>⟩. See [*contours*](#_contours) for an example.

<a name="contours_size" href="#contours_size">#</a> <i>contours</i>.<b>size</b>([<i>size</i>]) · [Source](./src/contours.js), [Examples](https://observablehq.com/@d3/animated-contours)

If *size* is specified, sets the expected size of the input *values* grid to the [contour generator](#_contour) and returns the contour generator. The *size* is specified as an array \[<i>n</i>, <i>m</i>\] where <i>n</i> is the number of columns in the grid and <i>m</i> is the number of rows; *n* and *m* must be positive integers. If *size* is not specified, returns the current size which defaults to [1, 1].

<a name="contours_smooth" href="#contours_smooth">#</a> <i>contours</i>.<b>smooth</b>([<i>smooth</i>]) · [Source](./src/contours.js), [Examples](https://observablehq.com/@d3/contours-smooth)

If *smooth* is specified, sets whether or not the generated contour polygons are smoothed using linear interpolation. If *smooth* is not specified, returns the current smoothing flag, which defaults to true.

<a name="contours_thresholds" href="#contours_thresholds">#</a> <i>contours</i>.<b>thresholds</b>([<i>thresholds</i>]) · [Source](./src/contours.js), [Examples](https://observablehq.com/@d3/volcano-contours)

If *thresholds* is specified, sets the threshold generator to the specified function or array and returns this contour generator. If *thresholds* is not specified, returns the current threshold generator, which by default implements [Sturges’ formula](https://github.com/d3/d3-array/blob/main/README.md#thresholdSturges).

Thresholds are defined as an array of values [*x0*, *x1*, …]. The first [generated contour](#_contour) corresponds to the area where the input values are greater than or equal to *x0*; the second contour corresponds to the area where the input values are greater than or equal to *x1*, and so on. Thus, there is exactly one generated MultiPolygon geometry object for each specified threshold value; the threshold value is exposed as <i>geometry</i>.value.

If a *count* is specified instead of an array of *thresholds*, then the input values’ [extent](https://github.com/d3/d3-array/blob/main/README.md#extent) will be uniformly divided into approximately *count* bins; see [d3.ticks](https://github.com/d3/d3-array/blob/main/README.md#ticks).

### Density Estimation

<a name="contourDensity" href="#contourDensity">#</a> d3.<b>contourDensity</b>() · [Source](./src/density.js), [Examples](https://observablehq.com/@d3/density-contours)

Constructs a new density estimator with the default settings.

<a name="_density" href="#_density">#</a> <i>density</i>(<i>data</i>) · [Source](./src/density.js)

Estimates the density contours for the given array of *data*, returning an array of [GeoJSON](http://geojson.org/geojson-spec.html) [MultiPolygon](http://geojson.org/geojson-spec.html#multipolygon) [geometry objects](http://geojson.org/geojson-spec.html#geometry-objects). Each geometry object represents the area where the estimated number of points per square pixel is greater than or equal to the corresponding [threshold value](#density_thresholds); the threshold value for each geometry object is exposed as <i>geometry</i>.value. The returned geometry objects are typically passed to [d3.geoPath](https://github.com/d3/d3-geo/blob/main/README.md#geoPath) to display, using null or [d3.geoIdentity](https://github.com/d3/d3-geo/blob/main/README.md#geoIdentity) as the associated projection. See also [d3.contours](#contours).

The *x*- and *y*-coordinate for each data point are computed using [*density*.x](#density_x) and [*density*.y](#density_y). In addition, [*density*.weight](#density_weight) indicates the relative contribution of each data point (default 1). The generated contours are only accurate within the estimator’s [defined size](#density_size).

<a name="density_x" href="#density_x">#</a> <i>density</i>.<b>x</b>([<i>x</i>]) · [Source](./src/density.js), [Examples](https://observablehq.com/@d3/density-contours)

If *x* is specified, sets the *x*-coordinate accessor. If *x* is not specified, returns the current *x*-coordinate accessor, which defaults to:

```js
function x(d) {
  return d[0];
}
```

<a name="density_y" href="#density_y">#</a> <i>density</i>.<b>y</b>([<i>y</i>]) · [Source](./src/density.js), [Examples](https://observablehq.com/@d3/density-contours)

If *y* is specified, sets the *y*-coordinate accessor. If *y* is not specified, returns the current *y*-coordinate accessor, which defaults to:

```js
function y(d) {
  return d[1];
}
```

<a name="density_weight" href="#density_weight">#</a> <i>density</i>.<b>weight</b>([<i>weight</i>]) · [Source](./src/density.js)<!-- , [Examples](TBD) -->

If *weight* is specified, sets the accessor for point weights. If *weight* is not specified, returns the current point weight accessor, which defaults to:

```js
function weight() {
  return 1;
}
```

<a name="density_size" href="#density_size">#</a> <i>density</i>.<b>size</b>([<i>size</i>]) · [Source](./src/density.js), [Examples](https://observablehq.com/@d3/density-contours)

If *size* is specified, sets the size of the density estimator to the specified bounds and returns the estimator. The *size* is specified as an array \[<i>width</i>, <i>height</i>\], where <i>width</i> is the maximum *x*-value and <i>height</i> is the maximum *y*-value. If *size* is not specified, returns the current size which defaults to [960, 500]. The [estimated density contours](#_density) are only accurate within the defined size.

<a name="density_cellSize" href="#density_cellSize">#</a> <i>density</i>.<b>cellSize</b>([<i>cellSize</i>]) · [Source](./src/density.js)<!-- , [Examples](TBD) -->

If *cellSize* is specified, sets the size of individual cells in the underlying bin grid to the specified positive integer and returns the estimator. If *cellSize* is not specified, returns the current cell size, which defaults to 4. The cell size is rounded down to the nearest power of two. Smaller cells produce more detailed contour polygons, but are more expensive to compute.

<a name="density_thresholds" href="#density_thresholds">#</a> <i>density</i>.<b>thresholds</b>([<i>thresholds</i>]) · [Source](./src/density.js), [Examples](https://observablehq.com/@d3/density-contours)

If *thresholds* is specified, sets the threshold generator to the specified function or array and returns this contour generator. If *thresholds* is not specified, returns the current threshold generator, which by default generates about twenty nicely-rounded density thresholds.

Thresholds are defined as an array of values [*x0*, *x1*, …]. The first [generated density contour](#_density) corresponds to the area where the estimated density is greater than or equal to *x0*; the second contour corresponds to the area where the estimated density is greater than or equal to *x1*, and so on. Thus, there is exactly one generated MultiPolygon geometry object for each specified threshold value; the threshold value is exposed as <i>geometry</i>.value. The first value *x0* should typically be greater than zero.

If a *count* is specified instead of an array of *thresholds*, then approximately *count* uniformly-spaced nicely-rounded thresholds will be generated; see [d3.ticks](https://github.com/d3/d3-array/blob/main/README.md#ticks).

<a name="density_bandwidth" href="#density_bandwidth">#</a> <i>density</i>.<b>bandwidth</b>([<i>bandwidth</i>]) · [Source](./src/density.js), [Examples](https://observablehq.com/@d3/density-contours)

If *bandwidth* is specified, sets the bandwidth (the standard deviation) of the Gaussian kernel and returns the estimate. If *bandwidth* is not specified, returns the current bandwidth, which defaults to 20.4939…. The specified *bandwidth* is currently rounded to the nearest supported value by this implementation, and must be nonnegative.

<a name="density_contours" href="#density_contours">#</a> <i>density</i>.<b>contours</b>(<i>data</i>) · [Source](./src/density.js), [Examples](https://observablehq.com/@d3/density-contours-data)

Return a *contour*(*value*) function that can be used to compute an arbitrary contour on the given data without needing to recompute the underlying grid. The returned *contour* function also exposes a *contour*.max value which represents the maximum density of the grid.

----------------------------------------
File: ./animations/node_modules/d3-contour/src/contours.js
----------------------------------------
import {extent, nice, thresholdSturges, ticks} from "d3-array";
import {slice} from "./array.js";
import ascending from "./ascending.js";
import area from "./area.js";
import constant from "./constant.js";
import contains from "./contains.js";
import noop from "./noop.js";

var cases = [
  [],
  [[[1.0, 1.5], [0.5, 1.0]]],
  [[[1.5, 1.0], [1.0, 1.5]]],
  [[[1.5, 1.0], [0.5, 1.0]]],
  [[[1.0, 0.5], [1.5, 1.0]]],
  [[[1.0, 1.5], [0.5, 1.0]], [[1.0, 0.5], [1.5, 1.0]]],
  [[[1.0, 0.5], [1.0, 1.5]]],
  [[[1.0, 0.5], [0.5, 1.0]]],
  [[[0.5, 1.0], [1.0, 0.5]]],
  [[[1.0, 1.5], [1.0, 0.5]]],
  [[[0.5, 1.0], [1.0, 0.5]], [[1.5, 1.0], [1.0, 1.5]]],
  [[[1.5, 1.0], [1.0, 0.5]]],
  [[[0.5, 1.0], [1.5, 1.0]]],
  [[[1.0, 1.5], [1.5, 1.0]]],
  [[[0.5, 1.0], [1.0, 1.5]]],
  []
];

export default function() {
  var dx = 1,
      dy = 1,
      threshold = thresholdSturges,
      smooth = smoothLinear;

  function contours(values) {
    var tz = threshold(values);

    // Convert number of thresholds into uniform thresholds.
    if (!Array.isArray(tz)) {
      const e = extent(values, finite);
      tz = ticks(...nice(e[0], e[1], tz), tz);
      while (tz[tz.length - 1] >= e[1]) tz.pop();
      while (tz[1] < e[0]) tz.shift();
    } else {
      tz = tz.slice().sort(ascending);
    }

    return tz.map(value => contour(values, value));
  }

  // Accumulate, smooth contour rings, assign holes to exterior rings.
  // Based on https://github.com/mbostock/shapefile/blob/v0.6.2/shp/polygon.js
  function contour(values, value) {
    const v = value == null ? NaN : +value;
    if (isNaN(v)) throw new Error(`invalid value: ${value}`);

    var polygons = [],
        holes = [];

    isorings(values, v, function(ring) {
      smooth(ring, values, v);
      if (area(ring) > 0) polygons.push([ring]);
      else holes.push(ring);
    });

    holes.forEach(function(hole) {
      for (var i = 0, n = polygons.length, polygon; i < n; ++i) {
        if (contains((polygon = polygons[i])[0], hole) !== -1) {
          polygon.push(hole);
          return;
        }
      }
    });

    return {
      type: "MultiPolygon",
      value: value,
      coordinates: polygons
    };
  }

  // Marching squares with isolines stitched into rings.
  // Based on https://github.com/topojson/topojson-client/blob/v3.0.0/src/stitch.js
  function isorings(values, value, callback) {
    var fragmentByStart = new Array,
        fragmentByEnd = new Array,
        x, y, t0, t1, t2, t3;

    // Special case for the first row (y = -1, t2 = t3 = 0).
    x = y = -1;
    t1 = above(values[0], value);
    cases[t1 << 1].forEach(stitch);
    while (++x < dx - 1) {
      t0 = t1, t1 = above(values[x + 1], value);
      cases[t0 | t1 << 1].forEach(stitch);
    }
    cases[t1 << 0].forEach(stitch);

    // General case for the intermediate rows.
    while (++y < dy - 1) {
      x = -1;
      t1 = above(values[y * dx + dx], value);
      t2 = above(values[y * dx], value);
      cases[t1 << 1 | t2 << 2].forEach(stitch);
      while (++x < dx - 1) {
        t0 = t1, t1 = above(values[y * dx + dx + x + 1], value);
        t3 = t2, t2 = above(values[y * dx + x + 1], value);
        cases[t0 | t1 << 1 | t2 << 2 | t3 << 3].forEach(stitch);
      }
      cases[t1 | t2 << 3].forEach(stitch);
    }

    // Special case for the last row (y = dy - 1, t0 = t1 = 0).
    x = -1;
    t2 = values[y * dx] >= value;
    cases[t2 << 2].forEach(stitch);
    while (++x < dx - 1) {
      t3 = t2, t2 = above(values[y * dx + x + 1], value);
      cases[t2 << 2 | t3 << 3].forEach(stitch);
    }
    cases[t2 << 3].forEach(stitch);

    function stitch(line) {
      var start = [line[0][0] + x, line[0][1] + y],
          end = [line[1][0] + x, line[1][1] + y],
          startIndex = index(start),
          endIndex = index(end),
          f, g;
      if (f = fragmentByEnd[startIndex]) {
        if (g = fragmentByStart[endIndex]) {
          delete fragmentByEnd[f.end];
          delete fragmentByStart[g.start];
          if (f === g) {
            f.ring.push(end);
            callback(f.ring);
          } else {
            fragmentByStart[f.start] = fragmentByEnd[g.end] = {start: f.start, end: g.end, ring: f.ring.concat(g.ring)};
          }
        } else {
          delete fragmentByEnd[f.end];
          f.ring.push(end);
          fragmentByEnd[f.end = endIndex] = f;
        }
      } else if (f = fragmentByStart[endIndex]) {
        if (g = fragmentByEnd[startIndex]) {
          delete fragmentByStart[f.start];
          delete fragmentByEnd[g.end];
          if (f === g) {
            f.ring.push(end);
            callback(f.ring);
          } else {
            fragmentByStart[g.start] = fragmentByEnd[f.end] = {start: g.start, end: f.end, ring: g.ring.concat(f.ring)};
          }
        } else {
          delete fragmentByStart[f.start];
          f.ring.unshift(start);
          fragmentByStart[f.start = startIndex] = f;
        }
      } else {
        fragmentByStart[startIndex] = fragmentByEnd[endIndex] = {start: startIndex, end: endIndex, ring: [start, end]};
      }
    }
  }

  function index(point) {
    return point[0] * 2 + point[1] * (dx + 1) * 4;
  }

  function smoothLinear(ring, values, value) {
    ring.forEach(function(point) {
      var x = point[0],
          y = point[1],
          xt = x | 0,
          yt = y | 0,
          v1 = valid(values[yt * dx + xt]);
      if (x > 0 && x < dx && xt === x) {
        point[0] = smooth1(x, valid(values[yt * dx + xt - 1]), v1, value);
      }
      if (y > 0 && y < dy && yt === y) {
        point[1] = smooth1(y, valid(values[(yt - 1) * dx + xt]), v1, value);
      }
    });
  }

  contours.contour = contour;

  contours.size = function(_) {
    if (!arguments.length) return [dx, dy];
    var _0 = Math.floor(_[0]), _1 = Math.floor(_[1]);
    if (!(_0 >= 0 && _1 >= 0)) throw new Error("invalid size");
    return dx = _0, dy = _1, contours;
  };

  contours.thresholds = function(_) {
    return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), contours) : threshold;
  };

  contours.smooth = function(_) {
    return arguments.length ? (smooth = _ ? smoothLinear : noop, contours) : smooth === smoothLinear;
  };

  return contours;
}

// When computing the extent, ignore infinite values (as well as invalid ones).
function finite(x) {
  return isFinite(x) ? x : NaN;
}

// Is the (possibly invalid) x greater than or equal to the (known valid) value?
// Treat any invalid value as below negative infinity.
function above(x, value) {
  return x == null ? false : +x >= value;
}

// During smoothing, treat any invalid value as negative infinity.
function valid(v) {
  return v == null || isNaN(v = +v) ? -Infinity : v;
}

function smooth1(x, v0, v1, value) {
  const a = value - v0;
  const b = v1 - v0;
  const d = isFinite(a) || isFinite(b) ? a / b : Math.sign(a) / Math.sign(b);
  return isNaN(d) ? x : x + d - 0.5;
}

----------------------------------------
File: ./animations/node_modules/d3-contour/src/index.js
----------------------------------------
export {default as contours} from "./contours.js";
export {default as contourDensity} from "./density.js";

----------------------------------------
File: ./animations/node_modules/d3-contour/src/array.js
----------------------------------------
var array = Array.prototype;

export var slice = array.slice;

----------------------------------------
File: ./animations/node_modules/d3-contour/src/ascending.js
----------------------------------------
export default function(a, b) {
  return a - b;
}

----------------------------------------
File: ./animations/node_modules/d3-contour/src/constant.js
----------------------------------------
export default x => () => x;

----------------------------------------
File: ./animations/node_modules/d3-contour/src/area.js
----------------------------------------
export default function(ring) {
  var i = 0, n = ring.length, area = ring[n - 1][1] * ring[0][0] - ring[n - 1][0] * ring[0][1];
  while (++i < n) area += ring[i - 1][1] * ring[i][0] - ring[i - 1][0] * ring[i][1];
  return area;
}

----------------------------------------
File: ./animations/node_modules/d3-contour/src/contains.js
----------------------------------------
export default function(ring, hole) {
  var i = -1, n = hole.length, c;
  while (++i < n) if (c = ringContains(ring, hole[i])) return c;
  return 0;
}

function ringContains(ring, point) {
  var x = point[0], y = point[1], contains = -1;
  for (var i = 0, n = ring.length, j = n - 1; i < n; j = i++) {
    var pi = ring[i], xi = pi[0], yi = pi[1], pj = ring[j], xj = pj[0], yj = pj[1];
    if (segmentContains(pi, pj, point)) return 0;
    if (((yi > y) !== (yj > y)) && ((x < (xj - xi) * (y - yi) / (yj - yi) + xi))) contains = -contains;
  }
  return contains;
}

function segmentContains(a, b, c) {
  var i; return collinear(a, b, c) && within(a[i = +(a[0] === b[0])], c[i], b[i]);
}

function collinear(a, b, c) {
  return (b[0] - a[0]) * (c[1] - a[1]) === (c[0] - a[0]) * (b[1] - a[1]);
}

function within(p, q, r) {
  return p <= q && q <= r || r <= q && q <= p;
}

----------------------------------------
File: ./animations/node_modules/d3-contour/src/density.js
----------------------------------------
import {blur2, max, ticks} from "d3-array";
import {slice} from "./array.js";
import constant from "./constant.js";
import Contours from "./contours.js";

function defaultX(d) {
  return d[0];
}

function defaultY(d) {
  return d[1];
}

function defaultWeight() {
  return 1;
}

export default function() {
  var x = defaultX,
      y = defaultY,
      weight = defaultWeight,
      dx = 960,
      dy = 500,
      r = 20, // blur radius
      k = 2, // log2(grid cell size)
      o = r * 3, // grid offset, to pad for blur
      n = (dx + o * 2) >> k, // grid width
      m = (dy + o * 2) >> k, // grid height
      threshold = constant(20);

  function grid(data) {
    var values = new Float32Array(n * m),
        pow2k = Math.pow(2, -k),
        i = -1;

    for (const d of data) {
      var xi = (x(d, ++i, data) + o) * pow2k,
          yi = (y(d, i, data) + o) * pow2k,
          wi = +weight(d, i, data);
      if (wi && xi >= 0 && xi < n && yi >= 0 && yi < m) {
        var x0 = Math.floor(xi),
            y0 = Math.floor(yi),
            xt = xi - x0 - 0.5,
            yt = yi - y0 - 0.5;
        values[x0 + y0 * n] += (1 - xt) * (1 - yt) * wi;
        values[x0 + 1 + y0 * n] += xt * (1 - yt) * wi;
        values[x0 + 1 + (y0 + 1) * n] += xt * yt * wi;
        values[x0 + (y0 + 1) * n] += (1 - xt) * yt * wi;
      }
    }

    blur2({data: values, width: n, height: m}, r * pow2k);
    return values;
  }

  function density(data) {
    var values = grid(data),
        tz = threshold(values),
        pow4k = Math.pow(2, 2 * k);

    // Convert number of thresholds into uniform thresholds.
    if (!Array.isArray(tz)) {
      tz = ticks(Number.MIN_VALUE, max(values) / pow4k, tz);
    }

    return Contours()
        .size([n, m])
        .thresholds(tz.map(d => d * pow4k))
      (values)
        .map((c, i) => (c.value = +tz[i], transform(c)));
  }

  density.contours = function(data) {
    var values = grid(data),
        contours = Contours().size([n, m]),
        pow4k = Math.pow(2, 2 * k),
        contour = value => {
          value = +value;
          var c = transform(contours.contour(values, value * pow4k));
          c.value = value; // preserve exact threshold value
          return c;
        };
    Object.defineProperty(contour, "max", {get: () => max(values) / pow4k});
    return contour;
  };

  function transform(geometry) {
    geometry.coordinates.forEach(transformPolygon);
    return geometry;
  }

  function transformPolygon(coordinates) {
    coordinates.forEach(transformRing);
  }

  function transformRing(coordinates) {
    coordinates.forEach(transformPoint);
  }

  // TODO Optimize.
  function transformPoint(coordinates) {
    coordinates[0] = coordinates[0] * Math.pow(2, k) - o;
    coordinates[1] = coordinates[1] * Math.pow(2, k) - o;
  }

  function resize() {
    o = r * 3;
    n = (dx + o * 2) >> k;
    m = (dy + o * 2) >> k;
    return density;
  }

  density.x = function(_) {
    return arguments.length ? (x = typeof _ === "function" ? _ : constant(+_), density) : x;
  };

  density.y = function(_) {
    return arguments.length ? (y = typeof _ === "function" ? _ : constant(+_), density) : y;
  };

  density.weight = function(_) {
    return arguments.length ? (weight = typeof _ === "function" ? _ : constant(+_), density) : weight;
  };

  density.size = function(_) {
    if (!arguments.length) return [dx, dy];
    var _0 = +_[0], _1 = +_[1];
    if (!(_0 >= 0 && _1 >= 0)) throw new Error("invalid size");
    return dx = _0, dy = _1, resize();
  };

  density.cellSize = function(_) {
    if (!arguments.length) return 1 << k;
    if (!((_ = +_) >= 1)) throw new Error("invalid cell size");
    return k = Math.floor(Math.log(_) / Math.LN2), resize();
  };

  density.thresholds = function(_) {
    return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), density) : threshold;
  };

  density.bandwidth = function(_) {
    if (!arguments.length) return Math.sqrt(r * (r + 1));
    if (!((_ = +_) >= 0)) throw new Error("invalid bandwidth");
    return r = (Math.sqrt(4 * _ * _ + 1) - 1) / 2, resize();
  };

  return density;
}

----------------------------------------
File: ./animations/node_modules/d3-contour/src/noop.js
----------------------------------------
export default function() {}

----------------------------------------
File: ./animations/node_modules/@types/d3-shape/README.md
----------------------------------------
# Installation
> `npm install --save @types/d3-shape`

# Summary
This package contains type definitions for d3-shape (https://github.com/d3/d3-shape/).

# Details
Files were exported from https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/d3-shape.

### Additional Details
 * Last updated: Mon, 06 Jan 2025 00:46:49 GMT
 * Dependencies: [@types/d3-path](https://npmjs.com/package/@types/d3-path)

# Credits
These definitions were written by [Tom Wanzek](https://github.com/tomwanzek), [Alex Ford](https://github.com/gustavderdrache), [Boris Yankov](https://github.com/borisyankov), [denisname](https://github.com/denisname), [Nathan Bierema](https://github.com/Methuselah96), and [Fil](https://github.com/Fil).

----------------------------------------
File: ./animations/node_modules/@types/d3-shape/index.d.ts
----------------------------------------
// Last module patch version validated against: 3.1.0

import { Path } from "d3-path";

declare global {
    interface CanvasRenderingContext2D {} // eslint-disable-line @typescript-eslint/no-empty-interface
}

// -----------------------------------------------------------------------------------
// Shared Types and Interfaces
// -----------------------------------------------------------------------------------

/**
 * @deprecated
 * This interface is used to bridge the gap between two incompatible versions of TypeScript (see [#25944](https://github.com/Microsoft/TypeScript/pull/25944)).
 * Use `CanvasPathMethods` instead with TS <= 3.0 and `CanvasPath` with TS >= 3.1.
 */
export interface CanvasPath_D3Shape {
    arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, anticlockwise?: boolean): void;
    arcTo(x1: number, y1: number, x2: number, y2: number, radius: number): void;
    bezierCurveTo(cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number): void;
    closePath(): void;
    ellipse(
        x: number,
        y: number,
        radiusX: number,
        radiusY: number,
        rotation: number,
        startAngle: number,
        endAngle: number,
        anticlockwise?: boolean,
    ): void;
    lineTo(x: number, y: number): void;
    moveTo(x: number, y: number): void;
    quadraticCurveTo(cpx: number, cpy: number, x: number, y: number): void;
    rect(x: number, y: number, w: number, h: number): void;
}

// -----------------------------------------------------------------------------------
// Arc Generator
// -----------------------------------------------------------------------------------

/**
 * Interface corresponding to the minimum data type assumed by the accessor functions of the Arc generator.
 */
export interface DefaultArcObject {
    /**
     * Inner radius of arc.
     */
    innerRadius: number;
    /**
     * Outer radius of arc.
     */
    outerRadius: number;
    /**
     * Start angle of arc. The angle is specified in radians, with 0 at -y (12 o’clock) and positive angles proceeding clockwise.
     */
    startAngle: number;
    /**
     * End angle of arc. The angle is specified in radians, with 0 at -y (12 o’clock) and positive angles proceeding clockwise.
     */
    endAngle: number;
    /**
     * Optional. Pad angle of arc in radians.
     */
    padAngle?: number | undefined;
}

/**
 * The arc generator produces a circular or annular sector, as in a pie or donut chart.
 *
 * If the difference between the start and end angles (the angular span) is greater than τ, the arc generator will produce a complete circle or annulus.
 * If it is less than τ, arcs may have rounded corners and angular padding. Arcs are always centered at ⟨0,0⟩; use a transform (see: SVG, Canvas) to move the arc to a different position.
 *
 * See also the pie generator, which computes the necessary angles to represent an array of data as a pie or donut chart; these angles can then be passed to an arc generator.
 *
 * The first generic corresponds to the type of the "this" context within which the arc generator and its accessor functions will be invoked.
 *
 * The second generic corresponds to the datum type for which the arc is to be generated.
 */
export interface Arc<This, Datum> {
    /**
     * Generates an arc for the given arguments.
     *
     * IMPORTANT: If the rendering context of the arc generator is null,
     * then the arc is returned as a path data string.
     *
     * The "this" context within which this function is invoked, will be the context within which the accessor methods of the generator are invoked.
     * All arguments passed into this function, will be passed to the accessor functions of the generator.
     *
     * @param d The datum for which the arc is to be generated.
     */
    (this: This, d: Datum, ...args: any[]): string | null;
    /**
     * Generates an arc for the given arguments.
     *
     * IMPORTANT: If the arc generator has been configured with a rendering context,
     * then the arc is rendered to this context as a sequence of path method calls and this function returns void.
     *
     * The "this" context within which this function is invoked, will be the context within which the accessor methods of the generator are invoked.
     * All arguments passed into this function, will be passed to the accessor functions of the generator.
     *
     * @param d The datum for which the arc is to be generated.
     */
    (this: This, d: Datum, ...args: any[]): void;

    /**
     * Computes the midpoint [x, y] of the center line of the arc that would be generated by the given arguments.
     *
     * To be consistent with the generated arc, the accessors must be deterministic, i.e., return the same value given the same arguments.
     * The midpoint is defined as (startAngle + endAngle) / 2 and (innerRadius + outerRadius) / 2.
     *
     * Note that this is not the geometric center of the arc, which may be outside the arc;
     * this method is merely a convenience for positioning labels.
     *
     * The method is invoked in the same "this" context as the generator was invoked in and
     * receives the same arguments that are passed into the arc generator.
     *
     * @param d The datum for which the arc is to be generated.
     */
    centroid(d: Datum, ...args: any[]): [number, number];

    /**
     * Returns the current inner radius accessor, which defaults to a function returning the innerRadius property
     * of the first argument passed into it.
     */
    innerRadius(): (this: This, d: Datum, ...args: any[]) => number;
    /**
     * Sets the inner radius to the specified number and returns this arc generator.
     *
     * Specifying the inner radius as a function is useful for constructing a stacked polar bar chart, often in conjunction with a sqrt scale.
     * More commonly, a constant inner radius is used for a donut or pie chart. If the outer radius is smaller than the inner radius, the inner and outer radii are swapped.
     * A negative value is treated as zero.
     *
     * @param radius Constant radius.
     */
    innerRadius(radius: number): this;
    /**
     * Sets the inner radius to the specified function and returns this arc generator.
     *
     * Specifying the inner radius as a function is useful for constructing a stacked polar bar chart, often in conjunction with a sqrt scale.
     * More commonly, a constant inner radius is used for a donut or pie chart. If the outer radius is smaller than the inner radius, the inner and outer radii are swapped.
     * A negative value is treated as zero.
     *
     * @param radius An accessor function returning a number to be used as a radius. The accessor function is invoked in the same "this" context as the generator was invoked in and
     * receives the same arguments that were passed into the arc generator.
     */
    innerRadius(radius: (this: This, d: Datum, ...args: any[]) => number): this;

    /**
     * Returns the current outer radius accessor, which defaults to a function returning the outerRadius property
     * of the first argument passed into it.
     */
    outerRadius(): (this: This, d: Datum, ...args: any[]) => number;
    /**
     * Sets the outer radius to the specified number and returns this arc generator.
     *
     * Specifying the outer radius as a function is useful for constructing a coxcomb or polar bar chart,
     * often in conjunction with a sqrt scale. More commonly, a constant outer radius is used for a pie or donut chart.
     * If the outer radius is smaller than the inner radius, the inner and outer radii are swapped.
     * A negative value is treated as zero.
     *
     * @param radius Constant radius.
     */
    outerRadius(radius: number): this;
    /**
     * Sets the outer radius to the specified function and returns this arc generator.
     *
     * Specifying the outer radius as a function is useful for constructing a coxcomb or polar bar chart,
     * often in conjunction with a sqrt scale. More commonly, a constant outer radius is used for a pie or donut chart.
     * If the outer radius is smaller than the inner radius, the inner and outer radii are swapped.
     * A negative value is treated as zero.
     *
     * @param radius An accessor function returning a number to be used as a radius. The accessor function is invoked in the same "this" context as the generator was invoked in and
     * receives the same arguments that were passed into the arc generator.
     */
    outerRadius(radius: (this: This, d: Datum, ...args: any[]) => number): this;

    /**
     * Returns the current corner radius accessor, which defaults to a function returning a constant value of zero.
     */
    cornerRadius(): (this: This, d: Datum, ...args: any[]) => number;
    /**
     * Sets the corner radius to the specified number and returns this arc generator.
     *
     * If the corner radius is greater than zero, the corners of the arc are rounded using circles of the given radius.
     * For a circular sector, the two outer corners are rounded; for an annular sector, all four corners are rounded.
     *
     * The corner radius may not be larger than (outerRadius - innerRadius) / 2.
     * In addition, for arcs whose angular span is less than π, the corner radius may be reduced as two adjacent rounded corners intersect.
     * This is occurs more often with the inner corners.
     *
     * @param radius Constant radius.
     */
    cornerRadius(radius: number): this;
    /**
     * Sets the corner radius to the specified function and returns this arc generator.
     *
     * The corner radius may not be larger than (outerRadius - innerRadius) / 2.
     * In addition, for arcs whose angular span is less than π, the corner radius may be reduced as two adjacent rounded corners intersect.
     * This is occurs more often with the inner corners.
     *
     * @param radius An accessor function returning a number to be used as a radius. The accessor function is invoked in the same "this" context as the generator was invoked in and
     * receives the same arguments that were passed into the arc generator.
     */
    cornerRadius(radius: (this: This, d: Datum, ...args: any[]) => number): this;

    /**
     * Returns the current start angle accessor, which defaults to a function returning the startAngle property
     * of the first argument passed into it.
     */
    startAngle(): (this: This, d: Datum, ...args: any[]) => number;
    /**
     * Sets the start angle to the specified number and returns this arc generator.
     *
     * The angle is specified in radians, with 0 at -y (12 o’clock) and positive angles proceeding clockwise.
     * If |endAngle - startAngle| ≥ τ, a complete circle or annulus is generated rather than a sector.
     *
     * @param angle Constant angle in radians.
     */
    startAngle(angle: number): this;
    /**
     * Sets the start angle to the specified function and returns this arc generator.
     *
     * The angle is specified in radians, with 0 at -y (12 o’clock) and positive angles proceeding clockwise.
     * If |endAngle - startAngle| ≥ τ, a complete circle or annulus is generated rather than a sector.
     *
     * @param angle An accessor function returning a number in radians to be used as an angle. The accessor function is invoked in the same "this" context as the generator was invoked in and
     * receives the same arguments that were passed into the arc generator.
     */
    startAngle(angle: (this: This, d: Datum, ...args: any[]) => number): this;

    /**
     * Returns the current end angle accessor, which defaults to a function returning the endAngle property
     * of the first argument passed into it.
     */
    endAngle(): (this: This, d: Datum, ...args: any[]) => number;
    /**
     * Sets the end angle to the specified number and returns this arc generator.
     *
     * The angle is specified in radians, with 0 at -y (12 o’clock) and positive angles proceeding clockwise.
     * If |endAngle - startAngle| ≥ τ, a complete circle or annulus is generated rather than a sector.
     *
     * @param angle Constant angle in radians.
     */
    endAngle(angle: number): this;
    /**
     * Sets the end angle to the specified function and returns this arc generator.
     *
     * The angle is specified in radians, with 0 at -y (12 o’clock) and positive angles proceeding clockwise.
     * If |endAngle - startAngle| ≥ τ, a complete circle or annulus is generated rather than a sector.
     *
     * @param angle An accessor function returning a number in radians to be used as an angle. The accessor function is invoked in the same "this" context as the generator was invoked in and
     * receives the same arguments that were passed into the arc generator.
     */
    endAngle(angle: (this: This, d: Datum, ...args: any[]) => number): this;

    /**
     * Returns the current pad angle accessor, which defaults to a function returning the padAngle property
     * of the first argument passed into it, or false if no data are passed in or the property is not defined.
     */
    padAngle(): (this: This, d: Datum, ...args: any[]) => number | undefined;
    /**
     * Sets the pad angle to the specified number and returns this arc generator.
     *
     * The pad angle is converted to a fixed linear distance separating adjacent arcs, defined as padRadius * padAngle. This distance is subtracted equally from the start and end of the arc.
     * If the arc forms a complete circle or annulus, as when |endAngle - startAngle| ≥ τ, the pad angle is ignored. If the inner radius or angular span is small relative to the pad angle,
     * it may not be possible to maintain parallel edges between adjacent arcs. In this case, the inner edge of the arc may collapse to a point, similar to a circular sector.
     * For this reason, padding is typically only applied to annular sectors (i.e., when innerRadius is positive).
     *
     * The recommended minimum inner radius when using padding is outerRadius * padAngle / sin(θ), where θ is the angular span of the smallest arc before padding.
     * For example, if the outer radius is 200 pixels and the pad angle is 0.02 radians, a reasonable θ is 0.04 radians, and a reasonable inner radius is 100 pixels.
     *
     * Often, the pad angle is not set directly on the arc generator, but is instead computed by the pie generator so as to ensure that the area of padded arcs is proportional to their value;
     * see pie.padAngle. See the pie padding animation for illustration.
     * If you apply a constant pad angle to the arc generator directly, it tends to subtract disproportionately from smaller arcs, introducing distortion.
     *
     * @param angle Constant angle in radians.
     */
    padAngle(angle: number | undefined): this;
    /**
     * Sets the pad angle to the specified function and returns this arc generator.
     *
     * The pad angle is converted to a fixed linear distance separating adjacent arcs, defined as padRadius * padAngle. This distance is subtracted equally from the start and end of the arc.
     * If the arc forms a complete circle or annulus, as when |endAngle - startAngle| ≥ τ, the pad angle is ignored. If the inner radius or angular span is small relative to the pad angle,
     * it may not be possible to maintain parallel edges between adjacent arcs. In this case, the inner edge of the arc may collapse to a point, similar to a circular sector.
     * For this reason, padding is typically only applied to annular sectors (i.e., when innerRadius is positive).
     *
     * The recommended minimum inner radius when using padding is outerRadius * padAngle / sin(θ), where θ is the angular span of the smallest arc before padding.
     * For example, if the outer radius is 200 pixels and the pad angle is 0.02 radians, a reasonable θ is 0.04 radians, and a reasonable inner radius is 100 pixels.
     *
     * Often, the pad angle is not set directly on the arc generator, but is instead computed by the pie generator so as to ensure that the area of padded arcs is proportional to their value;
     * see pie.padAngle. See the pie padding animation for illustration.
     * If you apply a constant pad angle to the arc generator directly, it tends to subtract disproportionately from smaller arcs, introducing distortion.
     *
     * @param angle An accessor function returning a number in radians to be used as an angle. The accessor function is invoked in the same "this" context as the generator was invoked in and
     * receives the same arguments that were passed into the arc generator.
     */
    padAngle(angle: (this: This, d: Datum, ...args: any[]) => number | undefined): this;

    /**
     * Returns the current pad radius accessor, which defaults to null, indicating that the pad radius should be automatically computed as sqrt(innerRadius * innerRadius + outerRadius * outerRadius).
     */
    padRadius(): ((this: This, d: Datum, ...args: any[]) => number) | null;
    /**
     * Sets the pad radius to the specified function or number and returns this arc generator.
     * The pad radius determines the fixed linear distance separating adjacent arcs, defined as padRadius * padAngle.
     */
    padRadius(radius: null | number | ((this: This, d: Datum, ...args: any[]) => number)): this;

    /**
     * Returns the current rendering context, which defaults to null.
     */
    context(): CanvasRenderingContext2D | null;
    /**
     * Sets the context and returns this arc generator.
     * If context is not specified, returns the current context, which defaults to null.
     */
    context(context: CanvasRenderingContext2D | null): this;
}

/**
 * Constructs a new arc generator with the default settings.
 *
 * Ensure that the accessors used with the arc generator correspond to the arguments passed into them,
 * or set them to constants as appropriate.
 */
export function arc(): Arc<any, DefaultArcObject>;
/**
 * Constructs a new arc generator with the default settings.
 *
 * Ensure that the accessors used with the arc generator correspond to the arguments passed into them,
 * or set them to constants as appropriate.
 *
 * The generic corresponds to the datum type representing a arc.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function arc<Datum>(): Arc<any, Datum>;
/**
 * Constructs a new arc generator with the default settings.
 *
 * Ensure that the accessors used with the arc generator correspond to the arguments passed into them,
 * or set them to constants as appropriate.
 *
 * The first generic corresponds to the type of the "this" context within which the arc generator and its accessor functions will be invoked.
 *
 * The second generic corresponds to the datum type representing a arc.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function arc<This, Datum>(): Arc<This, Datum>;

// -----------------------------------------------------------------------------------
// Pie Generator
// -----------------------------------------------------------------------------------

/**
 * Element of the Arc Datums Array created by invoking the Pie generator.
 *
 * The generic refers to the data type of an element in the input array passed into the Pie generator.
 */
export interface PieArcDatum<T> {
    /**
     * The input datum; the corresponding element in the input data array of the Pie generator.
     */
    data: T;
    /**
     * The numeric value of the arc.
     */
    value: number;
    /**
     * The zero-based sorted index of the arc.
     */
    index: number;
    /**
     * The start angle of the arc.
     * If the pie generator was configured to be used for the arc generator,
     * then the units are in radians with 0 at -y (12 o’clock) and positive angles proceeding clockwise.
     */
    startAngle: number;
    /**
     * The end angle of the arc.
     * If the pie generator was configured to be used for the arc generator,
     * then the units are in radians with 0 at -y (12 o’clock) and positive angles proceeding clockwise.
     */
    endAngle: number;
    /**
     * The pad angle of the arc. If the pie generator was configured to be used for the arc generator, than the units are in radians.
     */
    padAngle: number;
}

/**
 * The pie generator does not produce a shape directly, but instead computes the necessary angles to represent a tabular dataset as a pie or donut chart;
 * these angles can then be passed to an arc generator.
 *
 * The first generic corresponds to the type of the "this" context within which the pie generator and its accessor functions will be invoked.
 *
 * The second generic refers to the data type of an element in the input array passed into the Pie generator.
 */
export interface Pie<This, Datum> {
    /**
     * Generates a pie for the given array of data, returning an array of objects representing each datum’s arc angles.
     * Any additional arguments are arbitrary; they are simply propagated to the pie generator’s accessor functions along with the this object.
     * The length of the returned array is the same as data, and each element i in the returned array corresponds to the element i in the input data.
     *
     * This representation is designed to work with the arc generator’s default startAngle, endAngle and padAngle accessors.
     * The angular units are arbitrary, but if you plan to use the pie generator in conjunction with an arc generator,
     * you should specify angles in radians, with 0 at -y (12 o’clock) and positive angles proceeding clockwise.
     *
     * @param data Array of data elements.
     */
    (this: This, data: Datum[], ...args: any[]): Array<PieArcDatum<Datum>>;

    /**
     * Returns the current value accessor, which defaults to a function returning the first argument passed into it.
     * The default value accessor assumes that the input data are numbers, or that they are coercible to numbers using valueOf.
     */
    value(): (d: Datum, i: number, data: Datum[]) => number;
    /**
     * Sets the value accessor to use the specified constant number and returns this pie generator.
     *
     * @param value Constant value to be used.
     */
    value(value: number): this;
    /**
     * Sets the value accessor to use the specified function and returns this pie generator.
     *
     * When a pie is generated, the value accessor will be invoked for each element in the input data array.
     * The default value accessor assumes that the input data are numbers, or that they are coercible to numbers using valueOf.
     * If your data are not simply numbers, then you should specify an accessor that returns the corresponding numeric value for a given datum.
     *
     * @param value A value accessor function, which is invoked for each element in the input data array, being passed the element d, the index i, and the array data as three arguments.
     * It returns a numeric value.
     */
    value(value: (d: Datum, i: number, data: Datum[]) => number): this;

    /**
     * Returns the current data comparator, which defaults to null.
     */
    sort(): ((a: Datum, b: Datum) => number) | null;
    /**
     * Sets the data comparator to the specified function and returns this pie generator.
     *
     * If both the data comparator and the value comparator are null, then arcs are positioned in the original input order.
     * Otherwise, the data is sorted according to the data comparator, and the resulting order is used. Setting the data comparator implicitly sets the value comparator to null.
     *
     * Sorting does not affect the order of the generated arc array which is always in the same order as the input data array; it merely affects the computed angles of each arc.
     * The first arc starts at the start angle and the last arc ends at the end angle.
     *
     * @param comparator A compare function takes two arguments a and b, each elements from the input data array.
     * If the arc for a should be before the arc for b, then the comparator must return a number less than zero;
     * if the arc for a should be after the arc for b, then the comparator must return a number greater than zero;
     * returning zero means that the relative order of a and b is unspecified.
     */
    sort(comparator: (a: Datum, b: Datum) => number): this;
    /**
     * Sets the data comparator to null and returns this pie generator.
     *
     * If both the data comparator and the value comparator are null, then arcs are positioned in the original input order.
     *
     * @param comparator null, to set the pie generator to use the original input order or use the sortValues comparator, if any.
     */
    sort(comparator: null): this;

    /**
     * Returns the current value comparator, which defaults to descending value.
     */
    sortValues(): ((a: number, b: number) => number) | null;
    /**
     * Sets the value comparator to the specified function and returns this pie generator.
     *
     * If both the data comparator and the value comparator are null, then arcs are positioned in the original input order.
     * Otherwise, the data is sorted according to the data comparator, and the resulting order is used.
     * Setting the value comparator implicitly sets the data comparator to null.
     *
     * The value comparator is similar to the data comparator, except the two arguments a and b are values derived from the input data array using the value accessor, not the data elements.
     * If the arc for a should be before the arc for b, then the comparator must return a number less than zero;
     * if the arc for a should be after the arc for b, then the comparator must return a number greater than zero;
     * returning zero means that the relative order of a and b is unspecified.
     */
    sortValues(comparator: ((a: number, b: number) => number) | null): this;

    /**
     * Returns the current start angle accessor, which defaults to a function returning a constant zero.
     */
    startAngle(): (this: This, data: Datum[], ...args: any[]) => number;
    /**
     * Sets the overall start angle of the pie to the specified number and returns this pie generator.
     *
     * The default start angle is zero.
     *
     * The start angle here means the overall start angle of the pie, i.e., the start angle of the first arc.
     * The start angle accessor is invoked once, being passed the same arguments and this context as the pie generator.
     * The units of angle are arbitrary, but if you plan to use the pie generator in conjunction with an arc generator,
     * you should specify an angle in radians, with 0 at -y (12 o’clock) and positive angles proceeding clockwise.
     *
     * @param angle A constant angle.
     */
    startAngle(angle: number): this;
    /**
     * Sets the overall start angle of the pie to the specified function and returns this pie generator.
     *
     * The default start angle is zero.
     *
     * The start angle here means the overall start angle of the pie, i.e., the start angle of the first arc.
     * The start angle accessor is invoked once, being passed the same arguments and this context as the pie generator.
     * The units of angle are arbitrary, but if you plan to use the pie generator in conjunction with an arc generator,
     * you should specify an angle in radians, with 0 at -y (12 o’clock) and positive angles proceeding clockwise.
     *
     * @param angle An angle accessor function, which is invoked once, being passed the same arguments and this context as the pie generator.
     */
    startAngle(angle: (this: This, data: Datum[], ...args: any[]) => number): this;

    /**
     * Returns the current end angle accessor, which defaults to a function returning a constant 2*pi.
     */
    endAngle(): (this: This, data: Datum[], ...args: any[]) => number;
    /**
     * Sets the overall end angle of the pie to the specified number and returns this pie generator.
     *
     * The default end angle is 2*pi.
     *
     * The end angle here means the overall end angle of the pie, i.e., the end angle of the last arc.
     * The units of angle are arbitrary, but if you plan to use the pie generator in conjunction with an arc generator,
     * you should specify an angle in radians, with 0 at -y (12 o’clock) and positive angles proceeding clockwise.
     *
     * The value of the end angle is constrained to startAngle ± τ, such that |endAngle - startAngle| ≤ τ.
     *
     * @param angle A constant angle.
     */
    endAngle(angle: number): this;
    /**
     * Sets the overall end angle of the pie to the specified function and returns this pie generator.
     *
     * The default end angle is 2*pi.
     *
     * The end angle here means the overall end angle of the pie, i.e., the end angle of the last arc.
     * The end angle accessor is invoked once, being passed the same arguments and this context as the pie generator.
     * The units of angle are arbitrary, but if you plan to use the pie generator in conjunction with an arc generator,
     * you should specify an angle in radians, with 0 at -y (12 o’clock) and positive angles proceeding clockwise.
     *
     * The value of the end angle is constrained to startAngle ± τ, such that |endAngle - startAngle| ≤ τ.
     *
     * @param angle An angle accessor function, which is invoked once, being passed the same arguments and this context as the pie generator.
     */
    endAngle(angle: (this: This, data: Datum[], ...args: any[]) => number): this;

    /**
     * Returns the current pad angle accessor, which defaults to a function returning a constant zero.
     */
    padAngle(): (this: This, data: Datum[], ...args: any[]) => number;
    /**
     * Sets the pad angle to the specified number and returns this pie generator.
     *
     * The pad angle here means the angular separation between each adjacent arc.
     * The total amount of padding reserved is the specified angle times the number of elements in the input data array, and at most |endAngle - startAngle|;
     * the remaining space is then divided proportionally by value such that the relative area of each arc is preserved.
     * The units of angle are arbitrary, but if you plan to use the pie generator in conjunction with an arc generator, you should specify an angle in radians.
     *
     * @param angle A constant angle.
     */
    padAngle(angle: number): this;
    /**
     * Sets the pad angle to the specified function and returns this pie generator.
     *
     * The pad angle here means the angular separation between each adjacent arc.
     * The total amount of padding reserved is the specified angle times the number of elements in the input data array, and at most |endAngle - startAngle|;
     * the remaining space is then divided proportionally by value such that the relative area of each arc is preserved.
     * The pad angle accessor is invoked once, being passed the same arguments and this context as the pie generator.
     * The units of angle are arbitrary, but if you plan to use the pie generator in conjunction with an arc generator, you should specify an angle in radians.
     *
     * @param angle An angle accessor function, which is invoked once, being passed the same arguments and this context as the pie generator.
     */
    padAngle(angle: (this: This, data: Datum[], ...args: any[]) => number): this;
}

/**
 * Constructs a new pie generator with the default settings.
 *
 * Ensure that the accessors used with the pie generator correspond to the arguments passed into them,
 * or set them to constants as appropriate.
 */
export function pie(): Pie<any, number | { valueOf(): number }>;
/**
 * Constructs a new pie generator with the default settings.
 *
 * Ensure that the accessors used with the pie generator correspond to the arguments passed into them,
 * or set them to constants as appropriate.
 *
 * The generic refers to the data type of an element in the input array passed into the Pie generator.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function pie<Datum>(): Pie<any, Datum>;
/**
 * Constructs a new pie generator with the default settings.
 *
 * Ensure that the accessors used with the pie generator correspond to the arguments passed into them,
 * or set them to constants as appropriate.
 *
 * The first generic corresponds to the type of the "this" context within which the pie generator and its accessor functions will be invoked.
 *
 * The second generic refers to the data type of an element in the input array passed into the Pie generator.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function pie<This, Datum>(): Pie<This, Datum>;

// -----------------------------------------------------------------------------------
// Line Generators
// -----------------------------------------------------------------------------------

/**
 * The line generator produces a spline or polyline, as in a line chart.
 * Lines also appear in many other visualization types, such as the links in hierarchical edge bundling.
 *
 * The generic refers to the data type of an element in the input array passed into the line generator.
 */
export interface Line<Datum> {
    /**
     * Generates a line for the given array of data. Depending on this line generator’s associated curve,
     * the given input data may need to be sorted by x-value before being passed to the line generator.
     *
     * IMPORTANT: If the rendering context of the line generator is null,
     * then the line is returned as a path data string.
     *
     * @param data Array of data elements.
     */
    (data: Iterable<Datum> | Datum[]): string | null;
    /**
     * Generates a line for the given array of data. Depending on this line generator’s associated curve,
     * the given input data may need to be sorted by x-value before being passed to the line generator.
     *
     * IMPORTANT: If the line generator has been configured with a rendering context,
     * then the line is rendered to this context as a sequence of path method calls and this function returns void.
     *
     * @param data Array of data elements.
     */
    (data: Iterable<Datum> | Datum[]): void;

    /**
     * Returns the current x-coordinate accessor function, which defaults to a function returning first element of a two-element array of numbers.
     */
    x(): (d: Datum, index: number, data: Datum[]) => number;
    /**
     * Sets the x accessor to the specified number and returns this line generator.
     *
     * @param x A constant x-coordinate value.
     */
    x(x: number): this;
    /**
     * Sets the x accessor to the specified function and returns this line generator.
     *
     * When a line is generated, the x accessor will be invoked for each defined element in the input data array.
     *
     * The default x accessor assumes that the input data are two-element arrays of numbers. If your data are in a different format, or if you wish to transform the data before rendering,
     * then you should specify a custom accessor.
     *
     * @param x A coordinate accessor function which returns the x-coordinate value. The x accessor will be invoked for each defined element in the input data array,
     * being passed the element d, the index i, and the array data as three arguments.
     */
    x(x: (d: Datum, index: number, data: Datum[]) => number): this;

    /**
     * Returns the current y-coordinate accessor function, which defaults to a function returning second element of a two-element array of numbers.
     */
    y(): (d: Datum, index: number, data: Datum[]) => number;
    /**
     * Sets the y accessor to the specified number and returns this line generator.
     *
     * @param y A constant y-coordinate value.
     */
    y(y: number): this;
    /**
     * Sets the y accessor to the specified function and returns this line generator.
     *
     * When a line is generated, the y accessor will be invoked for each defined element in the input data array.
     *
     * The default y accessor assumes that the input data are two-element arrays of numbers. If your data are in a different format, or if you wish to transform the data before rendering,
     * then you should specify a custom accessor.
     *
     * @param y A coordinate accessor function which returns the y-coordinate value. The y accessor will be invoked for each defined element in the input data array,
     * being passed the element d, the index i, and the array data as three arguments.
     */
    y(y: (d: Datum, index: number, data: Datum[]) => number): this;

    /**
     * Returns the current defined accessor, which defaults to a function returning a constant boolean value of true.
     */
    defined(): (d: Datum, index: number, data: Datum[]) => boolean;
    /**
     * Sets the defined accessor to the specified boolean and returns this line generator.
     *
     * The default accessor for defined returns a constant boolean value of true, thus assumes that the input data is always defined.
     *
     * When a line is generated, the defined accessor will be invoked for each element in the input data array,
     * being passed the element d, the index i, and the array data as three arguments.
     * If the given element is defined (i.e., if the defined accessor returns a truthy value for this element),
     * the x and y accessors will subsequently be evaluated and the point will be added to the current line segment.
     * Otherwise, the element will be skipped, the current line segment will be ended, and a new line segment will be generated for the next defined point.
     * As a result, the generated line may have several discrete segments.
     *
     * Note that if a line segment consists of only a single point, it may appear invisible unless rendered with rounded or square line caps.
     * In addition, some curves such as curveCardinalOpen only render a visible segment if it contains multiple points.
     *
     * @param defined A boolean constant.
     */
    defined(defined: boolean): this;
    /**
     * Sets the defined accessor to the specified function and returns this line generator.
     *
     * The default accessor for defined returns a constant boolean value of true, thus assumes that the input data is always defined.
     *
     * When a line is generated, the defined accessor will be invoked for each element in the input data array,
     * being passed the element d, the index i, and the array data as three arguments.
     * If the given element is defined (i.e., if the defined accessor returns a truthy value for this element),
     * the x and y accessors will subsequently be evaluated and the point will be added to the current line segment.
     * Otherwise, the element will be skipped, the current line segment will be ended, and a new line segment will be generated for the next defined point.
     * As a result, the generated line may have several discrete segments.
     *
     * Note that if a line segment consists of only a single point, it may appear invisible unless rendered with rounded or square line caps.
     * In addition, some curves such as curveCardinalOpen only render a visible segment if it contains multiple points.
     *
     * @param defined An accessor function which returns a boolean value. The accessor will be invoked for each defined element in the input data array,
     * being passed the element d, the index i, and the array data as three arguments.
     */
    defined(defined: (d: Datum, index: number, data: Datum[]) => boolean): this;

    /**
     * Returns the current curve factory, which defaults to curveLinear.
     */
    curve(): CurveFactory | CurveFactoryLineOnly;
    /**
     * Returns the current curve factory, which defaults to curveLinear.
     *
     * The generic allows to cast the curve factory to a specific type, if known.
     */
    // eslint-disable-next-line @definitelytyped/no-unnecessary-generics
    curve<C extends CurveFactory | CurveFactoryLineOnly>(): C;
    /**
     * Sets the curve factory and returns this line generator.
     *
     * @param curve A valid curve factory.
     */
    curve(curve: CurveFactory | CurveFactoryLineOnly): this;

    /**
     * Returns the current rendering context, which defaults to null.
     */
    context(): CanvasRenderingContext2D | null;
    /**
     * Sets the context and returns this line generator.
     */
    context(context: CanvasRenderingContext2D | null): this;
}

/**
 * Constructs a new line generator with the default settings.
 *
 * If x or y are specified, sets the corresponding accessors to the specified function or number and returns this line generator.
 *
 * The generic refers to the data type of an element in the input array passed into the line generator.
 *
 * @param x Sets the x accessor
 * @param y Sets the y accessor
 */
export function line<Datum = [number, number]>(
    x?: number | ((d: Datum, index: number, data: Datum[]) => number),
    y?: number | ((d: Datum, index: number, data: Datum[]) => number),
): Line<Datum>;

/**
 * The radial line generator produces a spline or polyline, as in a line chart.
 *
 * A radial line generator is equivalent to the standard Cartesian line generator,
 * except the x and y accessors are replaced with angle and radius accessors.
 * Radial lines are always positioned relative to ⟨0,0⟩; use a transform (see: SVG, Canvas) to change the origin.
 *
 * The generic refers to the data type of an element in the input array passed into the line generator.
 */
export interface LineRadial<Datum> {
    /**
     * Generates a radial line for the given array of data. Depending on this radial line generator’s associated curve,
     * the given input data may need to be sorted by x-value before being passed to the line generator.
     *
     * IMPORTANT: If the rendering context of the radial line generator is null,
     * then the radial line is returned as a path data string.
     *
     * @param data Array of data elements.
     */
    (data: Iterable<Datum> | Datum[]): string | null;
    /**
     * Generates a radial line for the given array of data. Depending on this radial line generator’s associated curve,
     * the given input data may need to be sorted by x-value before being passed to the radial line generator.
     *
     * IMPORTANT: If the radial line generator has been configured with a rendering context,
     * then the radial line is rendered to this context as a sequence of path method calls and this function returns void.
     *
     * @param data Array of data elements.
     */
    (data: Iterable<Datum> | Datum[]): void;

    /**
     * Returns the current angle accessor function, which defaults to a function returning first element of a two-element array of numbers.
     */
    angle(): (d: Datum, index: number, data: Datum[]) => number;
    /**
     * Sets the angle accessor to the specified number and returns this radial line generator.
     *
     * @param angle A constant angle value in radians, with 0 at -y (12 o’clock).
     */
    angle(angle: number): this;
    /**
     * Sets the angle accessor to the specified function and returns this radial line generator.
     *
     * When a radial line is generated, the angle accessor will be invoked for each defined element in the input data array.
     *
     * The default angle accessor assumes that the input data are two-element arrays of numbers. If your data are in a different format, or if you wish to transform the data before rendering,
     * then you should specify a custom accessor.
     *
     * @param angle An angle accessor function which returns the angle value in radians, with 0 at -y (12 o’clock). The angle accessor will be invoked for each defined element in the input data array,
     * being passed the element d, the index i, and the array data as three arguments.
     */
    angle(angle: (d: Datum, index: number, data: Datum[]) => number): this;

    /**
     * Returns the current radius accessor function, which defaults to a function returning second element of a two-element array of numbers.
     */
    radius(): (d: Datum, index: number, data: Datum[]) => number;
    /**
     * Sets the radius accessor to the specified number and returns this radial line generator.
     *
     * @param radius A constant radius value.
     */
    radius(radius: number): this;
    /**
     * Sets the radius accessor to the specified function and returns this radial line generator.
     *
     * When a radial line is generated, the radius accessor will be invoked for each defined element in the input data array.
     *
     * The default radius accessor assumes that the input data are two-element arrays of numbers. If your data are in a different format, or if you wish to transform the data before rendering,
     * then you should specify a custom accessor.
     *
     * @param radius A radius accessor function which returns the radius value. The radius accessor will be invoked for each defined element in the input data array,
     * being passed the element d, the index i, and the array data as three arguments.
     */
    radius(radius: (d: Datum, index: number, data: Datum[]) => number): this;

    /**
     * Returns the current defined accessor, which defaults to a function returning a constant boolean value of true.
     */
    defined(): (d: Datum, index: number, data: Datum[]) => boolean;
    /**
     * Sets the defined accessor to the specified boolean and returns this radial line generator.
     *
     * The default accessor for defined returns a constant boolean value of true, thus assumes that the input data is always defined.
     *
     * When a radial line is generated, the defined accessor will be invoked for each element in the input data array,
     * being passed the element d, the index i, and the array data as three arguments.
     * If the given element is defined (i.e., if the defined accessor returns a truthy value for this element),
     * the angle and radius accessors will subsequently be evaluated and the point will be added to the current radial line segment.
     * Otherwise, the element will be skipped, the current radial line segment will be ended, and a new radial line segment will be generated for the next defined point.
     * As a result, the generated radial line may have several discrete segments.
     *
     * Note that if a radial line segment consists of only a single point, it may appear invisible unless rendered with rounded or square line caps.
     * In addition, some curves such as curveCardinalOpen only render a visible segment if it contains multiple points.
     *
     * @param defined A boolean constant.
     */
    defined(defined: boolean): this;
    /**
     * Sets the defined accessor to the specified function and returns this radial line generator.
     *
     * The default accessor for defined returns a constant boolean value of true, thus assumes that the input data is always defined.
     *
     * When a radial line is generated, the defined accessor will be invoked for each element in the input data array,
     * being passed the element d, the index i, and the array data as three arguments.
     * If the given element is defined (i.e., if the defined accessor returns a truthy value for this element),
     * the angle and radius accessors will subsequently be evaluated and the point will be added to the current radial line segment.
     * Otherwise, the element will be skipped, the current radial line segment will be ended, and a new radial line segment will be generated for the next defined point.
     * As a result, the generated radial line may have several discrete segments.
     *
     * Note that if a radial line segment consists of only a single point, it may appear invisible unless rendered with rounded or square line caps.
     * In addition, some curves such as curveCardinalOpen only render a visible segment if it contains multiple points.
     *
     * @param defined An accessor function which returns a boolean value. The accessor will be invoked for each defined element in the input data array,
     * being passed the element d, the index i, and the array data as three arguments.
     */
    defined(defined: (d: Datum, index: number, data: Datum[]) => boolean): this;

    /**
     * Returns the current curve factory, which defaults to curveLinear.
     */
    curve(): CurveFactory | CurveFactoryLineOnly;
    /**
     * Returns the current curve factory, which defaults to curveLinear.
     *
     * The generic allows to cast the curve factory to a specific type, if known.
     */
    // eslint-disable-next-line @definitelytyped/no-unnecessary-generics
    curve<C extends CurveFactory | CurveFactoryLineOnly>(): C;
    /**
     * Sets the curve factory and returns this radial line generator.
     *
     * Note that curveMonotoneX or curveMonotoneY are not recommended for radial lines because they assume that the data is monotonic in x or y,
     * which is typically untrue of radial lines.
     *
     * @param curve A valid curve factory.
     */
    curve(curve: CurveFactory | CurveFactoryLineOnly): this;

    /**
     * Returns the current rendering context, which defaults to null.
     */
    context(): CanvasRenderingContext2D | null;
    /**
     * Equivalent to line.context.
     */
    context(context: CanvasRenderingContext2D | null): this;
}

/**
 * Constructs a new radial line generator with the default settings.
 *
 * Ensure that the accessors used with the radial line generator correspond to the arguments passed into them,
 * or set them to constants as appropriate.
 */
export function lineRadial(): LineRadial<[number, number]>;
/**
 * Constructs a new radial line generator with the default settings.
 *
 * Ensure that the accessors used with the radial line generator correspond to the arguments passed into them,
 * or set them to constants as appropriate.
 *
 * The generic refers to the data type of an element in the input array passed into the radial line generator.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function lineRadial<Datum>(): LineRadial<Datum>;

/**
 * @deprecated Use LineRadial<Datum>
 */
export type RadialLine<Datum> = LineRadial<Datum>;

/**
 * @deprecated Use lineRadial()
 */
export function radialLine(): RadialLine<[number, number]>;
/**
 * @deprecated Use lineRadial<Datum>()
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function radialLine<Datum>(): RadialLine<Datum>;

// -----------------------------------------------------------------------------------
// Area Generators
// -----------------------------------------------------------------------------------

/**
 * The area generator produces an area, as in an area chart. An area is defined by two bounding lines, either splines or polylines.
 * Typically, the two lines share the same x-values (x0 = x1), differing only in y-value (y0 and y1); most commonly, y0 is defined as a constant representing zero.
 * The first line (the topline) is defined by x1 and y1 and is rendered first; the second line (the baseline) is defined by x0 and y0 and is rendered second, with the points in reverse order.
 * With a curveLinear curve, this produces a clockwise polygon.
 *
 * The generic refers to the data type of an element in the input array passed into the area generator.
 */
export interface Area<Datum> {
    /**
     * Generates an area for the given array of data. Depending on this area generator’s associated curve,
     * the given input data may need to be sorted by x-value before being passed to the area generator.
     *
     * IMPORTANT: If the rendering context of the area generator is null,
     * then the area is returned as a path data string.
     *
     * @param data Array of data elements.
     */
    (data: Iterable<Datum> | Datum[]): string | null;
    /**
     * Generates an area for the given array of data. Depending on this area generator’s associated curve,
     * the given input data may need to be sorted by x-value before being passed to the area generator.
     *
     * IMPORTANT: If the area generator has been configured with a rendering context,
     * then the area is rendered to this context as a sequence of path method calls and this function returns void.
     *
     * @param data Array of data elements.
     */
    (data: Iterable<Datum> | Datum[]): void;

    /**
     * Returns the current x0 accessor. The default x0 accessor is a function returning the first element of a
     * two-element array of numbers.
     */
    x(): (d: Datum, index: number, data: Datum[]) => number;
    /**
     * Sets x0 to a constant number x and x1 to null and returns this area generator.
     *
     * Setting x1 to null indicates that the previously-computed x0 value should be reused for the x1 value.
     *
     * @param x A constant value to be used for x0.
     */
    x(x: number): this;
    /**
     * Sets x0 to the specified function x and x1 to null and returns this area generator.
     *
     * The default x0 accessor assumes that the input data are two-element arrays of numbers and returns the first element.
     * If your data are in a different format, or if you wish to transform the data before rendering, then you should specify a custom accessor.
     *
     * @param x An accessor function returning a value to be used for x0. The accessor will be invoked for each defined element in the input data array,
     * being passed the element d, the index i, and the array data as three arguments.
     */
    x(x: (d: Datum, index: number, data: Datum[]) => number): this;

    /**
     * Returns the current x0 accessor. The default x0 accessor is a function returning the first element of a
     * two-element array of numbers.
     */
    x0(): (d: Datum, index: number, data: Datum[]) => number;
    /**
     * Sets x0 to a constant number and returns this area generator.
     *
     * @param x A constant value.
     */
    x0(x: number): this;
    /**
     * Sets x0 to the specified function and returns this area generator.
     *
     * The default x0 accessor assumes that the input data are two-element arrays of numbers and returns the first element.
     * If your data are in a different format, or if you wish to transform the data before rendering, then you should specify a custom accessor.
     *
     * @param x An accessor function returning a value to be used for x0. The accessor will be invoked for each defined element in the input data array,
     * being passed the element d, the index i, and the array data as three arguments.
     */
    x0(x: (d: Datum, index: number, data: Datum[]) => number): this;

    /**
     * Returns the current x1 accessor, which defaults to null, indicating that the previously-computed x0 value should be reused for the x1 value.
     */
    x1(): ((d: Datum, index: number, data: Datum[]) => number) | null;
    /**
     * Sets the x1 accessor to the specified number and returns this area generator.
     */
    x1(x: null | number): this;
    /**
     * Sets x1 to the specified function and returns this area generator.
     *
     * The default x1 accessor is null, indicating that the previously-computed x0 value should be reused for the x1 value.
     * If your data are in a different format, or if you wish to transform the data before rendering, then you should specify a custom accessor.
     *
     * @param x An accessor function returning a value to be used for x1. The accessor will be invoked for each defined element in the input data array,
     * being passed the element d, the index i, and the array data as three arguments.
     */
    x1(x: (d: Datum, index: number, data: Datum[]) => number): this;

    /**
     * Returns the current y0 accessor. The default y0 accessor is a function returning a constant value of zero.
     */
    y(): (d: Datum, index: number, data: Datum[]) => number;
    /**
     * Sets y0 to a constant number y and y1 to null and returns this area generator.
     *
     * Setting y1 to null indicates that the previously-computed y0 value should be reused for the y1 value.
     *
     * @param y A constant value to be used for y0.
     */
    y(y: number): this;
    /**
     * Sets y0 to the accessor function y and y1 to null and returns this area generator.
     *
     * The default y0 accessor returns a constant value of zero.
     * If your data are in a different format, or if you wish to transform the data before rendering, then you should specify a custom accessor.
     *
     * @param y An accessor function returning a value to be used for y0. The accessor will be invoked for each defined element in the input data array,
     * being passed the element d, the index i, and the array data as three arguments.
     */
    y(y: (d: Datum, index: number, data: Datum[]) => number): this;

    /**
     * Returns the current y0 accessor. The default y0 accessor is a function a constant value of zero.
     */
    y0(): (d: Datum, index: number, data: Datum[]) => number;
    /**
     * Sets y0 to a constant number and returns this area generator.
     *
     * @param y A constant value.
     */
    y0(y: number): this;
    /**
     * Sets y0 to the specified function and returns this area generator.
     *
     * The default y0 accessor is a function which returns a constant value of zero.
     * If your data are in a different format, or if you wish to transform the data before rendering, then you should specify a custom accessor.
     *
     * @param y An accessor function returning a value to be used for y0. The accessor will be invoked for each defined element in the input data array,
     * being passed the element d, the index i, and the array data as three arguments.
     */
    y0(y: (d: Datum, index: number, data: Datum[]) => number): this;

    /**
     * Returns the current y1 accessor or null. The default y1 accessor is a function returning the second element of a
     * two-element array of numbers.
     *
     * If the y1 accessor is null, the previously-computed y0 value is reused for the y1 value.
     */
    y1(): ((d: Datum, index: number, data: Datum[]) => number) | null;
    /**
     * sets the y1 accessor to the specified number and returns this area generator.
     */
    y1(y: null | number): this;
    /**
     * Sets y1 to the specified function and returns this area generator.
     *
     * The default y1 accessor assumes that the input data are two-element arrays of numbers and returns the second element.
     * If your data are in a different format, or if you wish to transform the data before rendering, then you should specify a custom accessor.
     *
     * @param y An accessor function returning a value to be used for y1. The accessor will be invoked for each defined element in the input data array,
     * being passed the element d, the index i, and the array data as three arguments.
     */
    y1(y: (d: Datum, index: number, data: Datum[]) => number): this;

    /**
     * Returns the current defined accessor, which defaults to a function returning a constant boolean value of true.
     */
    defined(): (d: Datum, index: number, data: Datum[]) => boolean;
    /**
     * Sets the defined accessor to the specified boolean and returns this area generator.
     *
     * The default accessor for defined returns a constant boolean value of true, thus assumes that the input data is always defined.
     * When an area is generated, the defined accessor will be invoked for each element in the input data array, being passed the element d, the index i, and the array data as three arguments.
     * If the given element is defined (i.e., if the defined accessor returns a truthy value for this element),
     * the x0, x1, y0 and y1 accessors will subsequently be evaluated and the point will be added to the current area segment.
     * Otherwise, the element will be skipped, the current area segment will be ended, and a new area segment will be generated for the next defined point.
     * As a result, the generated area may have several discrete segments.
     *
     * Note that if an area segment consists of only a single point, it may appear invisible unless rendered with rounded or square line caps.
     * In addition, some curves such as curveCardinalOpen only render a visible segment if it contains multiple points.
     *
     * @param defined A boolean constant.
     */
    defined(defined: boolean): this;
    /**
     * Sets the defined accessor to the specified function and returns this area generator.
     *
     * The default accessor for defined returns a constant boolean value of true, thus assumes that the input data is always defined.
     *
     * The default accessor for defined returns a constant boolean value of true, thus assumes that the input data is always defined.
     * When an area is generated, the defined accessor will be invoked for each element in the input data array,
     * being passed the element d, the index i, and the array data as three arguments.
     * If the given element is defined (i.e., if the defined accessor returns a truthy value for this element),
     * the x0, x1, y0 and y1 accessors will subsequently be evaluated and the point will be added to the current area segment.
     * Otherwise, the element will be skipped, the current area segment will be ended, and a new area segment will be generated for the next defined point.
     * As a result, the generated area may have several discrete segments.
     *
     * Note that if an area segment consists of only a single point, it may appear invisible unless rendered with rounded or square line caps.
     * In addition, some curves such as curveCardinalOpen only render a visible segment if it contains multiple points.
     *
     * @param defined An accessor function which returns a boolean value. The accessor will be invoked for each defined element in the input data array,
     * being passed the element d, the index i, and the array data as three arguments.
     */
    defined(defined: (d: Datum, index: number, data: Datum[]) => boolean): this;

    /**
     * Returns the current curve factory, which defaults to curveLinear.
     */
    curve(): CurveFactory;
    /**
     * Returns the current curve factory, which defaults to curveLinear.
     *
     * The generic allows to cast the curve factory to a specific type, if known.
     */
    // eslint-disable-next-line @definitelytyped/no-unnecessary-generics
    curve<C extends CurveFactory>(): C;
    /**
     * Sets the curve factory and returns this area generator.
     *
     * @param curve A valid curve factory.
     */
    curve(curve: CurveFactory): this;

    /**
     * Returns the current rendering context, which defaults to null.
     */
    context(): CanvasRenderingContext2D | null;
    /**
     * Sets the context and returns this area generator.
     */
    context(context: CanvasRenderingContext2D | null): this;

    /**
     * Returns a new line generator that has this area generator’s current defined accessor, curve and context.
     * The line’s x-accessor is this area’s x0-accessor, and the line’s y-accessor is this area’s y0-accessor.
     */
    lineX0(): Line<Datum>;
    /**
     * Returns a new line generator that has this area generator’s current defined accessor, curve and context.
     * The line’s x-accessor is this area’s x0-accessor, and the line’s y-accessor is this area’s y0-accessor.
     */
    lineY0(): Line<Datum>;

    /**
     * Returns a new line generator that has this area generator’s current defined accessor, curve and context.
     * The line’s x-accessor is this area’s x1-accessor, and the line’s y-accessor is this area’s y0-accessor.
     */
    lineX1(): Line<Datum>;
    /**
     * Returns a new line generator that has this area generator’s current defined accessor, curve and context.
     * The line’s x-accessor is this area’s x0-accessor, and the line’s y-accessor is this area’s y1-accessor.
     */
    lineY1(): Line<Datum>;
}

/**
 * Constructs a new area generator with the default settings.
 *
 * If x, y0 or y1 are specified, sets the corresponding accessors to the specified function or number and returns this area generator.
 *
 * The generic refers to the data type of an element in the input array passed into the area generator.
 *
 * @param x Sets the x accessor.
 * @param y0 Sets the y0 accessor.
 * @param y1 Sets the y1 accessor.
 */
export function area<Datum = [number, number]>(
    x?: number | ((d: Datum, index: number, data: Datum[]) => number),
    y0?: number | ((d: Datum, index: number, data: Datum[]) => number),
    y1?: number | ((d: Datum, index: number, data: Datum[]) => number),
): Area<Datum>;

/**
 * A radial area generator.
 *
 * A radial area generator is equivalent to the standard Cartesian area generator,
 * except the x and y accessors are replaced with angle and radius accessors.
 * Radial areas are always positioned relative to ⟨0,0⟩; use a transform (see: SVG, Canvas) to change the origin.
 *
 * The generic refers to the data type of an element in the input array passed into the area generator.
 */
export interface AreaRadial<Datum> {
    /**
     * Generates a radial area for the given array of data.
     *
     * IMPORTANT: If the rendering context of the radial area generator is null,
     * then the radial area is returned as a path data string.
     *
     * @param data Array of data elements.
     */
    (data: Iterable<Datum> | Datum[]): string | null;
    /**
     * Generates a radial area for the given array of data.
     *
     * IMPORTANT: If the radial area generator has been configured with a rendering context,
     * then the radial area is rendered to this context as a sequence of path method calls and this function returns void.
     *
     * @param data Array of data elements.
     */
    (data: Iterable<Datum> | Datum[]): void;

    /**
     * Returns the current startAngle accessor. The default startAngle accessor is a function returning the first element of a
     * two-element array of numbers.
     */
    angle(): (d: Datum, index: number, data: Datum[]) => number;
    /**
     * Sets startAngle to a constant number angle and endAngle to null and returns this radial area generator.
     *
     * Setting endAngle to null indicates that the previously-computed startAngle value should be reused for the endAngle value.
     *
     * @param angle A constant value in radians with 0 at -y (12 o’clock).
     */
    angle(angle: number): this;
    /**
     * Sets startAngle to the specified function angle and endAngle to null and returns this radial area generator.
     *
     * The default startAngle accessor assumes that the input data are two-element arrays of numbers and returns the first element.
     * If your data are in a different format, or if you wish to transform the data before rendering, then you should specify a custom accessor.
     *
     * @param angle An accessor function returning a value to be used for startAngle in radians with 0 at -y (12 o’clock).
     * The accessor will be invoked for each defined element in the input data array,
     * being passed the element d, the index i, and the array data as three arguments.
     */
    angle(angle: (d: Datum, index: number, data: Datum[]) => number): this;

    /**
     * Returns the current startAngle accessor. The default startAngle accessor is a function returning the first element of a
     * two-element array of numbers.
     */
    startAngle(): (d: Datum, index: number, data: Datum[]) => number;
    /**
     * Sets startAngle to a constant number and returns this radial area generator.
     *
     * @param angle A constant value in radians with 0 at -y (12 o’clock).
     */
    startAngle(angle: number): this;
    /**
     * Sets startAngle to the specified function and returns this radial area generator.
     *
     * The default startAngle accessor assumes that the input data are two-element arrays of numbers and returns the first element.
     * If your data are in a different format, or if you wish to transform the data before rendering, then you should specify a custom accessor.
     *
     * @param angle An accessor function returning a value to be used for startAngle in radians with 0 at -y (12 o’clock).
     * The accessor will be invoked for each defined element in the input data array,
     * being passed the element d, the index i, and the array data as three arguments.
     */
    startAngle(angle: (d: Datum, index: number, data: Datum[]) => number): this;

    /**
     * Returns the current endAngle accessor, which defaults to null, indicating that the previously-computed startAngle value should be reused for the endAngle value.
     */
    endAngle(): ((d: Datum, index: number, data: Datum[]) => number) | null;
    /**
     * Equivalent to area.x1, except the accessor returns the angle in radians, with 0 at -y (12 o’clock).
     * Note: typically angle is used instead of setting separate start and end angles.
     */
    endAngle(angle: null | number): this;
    /**
     * Sets endAngle to the specified function and returns this radial area generator.
     *
     * The default endAngle accessor is null, indicating that the previously-computed startAngle value should be reused for the endAngle value.
     * If your data are in a different format, or if you wish to transform the data before rendering, then you should specify a custom accessor.
     *
     * @param angle An accessor function returning a value to be used for endAngle in radians with 0 at -y (12 o’clock).
     * The accessor will be invoked for each defined element in the input data array,
     * being passed the element d, the index i, and the array data as three arguments.
     */
    endAngle(angle: (d: Datum, index: number, data: Datum[]) => number): this;

    /**
     * Returns the current innerRadius accessor. The default innerRadius accessor is a function returning a constant value of zero.
     */
    radius(): (d: Datum, index: number, data: Datum[]) => number;
    /**
     * Sets innerRadius to a constant number radius and outerRadius to null and returns this radial area generator.
     *
     * Setting outerRadius to null indicates that the previously-computed innerRadius value should be reused for the outerRadius value.
     *
     * @param radius A constant value to be used for innerRadius.
     */
    radius(radius: number): this;
    /**
     * Sets innerRadius to the accessor function radius and outerRadius to null and returns this radial area generator.
     *
     * The default innerRadius accessor returns a constant value of zero.
     * If your data are in a different format, or if you wish to transform the data before rendering, then you should specify a custom accessor.
     *
     * @param radius An accessor function returning a value to be used for innerRadius. The accessor will be invoked for each defined element in the input data array,
     * being passed the element d, the index i, and the array data as three arguments.
     */
    radius(radius: (d: Datum, index: number, data: Datum[]) => number): this;

    /**
     * Returns the current innerRadius accessor. The default innerRadius accessor is a function a constant value of zero.
     */
    innerRadius(): (d: Datum, index: number, data: Datum[]) => number;
    /**
     * Sets innerRadius to a constant number and returns this radial area generator.
     *
     * @param radius A constant value.
     */
    innerRadius(radius: number): this;
    /**
     * Sets innerRadius to the specified function and returns this radial area generator.
     *
     * The default innerRadius accessor is a function which returns a constant value of zero.
     * If your data are in a different format, or if you wish to transform the data before rendering, then you should specify a custom accessor.
     *
     * @param radius An accessor function returning a value to be used for innerRadius. The accessor will be invoked for each defined element in the input data array,
     * being passed the element d, the index i, and the array data as three arguments.
     */
    innerRadius(radius: (d: Datum, index: number, data: Datum[]) => number): this;

    /**
     * Returns the current outerRadius accessor or null. The default outerRadius accessor is a function returning the second element of a
     * two-element array of numbers.
     *
     * If the outerRadius accessor is null, the previously-computed innerRadius value is reused for the outerRadius value.
     */
    outerRadius(): ((d: Datum, index: number, data: Datum[]) => number) | null;
    /**
     * Equivalent to area.y1, except the accessor returns the radius: the distance from the origin ⟨0,0⟩.
     */
    outerRadius(radius: null | number): this;
    /**
     * Sets outerRadius to the specified function and returns this radial area generator.
     *
     * The default outerRadius accessor assumes that the input data are two-element arrays of numbers and returns the second element.
     * If your data are in a different format, or if you wish to transform the data before rendering, then you should specify a custom accessor.
     *
     * @param radius An accessor function returning a value to be used for outerRadius. The accessor will be invoked for each defined element in the input data array,
     * being passed the element d, the index i, and the array data as three arguments.
     */
    outerRadius(radius: (d: Datum, index: number, data: Datum[]) => number): this;

    /**
     * Returns the current defined accessor, which defaults to a function returning a constant boolean value of true.
     */
    defined(): (d: Datum, index: number, data: Datum[]) => boolean;
    /**
     * Sets the defined accessor to the specified boolean and returns this radial area generator.
     *
     * The default accessor for defined returns a constant boolean value of true, thus assumes that the input data is always defined.
     *
     * When a radial area is generated, the defined accessor will be invoked for each element in the input data array, being passed the element d, the index i, and the array data as three arguments.
     * If the given element is defined (i.e., if the defined accessor returns a truthy value for this element),
     * the startAngle, endAngle, innerRadius and outerRadius accessors will subsequently be evaluated and the point will be added to the current area segment.
     *
     * Otherwise, the element will be skipped, the current area segment will be ended, and a new area segment will be generated for the next defined point.
     * As a result, the generated area may have several discrete segments.
     *
     * Note that if an area segment consists of only a single point, it may appear invisible unless rendered with rounded or square line caps.
     * In addition, some curves such as curveCardinalOpen only render a visible segment if it contains multiple points.
     *
     * @param defined A boolean constant.
     */
    defined(defined: boolean): this;
    /**
     * Sets the defined accessor to the specified function and returns this radial area generator.
     *
     * The default accessor for defined returns a constant boolean value of true, thus assumes that the input data is always defined.
     *
     * When a radial area is generated, the defined accessor will be invoked for each element in the input data array, being passed the element d, the index i, and the array data as three arguments.
     * If the given element is defined (i.e., if the defined accessor returns a truthy value for this element),
     * the startAngle, endAngle, innerRadius and outerRadius accessors will subsequently be evaluated and the point will be added to the current area segment.
     *
     * Otherwise, the element will be skipped, the current area segment will be ended, and a new area segment will be generated for the next defined point.
     * As a result, the generated area may have several discrete segments.
     *
     * Note that if an area segment consists of only a single point, it may appear invisible unless rendered with rounded or square line caps.
     * In addition, some curves such as curveCardinalOpen only render a visible segment if it contains multiple points.
     *
     * @param defined An accessor function which returns a boolean value. The accessor will be invoked for each defined element in the input data array,
     * being passed the element d, the index i, and the array data as three arguments.
     */
    defined(defined: (d: Datum, index: number, data: Datum[]) => boolean): this;

    /**
     * Returns the current curve factory, which defaults to curveLinear.
     */
    curve(): CurveFactory;
    /**
     * Returns the current curve factory, which defaults to curveLinear.
     *
     * The generic allows to cast the curve factory to a specific type, if known.
     */
    // eslint-disable-next-line @definitelytyped/no-unnecessary-generics
    curve<C extends CurveFactory>(): C;
    /**
     * Sets the curve factory and returns this radial area generator.
     *
     * Note that curveMonotoneX or curveMonotoneY are not recommended for radial areas because they assume that the data is monotonic in x or y, which is typically untrue of radial areas.
     *
     * @param curve A valid curve factory.
     */
    curve(curve: CurveFactory): this;

    /**
     * Returns the current rendering context, which defaults to null.
     */
    context(): CanvasRenderingContext2D | null;
    /**
     * Equivalent to line.context.
     */
    context(context: CanvasRenderingContext2D | null): this;

    /**
     * Returns a new radial line generator that has this radial area generator’s current defined accessor, curve and context.
     * The line’s angle accessor is this area’s start angle accessor, and the line’s radius accessor is this area’s inner radius accessor.
     */
    lineStartAngle(): LineRadial<Datum>;

    /**
     * Returns a new radial line generator that has this radial area generator’s current defined accessor, curve and context.
     * The line’s angle accessor is this area’s start angle accessor, and the line’s radius accessor is this area’s inner radius accessor.
     */
    lineInnerRadius(): LineRadial<Datum>;

    /**
     * Returns a new radial line generator that has this radial area generator’s current defined accessor, curve and context.
     * The line’s angle accessor is this area’s end angle accessor, and the line’s radius accessor is this area’s inner radius accessor.
     */
    lineEndAngle(): LineRadial<Datum>;

    /**
     * Returns a new radial line generator that has this radial area generator’s current defined accessor, curve and context.
     * The line’s angle accessor is this area’s start angle accessor, and the line’s radius accessor is this area’s outer radius accessor.
     */
    lineOuterRadius(): LineRadial<Datum>;
}

/**
 * Constructs a new radial area generator with the default settings.
 *
 * Ensure that the accessors used with the area generator correspond to the arguments passed into them,
 * or set them to constants as appropriate.
 */
export function areaRadial(): AreaRadial<[number, number]>;
/**
 * Constructs a new radial area generator with the default settings.
 *
 * Ensure that the accessors used with the area generator correspond to the arguments passed into them,
 * or set them to constants as appropriate.
 *
 * The generic refers to the data type of an element in the input array passed into the radial area generator.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function areaRadial<Datum>(): AreaRadial<Datum>;

/**
 * @deprecated Use AreaRadial interface
 */
export type RadialArea<Datum> = AreaRadial<Datum>;

/**
 * @deprecated Use areaRadial()
 */
export function radialArea(): RadialArea<[number, number]>;
/**
 * @deprecated Use areaRadial<Datum>()
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function radialArea<Datum>(): RadialArea<Datum>;

// -----------------------------------------------------------------------------------
// Curve Factories
// -----------------------------------------------------------------------------------

/**
 * A minimal interface for a curve generator which supports only the rendering of lines.
 * Methods for related to the rendering of areas are not implemented in this minimal interface.
 *
 * While lines are defined as a sequence of two-dimensional [x, y] points,
 * there remains the task of transforming this discrete representation into a continuous shape: i.e., how to interpolate between the points.
 * A curve generator serves this purpose.
 *
 * Curves are typically not constructed or used directly, instead being passed to line.curve.
 */
export interface CurveGeneratorLineOnly {
    /**
     * Indicates the start of a new line segment. Zero or more points will follow.
     */
    lineStart(): void;
    /**
     * Indicates the end of the current line segment.
     */
    lineEnd(): void;
    /**
     * Indicates a new point in the current line segment with the given x- and y-values.
     */
    point(x: number, y: number): void;
}

/**
 * A factory for curve generators addressing only lines, but not areas.
 */
export type CurveFactoryLineOnly =
    /**
     * Returns a "lines only" curve generator which renders to the specified context.
     *
     * @param context A rendering context.
     */
    (context: CanvasRenderingContext2D | Path) => CurveGeneratorLineOnly;

/**
 * A minimal interface for a curve generator which supports the rendering of lines and areas.
 *
 * While lines are defined as a sequence of two-dimensional [x, y] points,
 * and areas are similarly defined by a topline and a baseline,
 * there remains the task of transforming this discrete representation into a continuous shape: i.e., how to interpolate between the points.
 * A curve generator serves this purpose.
 *
 * Curves are typically not constructed or used directly, instead being passed to line.curve and area.curve.
 */
export interface CurveGenerator extends CurveGeneratorLineOnly {
    /**
     * Indicates the start of a new area segment.
     * Each area segment consists of exactly two line segments: the topline, followed by the baseline, with the baseline points in reverse order.
     */
    areaStart(): void;
    /**
     * Indicates the end of the current area segment.
     */
    areaEnd(): void;
}

/**
 * A factory for curve generators addressing both lines and areas.
 */
export type CurveFactory =
    /**
     * Returns a curve generator which renders to the specified context.
     *
     * @param context A rendering context.
     */
    (context: CanvasRenderingContext2D | Path) => CurveGenerator;

/**
 * A curve factory for cubic basis spline generators.
 *
 * The curve generators produce a cubic basis spline using the specified control points.
 * The first and last points are triplicated such that the spline starts at the first point and ends at the last point,
 * and is tangent to the line between the first and second points, and to the line between the penultimate and last points.
 */
export const curveBasis: CurveFactory;

/**
 * A curve factory for closed cubic basis spline generators.
 *
 * The curve generators produce a closed cubic basis spline using the specified control points.
 * When a line segment ends, the first three control points are repeated, producing a closed loop with C2 continuity.
 */
export const curveBasisClosed: CurveFactory;

/**
 * A curve factory for open cubic basis spline generators.
 *
 * The curve generators produce a cubic basis spline using the specified control points.
 * Unlike basis, the first and last points are not repeated, and thus the curve typically does not intersect these points.
 */
export const curveBasisOpen: CurveFactory;

/**
 * Produces a Bézier curve between each pair of points, with horizontal tangents at each point.
 */
export const curveBumpX: CurveFactory;

/**
 * Produces a Bézier curve between each pair of points, with vertical tangents at each point.
 */
export const curveBumpY: CurveFactory;

/**
 * A curve factory for straightened cubic basis spline generators.
 *
 * The curve generators produce a straightened cubic basis spline using the specified control points,
 * with the spline straightened according to the curve’s beta, which defaults to 0.85.
 * This curve is typically used in hierarchical edge bundling to disambiguate connections,
 * as proposed by Danny Holten in Hierarchical Edge Bundles: Visualization of Adjacency Relations in Hierarchical Data.
 *
 * This curve does not implement curve.areaStart and curve.areaEnd; it is intended to work with d3.line, not d3.area.
 */
export interface CurveBundleFactory extends CurveFactoryLineOnly {
    /**
     * Returns a bundle curve factory with the specified beta in the range [0, 1], representing the bundle strength.
     * If beta equals zero, a straight line between the first and last point is produced; if beta equals one,
     * a standard basis spline is produced.
     *
     * @param beta A constant value in the [0, 1] interval.
     */
    beta(beta: number): this;
}

/**
 * A curve factory for straightened cubic basis spline generators.
 *
 * The curve generators produce a straightened cubic basis spline using the specified control points,
 * with the spline straightened according to the curve’s beta, which defaults to 0.85.
 * This curve is typically used in hierarchical edge bundling to disambiguate connections,
 * as proposed by Danny Holten in Hierarchical Edge Bundles: Visualization of Adjacency Relations in Hierarchical Data.
 *
 * This curve does not implement curve.areaStart and curve.areaEnd; it is intended to work with d3.line, not d3.area.
 */
export const curveBundle: CurveBundleFactory;

/**
 * A curve factory for cubic cardinal spline generators.
 */
export interface CurveCardinalFactory extends CurveFactory {
    /**
     * Returns a cardinal curve factory with the specified tension in the range [0, 1].
     * The tension determines the length of the tangents: a tension of one yields all zero tangents, equivalent to curveLinear; a tension of zero produces a uniform Catmull–Rom spline.
     *
     * @param tension A constant in the [0, 1] interval.
     */
    tension(tension: number): this;
}

/**
 * A curve factory for cubic cardinal spline generators.
 *
 * The curve generators produce a cubic cardinal spline using the specified control points, with one-sided differences used for the first and last piece.
 * The default tension is 0.
 */
export const curveCardinal: CurveCardinalFactory;

/**
 * A curve factory for closed cubic cardinal spline generators.
 *
 * The curve generators produce closed cubic cardinal spline using the specified control points.
 * When a line segment ends, the first three control points are repeated, producing a closed loop.
 * The default tension is 0.
 */
export const curveCardinalClosed: CurveCardinalFactory;

/**
 * A curve factory for open cubic cardinal spline generators.
 *
 * The curve generators produce a cubic cardinal spline using the specified control points.
 * Unlike curveCardinal, one-sided differences are not used for the first and last piece,
 * and thus the curve starts at the second point and ends at the penultimate point.
 * The default tension is 0.
 */
export const curveCardinalOpen: CurveCardinalFactory;

/**
 * A curve factory for cubic Catmull–Rom spline generators.
 */
export interface CurveCatmullRomFactory extends CurveFactory {
    /**
     * Returns a cubic Catmull–Rom curve factory with the specified alpha in the range [0, 1].
     * If alpha is zero, produces a uniform spline, equivalent to curveCardinal with a tension of zero;
     * if alpha is one, produces a chordal spline; if alpha is 0.5, produces a centripetal spline.
     * Centripetal splines are recommended to avoid self-intersections and overshoot.
     *
     * @param alpha A constant in the [0, 1] interval.
     */
    alpha(alpha: number): this;
}

/**
 * A curve factory for cubic Catmull–Rom spline generators.
 *
 * The curve generators produce a cubic Catmull–Rom spline using the specified control points and the parameter alpha,
 * which defaults to 0.5, as proposed by Yuksel et al. in On the Parameterization of Catmull–Rom Curves,
 * with one-sided differences used for the first and last piece.
 */
export const curveCatmullRom: CurveCatmullRomFactory;

/**
 * A curve factory for cubic Catmull–Rom spline generators.
 *
 * The curve generators produce a closed cubic Catmull–Rom spline using the specified control points and the parameter alpha,
 * which defaults to 0.5, as proposed by Yuksel et al. When a line segment ends,
 * the first three control points are repeated, producing a closed loop.
 */
export const curveCatmullRomClosed: CurveCatmullRomFactory;

/**
 * A curve factory for cubic Catmull–Rom spline generators.
 *
 * The curve generators produce a cubic Catmull–Rom spline using the specified control points and the parameter alpha,
 * which defaults to 0.5, as proposed by Yuksel et al. Unlike curveCatmullRom, one-sided differences are not used for the first and last piece,
 * and thus the curve starts at the second point and ends at the penultimate point.
 */
export const curveCatmullRomOpen: CurveCatmullRomFactory;

/**
 * A curve factory for polyline generators.
 *
 * The curve generators produce a polyline through the specified points.
 */
export const curveLinear: CurveFactory;

/**
 * A curve factory for closed polyline generators.
 *
 * The curve generators produce a closed polyline through the specified points by repeating the first point when the line segment ends.
 */
export const curveLinearClosed: CurveFactory;

/**
 * A curve factory for cubic spline generators preserving monotonicity in y.
 *
 * The curve generators produce a cubic spline that preserves monotonicity in y, assuming monotonicity in x, as proposed by Steffen in A simple method for monotonic interpolation in one dimension:
 * “a smooth curve with continuous first-order derivatives that passes through any given set of data points without spurious oscillations.
 * Local extrema can occur only at grid points where they are given by the data, but not in between two adjacent grid points.”
 */
export const curveMonotoneX: CurveFactory;

/**
 * A curve factory for cubic spline generators preserving monotonicity in x.
 *
 * The curve generators produce a cubic spline that preserves monotonicity in x, assuming monotonicity in y, as proposed by Steffen in A simple method for monotonic interpolation in one dimension:
 * “a smooth curve with continuous first-order derivatives that passes through any given set of data points without spurious oscillations.
 * Local extrema can occur only at grid points where they are given by the data, but not in between two adjacent grid points.”
 */
export const curveMonotoneY: CurveFactory;

/**
 * A curve factory for natural cubic spline generators.
 *
 * The curve generators produce a natural cubic spline with the second derivative of the spline set to zero at the endpoints.
 */
export const curveNatural: CurveFactory;

/**
 * A curve factory for step function (midpoint) generators.
 *
 * The curve generators produce a piecewise constant function (a step function) consisting of alternating horizontal and vertical lines.
 * The y-value changes at the midpoint of each pair of adjacent x-values.
 */
export const curveStep: CurveFactory;

/**
 * A curve factory for step function (after) generators.
 *
 * The curve generators produce a piecewise constant function (a step function) consisting of alternating horizontal and vertical lines.
 * The y-value changes after the x-value.
 */
export const curveStepAfter: CurveFactory;

/**
 * A curve factory for step function (before) generators.
 *
 * The curve generators produce a piecewise constant function (a step function) consisting of alternating horizontal and vertical lines.
 * The y-value changes before the x-value.
 */
export const curveStepBefore: CurveFactory;

// -----------------------------------------------------------------------------------
// LINKS
// -----------------------------------------------------------------------------------

/**
 * An interface describing the default Link Data structure expected
 * by the Link and LinkRadial generators.
 */
export interface DefaultLinkObject {
    /**
     * Source node of the link.
     *
     * For a link in a Cartesian coordinate system, the two element array contains
     * the coordinates [x, y].
     *
     * For a radial link, the two element array contains
     * the coordinates [angle, radius]. The angle is stated in radians, with 0 at -y (12 o’clock).
     * The radius measures the distance from the origin ⟨0,0⟩.
     */
    source: [number, number];
    /**
     * Target node of the link.
     *
     * For a link in a Cartesian coordinate system, the two element array contains
     * the coordinates [x, y].
     *
     * For a radial link, the two element array contains
     * the coordinates [angle, radius]. The angle is stated in radians, with 0 at -y (12 o’clock).
     * The radius measures the distance from the origin ⟨0,0⟩.
     */
    target: [number, number];
}

/**
 * A link generator for a Cartesian coordinate system. The link shape generates a smooth cubic Bézier curve from a
 * source point to a target point. The tangents of the curve at the start and end are either vertical, horizontal.
 *
 * The first generic corresponds to the type of the "this" context within which the link generator and its accessor functions will be invoked.
 *
 * The second generic corresponds to the datum type of the link object for which the link is to be generated.
 *
 * The third generic corresponds to the datum type of the source/target node contained in the link object.
 */
export interface Link<This, LinkDatum, NodeDatum> {
    /**
     * Generates a link for the given arguments.
     *
     * IMPORTANT: If the rendering context of the link generator is null,
     * then the link is returned as a path data string.
     *
     * The "this" context within which this function is invoked, will be the context within which the accessor methods of the generator are invoked.
     * All arguments passed into this function, will be passed to the accessor functions of the generator.
     *
     * @param d The datum for which the link is to be generated.
     */
    (this: This, d: LinkDatum, ...args: any[]): string | null;
    /**
     * Generates an link for the given arguments.
     *
     * IMPORTANT: If the link generator has been configured with a rendering context,
     * then the link is rendered to this context as a sequence of path method calls and this function returns void.
     *
     * The "this" context within which this function is invoked, will be the context within which the accessor methods of the generator are invoked.
     * All arguments passed into this function, will be passed to the accessor functions of the generator.
     *
     * @param d The datum for which the link is to be generated.
     */
    (this: This, d: LinkDatum, ...args: any[]): void;

    /**
     * Returns the current source node accessor function.
     * The default source accessor function returns a two element array [x, y].
     */
    source(): (this: This, d: LinkDatum, ...args: any[]) => NodeDatum;
    /**
     * Sets the source accessor to the specified function and returns this link generator.
     *
     * @param source Source node accessor function. The accessor function is invoked in the same "this" context as the generator was invoked in and
     * receives the same arguments that were passed into the link generator. The default target accessor function returns a two element array [x, y].
     */
    source(source: (this: This, d: LinkDatum, ...args: any[]) => NodeDatum): this;

    /**
     * Returns the current target node accessor function.
     * The default target accessor function returns a two element array [x, y].
     */
    target(): (this: This, d: LinkDatum, ...args: any[]) => NodeDatum;
    /**
     * Sets the target accessor to the specified function and returns this link generator.
     *
     * @param target Target node accessor function. The accessor function is invoked in the same "this" context as the generator was invoked in and
     * receives the same arguments that were passed into the link generator. The default target accessor function returns a two element array [x, y].
     */
    target(target: (this: This, d: LinkDatum, ...args: any[]) => NodeDatum): this;

    /**
     * Returns the current x-accessor, which defaults to a function accepting an number array
     * as its argument an returning the first element of the array.
     */
    x(): (this: This, node: NodeDatum, ...args: any[]) => number;
    /**
     * Sets the x-accessor to the specified function and returns this link generator.
     *
     * @param x x-coordinate accessor function. The accessor function is invoked in the same "this" context as the generator was invoked in and
     * receives as its first argument a node object followed by all additional arguments that were passed into the link generator.
     */
    x(x: (this: This, node: NodeDatum, ...args: any[]) => number): this;

    /**
     * Returns the current y-accessor, which defaults to a function accepting an number array
     * as its argument an returning the second element of the array.
     */
    y(): (this: This, node: NodeDatum, ...args: any[]) => number;
    /**
     * Sets the y-accessor to the specified function and returns this link generator.
     *
     * @param y y-coordinate accessor function. The accessor function is invoked in the same "this" context as the generator was invoked in and
     * receives as its first argument a node object followed by all additional arguments that were passed into the link generator.
     */
    y(y: (this: This, node: NodeDatum, ...args: any[]) => number): this;

    /**
     * Returns the current rendering context, which defaults to null.
     */
    context(): CanvasRenderingContext2D | null;
    /**
     * Sets the context and returns this link generator.
     */
    context(context: CanvasRenderingContext2D | null): this;
}

/**
 * Returns a new link generator using the specified curve. For example, to visualize links in a tree diagram rooted on the top edge of the display
 *
 * With the default settings the link generator accepts a link object conforming to the DefaultLinkObject interface.
 */
export function link(curve: CurveFactory): Link<any, DefaultLinkObject, [number, number]>;
/**
 * Returns a new link generator using the specified curve. For example, to visualize links in a tree diagram rooted on the top edge of the display
 *
 * Important: Ensure that the accessor functions are configured to work with the link and node datum types
 * specified in the generics.
 *
 * The first generic corresponds to the datum type of the link object for which the link is to be generated.
 *
 * The second generic corresponds to the datum type of the source/target node contained in the link object.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function link<LinkDatum, NodeDatum>(curve: CurveFactory): Link<any, LinkDatum, NodeDatum>;
/**
 * Returns a new link generator using the specified curve. For example, to visualize links in a tree diagram rooted on the top edge of the display
 *
 * Important: Ensure that the accessor functions are configured to work with the link and node datum types
 * specified in the generics.
 *
 * The first generic corresponds to the type of the "this" context within which the link generator and its accessor functions will be invoked.
 *
 * The second generic corresponds to the datum type of the link object for which the link is to be generated.
 *
 * The third generic corresponds to the datum type of the source/target node contained in the link object.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function link<This, LinkDatum, NodeDatum>(curve: CurveFactory): Link<This, LinkDatum, NodeDatum>;

/**
 * Shorthand for d3.link with d3.curveBumpX; suitable for visualizing links in a tree diagram rooted on the left edge of the display.
 *
 * With the default settings the link generator accepts a link object conforming to the DefaultLinkObject interface.
 */
export function linkHorizontal(): Link<any, DefaultLinkObject, [number, number]>;
/**
 * Shorthand for d3.link with d3.curveBumpX; suitable for visualizing links in a tree diagram rooted on the left edge of the display.
 *
 * Important: Ensure that the accessor functions are configured to work with the link and node datum types
 * specified in the generics.
 *
 * The first generic corresponds to the datum type of the link object for which the link is to be generated.
 *
 * The second generic corresponds to the datum type of the source/target node contained in the link object.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function linkHorizontal<LinkDatum, NodeDatum>(): Link<any, LinkDatum, NodeDatum>;
/**
 * Shorthand for d3.link with d3.curveBumpX; suitable for visualizing links in a tree diagram rooted on the left edge of the display.
 *
 * Important: Ensure that the accessor functions are configured to work with the link and node datum types
 * specified in the generics.
 *
 * The first generic corresponds to the type of the "this" context within which the link generator and its accessor functions will be invoked.
 *
 * The second generic corresponds to the datum type of the link object for which the link is to be generated.
 *
 * The third generic corresponds to the datum type of the source/target node contained in the link object.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function linkHorizontal<This, LinkDatum, NodeDatum>(): Link<This, LinkDatum, NodeDatum>;

/**
 * Shorthand for d3.link with d3.curveBumpX; suitable for visualizing links in a tree diagram rooted on the left edge of the display.
 *
 * With the default settings the link generator accepts a link object conforming to the DefaultLinkObject interface.
 */
export function linkVertical(): Link<any, DefaultLinkObject, [number, number]>;
/**
 * Shorthand for d3.link with d3.curveBumpY; suitable for visualizing links in a tree diagram rooted on the top edge of the display.
 *
 * Important: Ensure that the accessor functions are configured to work with the link and node datum types
 * specified in the generics.
 *
 * The first generic corresponds to the datum type of the link object for which the link is to be generated.
 *
 * The second generic corresponds to the datum type of the source/target node contained in the link object.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function linkVertical<LinkDatum, NodeDatum>(): Link<any, LinkDatum, NodeDatum>;
/**
 * Shorthand for d3.link with d3.curveBumpY; suitable for visualizing links in a tree diagram rooted on the top edge of the display.
 *
 * Important: Ensure that the accessor functions are configured to work with the link and node datum types
 * specified in the generics.
 *
 * The first generic corresponds to the type of the "this" context within which the link generator and its accessor functions will be invoked.
 *
 * The second generic corresponds to the datum type of the link object for which the link is to be generated.
 *
 * The third generic corresponds to the datum type of the source/target node contained in the link object.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function linkVertical<This, LinkDatum, NodeDatum>(): Link<This, LinkDatum, NodeDatum>;

/**
 * Shorthand for d3.link with d3.curveBumpY; suitable for visualizing links in a tree diagram rooted on the top edge of the display.
 *
 * The first generic corresponds to the type of the "this" context within which the radial link generator and its accessor functions will be invoked.
 *
 * The second generic corresponds to the datum type of the link object for which the link is to be generated.
 *
 * The third generic corresponds to the datum type of the source/target node contained in the link object.
 */
export interface LinkRadial<This, LinkDatum, NodeDatum> {
    /**
     * Generates a radial link for the given arguments.
     *
     * IMPORTANT: If the rendering context of the radial link generator is null,
     * then the link is returned as a path data string.
     *
     * The "this" context within which this function is invoked, will be the context within which the accessor methods of the generator are invoked.
     * All arguments passed into this function, will be passed to the accessor functions of the generator.
     *
     * @param d The datum for which the link is to be generated.
     */
    (this: This, d: LinkDatum, ...args: any[]): string | null;
    /**
     * Generates an link for the given arguments.
     *
     * IMPORTANT: If the radial link generator has been configured with a rendering context,
     * then the link is rendered to this context as a sequence of path method calls and this function returns void.
     *
     * The "this" context within which this function is invoked, will be the context within which the accessor methods of the generator are invoked.
     * All arguments passed into this function, will be passed to the accessor functions of the generator.
     *
     * @param d The datum for which the link is to be generated.
     */
    (this: This, d: LinkDatum, ...args: any[]): void;

    /**
     * Returns the current source node accessor function.
     * The default source accessor function returns a two element array [x, y].
     */
    source(): (this: This, d: LinkDatum, ...args: any[]) => NodeDatum;
    /**
     * Sets the source accessor to the specified function and returns this radial link generator.
     *
     * @param source Source node accessor function. The accessor function is invoked in the same "this" context as the generator was invoked in and
     * receives the same arguments that were passed into the radial link generator. The default target accessor function returns a two element array [x, y].
     */
    source(source: (this: This, d: LinkDatum, ...args: any[]) => NodeDatum): this;

    /**
     * Returns the current target node accessor function.
     * The default target accessor function returns a two element array [x, y].
     */
    target(): (this: This, d: LinkDatum, ...args: any[]) => NodeDatum;
    /**
     * Sets the target accessor to the specified function and returns this radial link generator.
     *
     * @param target Target node accessor function. The accessor function is invoked in the same "this" context as the generator was invoked in and
     * receives the same arguments that were passed into the radial link generator. The default target accessor function returns a two element array [x, y].
     */
    target(target: (this: This, d: LinkDatum, ...args: any[]) => NodeDatum): this;

    /**
     * Returns the current angle accessor, which defaults to a function accepting an number array
     * as its argument an returning the first element of the array.
     */
    angle(): (this: This, node: NodeDatum, ...args: any[]) => number;
    /**
     * Sets the angle accessor to the specified function and returns this radial link generator.
     * The angle is stated in radians, with 0 at -y (12 o’clock).
     *
     * @param angle Angle accessor function. The accessor function is invoked in the same "this" context as the generator was invoked in and
     * receives as its first argument a node object followed by all additional arguments that were passed into the radial link generator.
     */
    angle(angle: (this: This, node: NodeDatum, ...args: any[]) => number): this;

    /**
     * Returns the current radius accessor, which defaults to a function accepting an number array
     * as its argument an returning the second element of the array.
     */
    radius(): (this: This, node: NodeDatum, ...args: any[]) => number;
    /**
     * Sets the radius accessor to the specified function and returns this radial link generator.
     * The radius is measured as the distance from the origin ⟨0,0⟩.
     *
     * @param radius Radius accessor function. The accessor function is invoked in the same "this" context as the generator was invoked in and
     * receives as its first argument a node object followed by all additional arguments that were passed into the radial link generator.
     */
    radius(radius: (this: This, node: NodeDatum, ...args: any[]) => number): this;

    /**
     * Returns the current rendering context, which defaults to null.
     */
    context(): CanvasRenderingContext2D | null;
    /**
     * Sets the context and returns this link generator.
     */
    context(context: CanvasRenderingContext2D | null): this;
}

/**
 * @deprecated Use LinkRadial interface
 */
export type RadialLink<This, LinkDatum, NodeDatum> = LinkRadial<This, LinkDatum, NodeDatum>;

/**
 * Constructs a new default link generator with radial tangents, for example, to visualize links in a tree diagram
 * rooted in the center of the display.
 *
 * With the default settings the link generator accepts a link object conforming to the DefaultLinkObject interface.
 */
export function linkRadial(): LinkRadial<any, DefaultLinkObject, [number, number]>;
/**
 * Constructs a new link generator with radial tangents, for example, to visualize links in a tree diagram
 * rooted in the center of the display.
 *
 * Important: Ensure that the accessor functions are configured to work with the link and node datum types
 * specified in the generics.
 *
 * The first generic corresponds to the datum type of the link object for which the link is to be generated.
 *
 * The second generic corresponds to the datum type of the source/target node contained in the link object.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function linkRadial<LinkDatum, NodeDatum>(): LinkRadial<any, LinkDatum, NodeDatum>;
/**
 * Constructs a new link generator with radial tangents, for example, to visualize links in a tree diagram
 * rooted in the center of the display.
 *
 * Important: Ensure that the accessor functions are configured to work with the link and node datum types
 * specified in the generics.
 *
 * The first generic corresponds to the type of the "this" context within which the link generator and its accessor functions will be invoked.
 *
 * The second generic corresponds to the datum type of the link object for which the link is to be generated.
 *
 * The third generic corresponds to the datum type of the source/target node contained in the link object.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function linkRadial<This, LinkDatum, NodeDatum>(): LinkRadial<This, LinkDatum, NodeDatum>;

// -----------------------------------------------------------------------------------
// SYMBOLS
// -----------------------------------------------------------------------------------

/**
 * A Symbol Type.
 *
 * Symbol types are typically not used directly, instead being passed to symbol.type.
 * However, you can define your own symbol type implementation should none of the built-in types satisfy your needs using the following interface.
 * You can also use this low-level interface with a built-in symbol type as an alternative to the symbol generator.
 */
export interface SymbolType {
    /**
     * Renders this symbol type to the specified context with the specified size in square pixels. The context implements the CanvasPath interface.
     * (Note that this is a subset of the CanvasRenderingContext2D interface!)
     *
     * @param context A rendering context implementing CanvasPath.
     * @param size Size of the symbol to draw.
     */
    draw(context: CanvasPath_D3Shape, size: number): void;
}

/**
 * A symbol generator.
 *
 * Symbols provide a categorical shape encoding as is commonly used in scatterplots. Symbols are always centered at ⟨0,0⟩;
 * use a transform (see: SVG, Canvas) to move the arc to a different position.
 *
 * The first generic corresponds to the "this" context within which the symbol generator is invoked.
 * The second generic corresponds to the data type of the datum underlying the symbol.
 */
export interface Symbol<This, Datum> {
    /**
     * Generates a symbol for the given arguments.
     *
     * IMPORTANT: If the rendering context of the symbol generator is null,
     * then the symbol is returned as a path data string.
     *
     * The "this" context within which this function is invoked, will be the context within which the accessor methods of the generator are invoked.
     * All arguments passed into this function, will be passed to the accessor functions of the generator.
     *
     * For example, with the default settings, no arguments are needed to produce a circle with area 64 square pixels.
     *
     * @param d The datum for which the symbol is to be generated.
     */
    (this: This, d?: Datum, ...args: any[]): string | null;
    /**
     * Generates an symbol for the given arguments.
     *
     * IMPORTANT: If the symbol generator has been configured with a rendering context,
     * then the symbol is rendered to this context as a sequence of path method calls and this function returns void.
     *
     * The "this" context within which this function is invoked, will be the context within which the accessor methods of the generator are invoked.
     * All arguments passed into this function, will be passed to the accessor functions of the generator.
     *
     * For example, with the default settings, no arguments are needed to produce a circle with area 64 square pixels.
     *
     * @param d The datum for which the symbol is to be generated.
     */
    (this: This, d?: Datum, ...args: any[]): void;
    /**
     * Returns the current size accessor, which defaults to a function returning a constant value of 64.
     */
    size(): (this: This, d: Datum, ...args: any[]) => number;
    /**
     * Sets the size to the specified number and returns this symbol generator.
     *
     * @param size A fixed size (area in square pixels).
     */
    size(size: number): this;
    /**
     * Sets the size to the specified function and returns this symbol generator.
     *
     * Specifying the size as a function is useful for constructing a scatterplot with a size encoding.
     * If you wish to scale the symbol to fit a given bounding box, rather than by area, try SVG’s getBBox.
     *
     * @param size An accessor function returning a number to be used as a symbol size. The accessor function is invoked in the same "this" context as the generator was invoked in and
     * receives the same arguments that were passed into the symbol generator.
     */
    size(size: (this: This, d: Datum, ...args: any[]) => number): this;

    /**
     * Returns the current symbol type accessor, which defaults to a function returning the circle symbol type.
     */
    type(): (this: This, d: Datum, ...args: any[]) => SymbolType;
    /**
     * Sets the symbol type to the specified symbol type and returns this symbol generator.
     *
     * @param type A constant symbol type.
     */
    type(type: SymbolType): this;
    /**
     * Sets the symbol type to the specified function and returns this symbol generator.
     *
     * @param type An accessor function returning a symbol type. The accessor function is invoked in the same "this" context as the generator was invoked in and
     * receives the same arguments that were passed into the symbol generator. See symbols for the set of built-in symbol types.
     * To implement a custom symbol type, return an object that implements symbolType.draw.
     */
    type(type: (this: This, d: Datum, ...args: any[]) => SymbolType): this;

    /**
     * Returns the current rendering context, which defaults to null.
     */
    context(): CanvasRenderingContext2D | null;
    /**
     * Sets the context and returns this symbol generator.
     */
    context(context: CanvasRenderingContext2D | null): this;
}

/**
 * Constructs a new symbol generator of the specified type and size.
 * If not specified, type defaults to a circle, and size defaults to 64.
 *
 * The first generic corresponds to the "this" context within which the symbol generator is invoked.
 * The second generic corresponds to the data type of the datum underlying the symbol.
 *
 * @param type The specified type.
 * @param size The specified size.
 */
export function symbol<Datum = any>(
    type?: SymbolType | ((this: any, d: Datum, ...args: any[]) => SymbolType),
    size?: number | ((this: any, d: Datum, ...args: any[]) => number),
): Symbol<any, Datum>;

/**
 * Constructs a new symbol generator of the specified type and size.
 * If not specified, type defaults to a circle, and size defaults to 64.
 *
 * The first generic corresponds to the "this" context within which the symbol generator is invoked.
 * The second generic corresponds to the data type of the datum underlying the symbol.
 *
 * @param type The specified type.
 * @param size The specified size.
 */
export function symbol<This, Datum>(
    type?: SymbolType | ((this: This, d: Datum, ...args: any[]) => SymbolType),
    size?: number | ((this: This, d: Datum, ...args: any[]) => number),
): Symbol<This, Datum>;

/**
 * An array containing a set of symbol types designed for filling: circle, cross, diamond, square, star, triangle, and wye.
 * Useful for constructing the range of an ordinal scale should you wish to use a shape encoding for categorical data.
 */
export const symbolsFill: SymbolType[];

/**
 * An array containing a set of symbol types designed for stroking: circle, plus, x, triangle2, asterisk, square2, and diamond2.
 * Useful for constructing the range of an ordinal scale should you wish to use a shape encoding for categorical data.
 */
export const symbolsStroke: SymbolType[];

/**
 * @deprecated Use symbolsFill
 */
export const symbols: SymbolType[];

/**
 * The asterisk symbol type; intended for stroking.
 */
export const symbolAsterisk: SymbolType;

/**
 * The circle symbol type; intended for either filling or stroking.
 */
export const symbolCircle: SymbolType;

/**
 * The Greek cross symbol type, with arms of equal length; intended for filling.
 */
export const symbolCross: SymbolType;

/**
 * The rhombus symbol type; intended for filling.
 */
export const symbolDiamond: SymbolType;

/**
 * The rotated square symbol type; intended for stroking.
 */
export const symbolDiamond2: SymbolType;

/**
 * The plus symbol type; intended for stroking.
 */
export const symbolPlus: SymbolType;

/**
 * The square symbol type; intended for filling.
 */
export const symbolSquare: SymbolType;

/**
 * The square2 symbol type; intended for stroking.
 */
export const symbolSquare2: SymbolType;

/**
 * The pentagonal star (pentagram) symbol type; intended for filling.
 */
export const symbolStar: SymbolType;

/**
 * The up-pointing triangle symbol type; intended for filling.
 */
export const symbolTriangle: SymbolType;

/**
 * The up-pointing triangle symbol type; intended for stroking.
 */
export const symbolTriangle2: SymbolType;

/**
 * The Y-shape symbol type; intended for filling.
 */
export const symbolWye: SymbolType;

/**
 * The X-shape symbol type; intended for stroking.
 */
export const symbolX: SymbolType;

/**
 * The X-shape symbol type; intended for stroking.
 */
export const symbolTimes: SymbolType;

// -----------------------------------------------------------------------------------
// pointRadial
// -----------------------------------------------------------------------------------

/**
 * Returns the point [x, y] for the given angle and the given radius.
 * @param angle Angle in radians, with 0 at -y (12 o’clock) and positive angles proceeding clockwise.
 * @param radius Radius.
 */
export function pointRadial(angle: number, radius: number): [number, number];

// -----------------------------------------------------------------------------------
// STACKS
// -----------------------------------------------------------------------------------

/**
 * Each series point j in a stack chart corresponds to the jth element in the input data.
 * Each point is represented as an array [y0, y1] where y0 is the lower value (baseline) and y1 is the upper value (topline);
 * the difference between y0 and y1 corresponds to the computed value for this point.
 *
 * SeriesPoint is a [number, number] two-element Array with added data and index properties
 * related to the data element which formed the basis for theSeriesPoint.
 */
export interface SeriesPoint<Datum> extends Array<number> {
    /**
     * Corresponds to y0, the lower value (baseline).
     */
    0: number;
    /**
     * Corresponds to y1, the upper value (topline).
     */
    1: number;
    /**
     * The data element underlying the series point.
     */
    data: Datum;
}

/**
 * The series are determined by the keys accessor; each series i in the returned array corresponds to the ith key.
 * Each series is an array of points, where each point j corresponds to the jth element in the input data.
 *
 * The key for each series is available as series.key, and the index as series.index.
 */
export interface Series<Datum, Key> extends Array<SeriesPoint<Datum>> {
    /**
     * Key of the series.
     */
    key: Key;
    /**
     * Index of the series in the series array returned by stack generator.
     */
    index: number;
}

/**
 * A stack generator.
 *
 * Some shape types can be stacked, placing one shape adjacent to another.
 * For example, a bar chart of monthly sales might be broken down into a multi-series bar chart by product category, stacking bars vertically.
 * This is equivalent to subdividing a bar chart by an ordinal dimension (such as product category) and applying a color encoding.
 *
 * Stacked charts can show overall value and per-category value simultaneously; however, it is typically harder to compare across categories, as only the bottom layer of the stack is aligned.
 * So, chose the stack order carefully, and consider a streamgraph. (See also grouped charts.)
 *
 * Like the pie generator, the stack generator does not produce a shape directly. Instead it computes positions which you can then pass to an area generator or use directly, say to position bars.
 *
 * The first generic corresponds to the "this" context in which the stack generator and its accessor functions are invoked.
 *
 * The second generic corresponds to the data type of an element in the data array passed into the stack generator.
 *
 * The third generic corresponds to the data type of key used to identify a series.
 */
export interface Stack<This, Datum, Key> {
    /**
     * Generates a stack for the given array of data, returning an array representing each series.
     * The resulting array has one element per series. Each series in then typically passed to an area generator to render an area chart,
     * or used to construct rectangles for a bar chart.
     *
     * Any additional arguments are arbitrary; they are simply propagated to the generator’s accessor functions along with the this object.
     *
     * @param data Array of data elements.
     */
    (data: Iterable<Datum>, ...args: any[]): Array<Series<Datum, Key>>;

    /**
     * Returns the current keys accessor, which defaults to the empty array.
     */
    keys(): (this: This, data: Datum[], ...args: any[]) => Key[];
    /**
     * Sets the keys accessor to the specified function or array and returns this stack generator.
     * A series (layer) is generated for each key.
     * Keys are typically strings, but they may be arbitrary values.
     * The series’ key is passed to the value accessor, along with each data point, to compute the point’s value.
     */
    keys(keys: Iterable<Key> | ((this: This, data: Datum[], ...args: any[]) => Key[])): this;

    /**
     * Returns the current value accessor, which defaults to a function return the property corresponding to the relevant key from the data element.
     *
     * Thus, by default the stack generator assumes that the input data is an array of objects, with each object exposing named properties with numeric values; see stack for an example.
     */
    value(): (d: Datum, key: Key, i: number, data: Datum[]) => number;
    /**
     * Sets the value accessor to the specified number and returns this stack generator.
     *
     * @param value A constant value.
     */
    value(value: number): this;
    /**
     * Sets the value accessor to the specified function and returns this stack generator.
     *
     * @param value A value accessor function which returns the numeric value for a given data element and key combination. The accessor function is invoked for each data element and key being passed
     * the datum, the key, index of the data element in the input data array, and the complete data array.
     */
    value(value: (d: Datum, key: Key, i: number, data: Datum[]) => number): this;

    /**
     * Returns the current order accessor, which defaults to stackOrderNone; this uses the order given by the key accessor.
     */
    order(): (series: Series<Datum, Key>) => Iterable<number>;
    /**
     * Sets the order accessor to the specified array and returns this stack generator.
     */
    order(order: null | Iterable<number>): this;
    /**
     * Sets the order accessor to the specified function and returns this stack generator.
     *
     * The stack order is computed prior to the offset; thus, the lower value for all points is zero at the time the order is computed.
     * The index attribute for each series is also not set until after the order is computed.
     *
     * See stack orders for the built-in orders.
     *
     * @param order A function returning a sort order array. It is passed the generated series array and must return an array of numeric indexes representing the stack order.
     */
    order(order: (series: Series<Datum, Key>) => Iterable<number>): this;

    /**
     * Returns the current offset accessor, which defaults to stackOffsetNone; this uses a zero baseline.
     */
    offset(): (series: Series<Datum, Key>, order: number[]) => void;
    /**
     * Reset the offset to use stackOffsetNone; this uses a zero baseline.
     *
     * @param offset null to set to the default stackOffsetNone.
     */
    offset(offset: null): this;
    /**
     * Sets the offset accessor to the specified function and returns this stack generator.
     *
     * @param offset A function which is passed the generated series array and the order index array;
     *               it is then responsible for updating the lower and upper values in the series array.
     */
    offset(offset: (series: Series<Datum, Key>, order: number[]) => void): this;
}

/**
 * Constructs a new stack generator with the default settings.
 *
 * Ensure that the accessors used with the stack generator correspond to the arguments passed into them.
 */
export function stack(): Stack<any, { [key: string]: number }, string>;
/**
 * Constructs a new stack generator with the default settings.
 *
 * Ensure that the accessors used with the stack generator correspond to the arguments passed into them.
 *
 * The generic corresponds to the data type of an element in the data array passed into the stack generator.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function stack<Datum>(): Stack<any, Datum, string>;
/**
 * Constructs a new stack generator with the default settings.
 *
 * Ensure that the accessors used with the stack generator correspond to the arguments passed into them.
 *
 * The first generic corresponds to the data type of an element in the data array passed into the stack generator.
 *
 * The second generic corresponds to the data type of key used to identify a series.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function stack<Datum, Key>(): Stack<any, Datum, Key>;
/**
 * Constructs a new stack generator with the default settings.
 *
 * Ensure that the accessors used with the stack generator correspond to the arguments passed into them.
 *
 * The first generic corresponds to the "this" context in which the stack generator and its accessor functions are invoked.
 *
 * The second generic corresponds to the data type of an element in the data array passed into the stack generator.
 *
 * The third generic corresponds to the data type of key used to identify a series.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function stack<This, Datum, Key>(): Stack<This, Datum, Key>;

/**
 * Returns a series order such that the earliest series (according to the maximum value) is at the bottom.
 *
 * @param series A series generated by a stack generator.
 */
export function stackOrderAppearance(series: Series<any, any>): number[];

/**
 * Returns a series order such that the smallest series (according to the sum of values) is at the bottom.
 *
 * @param series A series generated by a stack generator.
 */
export function stackOrderAscending(series: Series<any, any>): number[];

/**
 * Returns a series order such that the largest series (according to the sum of values) is at the bottom.
 *
 * @param series A series generated by a stack generator.
 */
export function stackOrderDescending(series: Series<any, any>): number[];

/**
 * Returns a series order such that the larger series (according to the sum of values) are on the inside and the smaller series are on the outside.
 * This order is recommended for streamgraphs in conjunction with the wiggle offset. See Stacked Graphs—Geometry & Aesthetics by Byron & Wattenberg for more information.
 *
 * @param series A series generated by a stack generator.
 */
export function stackOrderInsideOut(series: Series<any, any>): number[];

/**
 * Returns the given series order [0, 1, … n - 1] where n is the number of elements in series. Thus, the stack order is given by the key accessor.
 *
 * @param series A series generated by a stack generator.
 */
export function stackOrderNone(series: Series<any, any>): number[];

/**
 * Returns the reverse of the given series order [n - 1, n - 2, … 0] where n is the number of elements in series. Thus, the stack order is given by the reverse of the key accessor.
 *
 * @param series A series generated by a stack generator.
 */
export function stackOrderReverse(series: Series<any, any>): number[];

/**
 * Applies a zero baseline and normalizes the values for each point such that the topline is always one.
 *
 * @param series A series generated by a stack generator.
 * @param order An array of numeric indexes representing the stack order.
 */
export function stackOffsetExpand(series: Series<any, any>, order: Iterable<number>): void;

/**
 * Positive values are stacked above zero, while negative values are stacked below zero.
 *
 * @param series A series generated by a stack generator.
 * @param order An array of numeric indexes representing the stack order.
 */
export function stackOffsetDiverging(series: Series<any, any>, order: Iterable<number>): void;

/**
 * Applies a zero baseline.
 *
 * @param series A series generated by a stack generator.
 * @param order An array of numeric indexes representing the stack order.
 */
export function stackOffsetNone(series: Series<any, any>, order: Iterable<number>): void;

/**
 * Shifts the baseline down such that the center of the streamgraph is always at zero.
 *
 * @param series A series generated by a stack generator.
 * @param order An array of numeric indexes representing the stack order.
 */
export function stackOffsetSilhouette(series: Series<any, any>, order: Iterable<number>): void;

/**
 * Shifts the baseline so as to minimize the weighted wiggle of layers. This offset is recommended for streamgraphs in conjunction with the inside-out order.
 * See Stacked Graphs—Geometry & Aesthetics by Bryon & Wattenberg for more information.
 *
 * @param series A series generated by a stack generator.
 * @param order An array of numeric indexes representing the stack order.
 */
export function stackOffsetWiggle(series: Series<any, any>, order: Iterable<number>): void;

----------------------------------------
File: ./animations/node_modules/@types/d3-array/README.md
----------------------------------------
# Installation
> `npm install --save @types/d3-array`

# Summary
This package contains type definitions for d3-array (https://github.com/d3/d3-array).

# Details
Files were exported from https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/d3-array.

### Additional Details
 * Last updated: Tue, 07 Nov 2023 15:11:36 GMT
 * Dependencies: none

# Credits
These definitions were written by [Alex Ford](https://github.com/gustavderdrache), [Boris Yankov](https://github.com/borisyankov), [Tom Wanzek](https://github.com/tomwanzek), [denisname](https://github.com/denisname), [Hugues Stefanski](https://github.com/ledragon), [Nathan Bierema](https://github.com/Methuselah96), and [Fil](https://github.com/Fil).

----------------------------------------
File: ./animations/node_modules/@types/d3-array/index.d.ts
----------------------------------------
// Last module patch version validated against: 3.2.4

// --------------------------------------------------------------------------
// Shared Types and Interfaces
// --------------------------------------------------------------------------

/**
 * Administrivia: JavaScript primitive types and Date
 */
export type Primitive = number | string | boolean | Date;

/**
 * Administrivia: anything with a valueOf(): number method is comparable, so we allow it in numeric operations
 */
export interface Numeric {
    valueOf(): number;
}

/**
 * Administrivia: a matrix of numeric values.
 * If height is not specified, it is inferred from the given width and data.length.
 */
export interface Matrix {
    data: ArrayLike<number>;
    width: number;
    height?: number;
}

/**
 * Represents a nested/recursive InternMap type
 *
 * The first generic "TObject" refers to the type of the data object that is available in the accessor functions.
 * The second generic "TReduce" refers to the type of the data available at the deepest level (the result data).
 * The third generic "TKeys" refers to the type of the keys at each level of the nestes InternMap.
 */
export type NestedInternMap<TObject, TReduce, TKeys extends unknown[]> = TKeys extends [infer TFirst, ...infer TRest]
    ? InternMap<TFirst, NestedInternMap<TObject, TReduce, TRest>>
    : TReduce;

/**
 * Represents a nested/recursive Array type
 *
 * The first generic "TObject" refers to the type of the data object that is available in the accessor functions.
 * The second generic "TReduce" refers to the type of the data available at the deepest level (the result data).
 * The third generic "TKeys" refers to the type of the keys at each level of the nestes Array.
 */
export type NestedArray<TObject, TReduce, TKeys extends unknown[]> = TKeys extends [infer TFirst, ...infer TRest]
    ? Array<[TFirst, NestedArray<TObject, TReduce, TRest>]>
    : TReduce;

// --------------------------------------------------------------------------------------
// Statistics
// --------------------------------------------------------------------------------------

/**
 * Return the minimum value in the array using natural order.
 */
export function min(iterable: Iterable<string>): string | undefined;

/**
 * Return the minimum value in the array using natural order.
 */
export function min<T extends Numeric>(iterable: Iterable<T>): T | undefined;
/**
 * Return the minimum value in the array using natural order.
 */
export function min<T>(
    iterable: Iterable<T>,
    accessor: (datum: T, index: number, array: Iterable<T>) => string | undefined | null,
): string | undefined;
/**
 * Return the minimum value in the array using natural order.
 */
export function min<T, U extends Numeric>(
    iterable: Iterable<T>,
    accessor: (datum: T, index: number, array: Iterable<T>) => U | undefined | null,
): U | undefined;

/**
 * Return the index of the minimum value in the array using natural order.
 */
export function minIndex(iterable: Iterable<unknown>): number;
/**
 * Return the index of the minimum value in the array using natural order and a projection function to map values.
 */
export function minIndex<TDatum>(
    iterable: Iterable<TDatum>,
    accessor: (datum: TDatum, index: number, array: Iterable<TDatum>) => unknown,
): number;
/**
 * Return the index of the minimum value in the array using natural order.
 */
export function minIndex(iterable: Iterable<unknown>): number;

/**
 * Return the maximum value in the array of strings using natural order.
 */
export function max(iterable: Iterable<string>): string | undefined;
/**
 * Return the maximum value in the array of numbers using natural order.
 */
export function max<T extends Numeric>(iterable: Iterable<T>): T | undefined;
/**
 * Return the maximum value in the array using natural order and a projection function to map values to strings.
 */
export function max<T>(
    iterable: Iterable<T>,
    accessor: (datum: T, index: number, array: Iterable<T>) => string | undefined | null,
): string | undefined;
/**
 * Return the maximum value in the array using natural order and a projection function to map values to easily-sorted values.
 */
export function max<T, U extends Numeric>(
    iterable: Iterable<T>,
    accessor: (datum: T, index: number, array: Iterable<T>) => U | undefined | null,
): U | undefined;

/**
 * Return the index of the maximum value in the array using natural order.
 */
export function maxIndex(iterable: Iterable<unknown>): number;
/**
 * Return the index of the maximum value in the array using natural order and a projection function to map values.
 */
export function maxIndex<TDatum>(
    iterable: Iterable<TDatum>,
    accessor: (datum: TDatum, index: number, array: Iterable<TDatum>) => unknown,
): number;

/**
 * Return the min and max simultaneously.
 */
export function extent(iterable: Iterable<string>): [string, string] | [undefined, undefined];
/**
 * Return the min and max simultaneously.
 */
export function extent<T extends Numeric>(iterable: Iterable<T>): [T, T] | [undefined, undefined];
/**
 * Return the min and max simultaneously.
 */
export function extent<T>(
    iterable: Iterable<T>,
    accessor: (datum: T, index: number, array: Iterable<T>) => string | undefined | null,
): [string, string] | [undefined, undefined];
/**
 * Return the min and max simultaneously.
 */
export function extent<T, U extends Numeric>(
    iterable: Iterable<T>,
    accessor: (datum: T, index: number, array: Iterable<T>) => U | undefined | null,
): [U, U] | [undefined, undefined];

/**
 * Returns the mode of the given iterable, i.e. the value which appears the most often.
 * In case of equality, returns the first of the relevant values.
 * If the iterable contains no comparable values, returns undefined.
 * An optional accessor function may be specified, which is equivalent to calling Array.from before computing the mode.
 * This method ignores undefined, null and NaN values; this is useful for ignoring missing data.
 */
export function mode(iterable: Iterable<Numeric | undefined | null>): number;
/**
 * Returns the mode of the given iterable, i.e. the value which appears the most often.
 * In case of equality, returns the first of the relevant values.
 * If the iterable contains no comparable values, returns undefined.
 * An optional accessor function may be specified, which is equivalent to calling Array.from before computing the mode.
 * This method ignores undefined, null and NaN values; this is useful for ignoring missing data.
 */
export function mode<T>(
    iterable: Iterable<T>,
    accessor: (datum: T, index: number, array: Iterable<T>) => number | undefined | null,
): number;

/**
 * Compute the sum of an array of numbers.
 */
export function sum(iterable: Iterable<Numeric | undefined | null>): number;
/**
 * Compute the sum of an array, using the given accessor to convert values to numbers.
 */
export function sum<T>(
    iterable: Iterable<T>,
    accessor: (datum: T, index: number, array: Iterable<T>) => number | undefined | null,
): number;

/**
 * Return the mean of an array of numbers
 */
export function mean(iterable: Iterable<Numeric | undefined | null>): number | undefined;
/**
 * Return the mean of an array of numbers
 */
export function mean<T>(
    iterable: Iterable<T>,
    accessor: (datum: T, index: number, array: Iterable<T>) => number | undefined | null,
): number | undefined;

/**
 * Return the median of an array of numbers
 */
export function median(iterable: Iterable<Numeric | undefined | null>): number | undefined;
/**
 * Return the median of an array of numbers
 */
export function median<T>(
    iterable: Iterable<T>,
    accessor: (element: T, i: number, array: Iterable<T>) => number | undefined | null,
): number | undefined;

/**
 * Like median, but returns the index of the element to the left of the median.
 */
export function medianIndex(iterable: Iterable<Numeric | undefined | null>): number;
/**
 * Like median, but returns the index of the element to the left of the median.
 */
export function medianIndex<T>(
    iterable: Iterable<T>,
    accessor: (element: T, i: number, array: Iterable<T>) => number | undefined | null,
): number;

/**
 * Returns the cumulative sum of the given iterable of numbers, as a Float64Array of the same length.
 * If the iterable contains no numbers, returns zeros.
 * An optional accessor function may be specified, which is equivalent to calling Array.from before computing the cumulative sum.
 * This method ignores undefined and NaN values; this is useful for ignoring missing data.
 */
export function cumsum(iterable: Iterable<Numeric | undefined | null>): Float64Array;
/**
 * Returns the cumulative sum of the given iterable of numbers, as a Float64Array of the same length.
 * If the iterable contains no numbers, returns zeros.
 * An optional accessor function may be specified, which is equivalent to calling Array.from before computing the cumulative sum.
 * This method ignores undefined and NaN values; this is useful for ignoring missing data.
 */
export function cumsum<T>(
    iterable: Iterable<T>,
    accessor: (element: T, i: number, array: Iterable<T>) => number | undefined | null,
): Float64Array;

/**
 * Returns the p-quantile of the given iterable of numbers, where p is a number in the range [0, 1].
 *
 * An optional accessor function may be specified, which is equivalent to calling array.map(accessor) before computing the quantile.
 */
export function quantile(iterable: Iterable<Numeric | undefined | null>, p: number): number | undefined;
/**
 * Returns the p-quantile of the given iterable of numbers, where p is a number in the range [0, 1].
 *
 * An optional accessor function may be specified, which is equivalent to calling array.map(accessor) before computing the quantile.
 */
export function quantile<T>(
    iterable: Iterable<T>,
    p: number,
    accessor: (element: T, i: number, array: Iterable<T>) => number | undefined | null,
): number | undefined;

/**
 * Similar to quantile, but returns the index to the left of p.
 */
export function quantileIndex(iterable: Iterable<Numeric | undefined | null>, p: number): number;
/**
 * Similar to quantile, but returns the index to the left of p.
 */
export function quantileIndex<T>(
    iterable: Iterable<T>,
    p: number,
    accessor: (element: T, i: number, array: Iterable<T>) => number | undefined | null,
): number;

/**
 * Similar to quantile, but expects the input to be a sorted array of values.
 * In contrast with quantile, the accessor is only called on the elements needed to compute the quantile.
 */
export function quantileSorted(
    array: Array<Numeric | undefined | null>,
    p: number,
): number | undefined;
/**
 * Similar to quantile, but expects the input to be a sorted array of values.
 * In contrast with quantile, the accessor is only called on the elements needed to compute the quantile.
 */
export function quantileSorted<T>(
    array: T[],
    p: number,
    accessor: (element: T, i: number, array: T[]) => number | undefined | null,
): number | undefined;

/**
 * Returns an array with the rank of each value in the iterable, i.e. the zero-based index of the value when the iterable is sorted.
 * Nullish values are sorted to the end and ranked NaN.
 * An optional comparator or accessor function may be specified; the latter is equivalent to calling array.map(accessor) before computing the ranks.
 * If comparator is not specified, it defaults to ascending.
 * Ties (equivalent values) all get the same rank, defined as the first time the value is found.
 */
export function rank(iterable: Iterable<Numeric | undefined | null>): Float64Array;
/**
 * Returns an array with the rank of each value in the iterable, i.e. the zero-based index of the value when the iterable is sorted.
 * Nullish values are sorted to the end and ranked NaN.
 * An optional comparator or accessor function may be specified; the latter is equivalent to calling array.map(accessor) before computing the ranks.
 * If comparator is not specified, it defaults to ascending.
 * Ties (equivalent values) all get the same rank, defined as the first time the value is found.
 */
export function rank<T>(
    iterable: Iterable<T>,
    accessorOrComparator:
        | ((datum: T, index: number, array: Iterable<T>) => number | undefined | null)
        | ((a: T, b: T) => number | undefined | null),
): Float64Array;

/**
 * Returns an unbiased estimator of the population variance of the given iterable of numbers using Welford’s algorithm.
 * If the iterable has fewer than two numbers, returns undefined.
 * An optional accessor function may be specified, which is equivalent to calling Array.from before computing the variance.
 * This method ignores undefined and NaN values; this is useful for ignoring missing data.
 */
export function variance(iterable: Iterable<Numeric | undefined | null>): number | undefined;
/**
 * Returns an unbiased estimator of the population variance of the given iterable of numbers using Welford’s algorithm.
 * If the iterable has fewer than two numbers, returns undefined.
 * An optional accessor function may be specified, which is equivalent to calling Array.from before computing the variance.
 * This method ignores undefined and NaN values; this is useful for ignoring missing data.
 */
export function variance<T>(
    iterable: Iterable<T>,
    accessor: (datum: T, index: number, array: Iterable<T>) => number | undefined | null,
): number | undefined;

/**
 * Compute the standard deviation, defined as the square root of the bias-corrected variance, of the given array of numbers.
 */
export function deviation(iterable: Iterable<Numeric | undefined | null>): number | undefined;
/**
 * Compute the standard deviation, defined as the square root of the bias-corrected variance, of the given array,
 * using the given accessor to convert values to numbers.
 */
export function deviation<T>(
    iterable: Iterable<T>,
    accessor: (datum: T, index: number, array: Iterable<T>) => number | undefined | null,
): number | undefined;

/**
 * Returns a full precision summation of the given values.
 * Although slower, d3.fsum can replace d3.sum wherever greater precision is needed. Uses d3.Adder.
 */
export function fsum(values: Iterable<Numeric | undefined | null>): number;
/**
 * Returns a full precision summation of the given values.
 * Although slower, d3.fsum can replace d3.sum wherever greater precision is needed. Uses d3.Adder.
 */
export function fsum<T>(
    values: Iterable<T>,
    accessor: (datum: T, index: number, array: Iterable<T>) => number | undefined | null,
): number;

/**
 * Returns a full precision cumulative sum of the given values.
 * Although slower, d3.fcumsum can replace d3.cumsum when greater precision is needed. Uses d3.Adder.
 */
export function fcumsum(values: Iterable<Numeric | undefined | null>): Float64Array;
/**
 * Returns a full precision cumulative sum of the given values.
 * Although slower, d3.fcumsum can replace d3.cumsum when greater precision is needed. Uses d3.Adder.
 */
export function fcumsum<T>(
    values: Iterable<T>,
    accessor: (datum: T, index: number, array: Iterable<T>) => number | undefined | null,
): Float64Array;

export class Adder {
    /**
     * Creates a full precision adder for IEEE 754 floating point numbers, setting its initial value to 0.
     */
    constructor();

    /**
     * Adds the specified number to the adder’s current value and returns the adder.
     */
    add(number: number): Adder;

    /**
     * Returns the IEEE 754 double precision representation of the adder’s current value.
     * Most useful as the short-hand notation +adder.
     */
    valueOf(): number;
}

// --------------------------------------------------------------------------------------
// Search
// --------------------------------------------------------------------------------------

/**
 * Returns the least element of the specified iterable according to the specified comparator.
 * If comparator is not specified, it defaults to ascending.
 */
export function least<T>(iterable: Iterable<T>, comparator?: (a: T, b: T) => number): T | undefined;
/**
 * Returns the least element of the specified iterable according to the specified accessor.
 */
export function least<T>(iterable: Iterable<T>, accessor: (a: T) => unknown): T | undefined;

/**
 * Returns the index of the least element of the specified iterable according to the specified comparator.
 */
export function leastIndex(iterable: Iterable<unknown>): number | undefined;
/**
 * Returns the index of the least element of the specified iterable according to the specified comparator.
 */
export function leastIndex<T>(iterable: Iterable<T>, comparator: (a: T, b: T) => number): number | undefined;
/**
 * Returns the index of the least element of the specified iterable according to the specified accessor.
 */
// tslint:disable-next-line:unified-signatures
export function leastIndex<T>(iterable: Iterable<T>, accessor: (a: T) => unknown): number | undefined;

/**
 * Returns the greatest element of the specified iterable according to the specified comparator or accessor.
 * If the given iterable contains no comparable elements (i.e., the comparator returns NaN when comparing each element to itself), returns undefined.
 * If comparator is not specified, it defaults to ascending.
 */
export function greatest<T>(iterable: Iterable<T>, comparator?: (a: T, b: T) => number): T | undefined;
/**
 * Returns the greatest element of the specified iterable according to the specified comparator or accessor.
 * If the given iterable contains no comparable elements (i.e., the comparator returns NaN when comparing each element to itself), returns undefined.
 * If comparator is not specified, it defaults to ascending.
 */
export function greatest<T>(iterable: Iterable<T>, accessor: (a: T) => unknown): T | undefined;

/**
 * Returns the index of the greatest element of the specified iterable according to the specified comparator or accessor.
 * If the given iterable contains no comparable elements (i.e., the comparator returns NaN when comparing each element to itself), returns -1.
 * If comparator is not specified, it defaults to ascending.
 */
export function greatestIndex(iterable: Iterable<unknown>): number | undefined;
/**
 * Returns the index of the greatest element of the specified iterable according to the specified comparator or accessor.
 * If the given iterable contains no comparable elements (i.e., the comparator returns NaN when comparing each element to itself), returns -1.
 * If comparator is not specified, it defaults to ascending.
 */
export function greatestIndex<T>(iterable: Iterable<T>, comparator: (a: T, b: T) => number): number | undefined;
/**
 * Returns the index of the greatest element of the specified iterable according to the specified comparator or accessor.
 * If the given iterable contains no comparable elements (i.e., the comparator returns NaN when comparing each element to itself), returns -1.
 * If comparator is not specified, it defaults to ascending.
 */
// tslint:disable-next-line:unified-signatures
export function greatestIndex<T>(iterable: Iterable<T>, accessor: (a: T) => unknown): number | undefined;

export function bisectLeft(array: ArrayLike<number>, x: number, lo?: number, hi?: number): number;
export function bisectLeft(array: ArrayLike<string>, x: string, lo?: number, hi?: number): number;
export function bisectLeft(array: ArrayLike<Date>, x: Date, lo?: number, hi?: number): number;

export function bisectRight(array: ArrayLike<number>, x: number, lo?: number, hi?: number): number;
export function bisectRight(array: ArrayLike<string>, x: string, lo?: number, hi?: number): number;
export function bisectRight(array: ArrayLike<Date>, x: Date, lo?: number, hi?: number): number;

export function bisectCenter(array: ArrayLike<number>, x: number, lo?: number, hi?: number): number;
export function bisectCenter(array: ArrayLike<string>, x: string, lo?: number, hi?: number): number;
export function bisectCenter(array: ArrayLike<Date>, x: Date, lo?: number, hi?: number): number;

export const bisect: typeof bisectRight;

export interface Bisector<T, U> {
    left(array: ArrayLike<T>, x: U, lo?: number, hi?: number): number;
    right(array: ArrayLike<T>, x: U, lo?: number, hi?: number): number;
    center(array: ArrayLike<T>, x: U, lo?: number, hi?: number): number;
}

export function bisector<T, U>(comparator: (a: T, b: U) => number): Bisector<T, U>;
// tslint:disable-next-line:unified-signatures
export function bisector<T, U>(accessor: (x: T) => U): Bisector<T, U>;

/**
 * Rearranges items so that all items in the [left, k] are the smallest. The k-th element will have the (k - left + 1)-th smallest value in [left, right].
 *
 * @param array The array to partially sort (in place).
 * @param k The middle index for partial sorting.
 * @param left The left index of the range to sort.
 * @param right The right index.
 * @param compare The compare function.
 */
export function quickselect<T>(
    array: ArrayLike<T>,
    k: number,
    left?: number,
    right?: number,
    compare?: (a: Primitive | undefined, b: Primitive | undefined) => number,
): T[];

// NB. this is limited to primitive values due to D3's use of the <, >, and >= operators. Results get weird for object instances.
/**
 * Compares two primitive values for sorting (in ascending order).
 */
export function ascending(a: Primitive | undefined, b: Primitive | undefined): number;

// NB. this is limited to primitive values due to D3's use of the <, >, and >= operators. Results get weird for object instances.
/**
 * Compares two primitive values for sorting (in descending order).
 */
export function descending(a: Primitive | undefined, b: Primitive | undefined): number;

// --------------------------------------------------------------------------------------
// Transformations
// --------------------------------------------------------------------------------------

/**
 * Groups the specified iterable of values into an InternMap from key to array of value.
 *
 * @param iterable The iterable to group.
 * @param keys The key functions.
 */
export function group<TObject, TKeys extends unknown[]>(
    iterable: Iterable<TObject>,
    ...keys: {
        [Index in keyof TKeys]: (value: TObject, index: number, values: TObject[]) => TKeys[Index];
    }
): NestedInternMap<TObject, TObject[], TKeys>;

/**
 * Equivalent to group, but returns nested arrays instead of nested maps.
 *
 * @param iterable The iterable to group.
 * @param keys The key functions.
 */
export function groups<TObject, TKeys extends unknown[]>(
    iterable: Iterable<TObject>,
    ...keys: {
        [Index in keyof TKeys]: (value: TObject, index: number, values: TObject[]) => TKeys[Index];
    }
): NestedArray<TObject, TObject[], TKeys>;

/**
 * Equivalent to group, but returns a flat array of [key0, key1, …, values] instead of nested maps.
 *
 * @param iterable The iterable to group.
 * @param keys The key functions.
 */
export function flatGroup<TObject, TKeys extends unknown[]>(
    iterable: Iterable<TObject>,
    ...keys: {
        [Index in keyof TKeys]: (value: TObject, index: number, values: TObject[]) => TKeys[Index];
    }
): Array<[...TKeys, TObject[]]>;

/**
 * Equivalent to group but returns a unique value per compound key instead of an array, throwing if the key is not unique.
 *
 * @param iterable The iterable to group.
 * @param key The key functions.
 */
export function index<TObject, TKeys extends unknown[]>(
    iterable: Iterable<TObject>,
    ...keys: {
        [Index in keyof TKeys]: (value: TObject, index: number, values: TObject[]) => TKeys[Index];
    }
): NestedInternMap<TObject, TObject, TKeys>;

/**
 * Equivalent to index, but returns nested arrays instead of nested maps.
 *
 * @param iterable The iterable to group.
 * @param keys The key functions.
 */
export function indexes<TObject, TKeys extends unknown[]>(
    iterable: Iterable<TObject>,
    ...keys: {
        [Index in keyof TKeys]: (value: TObject, index: number, values: TObject[]) => TKeys[Index];
    }
): NestedArray<TObject, TObject, TKeys>;

/**
 * Groups and reduces the specified array of values into an InternMap from key to value.
 *
 * @param iterable The iterable to group.
 * @param reduce The reduce function.
 * @param keys The key functions.
 */
export function rollup<TObject, TReduce, TKeys extends unknown[]>(
    iterable: Iterable<TObject>,
    reduce: (values: TObject[]) => TReduce,
    ...keys: {
        [Index in keyof TKeys]: (value: TObject, index: number, values: TObject[]) => TKeys[Index];
    }
): NestedInternMap<TObject, TReduce, TKeys>;

/**
 * Equivalent to rollup, but returns nested arrays instead of nested maps.
 *
 * @param iterable The iterable to group.
 * @param reduce The reduce function.
 * @param keys The key functions.
 */
export function rollups<TObject, TReduce, TKeys extends unknown[]>(
    iterable: Iterable<TObject>,
    reduce: (values: TObject[]) => TReduce,
    ...keys: {
        [Index in keyof TKeys]: (value: TObject, index: number, values: TObject[]) => TKeys[Index];
    }
): NestedArray<TObject, TReduce, TKeys>;

/**
 * Equivalent to rollup, but returns a flat array of [key0, key1, …, value] instead of nested maps.
 *
 * @param iterable The iterable to group.
 * @param reduce The reduce function.
 * @param keys The key functions.
 */
export function flatRollup<TObject, TReduce, TKeys extends unknown[]>(
    iterable: Iterable<TObject>,
    reduce: (values: TObject[]) => TReduce,
    ...keys: {
        [Index in keyof TKeys]: (value: TObject, index: number, values: TObject[]) => TKeys[Index];
    }
): Array<[...TKeys, TReduce]>;

/**
 * Groups the specified iterable of elements according to the specified key function, sorts the groups according to the specified comparator, and then returns an array of keys in sorted order.
 * The comparator will be asked to compare two groups a and b and should return a negative value if a should be before b, a positive value if a should be after b, or zero for a partial ordering.
 */
export function groupSort<TObject, TKey>(
    iterable: Iterable<TObject>,
    comparator: (a: TObject[], b: TObject[]) => number,
    key: (value: TObject) => TKey,
): TKey[];
/**
 * Groups the specified iterable of elements according to the specified key function, sorts the groups according to the specified accessor, and then returns an array of keys in sorted order.
 */
export function groupSort<TObject, TKey>(
    iterable: Iterable<TObject>,
    // tslint:disable-next-line:unified-signatures
    accessor: (value: TObject[]) => unknown,
    key: (value: TObject) => TKey,
): TKey[];

/**
 * Returns the number of valid number values (i.e., not null, NaN, or undefined) in the specified iterable; accepts an accessor.
 *
 * @param iterable Input array.
 */
export function count(iterable: Iterable<unknown>): number;
/**
 * Returns the number of valid number values (i.e., not null, NaN, or undefined) in the specified iterable; accepts an accessor.
 *
 * @param iterable Input array.
 * @param accessor Accessor method.
 */
export function count<TObject>(
    iterable: Iterable<TObject>,
    accessor: (a: TObject, b: TObject) => number | null | undefined,
): number;

/**
 * Returns the Cartesian product of the two arrays a and b.
 * For each element i in the specified array a and each element j in the specified array b, in order,
 * it creates a two-element array for each pair.
 *
 * @param a First input array.
 * @param b Second input array.
 */
export function cross<S, T>(a: Iterable<S>, b: Iterable<T>): Array<[S, T]>;

/**
 * Returns the Cartesian product of the two arrays a and b.
 * For each element i in the specified array a and each element j in the specified array b, in order,
 * invokes the specified reducer function passing the element i and element j.
 *
 * @param a First input array.
 * @param b Second input array.
 * @param reducer A reducer function taking as input an element from "a" and "b" and returning a reduced value.
 */
export function cross<S, T, U>(a: Iterable<S>, b: Iterable<T>, reducer: (a: S, b: T) => U): U[];

/**
 * Merges the specified arrays into a single array.
 */
export function merge<T>(iterables: Iterable<Iterable<T>>): T[];

/**
 * For each adjacent pair of elements in the specified array, returns a new array of tuples of elements i and i - 1.
 * Returns the empty array if the input array has fewer than two elements.
 *
 * @param iterable Array of input elements
 */
export function pairs<T>(iterable: Iterable<T>): Array<[T, T]>;
/**
 * For each adjacent pair of elements in the specified array, in order, invokes the specified reducer function passing the element i and element i - 1.
 * Returns the resulting array of pair-wise reduced elements.
 * Returns the empty array if the input array has fewer than two elements.
 *
 * @param iterable Array of input elements
 * @param reducer A reducer function taking as input to adjacent elements of the input array and returning a reduced value.
 */
export function pairs<T, U>(iterable: Iterable<T>, reducer: (a: T, b: T) => U): U[];

/**
 * Returns a permutation of the specified source object (or array) using the specified iterable of keys.
 * The returned array contains the corresponding property of the source object for each key in keys, in order.
 * For example, `permute(["a", "b", "c"], [1, 2, 0]) // ["b", "c", "a"]`
 *
 * It is acceptable to have more keys than source elements, and for keys to be duplicated or omitted.
 */
export function permute<T>(source: { [key: number]: T }, keys: Iterable<number>): T[];
/**
 * Extract the values from an object into an array with a stable order. For example:
 * `var object = {yield: 27, year: 1931, site: "University Farm"};`
 * `d3.permute(object, ["site", "yield"]); // ["University Farm", 27]`
 */
export function permute<T, K extends keyof T>(source: T, keys: Iterable<K>): Array<T[K]>;

/**
 * Randomizes the order of the specified array using the Fisher–Yates shuffle.
 */
export function shuffle<T>(array: T[], lo?: number, hi?: number): T[];
export function shuffle(array: Int8Array, lo?: number, hi?: number): Int8Array;
export function shuffle(array: Uint8Array, lo?: number, hi?: number): Uint8Array;
export function shuffle(array: Uint8ClampedArray, lo?: number, hi?: number): Uint8ClampedArray;
export function shuffle(array: Int16Array, lo?: number, hi?: number): Int16Array;
export function shuffle(array: Uint16Array, lo?: number, hi?: number): Uint16Array;
export function shuffle(array: Int32Array, lo?: number, hi?: number): Int32Array;
export function shuffle(array: Uint32Array, lo?: number, hi?: number): Uint32Array;
export function shuffle(array: Float32Array, lo?: number, hi?: number): Float32Array;
export function shuffle(array: Float64Array, lo?: number, hi?: number): Float64Array;

/**
 * Returns a shuffle function given the specified random source.
 */
export function shuffler(random: () => number): typeof shuffle;

/**
 * Generate an array of approximately count + 1 uniformly-spaced, nicely-rounded values between start and stop (inclusive).
 * Each value is a power of ten multiplied by 1, 2 or 5. See also d3.tickIncrement, d3.tickStep and linear.ticks.
 *
 * Ticks are inclusive in the sense that they may include the specified start and stop values if (and only if) they are exact,
 * nicely-rounded values consistent with the inferred step. More formally, each returned tick t satisfies start ≤ t and t ≤ stop.
 *
 * @param start Start value for ticks
 * @param stop Stop value for ticks
 * @param count count + 1 is the approximate number of ticks to be returned by d3.ticks.
 */
export function ticks(start: number, stop: number, count: number): number[];

/**
 * Returns the difference between adjacent tick values if the same arguments were passed to d3.ticks:
 * a nicely-rounded value that is a power of ten multiplied by 1, 2 or 5.
 *
 * Like d3.tickStep, except requires that start is always less than or equal to stop, and if the tick step for the given start,
 * stop and count would be less than one, returns the negative inverse tick step instead.
 *
 * This method is always guaranteed to return an integer, and is used by d3.ticks to avoid guarantee that the returned tick values
 * are represented as precisely as possible in IEEE 754 floating point.
 *
 * @param start Start value for ticks
 * @param stop Stop value for ticks
 * @param count count + 1 is the approximate number of ticks to be returned by d3.ticks.
 */
export function tickIncrement(start: number, stop: number, count: number): number;

/**
 * Returns the difference between adjacent tick values if the same arguments were passed to d3.ticks:
 * a nicely-rounded value that is a power of ten multiplied by 1, 2 or 5.
 *
 * Note that due to the limited precision of IEEE 754 floating point, the returned value may not be exact decimals;
 * use d3-format to format numbers for human consumption.
 *
 * @param start Start value for ticks
 * @param stop Stop value for ticks
 * @param count count + 1 is the approximate number of ticks to be returned by d3.ticks.
 */
export function tickStep(start: number, stop: number, count: number): number;

/**
 * Returns a new interval [niceStart, niceStop] covering the given interval [start, stop] and where niceStart and niceStop are guaranteed to align with the corresponding tick step.
 * Like d3.tickIncrement, this requires that start is less than or equal to stop.
 *
 * @param start Start value for ticks
 * @param stop Stop value for ticks
 * @param count count + 1 is the approximate number of ticks to be returned by d3.ticks.
 */
export function nice(start: number, stop: number, count: number): [number, number];

/**
 * Generates a 0-based numeric sequence. The output range does not include 'stop'.
 */
export function range(stop: number): number[];
/**
 * Generates a numeric sequence starting from the given start and stop values. 'step' defaults to 1. The output range does not include 'stop'.
 */
// tslint:disable-next-line:unified-signatures
export function range(start: number, stop: number, step?: number): number[];

/**
 * Transpose a matrix provided in Array of Arrays format.
 */
export function transpose<T>(matrix: ArrayLike<ArrayLike<T>>): T[][];

/**
 * Returns an array of arrays, where the ith array contains the ith element from each of the argument arrays.
 * The returned array is truncated in length to the shortest array in arrays. If arrays contains only a single array, the returned array
 * contains one-element arrays. With no arguments, the returned array is empty.
 */
export function zip<T>(...arrays: Array<ArrayLike<T>>): T[][];

// --------------------------------------------------------------------------------------
// Blur
// --------------------------------------------------------------------------------------

/**
 * Blurs an array of data in-place by applying three iterations of a moving average transform (box filter)
 * for a fast approximation of a Gaussian kernel of the given radius, a non-negative number.
 * Returns the given data.
 */
export function blur(data: ArrayLike<number>, radius: number): ArrayLike<number>;

/**
 * Blurs a matrix of the given width and height in-place by applying a horizontal blur of radius rx
 * and a vertical blur of radius ry (which defaults to rx).
 * The matrix values data are stored in a flat (one-dimensional) array.
 * If height is not specified, it is inferred from the given width and data.length.
 * Returns the blurred matrix {data, width, height}.
 */
export function blur2(data: Matrix, rx: number, ry?: number): Matrix;

/**
 * Blurs the given ImageData in-place, blurring each of the RGBA layers independently by applying an horizontal blur of radius rx
 * and a vertical blur of radius ry (which defaults to rx).
 * Returns the blurred ImageData.
 */
export function blurImage(imageData: ImageData, rx: number, ry?: number): ImageData;

// --------------------------------------------------------------------------------------
// Iterables
// --------------------------------------------------------------------------------------

/**
 * Returns true if the given test function returns true for every value in the given iterable.
 * This method returns as soon as test returns a non-truthy value or all values are iterated over.
 * Equivalent to array.every.
 */
export function every<T>(
    iterable: Iterable<T>,
    test: (value: T, index: number, iterable: Iterable<T>) => unknown,
): boolean;

/**
 * Returns true if the given test function returns true for any value in the given iterable.
 * This method returns as soon as test returns a truthy value or all values are iterated over.
 * Equivalent to array.some.
 */
export function some<T>(
    iterable: Iterable<T>,
    test: (value: T, index: number, iterable: Iterable<T>) => unknown,
): boolean;

/**
 * Returns a new array containing the values from iterable, in order, for which the given test function returns true.
 * Equivalent to array.filter.
 */
export function filter<T>(
    iterable: Iterable<T>,
    test: (value: T, index: number, iterable: Iterable<T>) => unknown,
): T[];

/**
 * Returns a new array containing the mapped values from iterable, in order, as defined by given mapper function.
 * Equivalent to array.map and Array.from.
 */
export function map<T, U>(iterable: Iterable<T>, mapper: (value: T, index: number, iterable: Iterable<T>) => U): U[];

/**
 * Returns the reduced value defined by given reducer function, which is repeatedly invoked for each value in iterable, being passed the current reduced value and the next value.
 * Equivalent to array.reduce.
 */
export function reduce<T>(
    iterable: Iterable<T>,
    reducer: (previousValue: T, currentValue: T, currentIndex: number, iterable: Iterable<T>) => T,
    initialValue?: T,
): T;
/**
 * Returns the reduced value defined by given reducer function, which is repeatedly invoked for each value in iterable, being passed the current reduced value and the next value.
 * Equivalent to array.reduce.
 */
export function reduce<T, U>(
    iterable: Iterable<T>,
    reducer: (previousValue: U, currentValue: T, currentIndex: number, iterable: Iterable<T>) => U,
    initialValue: U,
): U;

/**
 * Returns an array containing the values in the given iterable in reverse order.
 * Equivalent to array.reverse, except that it does not mutate the given iterable.
 */
export function reverse<T>(iterable: Iterable<T>): T[];

/**
 * Returns an array containing the values in the given iterable in the sorted order defined by the given comparator function.
 * If comparator is not specified, it defaults to d3.ascending.
 * Equivalent to array.sort, except that it does not mutate the given iterable, and the comparator defaults to natural order instead of lexicographic order.
 */
export function sort<T>(iterable: Iterable<T>, comparator?: (a: T, b: T) => number): T[];
/**
 * Returns an array containing the values in the given iterable in the sorted order defined by the given accessor function.
 * This is equivalent to a comparator using natural order.
 * The accessor is only invoked once per element, and thus may be nondeterministic.
 * Multiple accessors may be specified to break ties.
 */
export function sort<T>(iterable: Iterable<T>, ...accessors: Array<(a: T) => unknown>): T[];

// --------------------------------------------------------------------------------------
// Sets
// --------------------------------------------------------------------------------------

/**
 * Returns a new InternSet containing every value in iterable that is not in any of the others iterables.
 */
export function difference<T>(iterable: Iterable<T>, ...others: Array<Iterable<T>>): InternSet<T>;

/**
 * Returns a new InternSet containing every (distinct) value that appears in any of the given iterables.
 * The order of values in the returned set is based on their first occurrence in the given iterables.
 */
export function union<T>(...iterables: Array<Iterable<T>>): InternSet<T>;

/**
 * Returns a new InternSet containing every (distinct) value that appears in all of the given iterables.
 * The order of values in the returned set is based on their first occurrence in the given iterables.
 */
export function intersection<T>(...iterables: Array<Iterable<T>>): InternSet<T>;

/**
 * Returns true if a is a superset of b: if every value in the given iterable b is also in the given iterable a.
 */
export function superset<T>(a: Iterable<T>, b: Iterable<T>): boolean;

/**
 * Returns true if a is a subset of b: if every value in the given iterable a is also in the given iterable b.
 */
export function subset<T>(a: Iterable<T>, b: Iterable<T>): boolean;

/**
 * Returns true if a and b are disjoint: if a and b contain no shared value.
 */
export function disjoint<T>(a: Iterable<T>, b: Iterable<T>): boolean;

// --------------------------------------------------------------------------------------
// Bins
// --------------------------------------------------------------------------------------

export interface Bin<Datum, Value extends number | Date | undefined> extends Array<Datum> {
    x0: Value | undefined;
    x1: Value | undefined;
}

/**
 * Type definition for threshold generator which returns the count of recommended thresholds
 */
export type ThresholdCountGenerator<Value extends number | undefined = number | undefined> = (
    values: ArrayLike<Value>,
    min: number,
    max: number,
) => number;

/**
 * Type definition for threshold generator which returns an array of recommended numbers thresholds
 */
export type ThresholdNumberArrayGenerator<Value extends number | undefined> = (
    values: ArrayLike<Value>,
    min: number,
    max: number,
) => Value[];

/**
 * Type definition for threshold generator which returns an array of recommended dates thresholds
 */
export type ThresholdDateArrayGenerator<Value extends Date | undefined> = (
    values: ArrayLike<Value>,
    min: Date,
    max: Date,
) => Value[];

export interface HistogramCommon<Datum, Value extends number | Date | undefined> {
    (data: ArrayLike<Datum>): Array<Bin<Datum, Value>>;

    value(): (d: Datum, i: number, data: ArrayLike<Datum>) => Value;
    value(valueAccessor: (d: Datum, i: number, data: ArrayLike<Datum>) => Value): this;
}

export interface HistogramGeneratorDate<Datum, Value extends Date | undefined> extends HistogramCommon<Datum, Date> {
    domain(): (values: ArrayLike<Value>) => [Date, Date];
    domain(domain: [Date, Date] | ((values: ArrayLike<Value>) => [Date, Date])): this;

    thresholds(): ThresholdDateArrayGenerator<Value>;
    /**
     * Set the array of values to be used as thresholds in determining the bins.
     *
     * Any threshold values outside the domain are ignored. The first bin.x0 is always equal to the minimum domain value,
     * and the last bin.x1 is always equal to the maximum domain value.
     *
     * @param thresholds Either an array of threshold values used for binning. The elements must
     * be of the same type as the materialized values of the histogram.
     * Or a function which accepts as arguments the array of materialized values, and
     * optionally the domain minimum and maximum. The function calculates and returns the array of values to be used as
     * thresholds in determining the bins.
     */
    thresholds(thresholds: ArrayLike<Value> | ThresholdDateArrayGenerator<Value>): this;
}

export interface HistogramGeneratorNumber<Datum, Value extends number | undefined>
    extends HistogramCommon<Datum, Value>
{
    domain(): (values: Iterable<Value>) => [number, number] | [undefined, undefined];
    domain(domain: [number, number] | ((values: Iterable<Value>) => [number, number] | [undefined, undefined])): this;

    thresholds(): ThresholdCountGenerator<Value> | ThresholdNumberArrayGenerator<Value>;
    /**
     * Divide the domain uniformly into approximately count bins. IMPORTANT: This threshold
     * setting approach only works, when the materialized values are numbers!
     *
     * Any threshold values outside the domain are ignored. The first bin.x0 is always equal to the minimum domain value,
     * and the last bin.x1 is always equal to the maximum domain value.
     *
     * @param count Either the desired number of uniform bins or a function which accepts as arguments the array of
     * materialized values, and optionally the domain minimum and maximum. The function calculates and returns the
     * suggested number of bins.
     */
    thresholds(count: number | ThresholdCountGenerator<Value>): this;
    /**
     * Set the array of values to be used as thresholds in determining the bins.
     *
     * Any threshold values outside the domain are ignored. The first bin.x0 is always equal to the minimum domain value,
     * and the last bin.x1 is always equal to the maximum domain value.
     *
     * @param thresholds Either an array of threshold values used for binning. The elements must
     * be of the same type as the materialized values of the histogram.
     * Or a function which accepts as arguments the array of materialized values, and
     * optionally the domain minimum and maximum. The function calculates and returns the array of values to be used as
     * thresholds in determining the bins.
     */
    // tslint:disable-next-line:unified-signatures
    thresholds(thresholds: ArrayLike<Value> | ThresholdNumberArrayGenerator<Value>): this;
}

/**
 * @deprecated Use bin instead.
 */
export function histogram(): HistogramGeneratorNumber<number, number>;

/**
 * @deprecated Use bin instead.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function histogram<Datum, Value extends number | undefined>(): HistogramGeneratorNumber<Datum, Value>;

/**
 * @deprecated Use bin instead.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function histogram<Datum, Value extends Date | undefined>(): HistogramGeneratorDate<Datum, Value>;

export function bin(): HistogramGeneratorNumber<number, number>;
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function bin<Datum, Value extends number | undefined>(): HistogramGeneratorNumber<Datum, Value>;
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function bin<Datum, Value extends Date | undefined>(): HistogramGeneratorDate<Datum, Value>;

// --------------------------------------------------------------------------------------
// Histogram Thresholds
// --------------------------------------------------------------------------------------

export function thresholdFreedmanDiaconis(values: ArrayLike<number | undefined>, min: number, max: number): number; // of type ThresholdCountGenerator

export function thresholdScott(values: ArrayLike<number | undefined>, min: number, max: number): number; // of type ThresholdCountGenerator

export function thresholdSturges(values: ArrayLike<number | undefined>): number; // of type ThresholdCountGenerator

// --------------------------------------------------------------------------------------
// Interning
// --------------------------------------------------------------------------------------

/**
 * The InternMap class extends the native JavaScript Map class, allowing Dates and other non-primitive keys by bypassing the SameValueZero algorithm when determining key equality.
 */
export class InternMap<K = any, V = any> extends Map<K, V> {
}

/**
 * The InternSet class extends the native JavaScript Set class, allowing Dates and other non-primitive keys by bypassing the SameValueZero algorithm when determining key equality.
 */
export class InternSet<T = any> extends Set<T> {
}

----------------------------------------
File: ./animations/node_modules/@types/d3-scale/README.md
----------------------------------------
# Installation
> `npm install --save @types/d3-scale`

# Summary
This package contains type definitions for d3-scale (https://github.com/d3/d3-scale/).

# Details
Files were exported from https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/d3-scale.

### Additional Details
 * Last updated: Tue, 07 Nov 2023 15:11:37 GMT
 * Dependencies: [@types/d3-time](https://npmjs.com/package/@types/d3-time)

# Credits
These definitions were written by [Tom Wanzek](https://github.com/tomwanzek), [Alex Ford](https://github.com/gustavderdrache), [Boris Yankov](https://github.com/borisyankov), [denisname](https://github.com/denisname), [rulonder](https://github.com/rulonder), and [Nathan Bierema](https://github.com/Methuselah96).

----------------------------------------
File: ./animations/node_modules/@types/d3-scale/index.d.ts
----------------------------------------
// Last module patch version validated against: 4.0.2

import { CountableTimeInterval, TimeInterval } from "d3-time";

// -------------------------------------------------------------------------------
// Shared Types and Interfaces
// -------------------------------------------------------------------------------

/**
 * An Interpolator factory returns an interpolator function.
 *
 * The first generic corresponds to the data type of the interpolation boundaries.
 * The second generic corresponds to the data type of the return type of the interpolator.
 */
export interface InterpolatorFactory<T, U> {
    /**
     * Construct a new interpolator function, based on the provided interpolation boundaries.
     *
     * @param a Start boundary of the interpolation interval.
     * @param b End boundary of the interpolation interval.
     */
    (a: T, b: T): (t: number) => U;
}

export type NumberValue = number | { valueOf(): number };

export type UnknownReturnType<Unknown, DefaultUnknown> = [Unknown] extends [never] ? DefaultUnknown : Unknown;

/**
 * A helper interface for a continuous scale defined over a numeric domain.
 */
export interface ScaleContinuousNumeric<Range, Output, Unknown = never> {
    /**
     * Given a value from the domain, returns the corresponding value from the range, subject to interpolation, if any.
     *
     * If the given value is outside the domain, and clamping is not enabled, the mapping may be extrapolated such that the returned value is outside the range.
     *
     * Note: The interpolation function applied by the scale may change the output type from the range type as part of the interpolation.
     *
     * @param value A numeric value from the domain.
     */
    (value: NumberValue): Output | Unknown;

    /**
     * Given a value from the range, returns the corresponding value from the domain. Inversion is useful for interaction,
     * say to determine the data value corresponding to the position of the mouse.
     *
     * If the given value is outside the range, and clamping is not enabled, the mapping may be extrapolated such that the returned value is outside the domain.
     *
     * IMPORTANT: This method is only supported if the range is numeric. If the range is not numeric, returns NaN.
     *
     * For a valid value y in the range, continuous(continuous.invert(y)) approximately equals y;
     * similarly, for a valid value x in the domain, continuous.invert(continuous(x)) approximately equals x.
     * The scale and its inverse may not be exact due to the limitations of floating point precision.
     *
     * @param value A numeric value from the range.
     */
    invert(value: NumberValue): number;

    /**
     * Returns a copy of the scale’s current domain.
     */
    domain(): number[];
    /**
     * Sets the scale’s domain to the specified array of numbers. The array must contain two or more elements.
     * If the elements in the given array are not numbers, they will be coerced to numbers
     *
     * Although continuous scales typically have two values each in their domain and range, specifying more than two values produces a piecewise scale.
     *
     * Internally, a piecewise scale performs a binary search for the range interpolator corresponding to the given domain value.
     * Thus, the domain must be in ascending or descending order. If the domain and range have different lengths N and M, only the first min(N,M) elements in each are observed.
     *
     * @param domain Array of numeric domain values.
     */
    domain(domain: Iterable<NumberValue>): this;

    /**
     * Returns a copy of the scale’s current range.
     */
    range(): Range[];
    /**
     * Sets the scale’s range to the specified array of values.
     *
     * The array must contain two or more elements. Unlike the domain, elements in the given array need not be numbers;
     * any value that is supported by the underlying interpolator will work, though note that numeric ranges are required for invert.
     *
     * @param range Array of range values.
     */
    range(range: Iterable<Range>): this;

    /**
     * Sets the scale’s range to the specified array of values while also setting the scale’s interpolator to interpolateRound.
     *
     * The rounding interpolator is sometimes useful for avoiding antialiasing artifacts,
     * though also consider the shape-rendering “crispEdges” styles. Note that this interpolator can only be used with numeric ranges.
     *
     * The array must contain two or more elements. Unlike the domain, elements in the given array need not be numbers;
     * any value that is supported by the underlying interpolator will work, though note that numeric ranges are required for invert.
     *
     * @param range Array of range values.
     */
    rangeRound(range: Iterable<NumberValue>): this;

    /**
     * Returns whether or not the scale currently clamps values to within the range.
     */
    clamp(): boolean;
    /**
     * Enables or disables clamping, respectively. If clamping is disabled and the scale is passed a value outside the domain,
     * the scale may return a value outside the range through extrapolation.
     *
     * If clamping is enabled, the return value of the scale is always within the scale’s range. Clamping similarly applies to the "invert" method.
     *
     * @param clamp A flag to enable (true) or disable (false) clamping.
     */
    clamp(clamp: boolean): this;

    /**
     * Returns approximately count representative values from the scale’s domain.
     *
     * If count is not specified, it defaults to 10.
     *
     * The returned tick values are uniformly spaced, have human-readable values (such as multiples of powers of 10),
     * and are guaranteed to be within the extent of the domain. Ticks are often used to display reference lines, or tick marks, in conjunction with the visualized data.
     * The specified count is only a hint; the scale may return more or fewer values depending on the domain. See also d3-array’s ticks.
     *
     * @param count Optional approximate number of ticks to be returned. If count is not specified, it defaults to 10.
     */
    ticks(count?: number): number[];

    /**
     * Returns a number format function suitable for displaying a tick value, automatically computing the appropriate precision based on the fixed interval between tick values.
     * The specified count should have the same value as the count that is used to generate the tick values.
     *
     * @param count Approximate number of ticks to be used when calculating precision for the number format function.
     * @param specifier An optional valid format specifier string which allows a custom format where the precision of the format is automatically set by the scale as appropriate for the tick interval.
     * If specifier uses the format type "s", the scale will return a SI-prefix format based on the largest value in the domain.
     * If the specifier already specifies a precision, this method is equivalent to locale.format.
     */
    tickFormat(count?: number, specifier?: string): (d: NumberValue) => string;

    /**
     * Extends the domain so that it starts and ends on nice round values.
     * This method typically modifies the scale’s domain, and may only extend the bounds to the nearest round value.
     * An optional tick count argument allows greater control over the step size used to extend the bounds,
     * guaranteeing that the returned ticks will exactly cover the domain.
     * Nicing is useful if the domain is computed from data, say using extent, and may be irregular.
     * For example, for a domain of [0.201479…, 0.996679…], a nice domain might be [0.2, 1.0].
     * If the domain has more than two values, nicing the domain only affects the first and last value.
     *
     * Nicing a scale only modifies the current domain; it does not automatically nice domains that are subsequently set using continuous.domain.
     * You must re-nice the scale after setting the new domain, if desired.
     *
     * @param count An optional number of ticks expected to be used.
     */
    nice(count?: number): this;

    /**
     * Returns an exact copy of this scale. Changes to this scale will not affect the returned scale, and vice versa.
     */
    copy(): this;
}

/**
 * Returns a number format function suitable for displaying a tick value,
 * automatically computing the appropriate precision based on the fixed interval between tick values, as determined by d3.tickStep.
 *
 * @param start Start
 * @param stop Stop
 * @param count Approximate number of ticks to be used when calculating precision for the number format function.
 * @param specifier An optional specifier allows a custom format where the precision of the format is automatically set by the scale as appropriate for the tick interval.
 * If specifier uses the format type s, the scale will return a SI-prefix format based on the larger absolute value of start and stop.
 * If the specifier already specifies a precision, this method is equivalent to locale.format.
 */
export function tickFormat(start: number, stop: number, count: number, specifier?: string): (d: NumberValue) => string;

// -------------------------------------------------------------------------------
// Linear Scale Factory
// -------------------------------------------------------------------------------

/**
 * A linear continuous scale defined over a numeric domain.
 *
 * Continuous scales map a continuous, quantitative input domain to a continuous output range.
 * Each range value y can be expressed as a function of the domain value x: y = mx + b.
 *
 * If the range is also numeric, the mapping may be inverted.
 *
 * Note that the data types of the range and output of the scale must be compatible with the interpolator applied by the scale.
 *
 * The first generic corresponds to the data type of the range elements.
 *
 * The second generic corresponds to the data type of the output elements generated by the scale.
 *
 * The third generic corresponds to the data type of the unknown value.
 *
 * If range element and output element type differ, the interpolator factory used with the scale must match this behavior and
 * convert the interpolated range element to a corresponding output element.
 */
export interface ScaleLinear<Range, Output, Unknown = never> extends ScaleContinuousNumeric<Range, Output, Unknown> {
    /**
     * Returns the scale’s current interpolator factory, which defaults to interpolate.
     */
    interpolate(): InterpolatorFactory<any, any>;

    /**
     * Sets the scale’s range interpolator factory. This interpolator factory is used to create interpolators for each adjacent pair of values from the range;
     * these interpolators then map a normalized domain parameter t in [0, 1] to the corresponding value in the range.
     *
     * Note: the default interpolator may reuse return values. For example, if the range values are objects, then the value interpolator always returns the same object, modifying it in-place.
     * If the scale is used to set an attribute or style, this is typically acceptable (and desirable for performance);
     * however, if you need to store the scale’s return value, you must specify your own interpolator or make a copy as appropriate.
     *
     * As part of the interpolation process the interpolated value from the range may be converted to a corresponding output value.
     *
     * @param interpolate An interpolation factory. The generics for Range and Output of the scale must correspond to the interpolation factory applied to the scale.
     */
    interpolate(interpolate: InterpolatorFactory<Range, Output>): this;
    /**
     * Sets the scale’s range interpolator factory. This interpolator factory is used to create interpolators for each adjacent pair of values from the range;
     * these interpolators then map a normalized domain parameter t in [0, 1] to the corresponding value in the range.
     *
     * Note: the default interpolator may reuse return values. For example, if the range values are objects, then the value interpolator always returns the same object, modifying it in-place.
     * If the scale is used to set an attribute or style, this is typically acceptable (and desirable for performance);
     * however, if you need to store the scale’s return value, you must specify your own interpolator or make a copy as appropriate.
     *
     * As part of the interpolation process the interpolated value from the range may be converted to a corresponding output value.
     *
     * The generic "NewOutput" can be used to change the scale to have a different output element type corresponding to the new interpolation factory.
     *
     * @param interpolate An interpolation factory. The generics for Range and Output of the scale must correspond to the interpolation factory applied to the scale.
     */
    interpolate<NewOutput>(interpolate: InterpolatorFactory<Range, NewOutput>): ScaleLinear<Range, NewOutput, Unknown>;

    /**
     * Returns the current unknown value, which defaults to undefined.
     */
    unknown(): UnknownReturnType<Unknown, undefined>;
    /**
     * Sets the output value of the scale for undefined (or NaN) input values and returns this scale.
     *
     * @param value The output value of the scale for undefined (or NaN) input values.
     */
    unknown<NewUnknown>(value: NewUnknown): ScaleLinear<Range, Output, NewUnknown>;
}

/**
 * Constructs a new continuous scale with the specified range, the default interpolator and clamping disabled.
 * The domain defaults to [0, 1].
 * If range is not specified, it defaults to [0, 1].
 *
 * The first generic corresponds to the data type of the range elements.
 * The second generic corresponds to the data type of the output elements generated by the scale.
 * The third generic corresponds to the data type of the unknown value.
 *
 * If range element and output element type differ, the interpolator factory used with the scale must match this behavior and
 * convert the interpolated range element to a corresponding output element.
 *
 * The range must be set in accordance with the range element type.
 *
 * The interpolator factory may be set using the interpolate(...) method of the scale.
 *
 * @param range Array of range values.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function scaleLinear<Range = number, Output = Range, Unknown = never>(
    range?: Iterable<Range>,
): ScaleLinear<Range, Output, Unknown>;
/**
 * Constructs a new continuous scale with the specified domain and range, the default interpolator and clamping disabled.
 *
 * The first generic corresponds to the data type of the range elements.
 * The second generic corresponds to the data type of the output elements generated by the scale.
 * The third generic corresponds to the data type of the unknown value.
 *
 * If range element and output element type differ, the interpolator factory used with the scale must match this behavior and
 * convert the interpolated range element to a corresponding output element.
 *
 * The range must be set in accordance with the range element type.
 *
 * The interpolator factory may be set using the interpolate(...) method of the scale.
 *
 * @param domain Array of numeric domain values.
 * @param range Array of range values.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function scaleLinear<Range, Output = Range, Unknown = never>(
    domain: Iterable<NumberValue>,
    range: Iterable<Range>,
): ScaleLinear<Range, Output, Unknown>;

// -------------------------------------------------------------------------------
// Power Scale Factories
// -------------------------------------------------------------------------------

/**
 * A continuous power scale defined over a numeric domain.
 *
 * Continuous scales map a continuous, quantitative input domain to a continuous output range.
 *
 * Each range value y can be expressed as a function of the domain value x: y = mx^k + b, where k is the exponent value.
 * Power scales also support negative domain values, in which case the input value and the resulting output value are multiplied by -1.
 *
 * If the range is also numeric, the mapping may be inverted.
 *
 * Note that the data types of the range and output of the scale must be compatible with the interpolator applied by the scale.
 *
 * The first generic corresponds to the data type of the range elements.
 *
 * The second generic corresponds to the data type of the output elements generated by the scale.
 *
 * The third generic corresponds to the data type of the unknown value.
 *
 * If range element and output element type differ, the interpolator factory used with the scale must match this behavior and
 * convert the interpolated range element to a corresponding output element.
 */
export interface ScalePower<Range, Output, Unknown = never> extends ScaleContinuousNumeric<Range, Output, Unknown> {
    /**
     * Returns the scale’s current interpolator factory, which defaults to interpolate.
     */
    interpolate(): InterpolatorFactory<any, any>;

    /**
     * Sets the scale’s range interpolator factory. This interpolator factory is used to create interpolators for each adjacent pair of values from the range;
     * these interpolators then map a normalized domain parameter t in [0, 1] to the corresponding value in the range.
     *
     * Note: the default interpolator may reuse return values. For example, if the range values are objects, then the value interpolator always returns the same object, modifying it in-place.
     * If the scale is used to set an attribute or style, this is typically acceptable (and desirable for performance);
     * however, if you need to store the scale’s return value, you must specify your own interpolator or make a copy as appropriate.
     *
     * As part of the interpolation process the interpolated value from the range may be converted to a corresponding output value.
     *
     * @param interpolate An interpolation factory. The generics for Range and Output of the scale must correspond to the interpolation factory applied to the scale.
     */
    interpolate(interpolate: InterpolatorFactory<Range, Output>): this;
    /**
     * Sets the scale’s range interpolator factory. This interpolator factory is used to create interpolators for each adjacent pair of values from the range;
     * these interpolators then map a normalized domain parameter t in [0, 1] to the corresponding value in the range.
     *
     * Note: the default interpolator may reuse return values. For example, if the range values are objects, then the value interpolator always returns the same object, modifying it in-place.
     * If the scale is used to set an attribute or style, this is typically acceptable (and desirable for performance);
     * however, if you need to store the scale’s return value, you must specify your own interpolator or make a copy as appropriate.
     *
     * As part of the interpolation process the interpolated value from the range may be converted to a corresponding output value.
     *
     * The generic "NewOutput" can be used to change the scale to have a different output element type corresponding to the new interpolation factory.
     *
     * @param interpolate An interpolation factory. The generics for Range and Output of the scale must correspond to the interpolation factory applied to the scale.
     */
    interpolate<NewOutput>(interpolate: InterpolatorFactory<Range, NewOutput>): ScalePower<Range, NewOutput, Unknown>;

    /**
     * If exponent is not specified, returns the current exponent, which defaults to 1.
     * (Note that this is effectively a linear scale until you set a different exponent.)
     */
    exponent(): number;
    /**
     * Sets the current exponent to the given numeric value.
     * (Note that this is effectively a linear scale until you set a different exponent.)
     */
    exponent(exponent: number): this;

    /**
     * Returns the current unknown value, which defaults to undefined.
     */
    unknown(): UnknownReturnType<Unknown, undefined>;
    /**
     * Sets the output value of the scale for undefined (or NaN) input values and returns this scale.
     *
     * @param value The output value of the scale for undefined (or NaN) input values.
     */
    unknown<NewUnknown>(value: NewUnknown): ScalePower<Range, Output, NewUnknown>;
}

/**
 * Constructs a new continuous scale with the specified range, the exponent 1, the default interpolator and clamping disabled.
 * The domain defaults to [0, 1].
 * If range is not specified, it defaults to [0, 1].
 * (Note that this is effectively a linear scale until you set a different exponent.)
 *
 * The first generic corresponds to the data type of the range elements.
 * The second generic corresponds to the data type of the output elements generated by the scale.
 * The third generic corresponds to the data type of the unknown value.
 *
 * If range element and output element type differ, the interpolator factory used with the scale must match this behavior and
 * convert the interpolated range element to a corresponding output element.
 *
 * The range must be set in accordance with the range element type.
 *
 * The interpolator factory may be set using the interpolate(...) method of the scale.
 *
 * @param range Array of range values.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function scalePow<Range = number, Output = Range, Unknown = never>(
    range?: Iterable<Range>,
): ScalePower<Range, Output, Unknown>;
/**
 * Constructs a new continuous scale with the specified domain and range, the exponent 1, the default interpolator and clamping disabled.
 * (Note that this is effectively a linear scale until you set a different exponent.)
 *
 * The first generic corresponds to the data type of the range elements.
 * The second generic corresponds to the data type of the output elements generated by the scale.
 * The third generic corresponds to the data type of the unknown value.
 *
 * If range element and output element type differ, the interpolator factory used with the scale must match this behavior and
 * convert the interpolated range element to a corresponding output element.
 *
 * The range must be set in accordance with the range element type.
 *
 * The interpolator factory may be set using the interpolate(...) method of the scale.
 *
 * @param domain Array of numeric domain values.
 * @param range Array of range values.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function scalePow<Range, Output = Range, Unknown = never>(
    domain: Iterable<NumberValue>,
    range: Iterable<Range>,
): ScalePower<Range, Output, Unknown>;

/**
 * Constructs a new continuous power scale with the specified range, the exponent 0.5, the default interpolator and clamping disabled.
 * The domain defaults to [0, 1].
 * If range is not specified, it defaults to [0, 1].
 * This is a convenience method equivalent to d3.scalePow().exponent(0.5).
 *
 * The first generic corresponds to the data type of the range elements.
 * The second generic corresponds to the data type of the output elements generated by the scale.
 * The third generic corresponds to the data type of the unknown value.
 *
 * If range element and output element type differ, the interpolator factory used with the scale must match this behavior and
 * convert the interpolated range element to a corresponding output element.
 *
 * The range must be set in accordance with the range element type.
 *
 * The interpolator factory may be set using the interpolate(...) method of the scale.
 *
 * @param range Array of range values.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function scaleSqrt<Range = number, Output = Range, Unknown = never>(
    range?: Iterable<Range>,
): ScalePower<Range, Output, Unknown>;
/**
 * Constructs a new continuous power scale with the specified domain and range, the exponent 0.5, the default interpolator and clamping disabled.
 * This is a convenience method equivalent to d3.scalePow().exponent(0.5).
 *
 * The first generic corresponds to the data type of the range elements.
 * The second generic corresponds to the data type of the output elements generated by the scale.
 * The third generic corresponds to the data type of the unknown value.
 *
 * If range element and output element type differ, the interpolator factory used with the scale must match this behavior and
 * convert the interpolated range element to a corresponding output element.
 *
 * The range must be set in accordance with the range element type.
 *
 * The interpolator factory may be set using the interpolate(...) method of the scale.
 *
 * @param domain Array of numeric domain values.
 * @param range Array of range values.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function scaleSqrt<Range, Output = Range, Unknown = never>(
    domain: Iterable<NumberValue>,
    range: Iterable<Range>,
): ScalePower<Range, Output, Unknown>;

// -------------------------------------------------------------------------------
// Logarithmic Scale Factory
// -------------------------------------------------------------------------------

/**
 * A continuous logarithmic scale defined over a numeric domain.
 *
 * Continuous scales map a continuous, quantitative input domain to a continuous output range.
 *
 * The mapping to the range value y can be expressed as a function of the domain value x: y = m log(x) + b.
 *
 * As log(0) = -∞, a log scale domain must be strictly-positive or strictly-negative; the domain must not include or cross zero.
 * A log scale with a positive domain has a well-defined behavior for positive values, and a log scale with a negative domain has a well-defined behavior for negative values.
 * (For a negative domain, input and output values are implicitly multiplied by -1.)
 * The behavior of the scale is undefined if you pass a negative value to a log scale with a positive domain or vice versa.
 *
 * If the range is also numeric, the mapping may be inverted.
 *
 * Note that the data types of the range and output of the scale must be compatible with the interpolator applied by the scale.
 *
 * The first generic corresponds to the data type of the range elements.
 *
 * The second generic corresponds to the data type of the output elements generated by the scale.
 *
 * The third generic corresponds to the data type of the unknown value.
 *
 * If range element and output element type differ, the interpolator factory used with the scale must match this behavior and
 * convert the interpolated range element to a corresponding output element.
 */
export interface ScaleLogarithmic<Range, Output, Unknown = never>
    extends ScaleContinuousNumeric<Range, Output, Unknown>
{
    /**
     * Returns a copy of the scale’s current domain.
     */
    domain(): number[];
    /**
     * Sets the scale’s domain to the specified array of numbers. The array must contain two or more elements.
     * If the elements in the given array are not numbers, they will be coerced to numbers
     *
     * As log(0) = -∞, a log scale domain must be strictly-positive or strictly-negative; the domain must not include or cross zero.
     * A log scale with a positive domain has a well-defined behavior for positive values, and a log scale with a negative domain has a well-defined behavior for negative values.
     * (For a negative domain, input and output values are implicitly multiplied by -1.)
     * The behavior of the scale is undefined if you pass a negative value to a log scale with a positive domain or vice versa.
     *
     * Although continuous scales typically have two values each in their domain and range, specifying more than two values produces a piecewise scale.
     *
     * Internally, a piecewise scale performs a binary search for the range interpolator corresponding to the given domain value.
     * Thus, the domain must be in ascending or descending order. If the domain and range have different lengths N and M, only the first min(N,M) elements in each are observed.
     *
     * @param domain Array of numeric domain values.
     */
    domain(domain: Iterable<NumberValue>): this;

    /**
     * Returns the scale’s current interpolator factory, which defaults to interpolate.
     */
    interpolate(): InterpolatorFactory<any, any>;

    /**
     * Sets the scale’s range interpolator factory. This interpolator factory is used to create interpolators for each adjacent pair of values from the range;
     * these interpolators then map a normalized domain parameter t in [0, 1] to the corresponding value in the range.
     *
     * Note: the default interpolator may reuse return values. For example, if the range values are objects, then the value interpolator always returns the same object, modifying it in-place.
     * If the scale is used to set an attribute or style, this is typically acceptable (and desirable for performance);
     * however, if you need to store the scale’s return value, you must specify your own interpolator or make a copy as appropriate.
     *
     * As part of the interpolation process the interpolated value from the range may be converted to a corresponding output value.
     *
     * @param interpolate An interpolation factory. The generics for Range and Output of the scale must correspond to the interpolation factory applied to the scale.
     */
    interpolate(interpolate: InterpolatorFactory<Range, Output>): this;
    /**
     * Sets the scale’s range interpolator factory. This interpolator factory is used to create interpolators for each adjacent pair of values from the range;
     * these interpolators then map a normalized domain parameter t in [0, 1] to the corresponding value in the range.
     *
     * Note: the default interpolator may reuse return values. For example, if the range values are objects, then the value interpolator always returns the same object, modifying it in-place.
     * If the scale is used to set an attribute or style, this is typically acceptable (and desirable for performance);
     * however, if you need to store the scale’s return value, you must specify your own interpolator or make a copy as appropriate.
     *
     * As part of the interpolation process the interpolated value from the range may be converted to a corresponding output value.
     *
     * The generic "NewOutput" can be used to change the scale to have a different output element type corresponding to the new interpolation factory.
     *
     * @param interpolate An interpolation factory. The generics for Range and Output of the scale must correspond to the interpolation factory applied to the scale.
     */
    interpolate<NewOutput>(
        interpolate: InterpolatorFactory<Range, NewOutput>,
    ): ScaleLogarithmic<Range, NewOutput, Unknown>;

    /**
     * Returns approximately count representative values from the scale’s domain.
     *
     * If count is not specified, it defaults to 10.
     *
     * If the base is an integer, the returned ticks are uniformly spaced within each integer power of base; otherwise, one tick per power of base is returned.
     * The returned ticks are guaranteed to be within the extent of the domain. If the orders of magnitude in the domain is greater than count, then at most one tick per power is returned.
     * Otherwise, the tick values are unfiltered, but note that you can use log.tickFormat to filter the display of tick labels.
     *
     * @param count Optional approximate number of ticks to be returned. If count is not specified, it defaults to 10.
     */
    ticks(count?: number): number[];

    /**
     * Returns a number format function suitable for displaying a tick value, automatically computing the appropriate precision based on the fixed interval between tick values.
     *
     * The specified count typically has the same value as the count that is used to generate the tick values.
     * If there are too many ticks, the formatter may return the empty string for some of the tick labels;
     * however, note that the ticks are still shown.
     * To disable filtering, specify a count of Infinity. When specifying a count, you may also provide a format specifier or format function.
     * For example, to get a tick formatter that will display 20 ticks of a currency, say log.tickFormat(20, "$,f").
     * If the specifier does not have a defined precision, the precision will be set automatically by the scale, returning the appropriate format.
     * This provides a convenient way of specifying a format whose precision will be automatically set by the scale.
     *
     * @param count Approximate number of ticks to be used when calculating precision for the number format function.
     * @param specifier An optional valid format specifier string which allows a custom format where the precision of the format is automatically set by the scale as appropriate for the tick interval.
     * For example, to get a tick formatter that will display 20 ticks of a currency, say log.tickFormat(20, "$,f").
     * If the specifier does not have a defined precision, the precision will be set automatically by the scale, returning the appropriate format.
     * This provides a convenient way of specifying a format whose precision will be automatically set by the scale.
     */
    tickFormat(count?: number, specifier?: string): (d: NumberValue) => string;

    /**
     * Extends the domain to integer powers of base. For example, for a domain of [0.201479…, 0.996679…], and base 10, the nice domain is [0.1, 1].
     * If the domain has more than two values, nicing the domain only affects the first and last value.
     *
     * Nicing a scale only modifies the current domain; it does not automatically nice domains that are subsequently set using continuous.domain.
     * You must re-nice the scale after setting the new domain, if desired.
     */
    nice(): this;

    /**
     * Returns the current base, which defaults to 10.
     */
    base(): number;
    /**
     * Sets the base for this logarithmic scale to the specified value.
     */
    base(base: number): this;

    /**
     * Returns the current unknown value, which defaults to undefined.
     */
    unknown(): UnknownReturnType<Unknown, undefined>;
    /**
     * Sets the output value of the scale for undefined (or NaN) input values and returns this scale.
     *
     * @param value The output value of the scale for undefined (or NaN) input values.
     */
    unknown<NewUnknown>(value: NewUnknown): ScaleLogarithmic<Range, Output, NewUnknown>;
}

/**
 * Constructs a new continuous scale with the specified range, the base 10, the default interpolator and clamping disabled.
 * The domain defaults to [1, 10].
 * If range is not specified, it defaults to [0, 1].
 *
 * The first generic corresponds to the data type of the range elements.
 * The second generic corresponds to the data type of the output elements generated by the scale.
 * The third generic corresponds to the data type of the unknown value.
 *
 * If range element and output element type differ, the interpolator factory used with the scale must match this behavior and
 * convert the interpolated range element to a corresponding output element.
 *
 * The range must be set in accordance with the range element type.
 *
 * The interpolator factory may be set using the interpolate(...) method of the scale.
 *
 * @param range Array of range values.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function scaleLog<Range = number, Output = Range, Unknown = never>(
    range?: Iterable<Range>,
): ScaleLogarithmic<Range, Output, Unknown>;
/**
 * Constructs a new continuous scale with the specified domain and range, the base 10, the default interpolator and clamping disabled.
 *
 * The first generic corresponds to the data type of the range elements.
 * The second generic corresponds to the data type of the output elements generated by the scale.
 * The third generic corresponds to the data type of the unknown value.
 *
 * If range element and output element type differ, the interpolator factory used with the scale must match this behavior and
 * convert the interpolated range element to a corresponding output element.
 *
 * The range must be set in accordance with the range element type.
 *
 * The interpolator factory may be set using the interpolate(...) method of the scale.
 *
 * @param domain Array of numeric domain values.
 * @param range Array of range values.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function scaleLog<Range, Output = Range, Unknown = never>(
    domain: Iterable<NumberValue>,
    range: Iterable<Range>,
): ScaleLogarithmic<Range, Output, Unknown>;

// -------------------------------------------------------------------------------
// Symlog Scale Factory
// -------------------------------------------------------------------------------

/**
 * A bi-symmetric log transformation for wide-range data by Webber scale defined over a numeric domain.
 *
 * Continuous scales map a continuous, quantitative input domain to a continuous output range.
 *
 * See “A bi-symmetric log transformation for wide-range data” by Webber for more
 *
 * If the range is also numeric, the mapping may be inverted.
 *
 * Note that the data types of the range and output of the scale must be compatible with the interpolator applied by the scale.
 *
 * The first generic corresponds to the data type of the range elements.
 *
 * The second generic corresponds to the data type of the output elements generated by the scale.
 *
 * The third generic corresponds to the data type of the unknown value.
 *
 * If range element and output element type differ, the interpolator factory used with the scale must match this behavior and
 * convert the interpolated range element to a corresponding output element.
 */
export interface ScaleSymLog<Range, Output, Unknown = never> extends ScaleContinuousNumeric<Range, Output, Unknown> {
    /**
     * Returns a number format function suitable for displaying a tick value, automatically computing the appropriate precision based on the fixed interval between tick values.
     *
     * The specified count typically has the same value as the count that is used to generate the tick values.
     * If there are too many ticks, the formatter may return the empty string for some of the tick labels;
     * however, note that the ticks are still shown.
     * To disable filtering, specify a count of Infinity. When specifying a count, you may also provide a format specifier or format function.
     * For example, to get a tick formatter that will display 20 ticks of a currency, say log.tickFormat(20, "$,f").
     * If the specifier does not have a defined precision, the precision will be set automatically by the scale, returning the appropriate format.
     * This provides a convenient way of specifying a format whose precision will be automatically set by the scale.
     *
     * @param count Approximate number of ticks to be used when calculating precision for the number format function.
     * @param specifier An optional valid format specifier string which allows a custom format where the precision of the format is automatically set by the scale as appropriate for the tick interval.
     * For example, to get a tick formatter that will display 20 ticks of a currency, say log.tickFormat(20, "$,f").
     * If the specifier does not have a defined precision, the precision will be set automatically by the scale, returning the appropriate format.
     * This provides a convenient way of specifying a format whose precision will be automatically set by the scale.
     */
    tickFormat(count?: number, specifier?: string): (d: NumberValue) => string;
    /**
     * Returns the current constant, which defaults to 1.
     */
    constant(): number;
    /**
     * Sets the symlog constant to the specified number and returns this scale;
     * otherwise returns the current value of the symlog constant, which defaults to 1. See “A bi-symmetric log transformation for wide-range data” by Webber for more.
     */
    constant(constant: number): this;

    /**
     * Returns the current unknown value, which defaults to undefined.
     */
    unknown(): UnknownReturnType<Unknown, undefined>;
    /**
     * Sets the output value of the scale for undefined (or NaN) input values and returns this scale.
     *
     * @param value The output value of the scale for undefined (or NaN) input values.
     */
    unknown<NewUnknown>(value: NewUnknown): ScaleSymLog<Range, Output, NewUnknown>;
}

/**
 * Constructs a new continuous scale with the specified range, the constant 1, the default interpolator and clamping disabled.
 * The domain defaults to [0, 1].
 * If range is not specified, it defaults to [0, 1].
 *
 * The first generic corresponds to the data type of the range elements.
 * The second generic corresponds to the data type of the output elements generated by the scale.
 * The third generic corresponds to the data type of the unknown value.
 *
 * If range element and output element type differ, the interpolator factory used with the scale must match this behavior and
 * convert the interpolated range element to a corresponding output element.
 *
 * The range must be set in accordance with the range element type.
 *
 * The interpolator factory may be set using the interpolate(...) method of the scale.
 *
 * @param range Array of range values.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function scaleSymlog<Range = number, Output = Range, Unknown = never>(
    range?: Iterable<Range>,
): ScaleSymLog<Range, Output, Unknown>;
/**
 * Constructs a new continuous scale with the specified domain and range, the constant 1, the default interpolator and clamping disabled.
 *
 * The first generic corresponds to the data type of the range elements.
 * The second generic corresponds to the data type of the output elements generated by the scale.
 * The third generic corresponds to the data type of the unknown value.
 *
 * If range element and output element type differ, the interpolator factory used with the scale must match this behavior and
 * convert the interpolated range element to a corresponding output element.
 *
 * The range must be set in accordance with the range element type.
 *
 * The interpolator factory may be set using the interpolate(...) method of the scale.
 *
 * @param domain Array of numeric domain values.
 * @param range Array of range values.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function scaleSymlog<Range, Output = Range, Unknown = never>(
    domain: Iterable<NumberValue>,
    range: Iterable<Range>,
): ScaleSymLog<Range, Output, Unknown>;

// -------------------------------------------------------------------------------
// Identity Scale Factory
// -------------------------------------------------------------------------------

/**
 * Identity scales are a special case of linear scales where the domain and range are identical; the scale and its invert method are thus the identity function.
 * These scales are occasionally useful when working with pixel coordinates, say in conjunction with an axis.
 *
 * The generic corresponds to the data type of the unknown value.
 */
export interface ScaleIdentity<Unknown = never> {
    /**
     * Given a value from the domain, returns the corresponding value from the range, subject to interpolation, if any.
     *
     * If the given value is outside the domain, and clamping is not enabled, the mapping may be extrapolated such that the returned value is outside the range.
     *
     * Note: The interpolation function applied by the scale may change the output type from the range type as part of the interpolation.
     *
     * @param value A numeric value from the domain.
     */
    (value: NumberValue): number | Unknown;

    /**
     * Given a value from the range, returns the corresponding value from the domain. Inversion is useful for interaction,
     * say to determine the data value corresponding to the position of the mouse.
     *
     * If the given value is outside the range, and clamping is not enabled, the mapping may be extrapolated such that the returned value is outside the domain.
     *
     * IMPORTANT: This method is only supported if the range is numeric. If the range is not numeric, returns NaN.
     *
     * For a valid value y in the range, continuous(continuous.invert(y)) approximately equals y;
     * similarly, for a valid value x in the domain, continuous.invert(continuous(x)) approximately equals x.
     * The scale and its inverse may not be exact due to the limitations of floating point precision.
     *
     * @param value A numeric value from the range.
     */
    invert(value: NumberValue): number;

    /**
     * Returns a copy of the scale’s current domain.
     */
    domain(): number[];
    /**
     * Sets the scale’s domain to the specified array of numbers. The array must contain two or more elements.
     * If the elements in the given array are not numbers, they will be coerced to numbers
     *
     * Although continuous scales typically have two values each in their domain and range, specifying more than two values produces a piecewise scale.
     *
     * Internally, a piecewise scale performs a binary search for the range interpolator corresponding to the given domain value.
     * Thus, the domain must be in ascending or descending order. If the domain and range have different lengths N and M, only the first min(N,M) elements in each are observed.
     *
     * @param domain Array of numeric domain values.
     */
    domain(domain: Iterable<NumberValue>): this;

    /**
     * Returns a copy of the scale’s current range.
     */
    range(): number[];
    /**
     * Sets the scale’s range to the specified array of values.
     *
     * The array must contain two or more elements. Unlike the domain, elements in the given array need not be numbers;
     * any value that is supported by the underlying interpolator will work, though note that numeric ranges are required for invert.
     *
     * @param range Array of range values.
     */
    range(range: Iterable<NumberValue>): this;

    /**
     * Returns approximately count representative values from the scale’s domain.
     *
     * If count is not specified, it defaults to 10.
     *
     * The returned tick values are uniformly spaced, have human-readable values (such as multiples of powers of 10),
     * and are guaranteed to be within the extent of the domain. Ticks are often used to display reference lines, or tick marks, in conjunction with the visualized data.
     * The specified count is only a hint; the scale may return more or fewer values depending on the domain. See also d3-array’s ticks.
     *
     * @param count Optional approximate number of ticks to be returned. If count is not specified, it defaults to 10.
     */
    ticks(count?: number): number[];

    /**
     * Returns a number format function suitable for displaying a tick value, automatically computing the appropriate precision based on the fixed interval between tick values.
     * The specified count should have the same value as the count that is used to generate the tick values.
     *
     * @param count Approximate number of ticks to be used when calculating precision for the number format function.
     * @param specifier An optional valid format specifier string which allows a custom format where the precision of the format is automatically set by the scale as appropriate for the tick interval.
     * If specifier uses the format type "s", the scale will return a SI-prefix format based on the largest value in the domain.
     * If the specifier already specifies a precision, this method is equivalent to locale.format.
     */
    tickFormat(count?: number, specifier?: string): (d: NumberValue) => string;

    /**
     * Extends the domain so that it starts and ends on nice round values.
     * This method typically modifies the scale’s domain, and may only extend the bounds to the nearest round value.
     * An optional tick count argument allows greater control over the step size used to extend the bounds,
     * guaranteeing that the returned ticks will exactly cover the domain.
     * Nicing is useful if the domain is computed from data, say using extent, and may be irregular.
     * For example, for a domain of [0.201479…, 0.996679…], a nice domain might be [0.2, 1.0].
     * If the domain has more than two values, nicing the domain only affects the first and last value.
     *
     * Nicing a scale only modifies the current domain; it does not automatically nice domains that are subsequently set using continuous.domain.
     * You must re-nice the scale after setting the new domain, if desired.
     *
     * @param count An optional number of ticks expected to be used.
     */
    nice(count?: number): this;

    /**
     * Returns an exact copy of this scale. Changes to this scale will not affect the returned scale, and vice versa.
     */
    copy(): this;

    /**
     * Returns the current unknown value, which defaults to undefined.
     */
    unknown(): UnknownReturnType<Unknown, undefined>;
    /**
     * Sets the output value of the scale for undefined (or NaN) input values and returns this scale.
     *
     * @param value The output value of the scale for undefined (or NaN) input values.
     */
    unknown<NewUnknown>(value: NewUnknown): ScaleIdentity<NewUnknown>;
}

/**
 * Constructs a new identity scale with the specified domain and range.
 * If range is not specified, it defaults to [0, 1].
 *
 * The generic corresponds to the data type of the unknown value.
 *
 * @param range Array of range values.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function scaleIdentity<Unknown = never>(range?: Iterable<NumberValue>): ScaleIdentity<Unknown>;

// -------------------------------------------------------------------------------
// Radial Scale Factory
// -------------------------------------------------------------------------------

export interface ScaleRadial<Range, Output, Unknown = never> extends ScaleContinuousNumeric<Range, Output, Unknown> {
    /**
     * Returns the current unknown value, which defaults to undefined.
     */
    unknown(): UnknownReturnType<Unknown, undefined>;
    /**
     * Sets the output value of the scale for undefined (or NaN) input values and returns this scale.
     *
     * @param value The output value of the scale for undefined (or NaN) input values.
     */
    unknown<NewUnknown>(value: NewUnknown): ScaleRadial<Range, Output, NewUnknown>;
}

/**
 * Constructs a new radial scale with the specified range.
 * The domain defaults to [0, 1].
 *
 * The first generic corresponds to the data type of the range elements.
 * The second generic corresponds to the data type of the unknown value.
 *
 * The range must be set in accordance with the range element type.
 *
 * @param range Iterable of range values.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function scaleRadial<Range = number, Unknown = never>(
    range?: Iterable<Range>,
): ScaleRadial<Range, Range, Unknown>;
/**
 * Constructs a new radial scale with the specified domain and range.
 *
 * The first generic corresponds to the data type of the range elements.
 * The second generic corresponds to the data type of the unknown value.
 *
 * The range must be set in accordance with the range element type.
 *
 * @param domain Iterable of numeric domain values.
 * @param range Iterable of range values.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function scaleRadial<Range, Unknown = never>(
    domain: Iterable<NumberValue>,
    range: Iterable<Range>,
): ScaleRadial<Range, Range, Unknown>;

// -------------------------------------------------------------------------------
// Time Scale Factories
// -------------------------------------------------------------------------------

/**
 * A linear scale defined over a temporal domain.
 *
 * Time scales implement ticks based on calendar intervals, taking the pain out of generating axes for temporal domains.
 *
 * If the range is numeric, the mapping may be inverted to return a date.
 *
 * Note that the data types of the range and output of the scale must be compatible with the interpolator applied by the scale.
 *
 * The first generic corresponds to the data type of the range elements.
 *
 * The second generic corresponds to the data type of the output elements generated by the scale.
 *
 * The third generic corresponds to the data type of the unknown value.
 *
 * If range element and output element type differ, the interpolator factory used with the scale must match this behavior and
 * convert the interpolated range element to a corresponding output element.
 */
export interface ScaleTime<Range, Output, Unknown = never> {
    /**
     * Given a value from the domain, returns the corresponding value from the range, subject to interpolation, if any.
     *
     * If the given value is outside the domain, and clamping is not enabled, the mapping may be extrapolated such that the returned value is outside the range.
     *
     * Note: The interpolation function applied by the scale may change the output type from the range type as part of the interpolation.
     *
     * @param value A temporal value from the domain. If the value is not a Date, it will be coerced to Date.
     */
    (value: Date | NumberValue): Output | Unknown;

    /**
     * Given a value from the range, returns the corresponding value from the domain. Inversion is useful for interaction,
     * say to determine the data value corresponding to the position of the mouse.
     *
     * If the given value is outside the range, and clamping is not enabled, the mapping may be extrapolated such that the returned value is outside the domain.
     *
     * IMPORTANT: This method is only supported if the range is numeric. If the range is not numeric, returns Invalid Date.
     *
     * For a valid value y in the range, time(time.invert(y)) equals y; similarly, for a valid value x in the domain, time.invert(time(x)) equals x.
     * The invert method is useful for interaction, say to determine the value in the domain that corresponds to the pixel location under the mouse.
     *
     * @param value A numeric value from the range.
     */
    invert(value: NumberValue): Date;

    /**
     * Returns a copy of the scale’s current domain.
     */
    domain(): Date[];

    /**
     * Sets the scale’s domain to the specified array of temporal domain values. The array must contain two or more elements.
     * If the elements in the given array are not dates, they will be coerced to dates.
     *
     * Although continuous scales typically have two values each in their domain and range, specifying more than two values produces a piecewise scale.
     *
     * Internally, a piecewise scale performs a binary search for the range interpolator corresponding to the given domain value.
     * Thus, the domain must be in ascending or descending order. If the domain and range have different lengths N and M, only the first min(N,M) elements in each are observed.
     *
     * @param domain Array of temporal domain values. Numeric values will be coerced to dates.
     */
    domain(domain: Iterable<Date | NumberValue>): this;

    /**
     * Returns a copy of the scale’s current range.
     */
    range(): Range[];
    /**
     * Sets the scale’s range to the specified array of values.
     *
     * The array must contain two or more elements. Unlike the domain, elements in the given array need not be temporal domain values;
     * any value that is supported by the underlying interpolator will work, though note that numeric ranges are required for invert.
     *
     * @param range Array of range values.
     */
    range(range: Iterable<Range>): this;

    /**
     * Sets the scale’s range to the specified array of values while also setting the scale’s interpolator to interpolateRound.
     *
     * The rounding interpolator is sometimes useful for avoiding antialiasing artifacts,
     * though also consider the shape-rendering “crispEdges” styles. Note that this interpolator can only be used with numeric ranges.
     *
     * The array must contain two or more elements. Unlike the domain, elements in the given array need not be temporal domain values;
     * any value that is supported by the underlying interpolator will work, though note that numeric ranges are required for invert.
     *
     * @param range Array of range values.
     */
    rangeRound(range: Iterable<NumberValue>): this;

    /**
     * Returns whether or not the scale currently clamps values to within the range.
     */
    clamp(): boolean;
    /**
     * Enables or disables clamping, respectively. If clamping is disabled and the scale is passed a value outside the domain,
     * the scale may return a value outside the range through extrapolation.
     *
     * If clamping is enabled, the return value of the scale is always within the scale’s range. Clamping similarly applies to the "invert" method.
     *
     * @param clamp A flag to enable (true) or disable (false) clamping.
     */
    clamp(clamp: boolean): this;

    /**
     * Returns the scale’s current interpolator factory, which defaults to interpolate.
     */
    interpolate(): InterpolatorFactory<any, any>;

    /**
     * Sets the scale’s range interpolator factory. This interpolator factory is used to create interpolators for each adjacent pair of values from the range;
     * these interpolators then map a normalized domain parameter t in [0, 1] to the corresponding value in the range.
     *
     * Note: the default interpolator may reuse return values. For example, if the range values are objects, then the value interpolator always returns the same object, modifying it in-place.
     * If the scale is used to set an attribute or style, this is typically acceptable (and desirable for performance);
     * however, if you need to store the scale’s return value, you must specify your own interpolator or make a copy as appropriate.
     *
     * As part of the interpolation process the interpolated value from the range may be converted to a corresponding output value.
     *
     * @param interpolate An interpolation factory. The generics for Range and Output of the scale must correspond to the interpolation factory applied to the scale.
     */
    interpolate(interpolate: InterpolatorFactory<Range, Output>): this;
    /**
     * Sets the scale’s range interpolator factory. This interpolator factory is used to create interpolators for each adjacent pair of values from the range;
     * these interpolators then map a normalized domain parameter t in [0, 1] to the corresponding value in the range.
     *
     * Note: the default interpolator may reuse return values. For example, if the range values are objects, then the value interpolator always returns the same object, modifying it in-place.
     * If the scale is used to set an attribute or style, this is typically acceptable (and desirable for performance);
     * however, if you need to store the scale’s return value, you must specify your own interpolator or make a copy as appropriate.
     *
     * As part of the interpolation process the interpolated value from the range may be converted to a corresponding output value.
     *
     * The generic "NewOutput" can be used to change the scale to have a different output element type corresponding to the new interpolation factory.
     *
     * @param interpolate An interpolation factory. The generics for Range and Output of the scale must correspond to the interpolation factory applied to the scale.
     */
    interpolate<NewOutput>(interpolate: InterpolatorFactory<Range, NewOutput>): ScaleTime<Range, NewOutput, Unknown>;

    /**
     * Returns representative dates from the scale’s domain. The returned tick values are uniformly-spaced (mostly),
     * have sensible values (such as every day at midnight), and are guaranteed to be within the extent of the domain.
     * Ticks are often used to display reference lines, or tick marks, in conjunction with the visualized data.
     *
     * An optional count may be specified to affect how many ticks are generated. If count is not specified, it defaults to 10.
     * The specified count is only a hint; the scale may return more or fewer values depending on the domain.
     *
     * @param count Expected number of ticks.
     */
    ticks(count?: number): Date[];
    /**
     * Returns representative dates from the scale’s domain. The returned tick values are uniformly-spaced (mostly),
     * have sensible values (such as every day at midnight), and are guaranteed to be within the extent of the domain.
     * Ticks are often used to display reference lines, or tick marks, in conjunction with the visualized data.
     *
     * The specified time interval controls the ticks generated and returned. To prune the generated ticks for a given time interval,
     * use interval.every(...) or interval.filter(...).
     *
     * @param interval A time interval to specify the expected ticks.
     */
    ticks(interval: TimeInterval): Date[];

    /**
     * Returns a time format function suitable for displaying tick values.
     *
     * The default multi-scale time format chooses a human-readable representation based on the specified date as follows:
     *
     *  - %Y - for year boundaries, such as 2011.
     *  - %B - for month boundaries, such as February.
     *  - %b %d - for week boundaries, such as Feb 06.
     *  - %a %d - for day boundaries, such as Mon 07.
     *  - %I %p - for hour boundaries, such as 01 AM.
     *  - %I:%M - for minute boundaries, such as 01:23.
     *  - :%S - for second boundaries, such as :45.
     *  - .%L - milliseconds for all other times, such as .012.
     *
     * Although somewhat unusual, this default behavior has the benefit of providing both local and global context:
     * for example, formatting a sequence of ticks as [11 PM, Mon 07, 01 AM] reveals information about hours, dates, and day simultaneously,
     * rather than just the hours [11 PM, 12 AM, 01 AM].
     *
     * The specified count is currently ignored, but is accepted for consistency with other scales such as continuous.tickFormat.
     *
     * @param count Expected number of ticks. (Currently ignored)
     * @param specifier An optional valid date format specifier string (see d3-time-format).
     */
    tickFormat(count?: number, specifier?: string): (d: Date) => string;
    /**
     * Returns a time format function suitable for displaying tick values.
     *
     * The specified time interval is currently ignored, but is accepted for consistency with other scales such as continuous.tickFormat.
     *
     * @param interval A time interval to specify the expected ticks. (Currently ignored)
     * @param specifier An optional valid date format specifier string (see d3-time-format).
     */
    tickFormat(interval: TimeInterval, specifier?: string): (d: Date) => string;

    /**
     * Extends the domain so that it starts and ends on nice round values.
     * This method typically modifies the scale’s domain, and may only extend the bounds to the nearest round value.
     *
     * An optional count argument allows greater control over the step size used to extend the bounds, guaranteeing that the returned ticks will exactly cover the domain.
     *
     * Nicing is useful if the domain is computed from data, say using extent, and may be irregular.
     * For example, for a domain of [2009-07-13T00:02, 2009-07-13T23:48], the nice domain is [2009-07-13, 2009-07-14].
     * If the domain has more than two values, nicing the domain only affects the first and last value.
     *
     * @param count Expected number of ticks.
     */
    nice(count?: number): this;
    /**
     * Extends the domain so that it starts and ends on nice round values.
     * This method typically modifies the scale’s domain, and may only extend the bounds to the nearest round value.
     *
     * A time interval may be specified to explicitly set the ticks.
     * If an interval is specified, an optional step may also be specified to skip some ticks.
     * For example, time.nice(d3.timeSecond.every(10)) will extend the domain to an even ten seconds (0, 10, 20, etc.).
     * See time.ticks and interval.every for further detail.
     *
     * Nicing is useful if the domain is computed from data, say using extent, and may be irregular.
     * For example, for a domain of [2009-07-13T00:02, 2009-07-13T23:48], the nice domain is [2009-07-13, 2009-07-14].
     * If the domain has more than two values, nicing the domain only affects the first and last value.
     *
     * @param interval A time interval to specify the expected ticks.
     */
    nice(interval: CountableTimeInterval): this;

    /**
     * Returns an exact copy of this scale. Changes to this scale will not affect the returned scale, and vice versa.
     */
    copy(): this;

    /**
     * Returns the current unknown value, which defaults to undefined.
     */
    unknown(): UnknownReturnType<Unknown, undefined>;
    /**
     * Sets the output value of the scale for undefined (or NaN) input values and returns this scale.
     *
     * @param value The output value of the scale for undefined (or NaN) input values.
     */
    unknown<NewUnknown>(value: NewUnknown): ScaleTime<Range, Output, NewUnknown>;
}

/**
 * Constructs a new time scale with the specified range, the default interpolator and clamping disabled.
 * The domain defaults to [2000-01-01, 2000-01-02].
 * If range is not specified, it defaults to [0, 1].
 *
 * The first generic corresponds to the data type of the range elements.
 * The second generic corresponds to the data type of the output elements generated by the scale.
 * The third generic corresponds to the data type of the unknown value.
 *
 * If range element and output element type differ, the interpolator factory used with the scale must match this behavior and
 * convert the interpolated range element to a corresponding output element.
 *
 * The range must be set in accordance with the range element type.
 *
 * The interpolator factory may be set using the interpolate(...) method of the scale.
 *
 * @param range Array of range values.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function scaleTime<Range = number, Output = Range, Unknown = never>(
    range?: Iterable<Range>,
): ScaleTime<Range, Output, Unknown>;
/**
 * Constructs a new time scale with the specified domain and range, the default interpolator and clamping disabled.
 *
 * The first generic corresponds to the data type of the range elements.
 * The second generic corresponds to the data type of the output elements generated by the scale.
 * The third generic corresponds to the data type of the unknown value.
 *
 * If range element and output element type differ, the interpolator factory used with the scale must match this behavior and
 * convert the interpolated range element to a corresponding output element.
 *
 * The range must be set in accordance with the range element type.
 *
 * The interpolator factory may be set using the interpolate(...) method of the scale.
 *
 * @param domain Array of temporal domain values. Numeric values will be coerced to dates.
 * @param range Array of range values.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function scaleTime<Range, Output = Range, Unknown = never>(
    domain: Iterable<Date | NumberValue>,
    range: Iterable<Range>,
): ScaleTime<Range, Output, Unknown>;

/**
 * Constructs a new time scale using Coordinated Universal Time (UTC) with the specified range, the default interpolator and clamping disabled.
 * The domain defaults to [2000-01-01, 2000-01-02].
 * If range is not specified, it defaults to [0, 1].
 *
 * The first generic corresponds to the data type of the range elements.
 * The second generic corresponds to the data type of the output elements generated by the scale.
 * The third generic corresponds to the data type of the unknown value.
 *
 * If range element and output element type differ, the interpolator factory used with the scale must match this behavior and
 * convert the interpolated range element to a corresponding output element.
 *
 * The range must be set in accordance with the range element type.
 *
 * The interpolator factory may be set using the interpolate(...) method of the scale.
 *
 * @param range Array of range values.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function scaleUtc<Range = number, Output = Range, Unknown = never>(
    range?: Iterable<Range>,
): ScaleTime<Range, Output, Unknown>;
/**
 * Constructs a new time scale using Coordinated Universal Time (UTC) with the specified domain and range, the default interpolator and clamping disabled.
 *
 * The first generic corresponds to the data type of the range elements.
 * The second generic corresponds to the data type of the output elements generated by the scale.
 * The third generic corresponds to the data type of the unknown value.
 *
 * If range element and output element type differ, the interpolator factory used with the scale must match this behavior and
 * convert the interpolated range element to a corresponding output element.
 *
 * The range must be set in accordance with the range element type.
 *
 * The interpolator factory may be set using the interpolate(...) method of the scale.
 *
 * @param domain Array of temporal domain values. Numeric values will be coerced to dates.
 * @param range Array of range values.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function scaleUtc<Range, Output = Range, Unknown = never>(
    domain: Iterable<NumberValue>,
    range: Iterable<Range>,
): ScaleTime<Range, Output, Unknown>;

// -------------------------------------------------------------------------------
// Sequential Scale Factory
// -------------------------------------------------------------------------------

/**
 * Sequential scales are similar to continuous scales in that they map a continuous, numeric input domain to a continuous output range.
 * However, unlike continuous scales, the input domain and output range of a sequential scale always has exactly two elements,
 * and the output range is typically specified as an interpolator rather than an array of values.
 * These scales do not expose invert and interpolate methods.
 *
 * The first generic corresponds to the data type of the output of the interpolator underlying the scale.
 *
 * The second generic corresponds to the data type of the unknown value.
 */
export interface ScaleSequentialBase<Output, Unknown = never> {
    /**
     * Given a value from the domain, returns the corresponding value from the output range, subject to interpolation.
     *
     * If the given value is outside the domain, and clamping is not enabled, the mapping may be extrapolated such that the returned value is outside the range.
     *
     * @param value A numeric value from the domain.
     */
    (value: NumberValue): Output | Unknown;

    /**
     * Returns a copy of the scale’s current domain.
     */
    domain(): [number, number];
    /**
     * Sets the scale’s domain to the specified array of numbers. The array must contain exactly two elements.
     * If the elements in the given array are not numbers, they will be coerced to numbers
     *
     * @param domain A two-element array of numeric domain values.
     */
    domain(domain: Iterable<NumberValue>): this;

    /**
     * Returns whether or not the scale currently clamps values to within the range.
     */
    clamp(): boolean;
    /**
     * Enables or disables clamping, respectively. If clamping is disabled and the scale is passed a value outside the domain,
     * the scale may return a value outside the range through extrapolation.
     *
     * If clamping is enabled, the return value of the scale is always within the scale’s range. Clamping similarly applies to the "invert" method.
     *
     * @param clamp A flag to enable (true) or disable (false) clamping.
     */
    clamp(clamp: boolean): this;

    /**
     * See continuous.range.
     */
    range(): () => [Output, Output];
    /**
     * See continuous.range.
     * The given two-element array is converted to an interpolator function using d3.interpolate.
     *
     * @param range Range values.
     */
    range(range: Iterable<Output>): this;

    /**
     * See continuous.rangeRound.
     * If range is specified, implicitly uses d3.interpolateRound as the interpolator.
     *
     * @param range Range values.
     */
    rangeRound(range: Iterable<NumberValue>): this;

    /**
     * Returns an exact copy of this scale. Changes to this scale will not affect the returned scale, and vice versa.
     */
    copy(): this;
}

export interface ScaleSequential<Output, Unknown = never> extends ScaleSequentialBase<Output, Unknown> {
    /**
     * Returns the current interpolator underlying the scale.
     */
    interpolator(): (t: number) => Output;
    /**
     * Sets the scale’s interpolator to the specified function.
     *
     * @param interpolator An interpolator function mapping a value from the [0, 1] interval to an output value.
     */
    interpolator(interpolator: (t: number) => Output): this;
    /**
     * Sets the scale’s interpolator to the specified function.
     *
     * The generic corresponds to a the new output type of the scale. The output type of the scale is determined by the output type of the interpolator function.
     *
     * @param interpolator An interpolator function mapping a value from the [0, 1] interval to an output value.
     */
    interpolator<NewOutput>(interpolator: (t: number) => NewOutput): ScaleSequential<NewOutput, Unknown>;

    /**
     * Returns the current unknown value, which defaults to undefined.
     */
    unknown(): UnknownReturnType<Unknown, undefined>;
    /**
     * Sets the output value of the scale for undefined (or NaN) input values and returns this scale.
     *
     * @param value The output value of the scale for undefined (or NaN) input values.
     */
    unknown<NewUnknown>(value: NewUnknown): ScaleSequential<Output, NewUnknown>;
}

/**
 * Constructs a new sequential scale with the specified interpolator function or array.
 * The domain defaults to [0, 1].
 * If interpolator is not specified, it defaults to the identity function.
 * When the scale is applied, the interpolator will be invoked with a value typically in the range [0, 1], where 0 represents the minimum value and 1 represents the maximum value.
 *
 * If interpolator is an array, it represents the scale’s two-element output range and is converted to an interpolator function using d3.interpolate.
 *
 * The first generic corresponds to the data type of the output of the interpolator underlying the scale.
 * The second generic corresponds to the data type of the unknown value.
 *
 * @param interpolator The interpolator function or array to be used with the scale.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function scaleSequential<Output = number, Unknown = never>(
    interpolator?: ((t: number) => Output) | Iterable<Output>,
): ScaleSequential<Output, Unknown>;
/**
 * Constructs a new sequential scale with the specified domain and interpolator function or array.
 * When the scale is applied, the interpolator will be invoked with a value typically in the range [0, 1], where 0 represents the minimum value and 1 represents the maximum value.
 *
 * If interpolator is an array, it represents the scale’s two-element output range and is converted to an interpolator function using d3.interpolate.
 *
 * The first generic corresponds to the data type of the output of the interpolator underlying the scale.
 * The second generic corresponds to the data type of the unknown value.
 *
 * @param domain A two-element array of numeric domain values.
 * @param interpolator The interpolator function or array to be used with the scale.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function scaleSequential<Output, Unknown = never>(
    domain: Iterable<NumberValue>,
    interpolator: ((t: number) => Output) | Iterable<Output>,
): ScaleSequential<Output, Unknown>;

/**
 * A sequential scale with a logarithmic transform, analogous to a log scale.
 *
 * The first generic corresponds to the data type of the output of the interpolator underlying the scale.
 * The second generic corresponds to the data type of the unknown value.
 *
 * @param interpolator The interpolator function to be used with the scale.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function scaleSequentialLog<Output = number, Unknown = never>(
    interpolator?: (t: number) => Output,
): ScaleSequential<Output, Unknown>;
/**
 * A sequential scale with a logarithmic transform, analogous to a log scale.
 *
 * The first generic corresponds to the data type of the output of the interpolator underlying the scale.
 * The second generic corresponds to the data type of the unknown value.
 *
 * @param domain A two-element array of numeric domain values.
 * @param interpolator The interpolator function to be used with the scale.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function scaleSequentialLog<Output, Unknown = never>(
    domain: Iterable<NumberValue>,
    interpolator: (t: number) => Output,
): ScaleSequential<Output, Unknown>;

/**
 * A sequential scale with a exponential transform, analogous to a power scale.
 *
 * The first generic corresponds to the data type of the output of the interpolator underlying the scale.
 * The second generic corresponds to the data type of the unknown value.
 *
 * @param interpolator The interpolator function to be used with the scale.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function scaleSequentialPow<Output = number, Unknown = never>(
    interpolator?: (t: number) => Output,
): ScaleSequential<Output, Unknown>;
/**
 * A sequential scale with a exponential transform, analogous to a power scale.
 *
 * The first generic corresponds to the data type of the output of the interpolator underlying the scale.
 * The second generic corresponds to the data type of the unknown value.
 *
 * @param domain A two-element array of numeric domain values.
 * @param interpolator The interpolator function to be used with the scale.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function scaleSequentialPow<Output, Unknown = never>(
    domain: Iterable<NumberValue>,
    interpolator: (t: number) => Output,
): ScaleSequential<Output, Unknown>;

/**
 * A sequential scale with a square-root transform, analogous to a d3.scaleSqrt.
 *
 * The first generic corresponds to the data type of the output of the interpolator underlying the scale.
 * The second third generic corresponds to the data type of the unknown value.
 *
 * @param interpolator The interpolator function to be used with the scale.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function scaleSequentialSqrt<Output = number, Unknown = never>(
    interpolator?: (t: number) => Output,
): ScaleSequential<Output, Unknown>;
/**
 * A sequential scale with a square-root transform, analogous to a d3.scaleSqrt.
 *
 * The first generic corresponds to the data type of the output of the interpolator underlying the scale.
 * The second generic corresponds to the data type of the unknown value.
 *
 * @param domain A two-element array of numeric domain values.
 * @param interpolator The interpolator function to be used with the scale.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function scaleSequentialSqrt<Output, Unknown = never>(
    domain: Iterable<NumberValue>,
    interpolator: (t: number) => Output,
): ScaleSequential<Output, Unknown>;

/**
 * A sequential scale with a symmetric logarithmic transform, analogous to a symlog scale.
 *
 * The first generic corresponds to the data type of the output of the interpolator underlying the scale.
 * The second generic corresponds to the data type of the unknown value.
 *
 * @param interpolator The interpolator function to be used with the scale.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function scaleSequentialSymlog<Output = number, Unknown = never>(
    interpolator?: (t: number) => Output,
): ScaleSequential<Output, Unknown>;
/**
 * A sequential scale with a symmetric logarithmic transform, analogous to a symlog scale.
 *
 * The first generic corresponds to the data type of the output of the interpolator underlying the scale.
 * The second generic corresponds to the data type of the unknown value.
 *
 * @param domain A two-element array of numeric domain values.
 * @param interpolator The interpolator function to be used with the scale.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function scaleSequentialSymlog<Output, Unknown = never>(
    domain: Iterable<NumberValue>,
    interpolator: (t: number) => Output,
): ScaleSequential<Output, Unknown>;

export interface ScaleSequentialQuantile<Output, Unknown = never> extends ScaleSequentialBase<Output, Unknown> {
    /**
     * Returns an array of n + 1 quantiles.
     * For example, if n = 4, returns an array of five numbers: the minimum value, the first quartile, the median, the third quartile, and the maximum.
     */
    quantiles(): number[];

    /**
     * Returns the current interpolator underlying the scale.
     */
    interpolator(): (t: number) => Output;
    /**
     * Sets the scale’s interpolator to the specified function.
     *
     * @param interpolator An interpolator function mapping a value from the [0, 1] interval to an output value.
     */
    interpolator(interpolator: (t: number) => Output): this;
    /**
     * Sets the scale’s interpolator to the specified function.
     *
     * The generic corresponds to a the new output type of the scale. The output type of the scale is determined by the output type of the interpolator function.
     *
     * @param interpolator An interpolator function mapping a value from the [0, 1] interval to an output value.
     */
    interpolator<NewOutput>(interpolator: (t: number) => NewOutput): ScaleSequentialQuantile<NewOutput, Unknown>;

    /**
     * Returns the current unknown value, which defaults to undefined.
     */
    unknown(): UnknownReturnType<Unknown, undefined>;
    /**
     * Sets the output value of the scale for undefined (or NaN) input values and returns this scale.
     *
     * @param value The output value of the scale for undefined (or NaN) input values.
     */
    unknown<NewUnknown>(value: NewUnknown): ScaleSequentialQuantile<Output, NewUnknown>;
}

/**
 * A sequential scale using a p-quantile transform, analogous to a quantile scale.
 *
 * The first generic corresponds to the data type of the output of the interpolator underlying the scale.
 * The second generic corresponds to the data type of the unknown value.
 *
 * @param interpolator The interpolator function to be used with the scale.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function scaleSequentialQuantile<Output = number, Unknown = never>(
    interpolator?: (t: number) => Output,
): ScaleSequentialQuantile<Output, Unknown>;
/**
 * A sequential scale using a p-quantile transform, analogous to a quantile scale.
 *
 * The first generic corresponds to the data type of the output of the interpolator underlying the scale.
 * The second generic corresponds to the data type of the unknown value.
 *
 * @param domain A two-element array of numeric domain values.
 * @param interpolator The interpolator function to be used with the scale.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function scaleSequentialQuantile<Output, Unknown = never>(
    domain: Iterable<NumberValue>,
    interpolator: (t: number) => Output,
): ScaleSequentialQuantile<Output, Unknown>;

// -------------------------------------------------------------------------------
// Diverging Scale Factory
// -------------------------------------------------------------------------------

/**
 * Diverging scales, like sequential scales, are similar to continuous scales in that they map a continuous, numeric input domain to a continuous output range.
 * However, unlike continuous scales, the input domain and output range of a diverging scale always has exactly three elements,
 * and the output range is typically specified as an interpolator rather than an array of values.
 * These scales do not expose invert and interpolate methods.
 *
 * The first generic corresponds to the data type of the interpolator return type.
 *
 * The second generic corresponds to the data type of the unknown value.
 */
export interface ScaleDiverging<Output, Unknown = never> {
    /**
     * Given a value from the domain, returns the corresponding value subject to interpolation.
     *
     * If the given value is outside the domain, and clamping is not enabled, the mapping may be extrapolated such that the returned value is outside the range.
     *
     * @param value A numeric value from the domain.
     */
    (value: NumberValue): Output | Unknown;

    /**
     * Returns a copy of the scale’s current domain.
     */
    domain(): [number, number, number];
    /**
     * Sets the scale’s domain to the specified array of numbers.
     * The domain must be numeric and must contain exactly three values. The default domain is [0, 0.5, 1].
     * If the elements in the given array are not numbers, they will be coerced to numbers
     *
     * @param domain Array of three numeric domain values.
     */
    domain(domain: Iterable<NumberValue>): this;

    /**
     * Returns whether or not the scale currently clamps values to within the range.
     */
    clamp(): boolean;
    /**
     * Enables or disables clamping, respectively. If clamping is disabled and the scale is passed a value outside the domain,
     * the scale may return a value outside the range through extrapolation.
     *
     * If clamping is enabled, the return value of the scale is always within the interpolator scale’s range.
     *
     * @param clamp A flag to enable (true) or disable (false) clamping.
     */
    clamp(clamp: boolean): this;

    /**
     * Returns the scale’s current interpolator.
     */
    interpolator(): (t: number) => Output;
    /**
     * Sets the scale’s interpolator to the specified function.
     *
     * @param interpolator The scale’s interpolator.
     */
    interpolator(interpolator?: (t: number) => Output): this;

    /**
     * See continuous.range.
     */
    range(): () => [Output, Output, Output];
    /**
     * See continuous.range.
     * The given two-element array is converted to an interpolator function using d3.interpolate and d3.piecewise.
     *
     * @param range Range values.
     */
    range(range: Iterable<Output>): this;

    /**
     * See continuous.rangeRound.
     * If range is specified, implicitly uses d3.interpolateRound as the interpolator.
     *
     * @param range Range values.
     */
    rangeRound(range: Iterable<NumberValue>): this;

    /**
     * Returns an exact copy of this scale. Changes to this scale will not affect the returned scale, and vice versa.
     */
    copy(): this;

    /**
     * Returns the current unknown value, which defaults to undefined.
     */
    unknown(): UnknownReturnType<Unknown, undefined>;
    /**
     * Sets the output value of the scale for undefined (or NaN) input values and returns this scale.
     *
     * @param value The output value of the scale for undefined (or NaN) input values.
     */
    unknown<NewUnknown>(value: NewUnknown): ScaleDiverging<Output, NewUnknown>;
}

/**
 * Constructs a new diverging scale with the specified interpolator function or array.
 * The domain defaults to [0, 0.5, 1].
 * If interpolator is not specified, it defaults to the identity function.
 * When the scale is applied, the interpolator will be invoked with a value typically in the range [0, 1],
 * where 0 represents the extreme negative value, 0.5 represents the neutral value, and 1 represents the extreme positive value.
 *
 * If interpolator is an array, it represents the scale’s three-element output range and is converted to an interpolator function using d3.interpolate and d3.piecewise.
 *
 * The first generic corresponds to the data type of the interpolator return type.
 * The second generic corresponds to the data type of the unknown value.
 *
 * @param interpolator The scale’s interpolator function or array.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function scaleDiverging<Output = number, Unknown = never>(
    interpolator?: ((t: number) => Output) | Iterable<Output>,
): ScaleDiverging<Output, Unknown>;
/**
 * Constructs a new diverging scale with the specified domain and interpolator function or array.
 * When the scale is applied, the interpolator will be invoked with a value typically in the range [0, 1],
 * where 0 represents the extreme negative value, 0.5 represents the neutral value, and 1 represents the extreme positive value.
 *
 * If interpolator is an array, it represents the scale’s three-element output range and is converted to an interpolator function using d3.interpolate and d3.piecewise.
 *
 * The first generic corresponds to the data type of the interpolator return type.
 * The second generic corresponds to the data type of the unknown value.
 *
 * @param domain Array of three numeric domain values.
 * @param interpolator The scale’s interpolator function or array.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function scaleDiverging<Output, Unknown = never>(
    domain: Iterable<NumberValue>,
    interpolator: ((t: number) => Output) | Iterable<Output>,
): ScaleDiverging<Output, Unknown>;

/**
 * A diverging scale with a logarithmic transform, analogous to a log scale.
 *
 * The first generic corresponds to the data type of the interpolator return type.
 * The second generic corresponds to the data type of the unknown value.
 *
 * @param interpolator The scale’s interpolator.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function scaleDivergingLog<Output = number, Unknown = never>(
    interpolator?: (t: number) => Output,
): ScaleDiverging<Output, Unknown>;
/**
 * A diverging scale with a logarithmic transform, analogous to a log scale.
 *
 * The first generic corresponds to the data type of the interpolator return type.
 * The second generic corresponds to the data type of the unknown value.
 *
 * @param domain Array of three numeric domain values.
 * @param interpolator The scale’s interpolator.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function scaleDivergingLog<Output, Unknown = never>(
    domain: Iterable<NumberValue>,
    interpolator: (t: number) => Output,
): ScaleDiverging<Output, Unknown>;

/**
 * A diverging scale with a exponential transform, analogous to a power scale.
 *
 * The first generic corresponds to the data type of the interpolator return type.
 * The second generic corresponds to the data type of the unknown value.
 *
 * @param interpolator The scale’s interpolator.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function scaleDivergingPow<Output = number, Unknown = never>(
    interpolator?: (t: number) => Output,
): ScaleDiverging<Output, Unknown>;
/**
 * A diverging scale with a exponential transform, analogous to a power scale.
 *
 * The first generic corresponds to the data type of the interpolator return type.
 * The second generic corresponds to the data type of the unknown value.
 *
 * @param domain Array of three numeric domain values.
 * @param interpolator The scale’s interpolator.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function scaleDivergingPow<Output, Unknown = never>(
    domain: Iterable<NumberValue>,
    interpolator: (t: number) => Output,
): ScaleDiverging<Output, Unknown>;

/**
 * A diverging scale with a square-root transform, analogous to a d3.scaleSqrt.
 *
 * The first generic corresponds to the data type of the interpolator return type.
 * The second generic corresponds to the data type of the unknown value.
 *
 * @param interpolator The scale’s interpolator.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function scaleDivergingSqrt<Output = number, Unknown = never>(
    interpolator?: (t: number) => Output,
): ScaleDiverging<Output, Unknown>;
/**
 * A diverging scale with a square-root transform, analogous to a d3.scaleSqrt.
 *
 * The first generic corresponds to the data type of the interpolator return type.
 * The second generic corresponds to the data type of the unknown value.
 *
 * @param domain Array of three numeric domain values.
 * @param interpolator The scale’s interpolator.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function scaleDivergingSqrt<Output, Unknown = never>(
    domain: Iterable<NumberValue>,
    interpolator: (t: number) => Output,
): ScaleDiverging<Output, Unknown>;

/**
 * A diverging scale with a symmetric logarithmic transform, analogous to a symlog scale.
 *
 * The first generic corresponds to the data type of the interpolator return type.
 * The second generic corresponds to the data type of the unknown value.
 *
 * @param interpolator The scale’s interpolator.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function scaleDivergingSymlog<Output = number, Unknown = never>(
    interpolator?: (t: number) => Output,
): ScaleDiverging<Output, Unknown>;
/**
 * A diverging scale with a symmetric logarithmic transform, analogous to a symlog scale.
 *
 * The first generic corresponds to the data type of the interpolator return type.
 * The second generic corresponds to the data type of the unknown value.
 *
 * @param domain Array of three numeric domain values.
 * @param interpolator The scale’s interpolator.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function scaleDivergingSymlog<Output, Unknown = never>(
    domain: Iterable<NumberValue>,
    interpolator: (t: number) => Output,
): ScaleDiverging<Output, Unknown>;

// -------------------------------------------------------------------------------
// Quantize Scale Factory
// -------------------------------------------------------------------------------

/**
 * Quantize scales are similar to linear scales, except they use a discrete rather than continuous range.
 * The continuous input domain is divided into uniform segments based on the number of values in (i.e., the cardinality of) the output range.
 *
 * Each range value y can be expressed as a quantized linear function of the domain value x: y = m round(x) + b.
 *
 * The first generic corresponds to the data type of the range elements.
 *
 * The second generic corresponds to the data type of the unknown value.
 */
export interface ScaleQuantize<Range, Unknown = never> {
    /**
     * Given a value in the input domain, returns the corresponding value in the output range.
     */
    (value: NumberValue): Range | Unknown;
    /**
     * Returns the extent of values in the domain [x0, x1] for the corresponding value in the range: the inverse of quantize.
     * This method is useful for interaction, say to determine the value in the domain that corresponds to the pixel location under the mouse.
     *
     * If an invalid range value is entered, returns [NaN, NaN].
     *
     * @param value A value from the range.
     */
    invertExtent(value: Range): [number, number];

    /**
     * Returns the scale’s current domain.
     */
    domain(): [number, number];

    /**
     * Sets the scale’s domain to the specified two-element array of numbers.
     * If the elements in the given array are not numbers, they will be coerced to numbers.
     *
     * @param domain A two-element array of numeric values defining the domain.
     */
    domain(domain: Iterable<NumberValue>): this;

    /**
     * Returns the scale’s current range.
     */
    range(): Range[];
    /**
     * Sets the scale’s range to the specified array of values. The array may contain any number of discrete values.
     *
     * @param range Array of range values.
     */
    range(range: Iterable<Range>): this;

    /**
     * Returns approximately count representative values from the scale’s domain.
     *
     * If count is not specified, it defaults to 10.
     *
     * The returned tick values are uniformly spaced, have human-readable values (such as multiples of powers of 10),
     * and are guaranteed to be within the extent of the domain. Ticks are often used to display reference lines, or tick marks, in conjunction with the visualized data.
     * The specified count is only a hint; the scale may return more or fewer values depending on the domain. See also d3-array’s ticks.
     *
     * @param count Optional approximate number of ticks to be returned. If count is not specified, it defaults to 10.
     */
    ticks(count?: number): number[];

    /**
     * Returns a number format function suitable for displaying a tick value, automatically computing the appropriate precision based on the fixed interval between tick values.
     * The specified count should have the same value as the count that is used to generate the tick values.
     *
     * @param count Approximate number of ticks to be used when calculating precision for the number format function.
     * @param specifier An optional valid format specifier string which allows a custom format where the precision of the format is automatically set by the scale as appropriate for the tick interval.
     * If specifier uses the format type "s", the scale will return a SI-prefix format based on the largest value in the domain.
     * If the specifier already specifies a precision, this method is equivalent to locale.format.
     */
    tickFormat(count?: number, specifier?: string): (d: NumberValue) => string;

    /**
     * Extends the domain so that it starts and ends on nice round values.
     * This method typically modifies the scale’s domain, and may only extend the bounds to the nearest round value.
     *
     * Nicing is useful if the domain is computed from data, say using extent, and may be irregular.
     * For example, for a domain of [0.201479…, 0.996679…], a nice domain might be [0.2, 1.0].
     *
     * Nicing a scale only modifies the current domain; it does not automatically nice domains that are subsequently set using continuous.domain.
     * You must re-nice the scale after setting the new domain, if desired.
     *
     * @param count An optional number of ticks expected to be used.
     */
    nice(count?: number): this;

    /**
     * Returns the current unknown value, which defaults to undefined.
     */
    unknown(): UnknownReturnType<Unknown, undefined>;
    /**
     * Sets the output value of the scale for undefined (or NaN) input values and returns this scale.
     *
     * @param value The output value of the scale for undefined (or NaN) input values.
     */
    unknown<NewUnknown>(value: NewUnknown): ScaleQuantize<Range, NewUnknown>;

    /**
     * Returns the array of computed thresholds within the domain.
     */
    thresholds(): number[];

    /**
     * Returns an exact copy of this scale. Changes to this scale will not affect the returned scale, and vice versa.
     */
    copy(): this;
}

/**
 * Constructs a new quantize scale with the specified range.
 * The domain defaults to [0, 1].
 * If range is not specified, it defaults to [0, 1].
 * Thus, the default quantize scale is equivalent to the Math.round function.
 *
 * The range must be set corresponding to the type of the range elements.
 *
 * The first generic corresponds to the data type of the range elements.
 * The second generic corresponds to the data type of the unknown value.
 *
 * @param range Array of range values.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function scaleQuantize<Range = number, Unknown = never>(range?: Iterable<Range>): ScaleQuantize<Range, Unknown>;
/**
 * Constructs a new quantize scale with the specified domain and range.
 * Thus, the default quantize scale is equivalent to the Math.round function.
 *
 * The range must be set corresponding to the type of the range elements.
 *
 * The first generic corresponds to the data type of the range elements.
 * The second generic corresponds to the data type of the unknown value.
 *
 * @param domain A two-element array of numeric values defining the domain.
 * @param range Array of range values.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function scaleQuantize<Range, Unknown = never>(
    domain: Iterable<NumberValue>,
    range: Iterable<Range>,
): ScaleQuantize<Range, Unknown>;

// -------------------------------------------------------------------------------
// Quantile Scale Factory
// -------------------------------------------------------------------------------

/**
 * Quantile scales map a sampled input domain to a discrete range.
 * The domain is considered continuous and thus the scale will accept any reasonable input value;
 * however, the domain is specified as a discrete set of sample values.
 * The number of values in (the cardinality of) the output range determines the number of quantiles that will be computed from the domain.
 * To compute the quantiles, the domain is sorted, and treated as a population of discrete values; see d3-array’s quantile.
 *
 * The first generic corresponds to the data type of range elements.
 *
 * The second generic corresponds to the data type of the unknown value.
 */
export interface ScaleQuantile<Range, Unknown = never> {
    /**
     * Given a value in the input domain, returns the corresponding value in the output range.
     *
     * @param value A numeric value in the input domain.
     */
    (value: NumberValue): Range | Unknown;

    /**
     * Returns the extent of values in the domain [x0, x1] for the corresponding value in the range: the inverse of quantile.
     * This method is useful for interaction, say to determine the value in the domain that corresponds to the pixel location under the mouse.
     *
     * @param value A value from the range.
     */
    invertExtent(value: Range): [number, number];

    /**
     * Returns the scale’s current domain.
     */
    domain(): number[];
    /**
     * Sets the domain of the quantile scale to the specified set of discrete numeric values.
     * The array must not be empty, and must contain at least one numeric value; NaN, null and undefined values are ignored and not considered part of the sample population.
     *
     * If the elements in the given array are not numbers, they will be coerced to numbers. A copy of the input array is sorted and stored internally.
     *
     * @param domain Array of domain values.
     */
    domain(domain: Iterable<NumberValue | null | undefined>): this;

    /**
     * Returns the current range.
     */
    range(): Range[];
    /**
     * Sets the discrete values in the range. The array must not be empty.
     * The number of values in (the cardinality, or length, of) the range array determines the number of quantiles that are computed.
     *
     * For example, to compute quartiles, range must be an array of four elements such as [0, 1, 2, 3].
     *
     * @param range Array of range values.
     */
    range(range: Iterable<Range>): this;

    /**
     * Returns the quantile thresholds. If the range contains n discrete values, the returned array will contain n - 1 thresholds.
     * Values less than the first threshold are considered in the first quantile;
     * values greater than or equal to the first threshold but less than the second threshold are in the second quantile, and so on.
     * Internally, the thresholds array is used with bisect to find the output quantile associated with the given input value.
     */
    quantiles(): number[];

    /**
     * Returns an exact copy of this scale. Changes to this scale will not affect the returned scale, and vice versa.
     */
    copy(): this;

    /**
     * Returns the current unknown value, which defaults to undefined.
     */
    unknown(): UnknownReturnType<Unknown, undefined>;
    /**
     * Sets the output value of the scale for undefined (or NaN) input values and returns this scale.
     *
     * @param value The output value of the scale for undefined (or NaN) input values.
     */
    unknown<NewUnknown>(value: NewUnknown): ScaleQuantile<Range, NewUnknown>;
}

/**
 * Constructs a new quantile scale with the specified range.
 * The domain defaults to the empty array.
 * If range is not specified, it defaults to the empty array.
 * The quantile scale is invalid until both a domain and range are specified.
 *
 * The first generic corresponds to the data type of range elements.
 * The second generic corresponds to the data type of the unknown value.
 *
 * @param range Array of range values.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function scaleQuantile<Range = number, Unknown = never>(range?: Iterable<Range>): ScaleQuantile<Range, Unknown>;
/**
 * Constructs a new quantile scale with the specified domain and range.
 * The quantile scale is invalid until both a domain and range are specified.
 *
 * The first generic corresponds to the data type of range elements.
 * The second generic corresponds to the data type of the unknown value.
 *
 * @param domain Array of domain values.
 * @param range Array of range values.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function scaleQuantile<Range, Unknown = never>(
    domain: Iterable<NumberValue | null | undefined>,
    range: Iterable<Range>,
): ScaleQuantile<Range, Unknown>;

// -------------------------------------------------------------------------------
// Threshold Scale Factory
// -------------------------------------------------------------------------------

/**
 * Threshold scales are similar to quantize scales, except they allow you to map arbitrary subsets of the domain to discrete values in the range.
 * The input domain is still continuous, and divided into slices based on a set of threshold values.
 *
 * If the number of values in the scale’s range is N+1, the number of values in the scale’s domain must be N.
 * If there are fewer than N elements in the domain, the additional values in the range are ignored.
 * If there are more than N elements in the domain, the scale may return undefined for some inputs.
 *
 * The first generic corresponds to the data type of domain values.
 * The second generic corresponds to the data type of range values.
 * The third generic corresponds to the data type of the unknown value.
 */
export interface ScaleThreshold<Domain extends number | string | Date, Range, Unknown = never> {
    /**
     * Given a value in the input domain, returns the corresponding value in the output range.
     *
     * @param value A domain value.
     */
    (value: Domain): Range | Unknown;

    /**
     * Returns the extent of values in the domain [x0, x1] for the corresponding value in the range, representing the inverse mapping from range to domain.
     * This method is useful for interaction, say to determine the value in the domain that corresponds to the pixel location under the mouse.
     *
     * @param value A range value.
     */
    invertExtent(value: Range): [Domain | undefined, Domain | undefined];

    /**
     * Returns the scale’s current domain.
     */
    domain(): Domain[];
    /**
     * Sets the scale’s domain to the specified array of values. The values must be in sorted ascending order, or the behavior of the scale is undefined.
     * The values are typically numbers, but any naturally ordered values (such as strings) will work; a threshold scale can be used to encode any type that is ordered.
     * If the number of values in the scale’s range is N+1, the number of values in the scale’s domain must be N.
     * If there are fewer than N elements in the domain, the additional values in the range are ignored.
     * If there are more than N elements in the domain, the scale may return undefined for some inputs.
     *
     * @param domain Array of domain values.
     */
    domain(domain: Iterable<Domain>): this;

    /**
     * Returns the scale’s current range.
     */
    range(): Range[];
    /**
     * Sets the scale’s range to the specified array of values. If the number of values in the scale’s domain is N, the number of values in the scale’s range must be N+1.
     * If there are fewer than N+1 elements in the range, the scale may return undefined for some inputs.
     * If there are more than N+1 elements in the range, the additional values are ignored.
     *
     * @param range Array of range values.
     */
    range(range: Iterable<Range>): this;

    /**
     * Returns an exact copy of this scale. Changes to this scale will not affect the returned scale, and vice versa.
     */
    copy(): this;

    /**
     * Returns the current unknown value, which defaults to undefined.
     */
    unknown(): UnknownReturnType<Unknown, undefined>;
    /**
     * Sets the output value of the scale for undefined (or NaN) input values and returns this scale.
     *
     * @param value The output value of the scale for undefined (or NaN) input values.
     */
    unknown<NewUnknown>(value: NewUnknown): ScaleThreshold<Domain, Range, NewUnknown>;
}

/**
 * Constructs a new threshold scale with the specified range.
 * The domain defaults to [0.5].
 * If range is not specified, it defaults to [0, 1].
 * Thus, the default threshold scale is equivalent to the Math.round function for numbers; for example threshold(0.49) returns 0, and threshold(0.51) returns 1.
 *
 * The first generic corresponds to the data type of domain values.
 * The second generic corresponds to the data type of range values.
 * The third generic corresponds to the data type of the unknown value.
 *
 * @param range Array of range values.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function scaleThreshold<Domain extends number | string | Date = number, Range = number, Unknown = never>(
    range?: Iterable<Range>,
): ScaleThreshold<Domain, Range, Unknown>;
/**
 * Constructs a new threshold scale with the specified domain and range.
 * Thus, the default threshold scale is equivalent to the Math.round function for numbers; for example threshold(0.49) returns 0, and threshold(0.51) returns 1.
 *
 * The first generic corresponds to the data type of domain values.
 * The second generic corresponds to the data type of range values.
 * The third generic corresponds to the data type of the unknown value.
 *
 * @param domain Array of domain values.
 * @param range Array of range values.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function scaleThreshold<Domain extends number | string | Date, Range, Unknown = never>(
    domain: Iterable<Domain>,
    range: Iterable<Range>,
): ScaleThreshold<Domain, Range, Unknown>;

// -------------------------------------------------------------------------------
// Ordinal Scale Factory
// -------------------------------------------------------------------------------

/**
 * Unlike continuous scales, ordinal scales have a discrete domain and range. For example, an ordinal scale might map a set of named categories to a set of colors,
 * or determine the horizontal positions of columns in a column chart.
 *
 * The first element in the domain will be mapped to the first element in range, the second domain value to the second range value, and so on.
 * If there are fewer elements in the range than in the domain, the scale will reuse values from the start of the range.
 *
 * The first generic corresponds to the data type of domain values.
 * The second generic corresponds to the data type of range values.
 * The third generic corresponds to the data type of the unknown value.
 */
export interface ScaleOrdinal<Domain extends { toString(): string }, Range, Unknown = never> {
    /**
     * Given a value in the input domain, returns the corresponding value in the output range.
     * If the given value is not in the scale’s domain, returns the unknown; or, if the unknown value is implicit (the default),
     * then the value is implicitly added to the domain and the next-available value in the range is assigned to value,
     * such that this and subsequent invocations of the scale given the same input value return the same output value.
     *
     * @param x A value from the domain.
     */
    (x: Domain): Range | Unknown;

    /**
     * Returns the scale's current domain.
     */
    domain(): Domain[];
    /**
     * Sets the domain to the specified array of values.
     *
     * The first element in domain will be mapped to the first element in the range,
     * the second domain value to the second range value, and so on.
     *
     * Domain values are stored internally in an InternMap from primitive value to index; the resulting index is then used to retrieve a value from the range.
     * Thus, an ordinal scale’s values must be coercible to a primitive value, and the primitive domain value uniquely identifies the corresponding range value.
     *
     * Setting the domain on an ordinal scale is optional if the unknown value is implicit (the default).
     * In this case, the domain will be inferred implicitly from usage by assigning each unique value passed to the scale a new value from the range.
     * Note that an explicit domain is recommended to ensure deterministic behavior, as inferring the domain from usage will be dependent on ordering.
     *
     * @param domain Array of domain values.
     */
    domain(domain: Iterable<Domain>): this;

    /**
     * Returns the scale's current range.
     */
    range(): Range[];
    /**
     * Sets the range of the ordinal scale to the specified array of values.
     *
     * The first element in the domain will be mapped to the first element in range, the second domain value to the second range value, and so on.
     *
     * If there are fewer elements in the range than in the domain, the scale will reuse values from the start of the range.
     *
     * @param range Array of range values.
     */
    range(range: Iterable<Range>): this;

    /**
     * Returns the current unknown value, which defaults to "implicit".
     */
    unknown(): UnknownReturnType<Unknown, { name: "implicit" }>;
    /**
     * Sets the output value of the scale for unknown input values and returns this scale.
     * The implicit value enables implicit domain construction. scaleImplicit can be used as a convenience to set the implicit value.
     *
     * @param value Unknown value to be used or scaleImplicit to set implicit scale generation.
     */
    unknown<NewUnknown>(
        value: NewUnknown,
    ): NewUnknown extends { name: "implicit" } ? ScaleOrdinal<Domain, Range>
        : ScaleOrdinal<Domain, Range, NewUnknown>;

    /**
     * Returns an exact copy of this ordinal scale. Changes to this scale will not affect the returned scale, and vice versa.
     */
    copy(): this;
}

/**
 * Constructs a new ordinal scale with the specified range.
 * The domain defaults to the empty array.
 * If range is not specified, it defaults to the empty array; an ordinal scale always returns undefined until a non-empty range is defined.
 *
 * The generic corresponds to the data type of range elements.
 *
 * @param range An optional array of range values to initialize the scale with.
 */
export function scaleOrdinal<Range>(range?: Iterable<Range>): ScaleOrdinal<string, Range>;
/**
 * Constructs a new ordinal scale with the specified range.
 * The domain defaults to the empty array.
 * If range is not specified, it defaults to the empty array; an ordinal scale always returns undefined until a non-empty range is defined.
 *
 * The first generic corresponds to the data type of domain elements.
 * The second generic corresponds to the data type of range elements.
 * The third generic corresponds to the data type of the unknown value.
 *
 * @param range An optional array of range values to initialize the scale with.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function scaleOrdinal<Domain extends { toString(): string }, Range, Unknown = never>(
    range?: Iterable<Range>,
): ScaleOrdinal<Domain, Range, Unknown>;
/**
 * Constructs a new ordinal scale with the specified domain and range.
 *
 * The first generic corresponds to the data type of domain elements.
 * The second generic corresponds to the data type of range elements.
 * The third generic corresponds to the data type of the unknown value.
 *
 * @param domain Array of domain values.
 * @param range An optional array of range values to initialize the scale with.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function scaleOrdinal<Domain extends { toString(): string }, Range, Unknown = never>(
    domain: Iterable<Domain>,
    range: Iterable<Range>,
): ScaleOrdinal<Domain, Range, Unknown>;

/**
 * A special value for ordinal.unknown that enables implicit domain construction: unknown values are implicitly added to the domain.
 */
export const scaleImplicit: { name: "implicit" };

// -------------------------------------------------------------------------------
// Band Scale Factory
// -------------------------------------------------------------------------------

/**
 * Band scales are like ordinal scales except the output range is continuous and numeric.
 * Discrete output values are automatically computed by the scale by dividing the continuous range into uniform bands.
 * Band scales are typically used for bar charts with an ordinal or categorical dimension.
 * The unknown value of a band scale is effectively undefined: they do not allow implicit domain construction.
 *
 * The generic corresponds to the data type of domain elements.
 */
export interface ScaleBand<Domain extends { toString(): string }> {
    /**
     * Given a value in the input domain, returns the start of the corresponding band derived from the output range.
     * If the given value is not in the scale’s domain, returns undefined.
     *
     * @param x  A value from the domain.
     */
    (x: Domain): number | undefined;

    /**
     * Returns to scale's current domain
     */
    domain(): Domain[];
    /**
     * Sets the domain to the specified array of values. The first element in domain will be mapped to the first band, the second domain value to the second band, and so on.
     * Domain values are stored internally in an InternMap from primitive value to index; the resulting index is then used to determine the band.
     * Thus, a band scale’s values must be coercible to a primitive value, and the primitive domain value uniquely identifies the corresponding band.
     *
     * @param domain Array of domain values.
     */
    domain(domain: Iterable<Domain>): this;

    /**
     * Returns the scale’s current range, which defaults to [0, 1].
     */
    range(): [number, number];
    /**
     * Sets the scale’s range to the specified two-element array of numbers. If the elements in the given array are not numbers, they will be coerced to numbers.
     * The default range is [0, 1].
     *
     * @param range A two-element array of numeric values.
     */
    range(range: Iterable<NumberValue>): this;

    /**
     * Sets the scale’s range to the specified two-element array of numbers while also enabling rounding.
     * If the elements in the given array are not numbers, they will be coerced to numbers.
     *
     * Rounding is sometimes useful for avoiding antialiasing artifacts, though also consider the shape-rendering “crispEdges” styles.
     *
     * @param range A two-element array of numeric values.
     */
    rangeRound(range: Iterable<NumberValue>): this;

    /**
     * Returns the current rounding status for the scale: enabled (= true) or disabled (= false).
     */
    round(): boolean;
    /**
     * Enables or disables rounding accordingly. If rounding is enabled, the start and stop of each band will be integers.
     * Rounding is sometimes useful for avoiding antialiasing artifacts, though also consider the shape-rendering “crispEdges” styles.
     * Note that if the width of the domain is not a multiple of the cardinality of the range, there may be leftover unused space, even without padding!
     * Use band.align to specify how the leftover space is distributed.
     *
     * @param round Enable rounding (= true), disable rounding (= false).
     */
    round(round: boolean): this;

    /**
     * Returns the current inner padding which defaults to 0.
     */
    paddingInner(): number;
    /**
     * Sets the inner padding to the specified value which must be in the range [0, 1].
     * The inner padding determines the ratio of the range that is reserved for blank space between bands.
     *
     * The default setting is 0.
     *
     * @param padding Value for inner padding in [0, 1] interval.
     */
    paddingInner(padding: number): this;

    /**
     * Returns the current outer padding which defaults to 0.
     */
    paddingOuter(): number;
    /**
     * Sets the outer padding to the specified value which must be in the range [0, 1].
     * The outer padding determines the ratio of the range that is reserved for blank space before the first band and after the last band.
     *
     * The default setting is 0.
     *
     * @param padding Value for outer padding in [0, 1] interval.
     */
    paddingOuter(padding: number): this;

    /**
     * Returns the inner padding.
     */
    padding(): number;
    /**
     * A convenience method for setting the inner and outer padding to the same padding value.
     *
     * @param padding Value for inner and outer padding in [0, 1] interval.
     */
    padding(padding: number): this;

    /**
     * Returns the current alignment which defaults to 0.5.
     */
    align(): number;
    /**
     * Sets the alignment to the specified value which must be in the range [0, 1].
     *
     * The default is 0.5.
     *
     * The alignment determines how any leftover unused space in the range is distributed.
     * A value of 0.5 indicates that the outer patter should be equally distributed before the first band and after the last band;
     * i.e., the bands should be centered within the range. A value of 0 or 1 may be used to shift the bands to one side, say to position them adjacent to an axis.
     *
     * @param align Value for alignment setting in [0, 1] interval.
     */
    align(align: number): this;

    /**
     * Returns the width of each band.
     */
    bandwidth(): number;

    /**
     * Returns the distance between the starts of adjacent bands.
     */
    step(): number;

    /**
     * Returns an exact copy of this scale. Changes to this scale will not affect the returned scale, and vice versa.
     */
    copy(): this;
}

/**
 * Constructs a new band scale with the specified range, no padding, no rounding and center alignment.
 * The domain defaults to the empty domain.
 * If range is not specified, it defaults to the unit range [0, 1].
 *
 * The generic corresponds to the data type of domain elements.
 *
 * @param range A two-element array of numeric values.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function scaleBand<Domain extends { toString(): string } = string>(
    range?: Iterable<NumberValue>,
): ScaleBand<Domain>;
/**
 * Constructs a new band scale with the specified domain and range, no padding, no rounding and center alignment.
 *
 * The generic corresponds to the data type of domain elements.
 *
 * @param domain Array of domain values.
 * @param range A two-element array of numeric values.
 */
export function scaleBand<Domain extends { toString(): string }>(
    domain: Iterable<Domain>,
    range: Iterable<NumberValue>,
): ScaleBand<Domain>;

// -------------------------------------------------------------------------------
// Point Scale Factory
// -------------------------------------------------------------------------------

/**
 * Point scales are a variant of band scales with the bandwidth fixed to zero.
 * Point scales are typically used for scatterplots with an ordinal or categorical dimension.
 * The unknown value of a point scale is always undefined: they do not allow implicit domain construction.
 *
 * The generic corresponds to the data type of domain elements.
 */
export interface ScalePoint<Domain extends { toString(): string }> {
    /**
     * Given a value in the input domain, returns the corresponding point derived from the output range.
     * If the given value is not in the scale’s domain, returns undefined.
     *
     * @param x  A value from the domain.
     */
    (x: Domain): number | undefined;

    /**
     * Returns the scale's current domain.
     */
    domain(): Domain[];
    /**
     * Sets the domain to the specified array of values. The first element in domain will be mapped to the first point, the second domain value to the second point, and so on.
     * Domain values are stored internally in an InternMap from primitive value to index; the resulting index is then used to determine the point.
     * Thus, a point scale’s values must be coercible to a primitive value, and the primitive domain value uniquely identifies the corresponding point.
     *
     * @param domain Array of domain values.
     */
    domain(domain: Iterable<Domain>): this;

    /**
     * Returns the scale’s current range, which defaults to [0, 1].
     */
    range(): [number, number];
    /**
     * Sets the scale’s range to the specified two-element array of numbers.
     * If the elements in the given array are not numbers, they will be coerced to numbers.
     * The default range is [0, 1].
     *
     * @param range A two-element array of numeric values.
     */
    range(range: Iterable<NumberValue>): this;

    /**
     * Sets the scale’s range to the specified two-element array of numbers while also enabling rounding.
     * If the elements in the given array are not numbers, they will be coerced to numbers.
     *
     * Rounding is sometimes useful for avoiding antialiasing artifacts, though also consider the shape-rendering “crispEdges” styles.
     *
     * @param range A two-element array of numeric values.
     */
    rangeRound(range: Iterable<NumberValue>): this;

    /**
     * Returns the current rounding status for the scale: enabled (= true) or disabled (= false).
     */
    round(): boolean;
    /**
     * Enables or disables rounding accordingly. If rounding is enabled, the position of each point will be integers.
     * Rounding is sometimes useful for avoiding antialiasing artifacts, though also consider the shape-rendering “crispEdges” styles.
     * Note that if the width of the domain is not a multiple of the cardinality of the range, there may be leftover unused space, even without padding!
     * Use point.align to specify how the leftover space is distributed.
     *
     * @param round Enable rounding (= true), disable rounding (= false).
     */
    round(round: boolean): this;

    /**
     * Returns the current outer padding which defaults to 0.
     * The outer padding determines the ratio of the range that is reserved for blank space
     * before the first point and after the last point.
     */
    padding(): number;
    /**
     * Sets the outer padding to the specified value which must be in the range [0, 1].
     * The outer padding determines the ratio of the range that is reserved for blank space
     * before the first point and after the last point.
     *
     * The default is 0.
     *
     * @param padding Value for outer padding in [0, 1] interval.
     */
    padding(padding: number): this;

    /**
     * Returns the current alignment which defaults to 0.5.
     */
    align(): number;
    /**
     * Sets the alignment to the specified value which must be in the range [0, 1].
     *
     * The alignment determines how any leftover unused space in the range is distributed.
     * A value of 0.5 indicates that the leftover space should be equally distributed before the first point and after the last point;
     * i.e., the points should be centered within the range. A value of 0 or 1 may be used to shift the points to one side, say to position them adjacent to an axis.
     *
     * The default value is 0.5.
     *
     * @param align Value for alignment setting in [0, 1] interval.
     */
    align(align: number): this;

    /**
     * Return 0.
     */
    bandwidth(): number;

    /**
     * Returns the distance between the starts of adjacent points.
     */
    step(): number;

    /**
     * Returns an exact copy of this scale. Changes to this scale will not affect the returned scale, and vice versa.
     */
    copy(): this;
}

/**
 * Constructs a new point scale with the specified range, no padding, no rounding and center alignment.
 * The domain defaults to the empty domain.
 * If range is not specified, it defaults to the unit range [0, 1].
 *
 * The generic corresponds to the data type of domain elements.
 *
 * @param range A two-element array of numeric values.
 */
// eslint-disable-next-line @definitelytyped/no-unnecessary-generics
export function scalePoint<Domain extends { toString(): string } = string>(
    range?: Iterable<NumberValue>,
): ScalePoint<Domain>;
/**
 * Constructs a new point scale with the specified domain and range, no padding, no rounding and center alignment.
 * The domain defaults to the empty domain.
 *
 * The generic corresponds to the data type of domain elements.
 *
 * @param domain Array of domain values.
 * @param range A two-element array of numeric values.
 */
export function scalePoint<Domain extends { toString(): string }>(
    domain: Iterable<Domain>,
    range: Iterable<NumberValue>,
): ScalePoint<Domain>;

----------------------------------------
File: ./animations/node_modules/@types/d3-color/README.md
----------------------------------------
# Installation
> `npm install --save @types/d3-color`

# Summary
This package contains type definitions for d3-color (https://github.com/d3/d3-color/).

# Details
Files were exported from https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/d3-color.

### Additional Details
 * Last updated: Tue, 07 Nov 2023 15:11:36 GMT
 * Dependencies: none

# Credits
These definitions were written by [Tom Wanzek](https://github.com/tomwanzek), [Alex Ford](https://github.com/gustavderdrache), [Boris Yankov](https://github.com/borisyankov), [denisname](https://github.com/denisname), [Hugues Stefanski](https://github.com/ledragon), [Nathan Bierema](https://github.com/Methuselah96), and [Fil](https://github.com/Fil).

----------------------------------------
File: ./animations/node_modules/@types/d3-color/index.d.ts
----------------------------------------
// Last module patch version validated against: 3.1.0

// ---------------------------------------------------------------------------
// Shared Type Definitions and Interfaces
// ---------------------------------------------------------------------------

/**
 * Type allowing for color objects from a specified color space
 */
export type ColorSpaceObject = RGBColor | HSLColor | LabColor | HCLColor | CubehelixColor;

/**
 * A helper interface of methods common to color objects (including colors defined outside the d3-color standard module,
 * e.g. in d3-hsv). This interface
 */
export interface ColorCommonInstance {
    /**
     * Returns true if and only if the color is displayable on standard hardware.
     * For example, this returns false for an RGB color if any channel value is less than zero or greater than 255, or if the opacity is not in the range [0, 1].
     */
    displayable(): boolean;
    /**
     * Returns a string representing this color according to the CSS Object Model specification,
     * such as rgb(247, 234, 186) or rgba(247, 234, 186, 0.2).
     * If this color is not displayable, a suitable displayable color is returned instead.
     * For example, RGB channel values greater than 255 are clamped to 255.
     */
    toString(): string;
    /**
     * Returns a brighter copy of this color. If k is specified, it controls how much brighter the returned color should be.
     * If k is not specified, it defaults to 1. The behavior of this method is dependent on the implementing color space.
     *
     * @param k A color space dependent number to determine, how much brighter the returned color should be.
     */
    brighter(k?: number): this;
    /**
     * Returns a darker copy of this color. If k is specified, it controls how much darker the returned color should be.
     * If k is not specified, it defaults to 1. The behavior of this method is dependent on the implementing color space.
     *
     * @param k A color space dependent number to determine, how much darker the returned color should be.
     */
    darker(k?: number): this;
    /**
     * Returns the RGB equivalent of this color. For RGB colors, that’s "this".
     */
    rgb(): RGBColor;
    /**
     * Returns a hexadecimal string representing this color.
     * If this color is not displayable, a suitable displayable color is returned instead.
     * For example, RGB channel values greater than 255 are clamped to 255.
     */
    hex(): string;
}

/**
 * A Color object which serves as a base class for
 * colorspace-specific sub-class implementations.
 */
export interface Color {
    /**
     * Returns true if and only if the color is displayable on standard hardware.
     * For example, this returns false for an RGB color if any channel value is less than zero or greater than 255, or if the opacity is not in the range [0, 1].
     */
    displayable(): boolean; // Note: While this method is used in prototyping for colors of specific colorspaces, it should not be called directly, as 'this.rgb' would not be implemented on Color
    /**
     * Returns a string representing this color according to the CSS Object Model specification,
     * such as rgb(247, 234, 186) or rgba(247, 234, 186, 0.2).
     * If this color is not displayable, a suitable displayable color is returned instead.
     * For example, RGB channel values greater than 255 are clamped to 255.
     */
    toString(): string; // Note: While this method is used in prototyping for colors of specific colorspaces, it should not be called directly, as 'this.rgb' would not be implemented on Color
    /**
     * Returns a hexadecimal string representing this color in RGB space, such as #f7eaba.
     * If this color is not displayable, a suitable displayable color is returned instead.
     * For example, RGB channel values greater than 255 are clamped to 255.
     */
    formatHex(): string;
    /**
     * Returns a hexadecimal string representing this color in RGBA space, such as #f7eaba90.
     * If this color is not displayable, a suitable displayable color is returned instead.
     * For example, RGB channel values greater than 255 are clamped to 255.
     */
    formatHex8(): string;
    /**
     * Returns a string representing this color according to the CSS Color Module Level 3 specification, such as hsl(257, 50%, 80%) or hsla(257, 50%, 80%, 0.2).
     * If this color is not displayable, a suitable displayable color is returned instead by clamping S and L channel values to the interval [0, 100].
     */
    formatHsl(): string;
    /**
     * Returns a string representing this color according to the CSS Object Model specification, such as rgb(247, 234, 186) or rgba(247, 234, 186, 0.2).
     * If this color is not displayable, a suitable displayable color is returned instead by clamping RGB channel values to the interval [0, 255].
     */
    formatRgb(): string;
    /**
     * @deprecated Use color.formatHex.
     */
    hex(): string;
}

/**
 * A Color factory object, which may also be used with instanceof to test if an object is a color instance.
 */
export interface ColorFactory extends Function {
    /**
     * Parses the specified CSS Color Module Level 3 specifier string, returning an RGB or HSL color.
     * If the specifier was not valid, null is returned.
     *
     * @param cssColorSpecifier A CSS Color Module Level 3 specifier string.
     */
    (cssColorSpecifier: string): RGBColor | HSLColor | null;
    /**
     * Converts the provided color instance and returns an RGB or HSL color.
     *
     * @param color A permissible color space instance.
     */
    (color: ColorSpaceObject | ColorCommonInstance): RGBColor | HSLColor;
    /**
     * Prototype of the factory, which can be used for instanceof testing
     */
    readonly prototype: Color;
}

/**
 * An RGB color object.
 */
export interface RGBColor extends Color {
    /**
     * Value of red channel
     */
    r: number;
    /**
     * Value of green channel
     */
    g: number;
    /**
     * Value of blue channel
     */
    b: number;
    /**
     * Opacity value
     */
    opacity: number;
    /**
     * Returns a brighter copy of this color. If k is specified, it controls how much brighter the returned color should be.
     * If k is not specified, it defaults to 1.
     *
     * @param k A color space dependent number to determine, how much brighter the returned color should be.
     */
    brighter(k?: number): this;
    /**
     * Returns a darker copy of this color. If k is specified, it controls how much darker the returned color should be.
     * If k is not specified, it defaults to 1.
     *
     * @param k A color space dependent number to determine, how much darker the returned color should be.
     */
    darker(k?: number): this;
    /**
     * Returns the RGB equivalent of this color.
     */
    rgb(): this;
    /**
     * Returns a copy of this color.
     *
     * @param values If values is specified, any enumerable own properties of values are assigned to the new returned color.
     */
    copy(
        values?: {
            r?: number | undefined;
            g?: number | undefined;
            b?: number | undefined;
            opacity?: number | undefined;
        },
    ): this;
    /**
     * Returns a new RGB color where the r, g, and b channels are clamped to the range [0, 255] and rounded to the nearest integer value,
     * and the opacity is clamped to the range [0, 1].
     */
    clamp(): this;
}

/**
 * An RGB color factory object, which may also be used with instanceof to test if an object
 * is an RGB color instance.
 */
export interface RGBColorFactory extends Function {
    /**
     * Constructs a new RGB color based on the specified channel values and opacity.
     *
     * @param r Red channel value.
     * @param g Green channel value.
     * @param b Blue channel value.
     * @param opacity Optional opacity value, defaults to 1.
     */
    (r: number, g: number, b: number, opacity?: number): RGBColor;
    /**
     * Parses the specified CSS Color Module Level 3 specifier string, returning an RGB color.
     * If the specifier was not valid, null is returned.
     *
     * @param cssColorSpecifier A CSS Color Module Level 3 specifier string.
     */
    (cssColorSpecifier: string): RGBColor;
    /**
     * Converts the provided color instance and returns an RGB color. The color instance is converted to the RGB color space using color.rgb.
     * Note that unlike color.rgb this method always returns a new instance, even if color is already an RGB color.
     *
     * @param color A permissible color space instance.
     */
    // tslint:disable-next-line:unified-signatures
    (color: ColorSpaceObject | ColorCommonInstance): RGBColor;
    /**
     * Prototype of the factory, which can be used for instanceof testing
     */
    readonly prototype: RGBColor;
}

/**
 * An HSL color object.
 */
export interface HSLColor extends Color {
    /**
     * Hue channel value.
     */
    h: number;
    /**
     * Saturation channel value.
     */
    s: number;
    /**
     * Lightness channel value.
     */
    l: number;
    /**
     * Opacity value.
     */
    opacity: number;
    /**
     * Returns a brighter copy of this color. If k is specified, it controls how much brighter the returned color should be.
     * If k is not specified, it defaults to 1.
     *
     * @param k A color space dependent number to determine, how much brighter the returned color should be.
     */
    brighter(k?: number): this;
    /**
     * Returns a darker copy of this color. If k is specified, it controls how much darker the returned color should be.
     * If k is not specified, it defaults to 1.
     *
     * @param k A color space dependent number to determine, how much darker the returned color should be.
     */
    darker(k?: number): this;
    /**
     * Returns the RGB color equivalent of this color.
     */
    rgb(): RGBColor;
    /**
     * Returns a copy of this color.
     *
     * @param values If values is specified, any enumerable own properties of values are assigned to the new returned color.
     */
    copy(
        values?: {
            h?: number | undefined;
            s?: number | undefined;
            l?: number | undefined;
            opacity?: number | undefined;
        },
    ): this;
    /**
     * Returns a new HSL color where the h channel is clamped to the range [0, 360), and the s, l, and opacity channels are clamped to the range [0, 1].
     */
    clamp(): this;
}

/**
 * An HSL color factory object, which may also be used with instanceof to test if an object
 * is an HSL color instance.
 */
export interface HSLColorFactory extends Function {
    /**
     * Constructs a new HSL color based on the specified channel values and opacity.
     *
     * @param h Hue channel value.
     * @param s Saturation channel value.
     * @param l Lightness channel value.
     * @param opacity Optional opacity value, defaults to 1.
     */
    (h: number, s: number, l: number, opacity?: number): HSLColor;
    /**
     * Parses the specified CSS Color Module Level 3 specifier string, returning an HSL color.
     * If the specifier was not valid, null is returned.
     *
     * @param cssColorSpecifier A CSS Color Module Level 3 specifier string.
     */
    (cssColorSpecifier: string): HSLColor;
    /**
     * Converts the provided color instance and returns an HSL color.
     * The color instance is converted to the RGB color space using color.rgb and then converted to HSL.
     * (Colors already in the HSL color space skip the conversion to RGB.)
     *
     * @param color A permissible color space instance.
     */
    // tslint:disable-next-line:unified-signatures
    (color: ColorSpaceObject | ColorCommonInstance): HSLColor;
    /**
     * Prototype of the factory, which can be used for instanceof testing
     */
    readonly prototype: HSLColor;
}

/**
 * A Lab (CIELAB) color object.
 */
export interface LabColor extends Color {
    /**
     * Lightness typically in the range [0, 100].
     */
    l: number;
    /**
     * Position between red/magenta and green typically in [-160, +160].
     */
    a: number;
    /**
     * Position between yellow and blue typically in [-160, +160].
     */
    b: number;
    /**
     * Opacity value
     */
    opacity: number;
    /**
     * Returns a brighter copy of this color. If k is specified, it controls how much brighter the returned color should be.
     * If k is not specified, it defaults to 1.
     *
     * @param k A color space dependent number to determine, how much brighter the returned color should be.
     */
    brighter(k?: number): this;
    /**
     * Returns a darker copy of this color. If k is specified, it controls how much darker the returned color should be.
     * If k is not specified, it defaults to 1.
     *
     * @param k A color space dependent number to determine, how much darker the returned color should be.
     */
    darker(k?: number): this;
    /**
     * Returns the RGB color equivalent of this color.
     */
    rgb(): RGBColor;
    /**
     * Returns a copy of this color.
     *
     * @param values If values is specified, any enumerable own properties of values are assigned to the new returned color.
     */
    copy(
        values?: {
            l?: number | undefined;
            a?: number | undefined;
            b?: number | undefined;
            opacity?: number | undefined;
        },
    ): this;
}

/**
 * A Lab (CIELAB) color factory object, which may also be used with instanceof to test if an object
 * is a Lab color instance.
 */
export interface LabColorFactory extends Function {
    /**
     * Constructs a new CIELAB color based on the specified channel values and opacity.
     *
     * @param l Lightness typically in the range [0, 100].
     * @param a Position between red/magenta and green typically in [-160, +160].
     * @param b Position between yellow and blue typically in [-160, +160].
     * @param opacity Optional opacity value, defaults to 1.
     */
    (l: number, a: number, b: number, opacity?: number): LabColor;
    /**
     * Parses the specified CSS Color Module Level 3 specifier string, returning a Lab color.
     * If the specifier was not valid, null is returned.
     *
     * @param cssColorSpecifier A CSS Color Module Level 3 specifier string.
     */
    (cssColorSpecifier: string): LabColor;
    /**
     * Converts the provided color instance and returns a Lab color.
     * The color instance is converted to the RGB color space using color.rgb and then converted to CIELAB.
     * (Colors already in the Lab color space skip the conversion to RGB,
     * and colors in the HCL color space are converted directly to CIELAB.)
     *
     * @param color A permissible color space instance.
     */
    // tslint:disable-next-line:unified-signatures
    (color: ColorSpaceObject | ColorCommonInstance): LabColor;
    /**
     * Prototype of the factory, which can be used for instanceof testing
     */
    readonly prototype: LabColor;
}

/**
 * A gray color factory for Lab (CIELAB) colors.
 */
export type GrayColorFactory =
    /**
     * Constructs a new CIELAB color with the specified l value and a = b = 0.
     *
     * @param l Lightness typically in the range [0, 100].
     * @param opacity Optional opacity value, defaults to 1.
     */
    (l: number, opacity?: number) => LabColor;

/**
 * An HCL (CIELCH) color object.
 */
export interface HCLColor extends Color {
    /**
     * Hue channel value typically in [0, 360).
     */
    h: number;
    /**
     * Chroma channel value typically in [0, 230].
     */
    c: number;
    /**
     * Luminance channel value typically in the range [0, 100].
     */
    l: number;
    /**
     * Opacity value
     */
    opacity: number;
    /**
     * Returns a brighter copy of this color. If k is specified, it controls how much brighter the returned color should be.
     * If k is not specified, it defaults to 1.
     *
     * @param k A color space dependent number to determine, how much brighter the returned color should be.
     */
    brighter(k?: number): this;
    /**
     * Returns a darker copy of this color. If k is specified, it controls how much darker the returned color should be.
     * If k is not specified, it defaults to 1.
     *
     * @param k A color space dependent number to determine, how much darker the returned color should be.
     */
    darker(k?: number): this;
    /**
     * Returns the RGB color equivalent of this color.
     */
    rgb(): RGBColor;
    /**
     * Returns a copy of this color.
     *
     * @param values If values is specified, any enumerable own properties of values are assigned to the new returned color.
     */
    copy(
        values?: {
            h?: number | undefined;
            c?: number | undefined;
            l?: number | undefined;
            opacity?: number | undefined;
        },
    ): this;
}

/**
 * An HCL (CIELCH) color factory object, which may also be used with instanceof to test if an object
 * is an HCL color instance.
 */
export interface HCLColorFactory extends Function {
    /**
     * Constructs a new HCL color based on the specified channel values and opacity.
     *
     * @param h Hue channel value typically in [0, 360).
     * @param c Chroma channel value typically in [0, 230].
     * @param l Luminance channel value typically in the range [0, 100].
     * @param opacity Optional opacity value, defaults to 1.
     */
    (h: number, c: number, l: number, opacity?: number): HCLColor;
    /**
     * Parses the specified CSS Color Module Level 3 specifier string, returning an HCL color.
     * If the specifier was not valid, null is returned.
     *
     * @param cssColorSpecifier A CSS Color Module Level 3 specifier string.
     */
    (cssColorSpecifier: string): HCLColor;
    /**
     * Converts the provided color instance and returns an HCL color.
     * The color instance is converted to the RGB color space using color.rgb and then converted to HCL.
     * (Colors already in the HCL color space skip the conversion to RGB,
     * and colors in the Lab color space are converted directly to HCL.)
     *
     * @param color A permissible color space instance.
     */
    // tslint:disable-next-line:unified-signatures
    (color: ColorSpaceObject | ColorCommonInstance): HCLColor;
    /**
     * Prototype of the factory, which can be used for instanceof testing
     */
    readonly prototype: HCLColor;
}

/**
 * An LCH (CIELCH) color factory function to create an HCL color object.
 */
export interface LCHColorFactory {
    /**
     * Constructs a new HCL color based on the specified channel values and opacity.
     *
     * @param l Luminance channel value typically in the range [0, 100].
     * @param c Chroma channel value typically in [0, 230].
     * @param h Hue channel value typically in [0, 360).
     * @param opacity Optional opacity value, defaults to 1.
     */
    (l: number, c: number, h: number, opacity?: number): HCLColor;
    /**
     * Parses the specified CSS Color Module Level 3 specifier string, returning an HCL color.
     * If the specifier was not valid, null is returned.
     *
     * @param cssColorSpecifier A CSS color Module Level 3 specifier string.
     */
    (cssColorSpecifier: string): HCLColor;
    /**
     * Converts the provided color instance and returns an HCL color.
     * The color instance is converted to the RGB color space using color.rgb and then converted to HCL.
     * (Colors already in the HCL color space skip the conversion to RGB,
     * and colors in the Lab color space are converted directly to HCL.)
     *
     * @param color A permissible color space instance.
     */
    // tslint:disable-next-line:unified-signatures
    (color: ColorSpaceObject | ColorCommonInstance): HCLColor;
}

/**
 * Dave Green’s Cubehelix color object.
 */
export interface CubehelixColor extends Color {
    /**
     * Hue channel value.
     */
    h: number;
    /**
     * Saturation channel value.
     */
    s: number;
    /**
     * Lightness channel value.
     */
    l: number;
    /**
     * Opacity value.
     */
    opacity: number;
    /**
     * Returns a brighter copy of this color. If k is specified, it controls how much brighter the returned color should be.
     * If k is not specified, it defaults to 1.
     *
     * @param k A color space dependent number to determine, how much brighter the returned color should be.
     */
    brighter(k?: number): this;
    /**
     * Returns a darker copy of this color. If k is specified, it controls how much darker the returned color should be.
     * If k is not specified, it defaults to 1.
     *
     * @param k A color space dependent number to determine, how much darker the returned color should be.
     */
    darker(k?: number): this;
    /**
     * Returns the RGB color equivalent of this color.
     */
    rgb(): RGBColor;
    /**
     * Returns a copy of this color.
     *
     * @param values If values is specified, any enumerable own properties of values are assigned to the new returned color.
     */
    copy(
        values?: {
            h?: number | undefined;
            s?: number | undefined;
            l?: number | undefined;
            opacity?: number | undefined;
        },
    ): this;
}

/**
 * A color factory object for Dave Green's Cubehelix colors, which may also be used with instanceof to test if an object
 * is a Cubehelix color instance.
 */
export interface CubehelixColorFactory extends Function {
    /**
     * Constructs a new Cubehelix color based on the specified channel values and opacity.
     *
     * @param h Hue channel value.
     * @param s Saturation channel value.
     * @param l Lightness channel value.
     * @param opacity Optional opacity value, defaults to 1.
     */
    (h: number, s: number, l: number, opacity?: number): CubehelixColor;
    /**
     * Parses the specified CSS Color Module Level 3 specifier string, returning an Cubehelix color.
     * If the specifier was not valid, null is returned.
     *
     * @param cssColorSpecifier A CSS Color Module Level 3 specifier string.
     */
    (cssColorSpecifier: string): CubehelixColor;
    /**
     * Converts the provided color instance and returns a Cubehelix color.
     * The color instance is specified, it is converted to the RGB color space using color.rgb and then converted to Cubehelix.
     * (Colors already in the Cubehelix color space skip the conversion to RGB.)
     *
     * @param color A permissible color space instance.
     */
    // tslint:disable-next-line:unified-signatures
    (color: ColorSpaceObject | ColorCommonInstance): CubehelixColor;
    /**
     * Prototype of the factory, which can be used for instanceof testing
     */
    readonly prototype: CubehelixColor;
}

// --------------------------------------------------------------------------
// Color object factories
// --------------------------------------------------------------------------

/**
 * A Color factory object, which may also be used with instanceof to test if an object is a color instance.
 */
export const color: ColorFactory;

/**
 * An RGB color factory object, which may also be used with instanceof to test if an object
 * is an RGB color instance.
 */
export const rgb: RGBColorFactory;

/**
 * An HSL color factory object, which may also be used with instanceof to test if an object
 * is an HSL color instance.
 */
export const hsl: HSLColorFactory;

/**
 * A Lab (CIELAB) color factory object, which may also be used with instanceof to test if an object
 * is a Lab color instance.
 */
export const lab: LabColorFactory;

/**
 * A gray color factory for Lab (CIELAB) colors.
 */
export const gray: GrayColorFactory;

/**
 * An HCL (CIELCH) color factory object, which may also be used with instanceof to test if an object
 * is an HCL color instance.
 */
export const hcl: HCLColorFactory;

/**
 * An LCH (CIELCH) color factory function to create an HCL color object.
 */
export const lch: LCHColorFactory;

/**
 * A color factory object for Dave Green's Cubehelix colors, which may also be used with instanceof to test if an object
 * is a Cubehelix color instance.
 */
export const cubehelix: CubehelixColorFactory;

----------------------------------------
File: ./animations/node_modules/@types/babel__template/README.md
----------------------------------------
# Installation
> `npm install --save @types/babel__template`

# Summary
This package contains type definitions for @babel/template (https://github.com/babel/babel/tree/master/packages/babel-template).

# Details
Files were exported from https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/babel__template.

### Additional Details
 * Last updated: Mon, 06 Nov 2023 22:41:04 GMT
 * Dependencies: [@babel/parser](https://npmjs.com/package/@babel/parser), [@babel/types](https://npmjs.com/package/@babel/types)

# Credits
These definitions were written by [Troy Gerwien](https://github.com/yortus), [Marvin Hagemeister](https://github.com/marvinhagemeister), [Melvin Groenhoff](https://github.com/mgroenhoff), and [ExE Boss](https://github.com/ExE-Boss).

----------------------------------------
File: ./animations/node_modules/@types/babel__template/index.d.ts
----------------------------------------
import { ParserOptions } from "@babel/parser";
import { Expression, Program, Statement } from "@babel/types";

export interface TemplateBuilderOptions extends ParserOptions {
    /**
     * A set of placeholder names to automatically accept.
     * Items in this list do not need to match `placeholderPattern`.
     *
     * This option cannot be used when using `%%foo%%` style placeholders.
     */
    placeholderWhitelist?: Set<string> | null | undefined;

    /**
     * A pattern to search for when looking for `Identifier` and `StringLiteral`
     * nodes that should be considered as placeholders.
     *
     * `false` will disable placeholder searching placeholders, leaving only
     * the `placeholderWhitelist` value to find replacements.
     *
     * This option cannot be used when using `%%foo%%` style placeholders.
     *
     * @default /^[_$A-Z0-9]+$/
     */
    placeholderPattern?: RegExp | false | null | undefined;

    /**
     * Set this to `true` to preserve comments from the template string
     * into the resulting AST, or `false` to automatically discard comments.
     *
     * @default false
     */
    preserveComments?: boolean | null | undefined;

    /**
     * Set to `true` to use `%%foo%%` style placeholders, `false` to use legacy placeholders
     * described by `placeholderPattern` or `placeholderWhitelist`.
     *
     * When it is not set, it behaves as `true` if there are syntactic placeholders, otherwise as `false`.
     *
     * @since 7.4.0
     */
    syntacticPlaceholders?: boolean | null | undefined;
}

export interface TemplateBuilder<T> {
    /**
     * Build a new builder, merging the given options with the previous ones.
     */
    (opts: TemplateBuilderOptions): TemplateBuilder<T>;

    /**
     * Building from a string produces an AST builder function by default.
     */
    (code: string, opts?: TemplateBuilderOptions): (arg?: PublicReplacements) => T;

    /**
     * Building from a template literal produces an AST builder function by default.
     */
    (tpl: TemplateStringsArray, ...args: unknown[]): (arg?: PublicReplacements) => T;

    /**
     * Allow users to explicitly create templates that produce ASTs,
     * skipping the need for an intermediate function.
     *
     * Does not allow `%%foo%%` style placeholders.
     */
    ast: {
        (tpl: string, opts?: TemplateBuilderOptions): T;
        (tpl: TemplateStringsArray, ...args: unknown[]): T;
    };
}

export type PublicReplacements = { [index: string]: unknown } | unknown[];

export const smart: TemplateBuilder<Statement | Statement[]>;
export const statement: TemplateBuilder<Statement>;
export const statements: TemplateBuilder<Statement[]>;
export const expression: TemplateBuilder<Expression>;
export const program: TemplateBuilder<Program>;

type DefaultTemplateBuilder = typeof smart & {
    smart: typeof smart;
    statement: typeof statement;
    statements: typeof statements;
    expression: typeof expression;
    program: typeof program;
    ast: typeof smart.ast;
};

declare const templateBuilder: DefaultTemplateBuilder;

export default templateBuilder;

----------------------------------------
File: ./animations/node_modules/@types/d3-timer/README.md
----------------------------------------
# Installation
> `npm install --save @types/d3-timer`

# Summary
This package contains type definitions for d3-timer (https://github.com/d3/d3-timer/).

# Details
Files were exported from https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/d3-timer.

### Additional Details
 * Last updated: Tue, 07 Nov 2023 15:11:37 GMT
 * Dependencies: none

# Credits
These definitions were written by [Tom Wanzek](https://github.com/tomwanzek), [Alex Ford](https://github.com/gustavderdrache), [Boris Yankov](https://github.com/borisyankov), [denisname](https://github.com/denisname), and [Nathan Bierema](https://github.com/Methuselah96).

----------------------------------------
File: ./animations/node_modules/@types/d3-timer/index.d.ts
----------------------------------------
// Last module patch version validated against: 3.0.1

/**
 * Returns the current time as defined by performance.now if available, and Date.now if not.
 * The current time is updated at the start of a frame; it is thus consistent during the frame, and any timers scheduled during the same frame will be synchronized.
 * If this method is called outside of a frame, such as in response to a user event, the current time is calculated and then fixed until the next frame,
 * again ensuring consistent timing during event handling.
 */
export function now(): number;

export interface Timer {
    /**
     * Restart a timer with the specified callback and optional delay and time.
     * This is equivalent to stopping this timer and creating a new timer with the specified arguments,
     * although this timer retains the original invocation priority.
     *
     * @param callback A callback function to be invoked and passed in the apparent
     * elapsed time since the timer became active in milliseconds.
     * @param delay An optional numeric delay in milliseconds (default = 0) relative to time.
     * @param time An optional time in milliseconds relative to which the delay is calculated (default = now).
     */
    restart(callbackFn: (elapsed: number) => void, delay?: number, time?: number): void;

    /**
     * Stop the timer.
     */
    stop(): void;
}

/**
 * Schedules and returns a new timer, invoking the specified callback repeatedly until the timer is stopped.
 * The callback is passed the (apparent) elapsed time since the timer became active.
 *
 * @param callback A callback function to be invoked and passed in the apparent
 * elapsed time since the timer became active in milliseconds.
 * @param delay An optional numeric delay in milliseconds (default = 0) relative to time.
 * @param time An optional time in milliseconds relative to which the delay is calculated (default = now).
 */
export function timer(callback: (elapsed: number) => void, delay?: number, time?: number): Timer;

/**
 * Immediately invoke any eligible timer callbacks.
 */
export function timerFlush(): void;

/**
 * Schedules and returns a new timer, invoking the specified callback. The timer is stopped automatically
 * on its first callback. The callback is passed the (apparent) elapsed time since the timer became active.
 *
 * @param callback A callback function to be invoked and passed in the apparent
 * elapsed time since the timer became active in milliseconds.
 * @param delay An optional numeric delay in milliseconds (default = 0) relative to time.
 * @param time An optional time in milliseconds relative to which the delay is calculated (default = now).
 */
export function timeout(callback: (elapsed: number) => void, delay?: number, time?: number): Timer;

/**
 * Schedules and returns a new timer, invoking the specified callback repeatedly every 'delay' milliseconds
 * until the timer is stopped.
 * The callback is passed the (apparent) elapsed time since the timer became active.
 *
 * @param callback A callback function to be invoked and passed in the apparent
 * elapsed time since the timer became active in milliseconds.
 * @param delay An optional numeric delay in milliseconds between repeat invocations of the callback.
 * If not specified, the interval timer behaves like the regular timer.
 * @param time An optional time in milliseconds relative to which the initial delay is calculated (default = now).
 */
export function interval(callback: (elapsed: number) => void, delay?: number, time?: number): Timer;

----------------------------------------
File: ./animations/node_modules/@types/d3-interpolate/README.md
----------------------------------------
# Installation
> `npm install --save @types/d3-interpolate`

# Summary
This package contains type definitions for d3-interpolate (https://github.com/d3/d3-interpolate/).

# Details
Files were exported from https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/d3-interpolate.

### Additional Details
 * Last updated: Tue, 07 Nov 2023 15:11:37 GMT
 * Dependencies: [@types/d3-color](https://npmjs.com/package/@types/d3-color)

# Credits
These definitions were written by [Tom Wanzek](https://github.com/tomwanzek), [Alex Ford](https://github.com/gustavderdrache), [Boris Yankov](https://github.com/borisyankov), [denisname](https://github.com/denisname), and [Nathan Bierema](https://github.com/Methuselah96).

----------------------------------------
File: ./animations/node_modules/@types/d3-interpolate/index.d.ts
----------------------------------------
// Last module patch version validated against: 3.0.1

import { ColorCommonInstance } from "d3-color";

// ---------------------------------------------------------------------------
// Shared Type Definitions and Interfaces
// ---------------------------------------------------------------------------

export interface ZoomInterpolator extends Function {
    (t: number): ZoomView;
    /**
     * Recommended duration of zoom transition in milliseconds.
     */
    duration: number;

    /**
     * Given a zoom interpolator, returns a new zoom interpolator using the specified curvature rho.
     * When rho is close to 0, the interpolator is almost linear.
     * The default curvature is sqrt(2).
     * @param rho
     */
    rho(rho: number): this;
}

export interface ColorGammaInterpolationFactory extends Function {
    (a: string | ColorCommonInstance, b: string | ColorCommonInstance): (t: number) => string;
    /**
     * Returns a new interpolator factory of the same type using the specified *gamma*.
     * For example, to interpolate from purple to orange with a gamma of 2.2 in RGB space: `d3.interpolateRgb.gamma(2.2)("purple", "orange")`.
     * See Eric Brasseur’s article, [Gamma error in picture scaling](https://web.archive.org/web/20160112115812/http://www.4p8.com/eric.brasseur/gamma.html), for more on gamma correction.
     */
    gamma(g: number): ColorGammaInterpolationFactory;
}

/**
 * Type zoomView is used to represent a numeric array with three elements.
 * In order of appearance the elements correspond to:
 * - cx: *x*-coordinate of the center of the viewport
 * - cy: *y*-coordinate of the center of the viewport
 * - width: size of the viewport
 */
export type ZoomView = [number, number, number];

export type TypedArray =
    | Int8Array
    | Uint8Array
    | Int16Array
    | Uint16Array
    | Int32Array
    | Uint32Array
    | Uint8ClampedArray
    | Float32Array
    | Float64Array;

export type NumberArray = TypedArray | DataView;

// ---------------------------------------------------------------------------
// Interpolation Function Factories
// ---------------------------------------------------------------------------

/**
 * Returns an `null` constant interpolator.
 */
export function interpolate(a: any, b: null): (t: number) => null;
/**
 * Returns an boolean constant interpolator of value `b`.
 */
export function interpolate(a: any, b: boolean): (t: number) => boolean;
/**
 * Returns a `interpolateRgb` interpolator.
 */
export function interpolate(a: string | ColorCommonInstance, b: ColorCommonInstance): (t: number) => string;
/**
 * Returns a `interpolateDate` interpolator.
 */
export function interpolate(a: Date, b: Date): (t: number) => Date;
/**
 * Returns a `interpolateNumber` interpolator.
 */
export function interpolate(
    a: number | { valueOf(): number },
    b: number | { valueOf(): number },
): (t: number) => number;
/**
 * Returns a `interpolateNumberArray` interpolator.
 */
export function interpolate<T extends NumberArray>(a: NumberArray | number[], b: T): (t: number) => T;
/**
 * Returns a `interpolateString` interpolator. If `b` is a string coercible to a color use use `interpolateRgb`.
 */
export function interpolate(a: string | { toString(): string }, b: string): (t: number) => string;
/**
 * Returns a `interpolateArray` interpolator.
 */
export function interpolate<U extends any[]>(a: any[], b: U): (t: number) => U;
/**
 * Returns a `interpolateObject` interpolator.
 */
export function interpolate<U extends object>(a: any, b: U): (t: number) => U;

/**
 * Returns an interpolator between the two numbers `a` and `b`.
 * The returned interpolator is equivalent to: `(t) => a * (1 - t) + b * t`.
 */
export function interpolateNumber(
    a: number | { valueOf(): number },
    b: number | { valueOf(): number },
): (t: number) => number;

/**
 * Returns an interpolator between the two numbers `a` and `b`; the interpolator is similar to `interpolateNumber`,
 * except it will round the resulting value to the nearest integer.
 */
export function interpolateRound(
    a: number | { valueOf(): number },
    b: number | { valueOf(): number },
): (t: number) => number;

/**
 * Returns an interpolator between the two strings `a` and `b`.
 * The string interpolator finds numbers embedded in `a` and `b`, where each number is of the form understood by JavaScript.
 * A few examples of numbers that will be detected within a string: `-1`, `42`, `3.14159`, and `6.0221413e+23`.
 *
 * For each number embedded in `b`, the interpolator will attempt to find a corresponding number in `a`.
 * If a corresponding number is found, a numeric interpolator is created using `interpolateNumber`.
 * The remaining parts of the string `b` are used as a template.
 *
 * For example, if `a` is `"300 12px sans-serif"`, and `b` is `"500 36px Comic-Sans"`, two embedded numbers are found.
 * The remaining static parts (of string `b`) are a space between the two numbers (`" "`), and the suffix (`"px Comic-Sans"`).
 * The result of the interpolator at `t` = 0.5 is `"400 24px Comic-Sans"`.
 */
export function interpolateString(
    a: string | { toString(): string },
    b: string | { toString(): string },
): (t: number) => string;

/**
 * Returns an interpolator between the two dates `a` and `b`.
 *
 * Note: *no defensive copy* of the returned date is created; the same Date instance is returned for every evaluation of the interpolator.
 * No copy is made for performance reasons; interpolators are often part of the inner loop of animated transitions.
 */
export function interpolateDate(a: Date, b: Date): (t: number) => Date;

export type ArrayInterpolator<A extends any[]> = (t: number) => A;

/**
 * Returns an interpolator between the two arrays `a` and `b`. Internally, an array template is created that is the same length in `b`.
 * For each element in `b`, if there exists a corresponding element in `a`, a generic interpolator is created for the two elements using `interpolate`.
 * If there is no such element, the static value from `b` is used in the template.
 * Then, for the given parameter `t`, the template’s embedded interpolators are evaluated. The updated array template is then returned.
 *
 * For example, if `a` is the array `[0, 1]` and `b` is the array `[1, 10, 100]`, then the result of the interpolator for `t = 0.5` is the array `[0.5, 5.5, 100]`.
 *
 * Note: *no defensive copy* of the template array is created; modifications of the returned array may adversely affect subsequent evaluation of the interpolator.
 * No copy is made for performance reasons; interpolators are often part of the inner loop of animated transitions.
 */
export function interpolateArray<A extends any[]>(a: any[], b: A): ArrayInterpolator<A>;
/**
 * interpolateNumberArray is called
 */
export function interpolateArray<T extends NumberArray>(a: NumberArray | number[], b: T): (t: number) => T;

/**
 * Returns an interpolator between the two arrays of numbers a and b.
 * Internally, an array template is created that is the same type and length as b.
 * For each element in b, if there exists a corresponding element in a, the values are directly interpolated in the array template.
 * If there is no such element, the static value from b is copied.
 * The updated array template is then returned.
 *
 * Note: For performance reasons, no defensive copy is made of the template array and the arguments a and b; modifications of these arrays may affect subsequent evaluation of the interpolator.
 */
export function interpolateNumberArray<T extends NumberArray | number[]>(
    a: NumberArray | number[],
    b: T,
): (t: number) => T;

/**
 * Returns an interpolator between the two objects `a` and `b`. Internally, an object template is created that has the same properties as `b`.
 * For each property in `b`, if there exists a corresponding property in `a`, a generic interpolator is created for the two elements using `interpolate`.
 * If there is no such property, the static value from `b` is used in the template.
 * Then, for the given parameter `t`, the template's embedded interpolators are evaluated and the updated object template is then returned.
 *
 * For example, if `a` is the object `{x: 0, y: 1}` and `b` is the object `{x: 1, y: 10, z: 100}`, the result of the interpolator for `t = 0.5` is the object `{x: 0.5, y: 5.5, z: 100}`.
 *
 * Note: *no defensive copy* of the template object is created; modifications of the returned object may adversely affect subsequent evaluation of the interpolator.
 * No copy is made for performance reasons; interpolators are often part of the inner loop of animated transitions.
 */
export function interpolateObject<U extends object>(a: any, b: U): (t: number) => U;

/**
 * Returns an interpolator between the two 2D CSS transforms represented by `a` and `b`.
 * Each transform is decomposed to a standard representation of translate, rotate, *x*-skew and scale; these component transformations are then interpolated.
 * This behavior is standardized by CSS: see [matrix decomposition for animation](http://www.w3.org/TR/css3-2d-transforms/#matrix-decomposition).
 */
export function interpolateTransformCss(a: string, b: string): (t: number) => string;

/**
 * Returns an interpolator between the two 2D SVG transforms represented by `a` and `b`.
 * Each transform is decomposed to a standard representation of translate, rotate, *x*-skew and scale; these component transformations are then interpolated.
 * This behavior is standardized by CSS: see [matrix decomposition for animation](http://www.w3.org/TR/css3-2d-transforms/#matrix-decomposition).
 */
export function interpolateTransformSvg(a: string, b: string): (t: number) => string;

/**
 * Returns an interpolator between the two views `a` and `b` of a two-dimensional plane,
 * based on [“Smooth and efficient zooming and panning”](http://www.win.tue.nl/~vanwijk/zoompan.pdf).
 * Each view is defined as an array of three numbers: *cx*, *cy* and *width*.
 * The first two coordinates *cx*, *cy* represent the center of the viewport; the last coordinate *width* represents the size of the viewport.
 *
 * The returned interpolator exposes a *duration* property which encodes the recommended transition duration in milliseconds.
 * This duration is based on the path length of the curved trajectory through *x,y* space.
 * If you want to a slower or faster transition, multiply this by an arbitrary scale factor (*V* as described in the original paper).
 */
export function interpolateZoom(a: ZoomView, b: ZoomView): ZoomInterpolator;

/**
 * Returns a discrete interpolator for the given array of values. The returned interpolator maps `t` in `[0, 1 / n)` to values[0],
 * `t` in `[1 / n, 2 / n)` to `values[1]`, and so on, where `n = values.length`. In effect, this is a lightweight quantize scale with a fixed domain of [0, 1].
 */
export function interpolateDiscrete<T>(values: T[]): (t: number) => T;

// Sampling ------------------------------------------------------------------

/**
 * Returns `n` uniformly-spaced samples from the specified `interpolator`, where `n` is an integer greater than one.
 * The first sample is always at `t = 0`, and the last sample is always at `t = 1`.
 * This can be useful in generating a fixed number of samples from a given interpolator,
 * such as to derive the range of a [quantize scale](https://github.com/d3/d3-scale#quantize-scales) from a [continuous interpolator](https://github.com/d3/d3-scale#interpolateWarm).
 *
 * Caution: this method will not work with interpolators that do not return defensive copies of their output,
 * such as `d3.interpolateArray`, `d3.interpolateDate` and `d3.interpolateObject`. For those interpolators, you must wrap the interpolator and create a copy for each returned value.
 */
export function quantize<T>(interpolator: (t: number) => T, n: number): T[];

// Color Spaces

/**
 * Returns an RGB color space interpolator between the two colors `a` and `b` with a configurable gamma. If the gamma is not specified, it defaults to 1.0.
 * The colors `a` and `b` need not be in RGB; they will be converted to RGB using [`d3.rgb`](https://github.com/d3/d3-color#rgb). The return value of the interpolator is an RGB string.
 */
export const interpolateRgb: ColorGammaInterpolationFactory;

/**
 * Returns a uniform nonrational B-spline interpolator through the specified array of *colors*, which are converted to RGB color space.
 * Implicit control points are generated such that the interpolator returns `colors[0]` at `t = 0` and `colors[colors.length - 1]` at `t = 1`.
 * Opacity interpolation is not currently supported. See also `d3.interpolateBasis`, and see [d3-scale-chromatic](https://github.com/d3/d3-scale-chromatic) for examples.
 */
export function interpolateRgbBasis(colors: Array<string | ColorCommonInstance>): (t: number) => string;

/**
 * Returns a uniform nonrational B-spline interpolator through the specified array of colors, which are converted to RGB color space.
 * The control points are implicitly repeated such that the resulting spline has cyclical C² continuity when repeated around `t` in [0,1];
 * this is useful, for example, to create cyclical color scales. Opacity interpolation is not currently supported.
 * See also `d3.interpolateBasisClosed, and see [d3-scale-chromatic](https://github.com/d3/d3-scale-chromatic) for examples.
 */
export function interpolateRgbBasisClosed(colors: Array<string | ColorCommonInstance>): (t: number) => string;

/**
 * Returns an HSL color space interpolator between the two colors *a* and *b*. The colors *a* and *b* need not be in HSL;
 * they will be converted to HSL using `d3.hsl`. If either color’s hue or saturation is NaN, the opposing color’s channel value is used.
 * The shortest path between hues is used. The return value of the interpolator is an RGB string.
 */
export function interpolateHsl(a: string | ColorCommonInstance, b: string | ColorCommonInstance): (t: number) => string;

/**
 * Like `interpolateHsl`, but does not use the shortest path between hues.
 */
export function interpolateHslLong(
    a: string | ColorCommonInstance,
    b: string | ColorCommonInstance,
): (t: number) => string;

/**
 * Returns a Lab color space interpolator between the two colors *a* and *b*. The colors *a* and *b* need not be in Lab;
 * they will be converted to Lab using `d3.lab`. The return value of the interpolator is an RGB string.
 */
export function interpolateLab(a: string | ColorCommonInstance, b: string | ColorCommonInstance): (t: number) => string;

/**
 * Returns an HCL color space interpolator between the two colors `a` and `b`. The colors `a` and `b` need not be in HCL;
 * they will be converted to HCL using `d3.hcl`. If either color’s hue or chroma is NaN, the opposing color’s channel value is used.
 * The shortest path between hues is used. The return value of the interpolator is an RGB string.
 */
export function interpolateHcl(a: string | ColorCommonInstance, b: string | ColorCommonInstance): (t: number) => string;

/**
 * Like `interpolateHcl`, but does not use the shortest path between hues.
 */
export function interpolateHclLong(
    a: string | ColorCommonInstance,
    b: string | ColorCommonInstance,
): (t: number) => string;

/**
 * Returns a Cubehelix color space interpolator between the two colors `a` and `b` using a configurable `gamma`.
 * If the gamma is not specified, it defaults to 1.0. The colors `a` and `b` need not be in Cubehelix;
 * they will be converted to Cubehelix using [`d3.cubehelix`](https://github.com/d3/d3-color#cubehelix).
 * If either color’s hue or saturation is NaN, the opposing color’s channel value is used. The shortest path between hues is used. The return value of the interpolator is an RGB string.
 */
export const interpolateCubehelix: ColorGammaInterpolationFactory;

/**
 * Like `interpolateCubehelix`, but does not use the shortest path between hues.
 */
export const interpolateCubehelixLong: ColorGammaInterpolationFactory;

/**
 * Returns an interpolator between the two hue angles `a` and `b`. If either hue is NaN, the opposing value is used.
 * The shortest path between hues is used. The return value of the interpolator is a number in `[0, 360)`.
 */
export function interpolateHue(a: number, b: number): (t: number) => number;

// Splines -------------------------------------------------------------------

/**
 * Returns a uniform nonrational B-spline interpolator through the specified array of `values`, which must be numbers.
 * Implicit control points are generated such that the interpolator returns `values[0]` at `t` = 0 and `values[values.length - 1]` at `t` = 1.
 * See also [`d3.curveBasis`](https://github.com/d3/d3-shape#curveBasis).
 */
export function interpolateBasis(splineNodes: number[]): (t: number) => number;

/**
 * Returns a uniform nonrational B-spline interpolator through the specified array of `values`, which must be numbers.
 * The control points are implicitly repeated such that the resulting one-dimensional spline has cyclical C² continuity when repeated around `t` in [0,1].
 * See also [`d3.curveBasisClosed`](https://github.com/d3/d3-shape#curveBasisClosed).
 */
export function interpolateBasisClosed(splineNodes: number[]): (t: number) => number;

// Piecewise -----------------------------------------------------------------

/**
 * Returns a piecewise zoom interpolator, composing zoom interpolators for each adjacent pair of zoom view.
 * The returned interpolator maps `t` in `[0, 1 / (n - 1)]` to `interpolate(values[0], values[1])`, `t` in `[1 / (n - 1), 2 / (n - 1)]` to `interpolate(values[1], values[2])`,
 * and so on, where `n = values.length`. In effect, this is a lightweight linear scale.
 * For example, to blend through three different zoom views: `d3.piecewise(d3.interpolateZoom, [[0, 0, 1], [0, 0, 10], [0, 0, 15]])`.
 *
 * interpolate defaults to d3.interpolate.
 */
export function piecewise(values: ZoomView[]): ZoomInterpolator;
/**
 * Returns a piecewise zoom interpolator, composing zoom interpolators for each adjacent pair of zoom view.
 * The returned interpolator maps `t` in `[0, 1 / (n - 1)]` to `interpolate(values[0], values[1])`, `t` in `[1 / (n - 1), 2 / (n - 1)]` to `interpolate(values[1], values[2])`,
 * and so on, where `n = values.length`. In effect, this is a lightweight linear scale.
 * For example, to blend through three different zoom views: `d3.piecewise(d3.interpolateZoom, [[0, 0, 1], [0, 0, 10], [0, 0, 15]])`.
 */
export function piecewise(
    interpolate: (a: ZoomView, b: ZoomView) => ZoomInterpolator,
    values: ZoomView[],
): ZoomInterpolator;

/**
 * Returns a piecewise array interpolator, composing array interpolators for each adjacent pair of arrays.
 * The returned interpolator maps `t` in `[0, 1 / (n - 1)]` to `interpolate(values[0], values[1])`, `t` in `[1 / (n - 1), 2 / (n - 1)]` to `interpolate(values[1], values[2])`,
 * and so on, where `n = values.length`. In effect, this is a lightweight linear scale.
 * For example, to blend through three different arrays: `d3.piecewise(d3.interpolateArray, [[0, 0, 1], [0, 0, 10], [0, 0, 15]])`.
 *
 * interpolate defaults to d3.interpolate.
 */
export function piecewise<A extends any[]>(values: A[]): ArrayInterpolator<A>;
/**
 * Returns a piecewise array interpolator, composing array interpolators for each adjacent pair of arrays.
 * The returned interpolator maps `t` in `[0, 1 / (n - 1)]` to `interpolate(values[0], values[1])`, `t` in `[1 / (n - 1), 2 / (n - 1)]` to `interpolate(values[1], values[2])`,
 * and so on, where `n = values.length`. In effect, this is a lightweight linear scale.
 * For example, to blend through three different arrays: `d3.piecewise(d3.interpolateArray, [[0, 0, 1], [0, 0, 10], [0, 0, 15]])`.
 */
export function piecewise<A extends any[]>(
    interpolate: (a: any[], b: A) => ArrayInterpolator<A>,
    values: A[],
): ArrayInterpolator<A>;

/**
 * Returns a piecewise interpolator, composing interpolators for each adjacent pair of values.
 * The returned interpolator maps `t` in `[0, 1 / (n - 1)]` to `interpolate(values[0], values[1])`, `t` in `[1 / (n - 1), 2 / (n - 1)]` to `interpolate(values[1], values[2])`,
 * and so on, where `n = values.length`. In effect, this is a lightweight linear scale.
 * For example, to blend through red, green and blue: `d3.piecewise(d3.interpolateRgb.gamma(2.2), ["red", "green", "blue"])`.
 *
 * interpolate defaults to d3.interpolate.
 */
export function piecewise(values: unknown[]): (t: number) => any;
/**
 * Returns a piecewise interpolator, composing interpolators for each adjacent pair of values.
 * The returned interpolator maps `t` in `[0, 1 / (n - 1)]` to `interpolate(values[0], values[1])`, `t` in `[1 / (n - 1), 2 / (n - 1)]` to `interpolate(values[1], values[2])`,
 * and so on, where `n = values.length`. In effect, this is a lightweight linear scale.
 * For example, to blend through red, green and blue: `d3.piecewise(d3.interpolateRgb.gamma(2.2), ["red", "green", "blue"])`.
 */
export function piecewise<TData>(interpolate: (a: TData, b: TData) => unknown, values: TData[]): (t: number) => any;

----------------------------------------
File: ./animations/node_modules/@types/d3-time/README.md
----------------------------------------
# Installation
> `npm install --save @types/d3-time`

# Summary
This package contains type definitions for d3-time (https://github.com/d3/d3-time/).

# Details
Files were exported from https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/d3-time.

### Additional Details
 * Last updated: Mon, 25 Nov 2024 10:02:27 GMT
 * Dependencies: none

# Credits
These definitions were written by [Tom Wanzek](https://github.com/tomwanzek), [Alex Ford](https://github.com/gustavderdrache), [Boris Yankov](https://github.com/borisyankov), [denisname](https://github.com/denisname), and [Nathan Bierema](https://github.com/Methuselah96).

----------------------------------------
File: ./animations/node_modules/@types/d3-time/index.d.ts
----------------------------------------
// Last module patch version validated against: 3.0.0

// ---------------------------------------------------------------
// Interfaces
// ---------------------------------------------------------------

/**
 * A D3 Time Interval
 */
export interface TimeInterval {
    /**
     * Returns a new date representing the latest interval boundary date before or equal to date.
     * Equivalent to interval.floor, except it date is not specified, it defaults to the current time.
     * For example, d3.timeYear(date) and d3.timeYear.floor(date) are equivalent.
     *
     * For example, timeDay(date) typically returns 12:00 AM local time on the given date.
     *
     * This function is idempotent: if the specified date is already floored to the current interval,
     * a new date with an identical time is returned.
     * Furthermore, the returned date is the minimum expressible value of the associated interval,
     * such that interval.floor(interval.floor(date) - 1) returns the preceding interval boundary date.
     *
     * Note that the == and === operators do not compare by value with Date objects,
     * and thus you cannot use them to tell whether the specified date has already been floored.
     * Instead, coerce to a number and then compare.
     *
     * This is more reliable than testing whether the time is 12:00 AM, as in some time zones midnight may not exist due to daylight saving.
     *
     * @param date A date object.
     */
    (date?: Date): Date;

    /**
     * Returns a new date representing the latest interval boundary date before or equal to date.
     *
     * For example, timeDay.floor(date) typically returns 12:00 AM local time on the given date.
     *
     * This method is idempotent: if the specified date is already floored to the current interval,
     * a new date with an identical time is returned.
     * Furthermore, the returned date is the minimum expressible value of the associated interval,
     * such that interval.floor(interval.floor(date) - 1) returns the preceding interval boundary date.
     *
     * Note that the == and === operators do not compare by value with Date objects,
     * and thus you cannot use them to tell whether the specified date has already been floored.
     * Instead, coerce to a number and then compare.
     *
     * This is more reliable than testing whether the time is 12:00 AM, as in some time zones midnight may not exist due to daylight saving.
     *
     * @param date A date object.
     */
    floor(date: Date): Date;

    /**
     * Returns a new date representing the closest interval boundary date to date.
     *
     * For example, timeDay.round(date) typically returns 12:00 AM local time on the given date if it is on or before noon,
     * and 12:00 AM of the following day if it is after noon.
     *
     * This method is idempotent: if the specified date is already rounded to the current interval, a new date with an identical time is returned.
     *
     * @param date A date object.
     */
    round(date: Date): Date;

    /**
     * Returns a new date representing the earliest interval boundary date after or equal to date.
     *
     * For example, timeDay.ceil(date) typically returns 12:00 AM local time on the date following the given date.
     *
     * This method is idempotent: if the specified date is already ceilinged to the current interval,
     * a new date with an identical time is returned. Furthermore,
     * the returned date is the maximum expressible value of the associated interval,
     * such that interval.ceil(interval.ceil(date) + 1) returns the following interval boundary date.
     *
     * @param date A date object.
     */
    ceil(date: Date): Date;

    /**
     * Returns a new date equal to date plus step intervals.
     *
     * If step is not specified it defaults to 1.
     *
     * This method does not round the specified date to the interval. For example, if date is today at 5:34 PM,
     * then timeDay.offset(date, 1) returns 5:34 PM tomorrow (even if daylight saving changes!).
     *
     * @param date A date object.
     * @param step An optional number of steps to apply when calculating the offset date.
     * If step is negative, then the returned date will be before the specified date;
     * if step is zero, then a copy of the specified date is returned; if step is not an integer, it is floored.
     */
    offset(date: Date, step?: number): Date;

    /**
     * Returns an array of dates representing every interval boundary after or equal to start (inclusive) and before stop (exclusive).
     *
     * If step is specified, then every step-th boundary will be returned; for example,
     * for the timeDay interval a step of 2 will return every other day.
     * If step is not an integer, it is floored.
     *
     * The first date in the returned array is the earliest boundary after or equal to start;
     * subsequent dates are offset by step intervals and floored.
     * Thus, two overlapping ranges may be inconsistent.
     *
     * To make ranges consistent when a step is specified, use CountableInterval.every instead.
     *
     * @param start A start date object for the range.
     * @param stop A stop date object for the range.
     * @param step An optional number of steps to apply when calculating the dates in the range.
     */
    range(start: Date, stop: Date, step?: number): Date[];

    /**
     * Returns a new interval that is a filtered subset of this interval using the specified test function.
     *
     * @param test A test function which is passed a date and should return true if and only if
     * the specified date should be considered part of the interval.
     */
    filter(test: (date: Date) => boolean): TimeInterval;
}

/**
 * A D3 Countable Time Interval
 */
export interface CountableTimeInterval extends TimeInterval {
    /**
     * Returns the number of interval boundaries after start (exclusive) and before or equal to end (inclusive).
     *
     * Note that this behavior is slightly different than interval.range,
     * because its purpose is to return the zero-based number of the specified end date relative to the specified start date.
     *
     * @param start A start date object.
     * @param end An end date object.
     */
    count(start: Date, end: Date): number;
    /**
     * Returns a filtered view of this interval representing every stepth date.
     *
     * The meaning of step is dependent on this interval’s parent interval as defined by the field function.
     *
     * For example, timeMinute.every(15) returns an interval representing every fifteen minutes,
     * starting on the hour: :00, :15, :30, :45, etc. Note that for some intervals,
     * the resulting dates may not be uniformly-spaced;
     * timeDay’s parent interval is timeMonth, and thus the interval number resets at the start of each month.
     *
     * If step is not valid, returns null. If step is one, returns this interval.
     *
     * This method can be used in conjunction with interval.range to ensure that two overlapping ranges are consistent.
     *
     * The returned filtered interval does not support interval.count. See also interval.filter.
     *
     * @param step Number of steps.
     */
    every(step: number): TimeInterval | null;
}

// ---------------------------------------------------------------
// Custom (Countable)Interval Factories
// ---------------------------------------------------------------

/**
 * Constructs a new custom interval given the specified floor and offset functions.
 *
 * The returned custom interval is not countable, i.e. does not expose the methods "count(..)" and "every(...)".
 *
 * @param floor A floor function which takes a single date as an argument and rounds it down to the nearest interval boundary.
 * @param offset An offset function which takes a date and an integer step as arguments and advances
 * the specified date by the specified number of boundaries; the step may be positive, negative or zero.
 */
export function timeInterval(
    floor: (date: Date) => void,
    offset: (date: Date, step: number) => void,
): TimeInterval;
/**
 * Constructs a new custom interval given the specified floor, offset and count functions.
 *
 * The returned custom interval is countable and exposes the methods "count(..)" and "every(...)".
 *
 * Note: due to an internal optimization, the specified count function must not invoke interval.count on other time intervals.
 *
 * @param floor A floor function which takes a single date as an argument and rounds it down to the nearest interval boundary.
 * @param offset An offset function which takes a date and an integer step as arguments and advances
 * the specified date by the specified number of boundaries; the step may be positive, negative or zero.
 * @param count A count function which takes a start date and an end date, already floored to the current interval,
 * and returns the number of boundaries between the start (exclusive) and end (inclusive).
 * Note: due to an internal optimization, the specified count function must not invoke interval.count on other time intervals.
 * @param field An optional field function which takes a date, already floored to the current interval,
 * and returns the field value of the specified date,
 * corresponding to the number of boundaries between this date (exclusive) and the latest previous parent boundary.
 * For example, for the timeDay interval, this returns the number of days since the start of the month.
 * If a field function is not specified, it defaults to counting the number of interval boundaries since
 * the UNIX epoch of January 1, 1970 UTC. The field function defines the behavior of interval.every.
 */
export function timeInterval(
    floor: (date: Date) => void,
    offset: (date: Date, step: number) => void,
    count: (start: Date, end: Date) => number,
    field?: (date: Date) => number,
): CountableTimeInterval;

// ---------------------------------------------------------------
// Built-In Factories and Date Array Creators
// ---------------------------------------------------------------

// local time ----------------------------------------------------------

/**
 * Milliseconds Interval in Local Time; the shortest available time unit.
 */
export const timeMillisecond: CountableTimeInterval;

/**
 * This is a convenience alias for timeMillisecond.range(...).
 *
 * @param start A start date object for the range.
 * @param stop A stop date object for the range.
 * @param step An optional number of steps to apply when calculating the dates in the range.
 */
export function timeMilliseconds(start: Date, stop: Date, step?: number): Date[];

/**
 * Seconds Interval in Local Time; seconds (e.g., 01:23:45.0000 AM); 1,000 milliseconds.
 */
export const timeSecond: CountableTimeInterval;

/**
 * This is a convenience alias for timeSecond.range(...).
 *
 * @param start A start date object for the range.
 * @param stop A stop date object for the range.
 * @param step An optional number of steps to apply when calculating the dates in the range.
 */
export function timeSeconds(start: Date, stop: Date, step?: number): Date[];

/**
 * Minutes Interval in Local Time; minutes (e.g., 01:02:00 AM); 60 seconds. Note that ECMAScript ignores leap seconds.
 */
export const timeMinute: CountableTimeInterval;

/**
 * This is a convenience alias for timeMinute.range(...).
 *
 * @param start A start date object for the range.
 * @param stop A stop date object for the range.
 * @param step An optional number of steps to apply when calculating the dates in the range.
 */
export function timeMinutes(start: Date, stop: Date, step?: number): Date[];

/**
 * Hours Interval in Local Time; Hours (e.g., 01:00 AM); 60 minutes.
 *
 * Note that advancing time by one hour in local time can return the same hour or skip an hour due to daylight saving.
 */
export const timeHour: CountableTimeInterval;

/**
 * This is a convenience alias for timeHour.range(...).
 *
 * @param start A start date object for the range.
 * @param stop A stop date object for the range.
 * @param step An optional number of steps to apply when calculating the dates in the range.
 */
export function timeHours(start: Date, stop: Date, step?: number): Date[];

/**
 * Days Interval in Local Time; days (e.g., February 7, 2012 at 12:00 AM); typically 24 hours.
 * Days in local time may range from 23 to 25 hours due to daylight saving.
 */
export const timeDay: CountableTimeInterval;

/**
 * This is a convenience alias for timeDay.range(...).
 *
 * @param start A start date object for the range.
 * @param stop A stop date object for the range.
 * @param step An optional number of steps to apply when calculating the dates in the range.
 */
export function timeDays(start: Date, stop: Date, step?: number): Date[];

/**
 * Week Interval in Local Time. Alias for sunday; 7 days and typically 168 hours.
 *
 * Weeks in local time may range from 167 to 169 hours due on daylight saving.
 */
export const timeWeek: CountableTimeInterval;

/**
 * This is a convenience alias for timeWeek.range(...).
 *
 * @param start A start date object for the range.
 * @param stop A stop date object for the range.
 * @param step An optional number of steps to apply when calculating the dates in the range.
 */
export function timeWeeks(start: Date, stop: Date, step?: number): Date[];

/**
 * Week Interval for Sunday-based weeks in Local Time (e.g., February 5, 2012 at 12:00 AM).
 * 7 days and typically 168 hours.
 *
 * Weeks in local time may range from 167 to 169 hours due on daylight saving.
 */
export const timeSunday: CountableTimeInterval;

/**
 * This is a convenience alias for timeSunday.range(...).
 *
 * @param start A start date object for the range.
 * @param stop A stop date object for the range.
 * @param step An optional number of steps to apply when calculating the dates in the range.
 */
export function timeSundays(start: Date, stop: Date, step?: number): Date[];

/**
 * Week Interval for Monday-based weeks in Local Time (e.g., February 6, 2012 at 12:00 AM).
 * 7 days and typically 168 hours.
 *
 * Weeks in local time may range from 167 to 169 hours due on daylight saving.
 */
export const timeMonday: CountableTimeInterval;

/**
 * This is a convenience alias for timeMonday.range(...).
 *
 * @param start A start date object for the range.
 * @param stop A stop date object for the range.
 * @param step An optional number of steps to apply when calculating the dates in the range.
 */
export function timeMondays(start: Date, stop: Date, step?: number): Date[];

/**
 * Week Interval for Tuesday-based weeks in Local Time (e.g., February 7, 2012 at 12:00 AM).
 * 7 days and typically 168 hours.
 *
 * Weeks in local time may range from 167 to 169 hours due on daylight saving.
 */
export const timeTuesday: CountableTimeInterval;

/**
 * This is a convenience alias for timeTuesday.range(...).
 *
 * @param start A start date object for the range.
 * @param stop A stop date object for the range.
 * @param step An optional number of steps to apply when calculating the dates in the range.
 */
export function timeTuesdays(start: Date, stop: Date, step?: number): Date[];

/**
 * Week Interval for Wednesday-based weeks in Local Time (e.g., February 8, 2012 at 12:00 AM).
 * 7 days and typically 168 hours.
 *
 * Weeks in local time may range from 167 to 169 hours due on daylight saving.
 */
export const timeWednesday: CountableTimeInterval;

/**
 * This is a convenience alias for timeWednesday.range(...).
 *
 * @param start A start date object for the range.
 * @param stop A stop date object for the range.
 * @param step An optional number of steps to apply when calculating the dates in the range.
 */
export function timeWednesdays(start: Date, stop: Date, step?: number): Date[];

/**
 * Week Interval for Thursday-based weeks in Local Time (e.g., February 9, 2012 at 12:00 AM).
 * 7 days and typically 168 hours.
 *
 * Weeks in local time may range from 167 to 169 hours due on daylight saving.
 */
export const timeThursday: CountableTimeInterval;

/**
 * This is a convenience alias for timeThursday.range(...).
 *
 * @param start A start date object for the range.
 * @param stop A stop date object for the range.
 * @param step An optional number of steps to apply when calculating the dates in the range.
 */
export function timeThursdays(start: Date, stop: Date, step?: number): Date[];

/**
 * Week Interval for Friday-based weeks in Local Time (e.g., February 10, 2012 at 12:00 AM).
 * 7 days and typically 168 hours.
 *
 * Weeks in local time may range from 167 to 169 hours due on daylight saving.
 */
export const timeFriday: CountableTimeInterval;

/**
 * This is a convenience alias for timeFriday.range(...).
 *
 * @param start A start date object for the range.
 * @param stop A stop date object for the range.
 * @param step An optional number of steps to apply when calculating the dates in the range.
 */
export function timeFridays(start: Date, stop: Date, step?: number): Date[];

/**
 * Week Interval for Saturday-based weeks in Local Time (e.g., February 11, 2012 at 12:00 AM).
 * 7 days and typically 168 hours.
 *
 * Weeks in local time may range from 167 to 169 hours due on daylight saving.
 */
export const timeSaturday: CountableTimeInterval;

/**
 * This is a convenience alias for timeSaturday.range(...).
 *
 * @param start A start date object for the range.
 * @param stop A stop date object for the range.
 * @param step An optional number of steps to apply when calculating the dates in the range.
 */
export function timeSaturdays(start: Date, stop: Date, step?: number): Date[];

/**
 * Month Interval in Local Time; months (e.g., February 1, 2012 at 12:00 AM); ranges from 28 to 31 days.
 */
export const timeMonth: CountableTimeInterval;

/**
 * This is a convenience alias for timeMonth.range(...).
 *
 * @param start A start date object for the range.
 * @param stop A stop date object for the range.
 * @param step An optional number of steps to apply when calculating the dates in the range.
 */
export function timeMonths(start: Date, stop: Date, step?: number): Date[];

/**
 * Year Interval in Local Time; years (e.g., January 1, 2012 at 12:00 AM); ranges from 365 to 366 days.
 */
export const timeYear: CountableTimeInterval;

/**
 * This is a convenience alias for timeYear.range(...).
 *
 * @param start A start date object for the range.
 * @param stop A stop date object for the range.
 * @param step An optional number of steps to apply when calculating the dates in the range.
 */
export function timeYears(start: Date, stop: Date, step?: number): Date[];

// utc Coordinated Universal Time ----------------------------------------------------------

/**
 * Milliseconds Interval in Coordinated Universal Time (UTC); the shortest available time unit.
 */
export const utcMillisecond: CountableTimeInterval;

/**
 * This is a convenience alias for utcMillisecond.range(...).
 *
 * @param start A start date object for the range.
 * @param stop A stop date object for the range.
 * @param step An optional number of steps to apply when calculating the dates in the range.
 */
export function utcMilliseconds(start: Date, stop: Date, step?: number): Date[];

/**
 * Seconds Interval in Coordinated Universal Time (UTC); seconds (e.g., 01:23:45.0000 AM); 1,000 milliseconds.
 */
export const utcSecond: CountableTimeInterval;

/**
 * This is a convenience alias for utcSecond.range(...).
 *
 * @param start A start date object for the range.
 * @param stop A stop date object for the range.
 * @param step An optional number of steps to apply when calculating the dates in the range.
 */
export function utcSeconds(start: Date, stop: Date, step?: number): Date[];

/**
 * Minutes Interval in Coordinated Universal Time (UTC); minutes (e.g., 01:02:00 AM); 60 seconds.
 * Note that ECMAScript ignores leap seconds.
 */
export const utcMinute: CountableTimeInterval;

/**
 * This is a convenience alias for utcMinute.range(...).
 *
 * @param start A start date object for the range.
 * @param stop A stop date object for the range.
 * @param step An optional number of steps to apply when calculating the dates in the range.
 */
export function utcMinutes(start: Date, stop: Date, step?: number): Date[];

/**
 * Hours Interval in Coordinated Universal Time (UTC); Hours (e.g., 01:00 AM); 60 minutes.
 */
export const utcHour: CountableTimeInterval;

/**
 * This is a convenience alias for utcHour.range(...).
 *
 * @param start A start date object for the range.
 * @param stop A stop date object for the range.
 * @param step An optional number of steps to apply when calculating the dates in the range.
 */
export function utcHours(start: Date, stop: Date, step?: number): Date[];

/**
 * Days Interval in Coordinated Universal Time (UTC); days (e.g., February 7, 2012 at 12:00 AM); 24 hours.
 */
export const utcDay: CountableTimeInterval;

/**
 * This is a convenience alias for utcDay.range(...).
 *
 * @param start A start date object for the range.
 * @param stop A stop date object for the range.
 * @param step An optional number of steps to apply when calculating the dates in the range.
 */
export function utcDays(start: Date, stop: Date, step?: number): Date[];

/**
 * Week Interval in Local Time. Alias for sunday; 7 days and 168 hours.
 */
export const utcWeek: CountableTimeInterval;

/**
 * This is a convenience alias for utcWeek.range(...).
 *
 * @param start A start date object for the range.
 * @param stop A stop date object for the range.
 * @param step An optional number of steps to apply when calculating the dates in the range.
 */
export function utcWeeks(start: Date, stop: Date, step?: number): Date[];

/**
 * Week Interval for Sunday-based weeks in Coordinated Universal Time (UTC) (e.g., February 5, 2012 at 12:00 AM).
 * 7 days and 168 hours.
 */
export const utcSunday: CountableTimeInterval;

/**
 * This is a convenience alias for utcSunday.range(...).
 *
 * @param start A start date object for the range.
 * @param stop A stop date object for the range.
 * @param step An optional number of steps to apply when calculating the dates in the range.
 */
export function utcSundays(start: Date, stop: Date, step?: number): Date[];

/**
 * Week Interval for Monday-based weeks in Coordinated Universal Time (UTC) (e.g., February 6, 2012 at 12:00 AM).
 * 7 days and 168 hours.
 */
export const utcMonday: CountableTimeInterval;

/**
 * This is a convenience alias for utcMonday.range(...).
 *
 * @param start A start date object for the range.
 * @param stop A stop date object for the range.
 * @param step An optional number of steps to apply when calculating the dates in the range.
 */
export function utcMondays(start: Date, stop: Date, step?: number): Date[];

/**
 * Week Interval for Tuesday-based weeks in Coordinated Universal Time (UTC) (e.g., February 7, 2012 at 12:00 AM).
 * 7 days and 168 hours.
 */
export const utcTuesday: CountableTimeInterval;

/**
 * This is a convenience alias for utcTuesday.range(...).
 *
 * @param start A start date object for the range.
 * @param stop A stop date object for the range.
 * @param step An optional number of steps to apply when calculating the dates in the range.
 */
export function utcTuesdays(start: Date, stop: Date, step?: number): Date[];

/**
 * Week Interval for Wednesday-based weeks in Coordinated Universal Time (UTC) (e.g., February 8, 2012 at 12:00 AM).
 * 7 days and 168 hours.
 */
export const utcWednesday: CountableTimeInterval;

/**
 * This is a convenience alias for utcWednesday.range(...).
 *
 * @param start A start date object for the range.
 * @param stop A stop date object for the range.
 * @param step An optional number of steps to apply when calculating the dates in the range.
 */
export function utcWednesdays(start: Date, stop: Date, step?: number): Date[];

/**
 * Week Interval for Thursday-based weeks in Coordinated Universal Time (UTC) (e.g., February 9, 2012 at 12:00 AM).
 * 7 days and 168 hours.
 */
export const utcThursday: CountableTimeInterval;

/**
 * This is a convenience alias for utcThursday.range(...).
 *
 * @param start A start date object for the range.
 * @param stop A stop date object for the range.
 * @param step An optional number of steps to apply when calculating the dates in the range.
 */
export function utcThursdays(start: Date, stop: Date, step?: number): Date[];

/**
 * Week Interval for Friday-based weeks in Coordinated Universal Time (UTC) (e.g., February 10, 2012 at 12:00 AM).
 * 7 days and 168 hours.
 */
export const utcFriday: CountableTimeInterval;

/**
 * This is a convenience alias for utcFriday.range(...).
 *
 * @param start A start date object for the range.
 * @param stop A stop date object for the range.
 * @param step An optional number of steps to apply when calculating the dates in the range.
 */
export function utcFridays(start: Date, stop: Date, step?: number): Date[];

/**
 * Week Interval for Saturday-based weeks in Coordinated Universal Time (UTC) (e.g., February 11, 2012 at 12:00 AM).
 * 7 days and 168 hours.
 */
export const utcSaturday: CountableTimeInterval;

/**
 * This is a convenience alias for utcSaturday.range(...).
 *
 * @param start A start date object for the range.
 * @param stop A stop date object for the range.
 * @param step An optional number of steps to apply when calculating the dates in the range.
 */
export function utcSaturdays(start: Date, stop: Date, step?: number): Date[];

/**
 * Month Interval in Coordinated Universal Time (UTC); months (e.g., February 1, 2012 at 12:00 AM); ranges from 28 to 31 days.
 */
export const utcMonth: CountableTimeInterval;

/**
 * This is a convenience alias for utcMonth.range(...).
 *
 * @param start A start date object for the range.
 * @param stop A stop date object for the range.
 * @param step An optional number of steps to apply when calculating the dates in the range.
 */
export function utcMonths(start: Date, stop: Date, step?: number): Date[];

/**
 * Year Interval in Coordinated Universal Time (UTC); years (e.g., January 1, 2012 at 12:00 AM); ranges from 365 to 366 days.
 */
export const utcYear: CountableTimeInterval;

/**
 * This is a convenience alias for utcYear.range(...).
 *
 * @param start A start date object for the range.
 * @param stop A stop date object for the range.
 * @param step An optional number of steps to apply when calculating the dates in the range.
 */
export function utcYears(start: Date, stop: Date, step?: number): Date[];

/**
 * Like d3.utcDay, except it counts days since the UNIX epoch (January 1, 1970) such that interval.every returns uniformly-spaced dates rather than varying based on day-of-month.
 */
export const unixDay: CountableTimeInterval;

/**
 * This is a convenience alias for unixDay.range(...).
 *
 * @param start A start date object for the range.
 * @param stop A stop date object for the range.
 * @param step An optional number of steps to apply when calculating the dates in the range.
 */
export function unixDays(start: Date, stop: Date, step?: number): Date[];

/**
 * Equivalent to d3.utcTicks, but in local time.
 */
export function timeTicks(start: Date, stop: Date, count: number): Date[];

/**
 * Returns the time interval that would be used by d3.timeTicks given the same arguments.
 */
export function timeTickInterval(start: Date, stop: Date, count: number): TimeInterval | null;

/**
 * Returns an array of approximately count dates at regular intervals between start and stop (inclusive).
 * If stop is before start, dates are returned in reverse chronological order; otherwise dates are returned in chronological order.
 */
export function utcTicks(start: Date, stop: Date, count: number): Date[];

/**
 * Returns the time interval that would be used by d3.utcTicks given the same arguments.
 * If there is no associated interval, such as when start or stop is invalid, returns null.
 */
export function utcTickInterval(start: Date, stop: Date, count: number): TimeInterval | null;

----------------------------------------
File: ./animations/node_modules/@types/react-dom/test-utils/index.d.ts
----------------------------------------
import {
    AbstractView,
    CElement,
    ClassType,
    Component,
    ComponentClass,
    DOMAttributes,
    DOMElement,
    FC,
    FunctionComponentElement,
    ReactElement,
    ReactHTMLElement,
    ReactInstance,
} from "react";

import * as ReactTestUtils from ".";

export {};

export interface OptionalEventProperties {
    bubbles?: boolean | undefined;
    cancelable?: boolean | undefined;
    currentTarget?: EventTarget | undefined;
    defaultPrevented?: boolean | undefined;
    eventPhase?: number | undefined;
    isTrusted?: boolean | undefined;
    nativeEvent?: Event | undefined;
    preventDefault?(): void;
    stopPropagation?(): void;
    target?: EventTarget | undefined;
    timeStamp?: Date | undefined;
    type?: string | undefined;
}

export type ModifierKey =
    | "Alt"
    | "AltGraph"
    | "CapsLock"
    | "Control"
    | "Fn"
    | "FnLock"
    | "Hyper"
    | "Meta"
    | "NumLock"
    | "ScrollLock"
    | "Shift"
    | "Super"
    | "Symbol"
    | "SymbolLock";

export interface SyntheticEventData extends OptionalEventProperties {
    altKey?: boolean | undefined;
    button?: number | undefined;
    buttons?: number | undefined;
    clientX?: number | undefined;
    clientY?: number | undefined;
    changedTouches?: TouchList | undefined;
    charCode?: number | undefined;
    clipboardData?: DataTransfer | undefined;
    ctrlKey?: boolean | undefined;
    deltaMode?: number | undefined;
    deltaX?: number | undefined;
    deltaY?: number | undefined;
    deltaZ?: number | undefined;
    detail?: number | undefined;
    getModifierState?(key: ModifierKey): boolean;
    key?: string | undefined;
    keyCode?: number | undefined;
    locale?: string | undefined;
    location?: number | undefined;
    metaKey?: boolean | undefined;
    pageX?: number | undefined;
    pageY?: number | undefined;
    relatedTarget?: EventTarget | undefined;
    repeat?: boolean | undefined;
    screenX?: number | undefined;
    screenY?: number | undefined;
    shiftKey?: boolean | undefined;
    targetTouches?: TouchList | undefined;
    touches?: TouchList | undefined;
    view?: AbstractView | undefined;
    which?: number | undefined;
}

export type EventSimulator = (element: Element | Component<any>, eventData?: SyntheticEventData) => void;

export interface MockedComponentClass {
    new(props: any): any;
}

export interface ShallowRenderer {
    /**
     * After `shallowRenderer.render()` has been called, returns shallowly rendered output.
     */
    getRenderOutput<E extends ReactElement>(): E;
    /**
     * Similar to `ReactDOM.render` but it doesn't require DOM and only renders a single level deep.
     */
    render(element: ReactElement, context?: any): void;
    unmount(): void;
}

/**
 * Simulate an event dispatch on a DOM node with optional `eventData` event data.
 * `Simulate` has a method for every event that React understands.
 */
export namespace Simulate {
    const abort: EventSimulator;
    const animationEnd: EventSimulator;
    const animationIteration: EventSimulator;
    const animationStart: EventSimulator;
    const blur: EventSimulator;
    const cancel: EventSimulator;
    const canPlay: EventSimulator;
    const canPlayThrough: EventSimulator;
    const change: EventSimulator;
    const click: EventSimulator;
    const close: EventSimulator;
    const compositionEnd: EventSimulator;
    const compositionStart: EventSimulator;
    const compositionUpdate: EventSimulator;
    const contextMenu: EventSimulator;
    const copy: EventSimulator;
    const cut: EventSimulator;
    const auxClick: EventSimulator;
    const doubleClick: EventSimulator;
    const drag: EventSimulator;
    const dragEnd: EventSimulator;
    const dragEnter: EventSimulator;
    const dragExit: EventSimulator;
    const dragLeave: EventSimulator;
    const dragOver: EventSimulator;
    const dragStart: EventSimulator;
    const drop: EventSimulator;
    const durationChange: EventSimulator;
    const emptied: EventSimulator;
    const encrypted: EventSimulator;
    const ended: EventSimulator;
    const error: EventSimulator;
    const focus: EventSimulator;
    const input: EventSimulator;
    const invalid: EventSimulator;
    const keyDown: EventSimulator;
    const keyPress: EventSimulator;
    const keyUp: EventSimulator;
    const load: EventSimulator;
    const loadStart: EventSimulator;
    const loadedData: EventSimulator;
    const loadedMetadata: EventSimulator;
    const mouseDown: EventSimulator;
    const mouseEnter: EventSimulator;
    const mouseLeave: EventSimulator;
    const mouseMove: EventSimulator;
    const mouseOut: EventSimulator;
    const mouseOver: EventSimulator;
    const mouseUp: EventSimulator;
    const paste: EventSimulator;
    const pause: EventSimulator;
    const play: EventSimulator;
    const playing: EventSimulator;
    const progress: EventSimulator;
    const pointerCancel: EventSimulator;
    const pointerDown: EventSimulator;
    const pointerUp: EventSimulator;
    const pointerMove: EventSimulator;
    const pointerOut: EventSimulator;
    const pointerOver: EventSimulator;
    const pointerEnter: EventSimulator;
    const pointerLeave: EventSimulator;
    const gotPointerCapture: EventSimulator;
    const lostPointerCapture: EventSimulator;
    const rateChange: EventSimulator;
    const reset: EventSimulator;
    const resize: EventSimulator;
    const scroll: EventSimulator;
    const toggle: EventSimulator;
    const seeked: EventSimulator;
    const seeking: EventSimulator;
    const select: EventSimulator;
    const beforeInput: EventSimulator;
    const stalled: EventSimulator;
    const submit: EventSimulator;
    const suspend: EventSimulator;
    const timeUpdate: EventSimulator;
    const touchCancel: EventSimulator;
    const touchEnd: EventSimulator;
    const touchMove: EventSimulator;
    const touchStart: EventSimulator;
    const transitionEnd: EventSimulator;
    const volumeChange: EventSimulator;
    const waiting: EventSimulator;
    const wheel: EventSimulator;
}

/**
 * Render a React element into a detached DOM node in the document. __This function requires a DOM__.
 * @deprecated https://react.dev/warnings/react-dom-test-utils
 */
export function renderIntoDocument<T extends Element>(
    element: DOMElement<any, T>,
): T;
/** @deprecated https://react.dev/warnings/react-dom-test-utils */
export function renderIntoDocument(
    element: FunctionComponentElement<any>,
): void;
// If we replace `P` with `any` in this overload, then some tests fail because
// calls to `renderIntoDocument` choose the last overload on the
// subtype-relation pass and get an undesirably broad return type.  Using `P`
// allows this overload to match on the subtype-relation pass.
/**
 * @deprecated https://react.dev/warnings/react-dom-test-utils
 */
export function renderIntoDocument<P, T extends Component<P>>(
    element: CElement<P, T>,
): T;
/**
 * @deprecated https://react.dev/warnings/react-dom-test-utils
 */
export function renderIntoDocument<P>(
    element: ReactElement<P>,
): Component<P> | Element | void;

/**
 * Pass a mocked component module to this method to augment it with useful methods that allow it to
 * be used as a dummy React component. Instead of rendering as usual, the component will become
 * a simple `<div>` (or other tag if `mockTagName` is provided) containing any provided children.
 * @deprecated https://react.dev/warnings/react-dom-test-utils
 */
export function mockComponent(
    mocked: MockedComponentClass,
    mockTagName?: string,
): typeof ReactTestUtils;

/**
 * Returns `true` if `element` is any React element.
 * @deprecated https://react.dev/warnings/react-dom-test-utils
 */
export function isElement(element: any): boolean;

/**
 * Returns `true` if `element` is a React element whose type is of a React `componentClass`.
 * @deprecated https://react.dev/warnings/react-dom-test-utils
 */
export function isElementOfType<T extends HTMLElement>(
    element: ReactElement,
    type: string,
): element is ReactHTMLElement<T>;
/**
 * Returns `true` if `element` is a React element whose type is of a React `componentClass`.
 * @deprecated https://react.dev/warnings/react-dom-test-utils
 */
export function isElementOfType<P extends DOMAttributes<{}>, T extends Element>(
    element: ReactElement,
    type: string,
): element is DOMElement<P, T>;
/**
 * Returns `true` if `element` is a React element whose type is of a React `componentClass`.
 * @deprecated https://react.dev/warnings/react-dom-test-utils
 */
export function isElementOfType<P>(
    element: ReactElement,
    type: FC<P>,
): element is FunctionComponentElement<P>;
/**
 * Returns `true` if `element` is a React element whose type is of a React `componentClass`.
 * @deprecated https://react.dev/warnings/react-dom-test-utils
 */
export function isElementOfType<P, T extends Component<P>, C extends ComponentClass<P>>(
    element: ReactElement,
    type: ClassType<P, T, C>,
): element is CElement<P, T>;

/**
 * Returns `true` if `instance` is a DOM component (such as a `<div>` or `<span>`).
 * @deprecated https://react.dev/warnings/react-dom-test-utils
 */
export function isDOMComponent(instance: ReactInstance): instance is Element;
/**
 * Returns `true` if `instance` is a user-defined component, such as a class or a function.
 * @deprecated https://react.dev/warnings/react-dom-test-utils
 */
export function isCompositeComponent(instance: ReactInstance): instance is Component<any>;
/**
 * Returns `true` if `instance` is a component whose type is of a React `componentClass`.
 * @deprecated https://react.dev/warnings/react-dom-test-utils
 */
export function isCompositeComponentWithType<T extends Component<any>, C extends ComponentClass<any>>(
    instance: ReactInstance,
    type: ClassType<any, T, C>,
): boolean;

/**
 * Traverse all components in `tree` and accumulate all components where
 * `test(component)` is `true`. This is not that useful on its own, but it's used
 * as a primitive for other test utils.
 * @deprecated https://react.dev/warnings/react-dom-test-utils
 */
export function findAllInRenderedTree(
    root: Component<any>,
    fn: (i: ReactInstance) => boolean,
): ReactInstance[];

/**
 * Finds all DOM elements of components in the rendered tree that are
 * DOM components with the class name matching `className`.
 * @deprecated https://react.dev/warnings/react-dom-test-utils
 */
export function scryRenderedDOMComponentsWithClass(
    root: Component<any>,
    className: string,
): Element[];
/**
 * Like `scryRenderedDOMComponentsWithClass()` but expects there to be one result,
 * and returns that one result, or throws exception if there is any other
 * number of matches besides one.
 * @deprecated https://react.dev/warnings/react-dom-test-utils
 */
export function findRenderedDOMComponentWithClass(
    root: Component<any>,
    className: string,
): Element;

/**
 * Finds all DOM elements of components in the rendered tree that are
 * DOM components with the tag name matching `tagName`.
 * @deprecated https://react.dev/warnings/react-dom-test-utils
 */
export function scryRenderedDOMComponentsWithTag(
    root: Component<any>,
    tagName: string,
): Element[];
/**
 * Like `scryRenderedDOMComponentsWithTag()` but expects there to be one result,
 * and returns that one result, or throws exception if there is any other
 * number of matches besides one.
 * @deprecated https://react.dev/warnings/react-dom-test-utils
 */
export function findRenderedDOMComponentWithTag(
    root: Component<any>,
    tagName: string,
): Element;

/**
 * Finds all instances of components with type equal to `componentClass`.
 * @deprecated https://react.dev/warnings/react-dom-test-utils
 */
export function scryRenderedComponentsWithType<T extends Component<any>, C extends ComponentClass<any>>(
    root: Component<any>,
    type: ClassType<any, T, C>,
): T[];

/**
 * Same as `scryRenderedComponentsWithType()` but expects there to be one result
 * and returns that one result, or throws exception if there is any other
 * number of matches besides one.
 * @deprecated https://react.dev/warnings/react-dom-test-utils
 */
export function findRenderedComponentWithType<T extends Component<any>, C extends ComponentClass<any>>(
    root: Component<any>,
    type: ClassType<any, T, C>,
): T;

/**
 * Call this in your tests to create a shallow renderer.
 * @deprecated https://react.dev/warnings/react-dom-test-utils
 */
export function createRenderer(): ShallowRenderer;

// NOTES
// - the order of these signatures matters - typescript will check the signatures in source order.
//   If the `() => VoidOrUndefinedOnly` signature is first, it'll erroneously match a Promise returning function for users with
//   `strictNullChecks: false`.
// - VoidOrUndefinedOnly is there to forbid any non-void return values for users with `strictNullChecks: true`
declare const UNDEFINED_VOID_ONLY: unique symbol;
// eslint-disable-next-line @typescript-eslint/no-invalid-void-type
type VoidOrUndefinedOnly = void | { [UNDEFINED_VOID_ONLY]: never };
/**
 * Wrap any code rendering and triggering updates to your components into `act()` calls.
 *
 * Ensures that the behavior in your tests matches what happens in the browser
 * more closely by executing pending `useEffect`s before returning. This also
 * reduces the amount of re-renders done.
 *
 * @param callback A synchronous, void callback that will execute as a single, complete React commit.
 *
 * @see https://reactjs.org/blog/2019/02/06/react-v16.8.0.html#testing-hooks
 *
 * @deprecated https://react.dev/warnings/react-dom-test-utils
 */
// While act does always return Thenable, if a void function is passed, we pretend the return value is also void to not trigger dangling Promise lint rules.
export function act(callback: () => VoidOrUndefinedOnly): void;
/**
 * @deprecated https://react.dev/warnings/react-dom-test-utils
 */
export function act<T>(callback: () => T | Promise<T>): Promise<T>;

// Intentionally doesn't extend PromiseLike<never>.
// Ideally this should be as hard to accidentally use as possible.
export interface DebugPromiseLike {
    // the actual then() in here is 0-ary, but that doesn't count as a PromiseLike.
    then(onfulfilled: (value: never) => never, onrejected: (reason: never) => never): never;
}

----------------------------------------
File: ./animations/node_modules/@types/react-dom/server.d.ts
----------------------------------------
// forward declarations
declare global {
    namespace NodeJS {
        // eslint-disable-next-line @typescript-eslint/no-empty-interface
        interface ReadableStream {}

        // eslint-disable-next-line @typescript-eslint/no-empty-interface
        interface WritableStream {}
    }

    /**
     * Stub for https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal
     */
    // eslint-disable-next-line @typescript-eslint/no-empty-interface
    interface AbortSignal {}

    /**
     * Stub for https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream
     */
    // eslint-disable-next-line @typescript-eslint/no-empty-interface
    interface ReadableStream {}
}

import { ReactNode } from "react";
import { ErrorInfo } from "./client";

export interface RenderToPipeableStreamOptions {
    identifierPrefix?: string;
    namespaceURI?: string;
    nonce?: string;
    bootstrapScriptContent?: string;
    bootstrapScripts?: string[];
    bootstrapModules?: string[];
    progressiveChunkSize?: number;
    onShellReady?: () => void;
    onShellError?: (error: unknown) => void;
    onAllReady?: () => void;
    onError?: (error: unknown, errorInfo: ErrorInfo) => string | void;
}

export interface PipeableStream {
    abort: (reason?: unknown) => void;
    pipe: <Writable extends NodeJS.WritableStream>(destination: Writable) => Writable;
}

export interface ServerOptions {
    identifierPrefix?: string;
}

/**
 * Only available in the environments with [Node.js Streams](https://nodejs.dev/learn/nodejs-streams).
 *
 * @see [API](https://reactjs.org/docs/react-dom-server.html#rendertopipeablestream)
 *
 * @param children
 * @param options
 */
export function renderToPipeableStream(children: ReactNode, options?: RenderToPipeableStreamOptions): PipeableStream;

/**
 * Render a React element to its initial HTML. This should only be used on the server.
 * React will return an HTML string. You can use this method to generate HTML on the server
 * and send the markup down on the initial request for faster page loads and to allow search
 * engines to crawl your pages for SEO purposes.
 *
 * If you call `ReactDOMClient.hydrateRoot()` on a node that already has this server-rendered markup,
 * React will preserve it and only attach event handlers, allowing you
 * to have a very performant first-load experience.
 */
export function renderToString(element: ReactNode, options?: ServerOptions): string;

/**
 * Render a React element to its initial HTML. Returns a Readable stream that outputs
 * an HTML string. The HTML output by this stream is exactly equal to what
 * `ReactDOMServer.renderToString()` would return.
 *
 * @deprecated
 */
export function renderToNodeStream(element: ReactNode, options?: ServerOptions): NodeJS.ReadableStream;

/**
 * Similar to `renderToString`, except this doesn't create extra DOM attributes
 * such as `data-reactid`, that React uses internally. This is useful if you want
 * to use React as a simple static page generator, as stripping away the extra
 * attributes can save lots of bytes.
 */
export function renderToStaticMarkup(element: ReactNode, options?: ServerOptions): string;

/**
 * Similar to `renderToNodeStream`, except this doesn't create extra DOM attributes
 * such as `data-reactid`, that React uses internally. The HTML output by this stream
 * is exactly equal to what `ReactDOMServer.renderToStaticMarkup()` would return.
 *
 * @deprecated
 */
export function renderToStaticNodeStream(element: ReactNode, options?: ServerOptions): NodeJS.ReadableStream;

export interface RenderToReadableStreamOptions {
    identifierPrefix?: string;
    namespaceURI?: string;
    nonce?: string;
    bootstrapScriptContent?: string;
    bootstrapScripts?: string[];
    bootstrapModules?: string[];
    progressiveChunkSize?: number;
    signal?: AbortSignal;
    onError?: (error: unknown, errorInfo: ErrorInfo) => string | void;
}

export interface ReactDOMServerReadableStream extends ReadableStream {
    allReady: Promise<void>;
}

/**
 * Only available in the environments with [Web Streams](https://developer.mozilla.org/en-US/docs/Web/API/Streams_API) (this includes browsers, Deno, and some modern edge runtimes).
 *
 * @see [API](https://reactjs.org/docs/react-dom-server.html#rendertoreadablestream)
 */
export function renderToReadableStream(
    children: ReactNode,
    options?: RenderToReadableStreamOptions,
): Promise<ReactDOMServerReadableStream>;

export const version: string;

export as namespace ReactDOMServer;

----------------------------------------
File: ./animations/node_modules/@types/react-dom/canary.d.ts
----------------------------------------
/**
 * These are types for things that are present in the upcoming React 18 release.
 *
 * Once React 18 is released they can just be moved to the main index file.
 *
 * To load the types declared here in an actual project, there are three ways. The easiest one,
 * if your `tsconfig.json` already has a `"types"` array in the `"compilerOptions"` section,
 * is to add `"react-dom/canary"` to the `"types"` array.
 *
 * Alternatively, a specific import syntax can to be used from a typescript file.
 * This module does not exist in reality, which is why the {} is important:
 *
 * ```ts
 * import {} from 'react-dom/canary'
 * ```
 *
 * It is also possible to include it through a triple-slash reference:
 *
 * ```ts
 * /// <reference types="react-dom/canary" />
 * ```
 *
 * Either the import or the reference only needs to appear once, anywhere in the project.
 */

// See https://github.com/facebook/react/blob/main/packages/react-dom/index.js to see how the exports are declared,
// but confirm with published source code (e.g. https://unpkg.com/react-dom@canary) that these exports end up in the published code

import React = require("react");
import ReactDOM = require(".");

export {};

declare const REACT_FORM_STATE_SIGIL: unique symbol;

declare module "." {
    function prefetchDNS(href: string): void;

    interface PreconnectOptions {
        // Don't create a helper type.
        // It would have to be in module scope to be inlined in TS tooltips.
        // But then it becomes part of the public API.
        // TODO: Upstream to microsoft/TypeScript-DOM-lib-generator -> w3c/webref
        // since the spec has a notion of a dedicated type: https://html.spec.whatwg.org/multipage/urls-and-fetching.html#cors-settings-attribute
        crossOrigin?: "anonymous" | "use-credentials" | "" | undefined;
    }
    function preconnect(href: string, options?: PreconnectOptions): void;

    type PreloadAs =
        | "audio"
        | "document"
        | "embed"
        | "fetch"
        | "font"
        | "image"
        | "object"
        | "track"
        | "script"
        | "style"
        | "video"
        | "worker";
    interface PreloadOptions {
        as: PreloadAs;
        crossOrigin?: "anonymous" | "use-credentials" | "" | undefined;
        fetchPriority?: "high" | "low" | "auto" | undefined;
        // TODO: These should only be allowed with `as: 'image'` but it's not trivial to write tests against the full TS support matrix.
        imageSizes?: string | undefined;
        imageSrcSet?: string | undefined;
        integrity?: string | undefined;
        type?: string | undefined;
        nonce?: string | undefined;
        referrerPolicy?: ReferrerPolicy | undefined;
    }
    function preload(href: string, options?: PreloadOptions): void;

    // https://html.spec.whatwg.org/multipage/links.html#link-type-modulepreload
    type PreloadModuleAs = RequestDestination;
    interface PreloadModuleOptions {
        /**
         * @default "script"
         */
        as: PreloadModuleAs;
        crossOrigin?: "anonymous" | "use-credentials" | "" | undefined;
        integrity?: string | undefined;
        nonce?: string | undefined;
    }
    function preloadModule(href: string, options?: PreloadModuleOptions): void;

    type PreinitAs = "script" | "style";
    interface PreinitOptions {
        as: PreinitAs;
        crossOrigin?: "anonymous" | "use-credentials" | "" | undefined;
        fetchPriority?: "high" | "low" | "auto" | undefined;
        precedence?: string | undefined;
        integrity?: string | undefined;
        nonce?: string | undefined;
    }
    function preinit(href: string, options?: PreinitOptions): void;

    // Will be expanded to include all of https://github.com/tc39/proposal-import-attributes
    type PreinitModuleAs = "script";
    interface PreinitModuleOptions {
        /**
         * @default "script"
         */
        as?: PreinitModuleAs;
        crossOrigin?: "anonymous" | "use-credentials" | "" | undefined;
        integrity?: string | undefined;
        nonce?: string | undefined;
    }
    function preinitModule(href: string, options?: PreinitModuleOptions): void;

    interface FormStatusNotPending {
        pending: false;
        data: null;
        method: null;
        action: null;
    }

    interface FormStatusPending {
        pending: true;
        data: FormData;
        method: string;
        action: string | ((formData: FormData) => void | Promise<void>);
    }

    type FormStatus = FormStatusPending | FormStatusNotPending;

    function useFormStatus(): FormStatus;

    function useFormState<State>(
        action: (state: Awaited<State>) => State | Promise<State>,
        initialState: Awaited<State>,
        permalink?: string,
    ): [state: Awaited<State>, dispatch: () => void, isPending: boolean];
    function useFormState<State, Payload>(
        action: (state: Awaited<State>, payload: Payload) => State | Promise<State>,
        initialState: Awaited<State>,
        permalink?: string,
    ): [state: Awaited<State>, dispatch: (payload: Payload) => void, isPending: boolean];

    function requestFormReset(form: HTMLFormElement): void;
}

declare module "./client" {
    interface ReactFormState {
        [REACT_FORM_STATE_SIGIL]: never;
    }

    interface RootOptions {
        onUncaughtError?:
            | ((error: unknown, errorInfo: { componentStack?: string | undefined }) => void)
            | undefined;
        onCaughtError?:
            | ((
                error: unknown,
                errorInfo: {
                    componentStack?: string | undefined;
                    errorBoundary?: React.Component<unknown> | undefined;
                },
            ) => void)
            | undefined;
    }

    interface HydrationOptions {
        formState?: ReactFormState | null;
        onUncaughtError?:
            | ((error: unknown, errorInfo: { componentStack?: string | undefined }) => void)
            | undefined;
        onCaughtError?:
            | ((
                error: unknown,
                errorInfo: {
                    componentStack?: string | undefined;
                    errorBoundary?: React.Component<unknown> | undefined;
                },
            ) => void)
            | undefined;
    }

    interface DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_CREATE_ROOT_CONTAINERS {
        document: Document;
    }
}

----------------------------------------
File: ./animations/node_modules/@types/react-dom/experimental.d.ts
----------------------------------------
/**
 * These are types for things that are present in the `experimental` builds of React but not yet
 * on a stable build.
 *
 * Once they are promoted to stable they can just be moved to the main index file.
 *
 * To load the types declared here in an actual project, there are three ways. The easiest one,
 * if your `tsconfig.json` already has a `"types"` array in the `"compilerOptions"` section,
 * is to add `"react-dom/experimental"` to the `"types"` array.
 *
 * Alternatively, a specific import syntax can to be used from a typescript file.
 * This module does not exist in reality, which is why the {} is important:
 *
 * ```ts
 * import {} from 'react-dom/experimental'
 * ```
 *
 * It is also possible to include it through a triple-slash reference:
 *
 * ```ts
 * /// <reference types="react-dom/experimental" />
 * ```
 *
 * Either the import or the reference only needs to appear once, anywhere in the project.
 */

// See https://github.com/facebook/react/blob/main/packages/react-dom/index.experimental.js to see how the exports are declared,
// but confirm with published source code (e.g. https://unpkg.com/react-dom@experimental) that these exports end up in the published code

import React = require("react");
import ReactDOM = require("./canary");

export {};

declare module "." {
}

----------------------------------------
File: ./animations/node_modules/@types/react-dom/README.md
----------------------------------------
# Installation
> `npm install --save @types/react-dom`

# Summary
This package contains type definitions for react-dom (https://reactjs.org).

# Details
Files were exported from https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/react-dom/v18.

### Additional Details
 * Last updated: Wed, 11 Dec 2024 02:54:10 GMT
 * Dependencies: none
 * Peer dependencies: [@types/react](https://npmjs.com/package/@types/react)

# Credits
These definitions were written by [Asana](https://asana.com), [AssureSign](http://www.assuresign.com), [Microsoft](https://microsoft.com), [MartynasZilinskas](https://github.com/MartynasZilinskas), [Josh Rutherford](https://github.com/theruther4d), [Jessica Franco](https://github.com/Jessidhia), and [Sebastian Silbermann](https://github.com/eps1lon).

----------------------------------------
File: ./animations/node_modules/@types/react-dom/index.d.ts
----------------------------------------
// NOTE: Users of the `experimental` builds of React should add a reference
// to 'react-dom/experimental' in their project. See experimental.d.ts's top comment
// for reference and documentation on how exactly to do it.

export as namespace ReactDOM;

import {
    CElement,
    Component,
    ComponentState,
    DOMAttributes,
    DOMElement,
    FunctionComponentElement,
    Key,
    ReactElement,
    ReactInstance,
    ReactNode,
    ReactPortal,
} from "react";

/**
 * @deprecated See https://react.dev/reference/react-dom/findDOMNode#alternatives
 */
export function findDOMNode(instance: ReactInstance | null | undefined): Element | null | Text;
/**
 * @deprecated See https://react.dev/blog/2022/03/08/react-18-upgrade-guide#updates-to-client-rendering-apis
 */
export function unmountComponentAtNode(container: Element | DocumentFragment): boolean;

export function createPortal(
    children: ReactNode,
    container: Element | DocumentFragment,
    key?: Key | null,
): ReactPortal;

export const version: string;
/**
 * @deprecated See https://react.dev/blog/2022/03/08/react-18-upgrade-guide#updates-to-client-rendering-apis
 */
export const render: Renderer;
/**
 * @deprecated See https://react.dev/blog/2022/03/08/react-18-upgrade-guide#updates-to-client-rendering-apis
 */
export const hydrate: Renderer;

export function flushSync<R>(fn: () => R): R;

export function unstable_batchedUpdates<A, R>(callback: (a: A) => R, a: A): R;
export function unstable_batchedUpdates<R>(callback: () => R): R;

/**
 * @deprecated
 */
export function unstable_renderSubtreeIntoContainer<T extends Element>(
    parentComponent: Component<any>,
    element: DOMElement<DOMAttributes<T>, T>,
    container: Element,
    callback?: (element: T) => any,
): T;
/**
 * @deprecated
 */
export function unstable_renderSubtreeIntoContainer<P, T extends Component<P, ComponentState>>(
    parentComponent: Component<any>,
    element: CElement<P, T>,
    container: Element,
    callback?: (component: T) => any,
): T;
/**
 * @deprecated
 */
export function unstable_renderSubtreeIntoContainer<P>(
    parentComponent: Component<any>,
    element: ReactElement<P>,
    container: Element,
    callback?: (component?: Component<P, ComponentState> | Element) => any,
    // eslint-disable-next-line @typescript-eslint/no-invalid-void-type
): Component<P, ComponentState> | Element | void;

export type Container = Element | Document | DocumentFragment;

export interface Renderer {
    // Deprecated(render): The return value is deprecated.
    // In future releases the render function's return type will be void.

    /**
     * @deprecated See https://react.dev/blog/2022/03/08/react-18-upgrade-guide#updates-to-client-rendering-apis
     */
    <T extends Element>(
        element: DOMElement<DOMAttributes<T>, T>,
        container: Container | null,
        callback?: () => void,
    ): T;

    /**
     * @deprecated See https://react.dev/blog/2022/03/08/react-18-upgrade-guide#updates-to-client-rendering-apis
     */
    (
        element: Array<DOMElement<DOMAttributes<any>, any>>,
        container: Container | null,
        callback?: () => void,
    ): Element;

    /**
     * @deprecated See https://react.dev/blog/2022/03/08/react-18-upgrade-guide#updates-to-client-rendering-apis
     */
    (
        element: FunctionComponentElement<any> | Array<FunctionComponentElement<any>>,
        container: Container | null,
        callback?: () => void,
    ): void;

    /**
     * @deprecated See https://react.dev/blog/2022/03/08/react-18-upgrade-guide#updates-to-client-rendering-apis
     */
    <P, T extends Component<P, ComponentState>>(
        element: CElement<P, T>,
        container: Container | null,
        callback?: () => void,
    ): T;

    /**
     * @deprecated See https://react.dev/blog/2022/03/08/react-18-upgrade-guide#updates-to-client-rendering-apis
     */
    (
        element: Array<CElement<any, Component<any, ComponentState>>>,
        container: Container | null,
        callback?: () => void,
    ): Component<any, ComponentState>;

    /**
     * @deprecated See https://react.dev/blog/2022/03/08/react-18-upgrade-guide#updates-to-client-rendering-apis
     */
    <P>(
        element: ReactElement<P>,
        container: Container | null,
        callback?: () => void,
        // eslint-disable-next-line @typescript-eslint/no-invalid-void-type
    ): Component<P, ComponentState> | Element | void;

    /**
     * @deprecated See https://react.dev/blog/2022/03/08/react-18-upgrade-guide#updates-to-client-rendering-apis
     */
    (
        element: ReactElement[],
        container: Container | null,
        callback?: () => void,
        // eslint-disable-next-line @typescript-eslint/no-invalid-void-type
    ): Component<any, ComponentState> | Element | void;
}

----------------------------------------
File: ./animations/node_modules/@types/react-dom/client.d.ts
----------------------------------------
/**
 * WARNING: This entrypoint is only available starting with `react-dom@18.0.0-rc.1`
 */

// See https://github.com/facebook/react/blob/main/packages/react-dom/client.js to see how the exports are declared,

import React = require("react");
export interface HydrationOptions {
    /**
     * Prefix for `useId`.
     */
    identifierPrefix?: string;
    onRecoverableError?: (error: unknown, errorInfo: ErrorInfo) => void;
}

export interface RootOptions {
    /**
     * Prefix for `useId`.
     */
    identifierPrefix?: string;
    onRecoverableError?: (error: unknown, errorInfo: ErrorInfo) => void;
}

export interface ErrorInfo {
    digest?: string;
    componentStack?: string;
}

export interface Root {
    render(children: React.ReactNode): void;
    unmount(): void;
}

/**
 * Different release channels declare additional types of ReactNode this particular release channel accepts.
 * App or library types should never augment this interface.
 */
// eslint-disable-next-line @typescript-eslint/no-empty-interface
export interface DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_CREATE_ROOT_CONTAINERS {}

export type Container =
    | Element
    | DocumentFragment
    | DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_CREATE_ROOT_CONTAINERS[
        keyof DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_CREATE_ROOT_CONTAINERS
    ];

/**
 * createRoot lets you create a root to display React components inside a browser DOM node.
 *
 * @see {@link https://react.dev/reference/react-dom/client/createRoot API Reference for `createRoot`}
 */
export function createRoot(container: Container, options?: RootOptions): Root;

/**
 * Same as `createRoot()`, but is used to hydrate a container whose HTML contents were rendered by ReactDOMServer.
 *
 * React will attempt to attach event listeners to the existing markup.
 *
 * **Example Usage**
 *
 * ```jsx
 * hydrateRoot(document.querySelector('#root'), <App />)
 * ```
 *
 * @see https://reactjs.org/docs/react-dom-client.html#hydrateroot
 */
export function hydrateRoot(
    container: Element | Document,
    initialChildren: React.ReactNode,
    options?: HydrationOptions,
): Root;

----------------------------------------
File: ./animations/node_modules/@types/babel__generator/README.md
----------------------------------------
# Installation
> `npm install --save @types/babel__generator`

# Summary
This package contains type definitions for @babel/generator (https://github.com/babel/babel/tree/master/packages/babel-generator).

# Details
Files were exported from https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/babel__generator.

### Additional Details
 * Last updated: Sat, 16 Dec 2023 09:06:45 GMT
 * Dependencies: [@babel/types](https://npmjs.com/package/@babel/types)

# Credits
These definitions were written by [Troy Gerwien](https://github.com/yortus), [Melvin Groenhoff](https://github.com/mgroenhoff), [Cameron Yan](https://github.com/khell), and [Lyanbin](https://github.com/Lyanbin).

----------------------------------------
File: ./animations/node_modules/@types/babel__generator/index.d.ts
----------------------------------------
import * as t from "@babel/types";

export interface GeneratorOptions {
    /**
     * Optional string to add as a block comment at the start of the output file.
     */
    auxiliaryCommentBefore?: string | undefined;

    /**
     * Optional string to add as a block comment at the end of the output file.
     */
    auxiliaryCommentAfter?: string | undefined;

    /**
     * Function that takes a comment (as a string) and returns true if the comment should be included in the output.
     * By default, comments are included if `opts.comments` is `true` or if `opts.minifed` is `false` and the comment
     * contains `@preserve` or `@license`.
     */
    shouldPrintComment?(comment: string): boolean;

    /**
     * Attempt to use the same line numbers in the output code as in the source code (helps preserve stack traces).
     * Defaults to `false`.
     */
    retainLines?: boolean | undefined;

    /**
     * Retain parens around function expressions (could be used to change engine parsing behavior)
     * Defaults to `false`.
     */
    retainFunctionParens?: boolean | undefined;

    /**
     * Should comments be included in output? Defaults to `true`.
     */
    comments?: boolean | undefined;

    /**
     * Set to true to avoid adding whitespace for formatting. Defaults to the value of `opts.minified`.
     */
    compact?: boolean | "auto" | undefined;

    /**
     * Should the output be minified. Defaults to `false`.
     */
    minified?: boolean | undefined;

    /**
     * Set to true to reduce whitespace (but not as much as opts.compact). Defaults to `false`.
     */
    concise?: boolean | undefined;

    /**
     * Used in warning messages
     */
    filename?: string | undefined;

    /**
     * Enable generating source maps. Defaults to `false`.
     */
    sourceMaps?: boolean | undefined;

    /**
     * A root for all relative URLs in the source map.
     */
    sourceRoot?: string | undefined;

    /**
     * The filename for the source code (i.e. the code in the `code` argument).
     * This will only be used if `code` is a string.
     */
    sourceFileName?: string | undefined;

    /**
     * Set to true to run jsesc with "json": true to print "\u00A9" vs. "©";
     */
    jsonCompatibleStrings?: boolean | undefined;

    /**
     * Set to true to enable support for experimental decorators syntax before module exports.
     * Defaults to `false`.
     */
    decoratorsBeforeExport?: boolean | undefined;

    /**
     * The import attributes/assertions syntax to use.
     * When not specified, @babel/generator will try to match the style in the input code based on the AST shape.
     */
    importAttributesKeyword?: "with" | "assert" | "with-legacy";

    /**
     * Options for outputting jsesc representation.
     */
    jsescOption?: {
        /**
         * The default value for the quotes option is 'single'. This means that any occurrences of ' in the input
         * string are escaped as \', so that the output can be used in a string literal wrapped in single quotes.
         */
        quotes?: "single" | "double" | "backtick" | undefined;

        /**
         * The default value for the numbers option is 'decimal'. This means that any numeric values are represented
         * using decimal integer literals. Other valid options are binary, octal, and hexadecimal, which result in
         * binary integer literals, octal integer literals, and hexadecimal integer literals, respectively.
         */
        numbers?: "binary" | "octal" | "decimal" | "hexadecimal" | undefined;

        /**
         * The wrap option takes a boolean value (true or false), and defaults to false (disabled). When enabled, the
         * output is a valid JavaScript string literal wrapped in quotes. The type of quotes can be specified through
         * the quotes setting.
         */
        wrap?: boolean | undefined;

        /**
         * The es6 option takes a boolean value (true or false), and defaults to false (disabled). When enabled, any
         * astral Unicode symbols in the input are escaped using ECMAScript 6 Unicode code point escape sequences
         * instead of using separate escape sequences for each surrogate half. If backwards compatibility with ES5
         * environments is a concern, don’t enable this setting. If the json setting is enabled, the value for the es6
         * setting is ignored (as if it was false).
         */
        es6?: boolean | undefined;

        /**
         * The escapeEverything option takes a boolean value (true or false), and defaults to false (disabled). When
         * enabled, all the symbols in the output are escaped — even printable ASCII symbols.
         */
        escapeEverything?: boolean | undefined;

        /**
         * The minimal option takes a boolean value (true or false), and defaults to false (disabled). When enabled,
         * only a limited set of symbols in the output are escaped: \0, \b, \t, \n, \f, \r, \\, \u2028, \u2029.
         */
        minimal?: boolean | undefined;

        /**
         * The isScriptContext option takes a boolean value (true or false), and defaults to false (disabled). When
         * enabled, occurrences of </script and </style in the output are escaped as <\/script and <\/style, and <!--
         * is escaped as \x3C!-- (or \u003C!-- when the json option is enabled). This setting is useful when jsesc’s
         * output ends up as part of a <script> or <style> element in an HTML document.
         */
        isScriptContext?: boolean | undefined;

        /**
         * The compact option takes a boolean value (true or false), and defaults to true (enabled). When enabled,
         * the output for arrays and objects is as compact as possible; it’s not formatted nicely.
         */
        compact?: boolean | undefined;

        /**
         * The indent option takes a string value, and defaults to '\t'. When the compact setting is enabled (true),
         * the value of the indent option is used to format the output for arrays and objects.
         */
        indent?: string | undefined;

        /**
         * The indentLevel option takes a numeric value, and defaults to 0. It represents the current indentation level,
         * i.e. the number of times the value of the indent option is repeated.
         */
        indentLevel?: number | undefined;

        /**
         * The json option takes a boolean value (true or false), and defaults to false (disabled). When enabled, the
         * output is valid JSON. Hexadecimal character escape sequences and the \v or \0 escape sequences are not used.
         * Setting json: true implies quotes: 'double', wrap: true, es6: false, although these values can still be
         * overridden if needed — but in such cases, the output won’t be valid JSON anymore.
         */
        json?: boolean | undefined;

        /**
         * The lowercaseHex option takes a boolean value (true or false), and defaults to false (disabled). When enabled,
         * any alphabetical hexadecimal digits in escape sequences as well as any hexadecimal integer literals (see the
         * numbers option) in the output are in lowercase.
         */
        lowercaseHex?: boolean | undefined;
    } | undefined;
}

export class CodeGenerator {
    constructor(ast: t.Node, opts?: GeneratorOptions, code?: string);
    generate(): GeneratorResult;
}

/**
 * Turns an AST into code, maintaining sourcemaps, user preferences, and valid output.
 * @param ast - the abstract syntax tree from which to generate output code.
 * @param opts - used for specifying options for code generation.
 * @param code - the original source code, used for source maps.
 * @returns - an object containing the output code and source map.
 */
export default function generate(
    ast: t.Node,
    opts?: GeneratorOptions,
    code?: string | { [filename: string]: string },
): GeneratorResult;

export interface GeneratorResult {
    code: string;
    map: {
        version: number;
        sources: string[];
        names: string[];
        sourceRoot?: string | undefined;
        sourcesContent?: string[] | undefined;
        mappings: string;
        file: string;
    } | null;
}

----------------------------------------
File: ./animations/node_modules/@types/babel__traverse/README.md
----------------------------------------
# Installation
> `npm install --save @types/babel__traverse`

# Summary
This package contains type definitions for @babel/traverse (https://github.com/babel/babel/tree/main/packages/babel-traverse).

# Details
Files were exported from https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/babel__traverse.

### Additional Details
 * Last updated: Tue, 21 May 2024 21:07:11 GMT
 * Dependencies: [@babel/types](https://npmjs.com/package/@babel/types)

# Credits
These definitions were written by [Troy Gerwien](https://github.com/yortus), [Marvin Hagemeister](https://github.com/marvinhagemeister), [Ryan Petrich](https://github.com/rpetrich), [Melvin Groenhoff](https://github.com/mgroenhoff), [Dean L.](https://github.com/dlgrit), [Ifiok Jr.](https://github.com/ifiokjr), [ExE Boss](https://github.com/ExE-Boss), and [Daniel Tschinder](https://github.com/danez).

----------------------------------------
File: ./animations/node_modules/@types/babel__traverse/index.d.ts
----------------------------------------
import * as t from "@babel/types";
export import Node = t.Node;
export import RemovePropertiesOptions = t.RemovePropertiesOptions;

declare const traverse: {
    <S>(parent: Node, opts: TraverseOptions<S>, scope: Scope | undefined, state: S, parentPath?: NodePath): void;
    (parent: Node, opts?: TraverseOptions, scope?: Scope, state?: any, parentPath?: NodePath): void;

    visitors: typeof visitors;
    verify: typeof visitors.verify;
    explode: typeof visitors.explode;

    cheap: (node: Node, enter: (node: Node) => void) => void;
    node: (
        node: Node,
        opts: TraverseOptions,
        scope?: Scope,
        state?: any,
        path?: NodePath,
        skipKeys?: Record<string, boolean>,
    ) => void;
    clearNode: (node: Node, opts?: RemovePropertiesOptions) => void;
    removeProperties: (tree: Node, opts?: RemovePropertiesOptions) => Node;
    hasType: (tree: Node, type: Node["type"], denylistTypes?: string[]) => boolean;

    cache: typeof cache;
};

export namespace visitors {
    /**
     * `explode()` will take a `Visitor` object with all of the various shorthands
     * that we support, and validates & normalizes it into a common format, ready
     * to be used in traversal.
     *
     * The various shorthands are:
     * - `Identifier() { ... }` -> `Identifier: { enter() { ... } }`
     * - `"Identifier|NumericLiteral": { ... }` -> `Identifier: { ... }, NumericLiteral: { ... }`
     * - Aliases in `@babel/types`: e.g. `Property: { ... }` -> `ObjectProperty: { ... }, ClassProperty: { ... }`
     *
     * Other normalizations are:
     * - Visitors of virtual types are wrapped, so that they are only visited when their dynamic check passes
     * - `enter` and `exit` functions are wrapped in arrays, to ease merging of visitors
     */
    function explode<S = unknown>(
        visitor: Visitor<S>,
    ): {
        [Type in Exclude<Node, t.DeprecatedAliases>["type"]]?: VisitNodeObject<S, Extract<Node, { type: Type }>>;
    };
    function verify(visitor: Visitor): void;
    function merge<State>(visitors: Array<Visitor<State>>): Visitor<State>;
    function merge(
        visitors: Visitor[],
        states?: any[],
        wrapper?: (
            stateKey: any,
            visitorKey: keyof Visitor,
            func: VisitNodeFunction<unknown, Node>,
        ) => VisitNodeFunction<unknown, Node> | null,
    ): Visitor;
}

export namespace cache {
    let path: WeakMap<t.Node, Map<t.Node, NodePath>>;
    let scope: WeakMap<t.Node, Scope>;
    function clear(): void;
    function clearPath(): void;
    function clearScope(): void;
}

export default traverse;

export type TraverseOptions<S = Node> = {
    scope?: Scope;
    noScope?: boolean;
    denylist?: NodeType[];
    /** @deprecated will be removed in Babel 8 */
    blacklist?: NodeType[];
    shouldSkip?: (node: NodePath) => boolean;
} & Visitor<S>;

export class Scope {
    /**
     * This searches the current "scope" and collects all references/bindings
     * within.
     */
    constructor(path: NodePath, parentScope?: Scope);
    uid: number;
    path: NodePath;
    block: Node;
    labels: Map<string, NodePath<t.LabeledStatement>>;
    parentBlock: Node;
    parent: Scope;
    hub: HubInterface;
    bindings: { [name: string]: Binding };
    references: { [name: string]: true };
    globals: { [name: string]: t.Identifier | t.JSXIdentifier };
    uids: { [name: string]: boolean };
    data: Record<string | symbol, unknown>;
    crawling: boolean;

    static globals: string[];
    /** Variables available in current context. */
    static contextVariables: string[];

    /** Traverse node with current scope and path. */
    traverse<S>(node: Node | Node[], opts: TraverseOptions<S>, state: S): void;
    traverse(node: Node | Node[], opts?: TraverseOptions, state?: any): void;

    /** Generate a unique identifier and add it to the current scope. */
    generateDeclaredUidIdentifier(name?: string): t.Identifier;

    /** Generate a unique identifier. */
    generateUidIdentifier(name?: string): t.Identifier;

    /** Generate a unique `_id1` binding. */
    generateUid(name?: string): string;

    /** Generate a unique identifier based on a node. */
    generateUidIdentifierBasedOnNode(parent: Node, defaultName?: string): t.Identifier;

    /**
     * Determine whether evaluating the specific input `node` is a consequenceless reference. ie.
     * evaluating it wont result in potentially arbitrary code from being ran. The following are
     * whitelisted and determined not to cause side effects:
     *
     *  - `this` expressions
     *  - `super` expressions
     *  - Bound identifiers
     */
    isStatic(node: Node): boolean;

    /** Possibly generate a memoised identifier if it is not static and has consequences. */
    maybeGenerateMemoised(node: Node, dontPush?: boolean): t.Identifier;

    checkBlockScopedCollisions(local: Binding, kind: BindingKind, name: string, id: object): void;

    rename(oldName: string, newName?: string, block?: Node): void;

    dump(): void;

    toArray(
        node: t.Node,
        i?: number | boolean,
        arrayLikeIsIterable?: boolean,
    ): t.ArrayExpression | t.CallExpression | t.Identifier;

    hasLabel(name: string): boolean;

    getLabel(name: string): NodePath<t.LabeledStatement> | undefined;

    registerLabel(path: NodePath<t.LabeledStatement>): void;

    registerDeclaration(path: NodePath): void;

    buildUndefinedNode(): t.UnaryExpression;

    registerConstantViolation(path: NodePath): void;

    registerBinding(kind: BindingKind, path: NodePath, bindingPath?: NodePath): void;

    addGlobal(node: t.Identifier | t.JSXIdentifier): void;

    hasUid(name: string): boolean;

    hasGlobal(name: string): boolean;

    hasReference(name: string): boolean;

    isPure(node: Node, constantsOnly?: boolean): boolean;

    /**
     * Set some arbitrary data on the current scope.
     */
    setData(key: string, val: any): any;

    /**
     * Recursively walk up scope tree looking for the data `key`.
     */
    getData(key: string): any;

    /**
     * Recursively walk up scope tree looking for the data `key` and if it exists,
     * remove it.
     */
    removeData(key: string): void;

    crawl(): void;

    push(opts: {
        id: t.LVal;
        init?: t.Expression;
        unique?: boolean;
        _blockHoist?: number | undefined;
        kind?: "var" | "let" | "const";
    }): void;

    /** Walk up to the top of the scope tree and get the `Program`. */
    getProgramParent(): Scope;

    /** Walk up the scope tree until we hit either a Function or return null. */
    getFunctionParent(): Scope | null;

    /**
     * Walk up the scope tree until we hit either a BlockStatement/Loop/Program/Function/Switch or reach the
     * very top and hit Program.
     */
    getBlockParent(): Scope;

    /**
     * Walk up from a pattern scope (function param initializer) until we hit a non-pattern scope,
     * then returns its block parent
     * @returns An ancestry scope whose path is a block parent
     */
    getPatternParent(): Scope;

    /** Walks the scope tree and gathers **all** bindings. */
    getAllBindings(): Record<string, Binding>;

    /** Walks the scope tree and gathers all declarations of `kind`. */
    getAllBindingsOfKind(...kinds: string[]): Record<string, Binding>;

    bindingIdentifierEquals(name: string, node: Node): boolean;

    getBinding(name: string): Binding | undefined;

    getOwnBinding(name: string): Binding | undefined;

    getBindingIdentifier(name: string): t.Identifier;

    getOwnBindingIdentifier(name: string): t.Identifier;

    hasOwnBinding(name: string): boolean;

    hasBinding(
        name: string,
        optsOrNoGlobals?:
            | boolean
            | {
                noGlobals?: boolean;
                noUids?: boolean;
            },
    ): boolean;

    parentHasBinding(
        name: string,
        opts?: {
            noGlobals?: boolean;
            noUids?: boolean;
        },
    ): boolean;

    /** Move a binding of `name` to another `scope`. */
    moveBindingTo(name: string, scope: Scope): void;

    removeOwnBinding(name: string): void;

    removeBinding(name: string): void;
}

export type BindingKind = "var" | "let" | "const" | "module" | "hoisted" | "param" | "local" | "unknown";

/**
 * This class is responsible for a binding inside of a scope.
 *
 * It tracks the following:
 *
 *  * Node path.
 *  * Amount of times referenced by other nodes.
 *  * Paths to nodes that reassign or modify this binding.
 *  * The kind of binding. (Is it a parameter, declaration etc)
 */
export class Binding {
    constructor(opts: { identifier: t.Identifier; scope: Scope; path: NodePath; kind: BindingKind });
    identifier: t.Identifier;
    scope: Scope;
    path: NodePath;
    kind: BindingKind;
    referenced: boolean;
    references: number;
    referencePaths: NodePath[];
    constant: boolean;
    constantViolations: NodePath[];
    hasDeoptedValue: boolean;
    hasValue: boolean;
    value: any;

    deopValue(): void;
    setValue(value: any): void;
    clearValue(): void;

    /** Register a constant violation with the provided `path`. */
    reassign(path: NodePath): void;
    /** Increment the amount of references to this binding. */
    reference(path: NodePath): void;
    /** Decrement the amount of references to this binding. */
    dereference(): void;
}

export type Visitor<S = unknown> =
    & VisitNodeObject<S, Node>
    & {
        [N in Node as N["type"]]?: VisitNode<S, N extends { type: N["type"] } ? N : never>;
    }
    & {
        [K in keyof t.Aliases]?: VisitNode<S, t.Aliases[K]>;
    }
    & {
        [K in keyof VirtualTypeAliases]?: VisitNode<S, VirtualTypeAliases[K]>;
    }
    & {
        // Babel supports `NodeTypesWithoutComment | NodeTypesWithoutComment | ... ` but it is
        // too complex for TS. So we type it as a general visitor only if the key contains `|`
        // this is good enough for non-visitor traverse options e.g. `noScope`
        [k: `${string}|${string}`]: VisitNode<S, Node>;
    };

export type VisitNode<S, P extends Node> = VisitNodeFunction<S, P> | VisitNodeObject<S, P>;

export type VisitNodeFunction<S, P extends Node> = (this: S, path: NodePath<P>, state: S) => void;

type NodeType = Node["type"] | keyof t.Aliases;

export interface VisitNodeObject<S, P extends Node> {
    enter?: VisitNodeFunction<S, P>;
    exit?: VisitNodeFunction<S, P>;
}

export type NodeKeyOfArrays<T extends Node> = {
    [P in keyof T]-?: T[P] extends Array<Node | null | undefined> ? P : never;
}[keyof T];

export type NodeKeyOfNodes<T extends Node> = {
    [P in keyof T]-?: T[P] extends Node | null | undefined ? P : never;
}[keyof T];

export type NodePaths<T extends Node | readonly Node[]> = T extends readonly Node[]
    ? { -readonly [K in keyof T]: NodePath<Extract<T[K], Node>> }
    : T extends Node ? [NodePath<T>]
    : never;

type NodeListType<N, K extends keyof N> = N[K] extends Array<infer P> ? (P extends Node ? P : never) : never;

type NodesInsertionParam<T extends Node> = T | readonly T[] | [T, ...T[]];

export class NodePath<T = Node> {
    constructor(hub: HubInterface, parent: Node);
    parent: Node;
    hub: Hub;
    data: Record<string | symbol, unknown>;
    context: TraversalContext;
    scope: Scope;
    contexts: TraversalContext[];
    state: any;
    opts: any; // exploded TraverseOptions
    skipKeys: Record<string, boolean> | null;
    parentPath: T extends t.Program ? null : NodePath;
    container: Node | Node[] | null;
    listKey: string | null;
    key: string | number | null;
    node: T;
    type: T extends Node ? T["type"] : T extends null | undefined ? undefined : Node["type"] | undefined;
    shouldSkip: boolean;
    shouldStop: boolean;
    removed: boolean;
    inList: boolean;
    parentKey: string;
    typeAnnotation: object;

    static get<C extends Node, K extends keyof C>(opts: {
        hub?: HubInterface;
        parentPath: NodePath | null;
        parent: Node;
        container: C;
        key: K;
    }): NodePath<C[K]>;
    static get<C extends Node, L extends NodeKeyOfArrays<C>>(opts: {
        hub?: HubInterface;
        parentPath: NodePath | null;
        parent: Node;
        container: C;
        listKey: L;
        key: number;
    }): C[L] extends Array<Node | null | undefined> ? NodePath<C[L][number]> : never;

    getScope(scope: Scope): Scope;

    setData(key: string | symbol, val: any): any;

    getData(key: string | symbol, def?: any): any;

    hasNode(): this is NodePath<Exclude<T, null | undefined>>;

    buildCodeFrameError(msg: string, Error?: ErrorConstructor): Error;

    traverse<T>(visitor: TraverseOptions<T>, state: T): void;
    traverse(visitor: TraverseOptions): void;

    set(key: string, node: any): void;

    getPathLocation(): string;

    // Example: https://github.com/babel/babel/blob/63204ae51e020d84a5b246312f5eeb4d981ab952/packages/babel-traverse/src/path/modification.js#L83
    debug(buildMessage: () => string): void;

    // #region ------------------------- ancestry -------------------------
    /**
     * Starting at the parent path of the current `NodePath` and going up the
     * tree, return the first `NodePath` that causes the provided `callback`
     * to return a truthy value, or `null` if the `callback` never returns a
     * truthy value.
     */
    findParent(callback: (path: NodePath) => boolean): NodePath | null;

    /**
     * Starting at current `NodePath` and going up the tree, return the first
     * `NodePath` that causes the provided `callback` to return a truthy value,
     * or `null` if the `callback` never returns a truthy value.
     */
    find(callback: (path: NodePath) => boolean): NodePath | null;

    /** Get the parent function of the current path. */
    getFunctionParent(): NodePath<t.Function> | null;

    /** Walk up the tree until we hit a parent node path in a list. */
    getStatementParent(): NodePath<t.Statement> | null;

    /**
     * Get the deepest common ancestor and then from it, get the earliest relationship path
     * to that ancestor.
     *
     * Earliest is defined as being "before" all the other nodes in terms of list container
     * position and visiting key.
     */
    getEarliestCommonAncestorFrom(paths: NodePath[]): NodePath;

    /** Get the earliest path in the tree where the provided `paths` intersect. */
    getDeepestCommonAncestorFrom(
        paths: NodePath[],
        filter?: (deepest: Node, i: number, ancestries: NodePath[][]) => NodePath,
    ): NodePath;

    /**
     * Build an array of node paths containing the entire ancestry of the current node path.
     *
     * NOTE: The current node path is included in this.
     */
    getAncestry(): [this, ...NodePath[]];

    /**
     * A helper to find if `this` path is an ancestor of `maybeDescendant`
     */
    isAncestor(maybeDescendant: NodePath): boolean;

    /**
     * A helper to find if `this` path is a descendant of `maybeAncestor`
     */
    isDescendant(maybeAncestor: NodePath): boolean;

    inType(...candidateTypes: string[]): boolean;
    // #endregion

    // #region ------------------------- inference -------------------------
    /** Infer the type of the current `NodePath`. */
    getTypeAnnotation(): t.FlowType | t.TSType;

    isBaseType(baseName: string, soft?: boolean): boolean;

    couldBeBaseType(name: string): boolean;

    baseTypeStrictlyMatches(rightArg: NodePath): boolean;

    isGenericType(genericName: string): boolean;
    // #endregion

    // #region ------------------------- replacement -------------------------
    /**
     * Replace a node with an array of multiple. This method performs the following steps:
     *
     *  - Inherit the comments of first provided node with that of the current node.
     *  - Insert the provided nodes after the current node.
     *  - Remove the current node.
     */
    replaceWithMultiple<Nodes extends Node | readonly Node[] | [Node, ...Node[]]>(nodes: Nodes): NodePaths<Nodes>;

    /**
     * Parse a string as an expression and replace the current node with the result.
     *
     * NOTE: This is typically not a good idea to use. Building source strings when
     * transforming ASTs is an antipattern and SHOULD NOT be encouraged. Even if it's
     * easier to use, your transforms will be extremely brittle.
     */
    replaceWithSourceString(replacement: string): [NodePath];

    /** Replace the current node with another. */
    replaceWith<R extends Node>(replacementPath: R | NodePath<R>): [NodePath<R>];
    replaceWith<R extends NodePath>(replacementPath: R): [R];

    /**
     * This method takes an array of statements nodes and then explodes it
     * into expressions. This method retains completion records which is
     * extremely important to retain original semantics.
     */
    replaceExpressionWithStatements(nodes: t.Statement[]): NodePaths<t.Expression | t.Statement>;

    replaceInline<Nodes extends Node | readonly Node[] | [Node, ...Node[]]>(nodes: Nodes): NodePaths<Nodes>;
    // #endregion

    // #region ------------------------- evaluation -------------------------
    /**
     * Walk the input `node` and statically evaluate if it's truthy.
     *
     * Returning `true` when we're sure that the expression will evaluate to a
     * truthy value, `false` if we're sure that it will evaluate to a falsy
     * value and `undefined` if we aren't sure. Because of this please do not
     * rely on coercion when using this method and check with === if it's false.
     */
    evaluateTruthy(): boolean | undefined;

    /**
     * Walk the input `node` and statically evaluate it.
     *
     * Returns an object in the form `{ confident, value, deopt }`. `confident`
     * indicates whether or not we had to drop out of evaluating the expression
     * because of hitting an unknown node that we couldn't confidently find the
     * value of, in which case `deopt` is the path of said node.
     *
     * Example:
     *
     *   t.evaluate(parse("5 + 5")) // { confident: true, value: 10 }
     *   t.evaluate(parse("!true")) // { confident: true, value: false }
     *   t.evaluate(parse("foo + foo")) // { confident: false, value: undefined, deopt: NodePath }
     */
    evaluate(): {
        confident: boolean;
        value: any;
        deopt?: NodePath;
    };
    // #endregion

    // #region ------------------------- introspection -------------------------
    /**
     * Match the current node if it matches the provided `pattern`.
     *
     * For example, given the match `React.createClass` it would match the
     * parsed nodes of `React.createClass` and `React["createClass"]`.
     */
    matchesPattern(pattern: string, allowPartial?: boolean): boolean;

    /**
     * Check whether we have the input `key`. If the `key` references an array then we check
     * if the array has any items, otherwise we just check if it's falsy.
     */
    has(key: string): boolean;
    // has(key: keyof T): boolean;

    isStatic(): boolean;

    /** Alias of `has`. */
    is(key: string): boolean;
    // is(key: keyof T): boolean;

    /** Opposite of `has`. */
    isnt(key: string): boolean;
    // isnt(key: keyof T): boolean;

    /** Check whether the path node `key` strict equals `value`. */
    equals(key: string, value: any): boolean;
    // equals(key: keyof T, value: any): boolean;

    /**
     * Check the type against our stored internal type of the node. This is handy when a node has
     * been removed yet we still internally know the type and need it to calculate node replacement.
     */
    isNodeType(type: string): boolean;

    /**
     * This checks whether or not we're in one of the following positions:
     *
     *   for (KEY in right);
     *   for (KEY;;);
     *
     * This is because these spots allow VariableDeclarations AND normal expressions so we need
     * to tell the path replacement that it's ok to replace this with an expression.
     */
    canHaveVariableDeclarationOrExpression(): boolean;

    /**
     * This checks whether we are swapping an arrow function's body between an
     * expression and a block statement (or vice versa).
     *
     * This is because arrow functions may implicitly return an expression, which
     * is the same as containing a block statement.
     */
    canSwapBetweenExpressionAndStatement(replacement: Node): boolean;

    /** Check whether the current path references a completion record */
    isCompletionRecord(allowInsideFunction?: boolean): boolean;

    /**
     * Check whether or not the current `key` allows either a single statement or block statement
     * so we can explode it if necessary.
     */
    isStatementOrBlock(): boolean;

    /** Check if the currently assigned path references the `importName` of `moduleSource`. */
    referencesImport(moduleSource: string, importName: string): boolean;

    /** Get the source code associated with this node. */
    getSource(): string;

    /** Check if the current path will maybe execute before another path */
    willIMaybeExecuteBefore(target: NodePath): boolean;

    resolve(dangerous?: boolean, resolved?: NodePath[]): NodePath;

    isConstantExpression(): boolean;

    isInStrictMode(): boolean;
    // #endregion

    // #region ------------------------- context -------------------------
    call(key: string): boolean;

    isDenylisted(): boolean;

    /** @deprecated will be removed in Babel 8 */
    isBlacklisted(): boolean;

    visit(): boolean;

    skip(): void;

    skipKey(key: string): void;

    stop(): void;

    setScope(): void;

    setContext(context?: TraversalContext): this;

    /**
     * Here we resync the node paths `key` and `container`. If they've changed according
     * to what we have stored internally then we attempt to resync by crawling and looking
     * for the new values.
     */
    resync(): void;

    popContext(): void;

    pushContext(context: TraversalContext): void;

    requeue(pathToQueue?: NodePath): void;
    // #endregion

    // #region ------------------------- removal -------------------------
    remove(): void;
    // #endregion

    // #region ------------------------- conversion -------------------------
    toComputedKey(): t.PrivateName | t.Expression;

    /** @deprecated Use `arrowFunctionToExpression` */
    arrowFunctionToShadowed(): void;

    /**
     * Given an arbitrary function, process its content as if it were an arrow function, moving references
     * to "this", "arguments", "super", and such into the function's parent scope. This method is useful if
     * you have wrapped some set of items in an IIFE or other function, but want "this", "arguments", and super"
     * to continue behaving as expected.
     */
    unwrapFunctionEnvironment(): void;

    /**
     * Convert a given arrow function into a normal ES5 function expression.
     */
    arrowFunctionToExpression({
        allowInsertArrow,
        allowInsertArrowWithRest,
        /** @deprecated Use `noNewArrows` instead */
        specCompliant,
        noNewArrows,
    }?: {
        allowInsertArrow?: boolean;
        allowInsertArrowWithRest?: boolean;
        specCompliant?: boolean;
        noNewArrows?: boolean;
    }): NodePath<Exclude<t.Function, t.Method | t.ArrowFunctionExpression> | t.CallExpression>;

    ensureBlock(
        this: NodePath<t.Loop | t.WithStatement | t.Function | t.LabeledStatement | t.CatchClause>,
    ): asserts this is NodePath<
        T & {
            body: t.BlockStatement;
        }
    >;
    // #endregion

    // #region ------------------------- modification -------------------------
    /** Insert the provided nodes before the current one. */
    insertBefore<Nodes extends NodesInsertionParam<Node>>(nodes: Nodes): NodePaths<Nodes>;

    /**
     * Insert the provided nodes after the current one. When inserting nodes after an
     * expression, ensure that the completion record is correct by pushing the current node.
     */
    insertAfter<Nodes extends NodesInsertionParam<Node>>(nodes: Nodes): NodePaths<Nodes>;

    /** Update all sibling node paths after `fromIndex` by `incrementBy`. */
    updateSiblingKeys(fromIndex: number, incrementBy: number): void;

    /**
     * Insert child nodes at the start of the current node.
     * @param listKey - The key at which the child nodes are stored (usually body).
     * @param nodes - the nodes to insert.
     */
    unshiftContainer<
        T extends Node,
        K extends NodeKeyOfArrays<T>,
        Nodes extends NodesInsertionParam<NodeListType<T, K>>,
    >(this: NodePath<T>, listKey: K, nodes: Nodes): NodePaths<Nodes>;

    /**
     * Insert child nodes at the end of the current node.
     * @param listKey - The key at which the child nodes are stored (usually body).
     * @param nodes - the nodes to insert.
     */
    pushContainer<T extends Node, K extends NodeKeyOfArrays<T>, Nodes extends NodesInsertionParam<NodeListType<T, K>>>(
        this: NodePath<T>,
        listKey: K,
        nodes: Nodes,
    ): NodePaths<Nodes>;

    /** Hoist the current node to the highest scope possible and return a UID referencing it. */
    hoist(scope: Scope): void;
    // #endregion

    // #region ------------------------- family -------------------------
    getOpposite(): NodePath | null;

    getCompletionRecords(): NodePath[];

    getSibling(key: string | number): NodePath;
    getPrevSibling(): NodePath;
    getNextSibling(): NodePath;
    getAllPrevSiblings(): NodePath[];
    getAllNextSiblings(): NodePath[];

    get<K extends keyof T>(key: K, context?: boolean | TraversalContext): NodePathResult<T[K]>;
    get(key: string, context?: boolean | TraversalContext): NodePath | NodePath[];

    getBindingIdentifiers(duplicates: true): Record<string, t.Identifier[]>;
    getBindingIdentifiers(duplicates?: false): Record<string, t.Identifier>;
    getBindingIdentifiers(duplicates?: boolean): Record<string, t.Identifier | t.Identifier[]>;

    getOuterBindingIdentifiers(duplicates: true): Record<string, t.Identifier[]>;
    getOuterBindingIdentifiers(duplicates?: false): Record<string, t.Identifier>;
    getOuterBindingIdentifiers(duplicates?: boolean): Record<string, t.Identifier | t.Identifier[]>;

    getBindingIdentifierPaths(duplicates: true, outerOnly?: boolean): Record<string, Array<NodePath<t.Identifier>>>;
    getBindingIdentifierPaths(duplicates?: false, outerOnly?: boolean): Record<string, NodePath<t.Identifier>>;
    getBindingIdentifierPaths(
        duplicates?: boolean,
        outerOnly?: boolean,
    ): Record<string, NodePath<t.Identifier> | Array<NodePath<t.Identifier>>>;

    getOuterBindingIdentifierPaths(duplicates: true): Record<string, Array<NodePath<t.Identifier>>>;
    getOuterBindingIdentifierPaths(duplicates?: false): Record<string, NodePath<t.Identifier>>;
    getOuterBindingIdentifierPaths(
        duplicates?: boolean,
        outerOnly?: boolean,
    ): Record<string, NodePath<t.Identifier> | Array<NodePath<t.Identifier>>>;
    // #endregion

    // #region ------------------------- comments -------------------------
    /** Share comments amongst siblings. */
    shareCommentsWithSiblings(): void;

    addComment(type: t.CommentTypeShorthand, content: string, line?: boolean): void;

    /** Give node `comments` of the specified `type`. */
    addComments(type: t.CommentTypeShorthand, comments: t.Comment[]): void;
    // #endregion

    // #region ------------------------- isXXX -------------------------
    isAccessor(opts?: object): this is NodePath<t.Accessor>;
    isAnyTypeAnnotation(opts?: object): this is NodePath<t.AnyTypeAnnotation>;
    isArgumentPlaceholder(opts?: object): this is NodePath<t.ArgumentPlaceholder>;
    isArrayExpression(opts?: object): this is NodePath<t.ArrayExpression>;
    isArrayPattern(opts?: object): this is NodePath<t.ArrayPattern>;
    isArrayTypeAnnotation(opts?: object): this is NodePath<t.ArrayTypeAnnotation>;
    isArrowFunctionExpression(opts?: object): this is NodePath<t.ArrowFunctionExpression>;
    isAssignmentExpression(opts?: object): this is NodePath<t.AssignmentExpression>;
    isAssignmentPattern(opts?: object): this is NodePath<t.AssignmentPattern>;
    isAwaitExpression(opts?: object): this is NodePath<t.AwaitExpression>;
    isBigIntLiteral(opts?: object): this is NodePath<t.BigIntLiteral>;
    isBinary(opts?: object): this is NodePath<t.Binary>;
    isBinaryExpression(opts?: object): this is NodePath<t.BinaryExpression>;
    isBindExpression(opts?: object): this is NodePath<t.BindExpression>;
    isBlock(opts?: object): this is NodePath<t.Block>;
    isBlockParent(opts?: object): this is NodePath<t.BlockParent>;
    isBlockStatement(opts?: object): this is NodePath<t.BlockStatement>;
    isBooleanLiteral(opts?: object): this is NodePath<t.BooleanLiteral>;
    isBooleanLiteralTypeAnnotation(opts?: object): this is NodePath<t.BooleanLiteralTypeAnnotation>;
    isBooleanTypeAnnotation(opts?: object): this is NodePath<t.BooleanTypeAnnotation>;
    isBreakStatement(opts?: object): this is NodePath<t.BreakStatement>;
    isCallExpression(opts?: object): this is NodePath<t.CallExpression>;
    isCatchClause(opts?: object): this is NodePath<t.CatchClause>;
    isClass(opts?: object): this is NodePath<t.Class>;
    isClassAccessorProperty(opts?: object): this is NodePath<t.ClassAccessorProperty>;
    isClassBody(opts?: object): this is NodePath<t.ClassBody>;
    isClassDeclaration(opts?: object): this is NodePath<t.ClassDeclaration>;
    isClassExpression(opts?: object): this is NodePath<t.ClassExpression>;
    isClassImplements(opts?: object): this is NodePath<t.ClassImplements>;
    isClassMethod(opts?: object): this is NodePath<t.ClassMethod>;
    isClassPrivateMethod(opts?: object): this is NodePath<t.ClassPrivateMethod>;
    isClassPrivateProperty(opts?: object): this is NodePath<t.ClassPrivateProperty>;
    isClassProperty(opts?: object): this is NodePath<t.ClassProperty>;
    isCompletionStatement(opts?: object): this is NodePath<t.CompletionStatement>;
    isConditional(opts?: object): this is NodePath<t.Conditional>;
    isConditionalExpression(opts?: object): this is NodePath<t.ConditionalExpression>;
    isContinueStatement(opts?: object): this is NodePath<t.ContinueStatement>;
    isDebuggerStatement(opts?: object): this is NodePath<t.DebuggerStatement>;
    isDecimalLiteral(opts?: object): this is NodePath<t.DecimalLiteral>;
    isDeclaration(opts?: object): this is NodePath<t.Declaration>;
    isDeclareClass(opts?: object): this is NodePath<t.DeclareClass>;
    isDeclareExportAllDeclaration(opts?: object): this is NodePath<t.DeclareExportAllDeclaration>;
    isDeclareExportDeclaration(opts?: object): this is NodePath<t.DeclareExportDeclaration>;
    isDeclareFunction(opts?: object): this is NodePath<t.DeclareFunction>;
    isDeclareInterface(opts?: object): this is NodePath<t.DeclareInterface>;
    isDeclareModule(opts?: object): this is NodePath<t.DeclareModule>;
    isDeclareModuleExports(opts?: object): this is NodePath<t.DeclareModuleExports>;
    isDeclareOpaqueType(opts?: object): this is NodePath<t.DeclareOpaqueType>;
    isDeclareTypeAlias(opts?: object): this is NodePath<t.DeclareTypeAlias>;
    isDeclareVariable(opts?: object): this is NodePath<t.DeclareVariable>;
    isDeclaredPredicate(opts?: object): this is NodePath<t.DeclaredPredicate>;
    isDecorator(opts?: object): this is NodePath<t.Decorator>;
    isDirective(opts?: object): this is NodePath<t.Directive>;
    isDirectiveLiteral(opts?: object): this is NodePath<t.DirectiveLiteral>;
    isDoExpression(opts?: object): this is NodePath<t.DoExpression>;
    isDoWhileStatement(opts?: object): this is NodePath<t.DoWhileStatement>;
    isEmptyStatement(opts?: object): this is NodePath<t.EmptyStatement>;
    isEmptyTypeAnnotation(opts?: object): this is NodePath<t.EmptyTypeAnnotation>;
    isEnumBody(opts?: object): this is NodePath<t.EnumBody>;
    isEnumBooleanBody(opts?: object): this is NodePath<t.EnumBooleanBody>;
    isEnumBooleanMember(opts?: object): this is NodePath<t.EnumBooleanMember>;
    isEnumDeclaration(opts?: object): this is NodePath<t.EnumDeclaration>;
    isEnumDefaultedMember(opts?: object): this is NodePath<t.EnumDefaultedMember>;
    isEnumMember(opts?: object): this is NodePath<t.EnumMember>;
    isEnumNumberBody(opts?: object): this is NodePath<t.EnumNumberBody>;
    isEnumNumberMember(opts?: object): this is NodePath<t.EnumNumberMember>;
    isEnumStringBody(opts?: object): this is NodePath<t.EnumStringBody>;
    isEnumStringMember(opts?: object): this is NodePath<t.EnumStringMember>;
    isEnumSymbolBody(opts?: object): this is NodePath<t.EnumSymbolBody>;
    isExistsTypeAnnotation(opts?: object): this is NodePath<t.ExistsTypeAnnotation>;
    isExportAllDeclaration(opts?: object): this is NodePath<t.ExportAllDeclaration>;
    isExportDeclaration(opts?: object): this is NodePath<t.ExportDeclaration>;
    isExportDefaultDeclaration(opts?: object): this is NodePath<t.ExportDefaultDeclaration>;
    isExportDefaultSpecifier(opts?: object): this is NodePath<t.ExportDefaultSpecifier>;
    isExportNamedDeclaration(opts?: object): this is NodePath<t.ExportNamedDeclaration>;
    isExportNamespaceSpecifier(opts?: object): this is NodePath<t.ExportNamespaceSpecifier>;
    isExportSpecifier(opts?: object): this is NodePath<t.ExportSpecifier>;
    isExpression(opts?: object): this is NodePath<t.Expression>;
    isExpressionStatement(opts?: object): this is NodePath<t.ExpressionStatement>;
    isExpressionWrapper(opts?: object): this is NodePath<t.ExpressionWrapper>;
    isFile(opts?: object): this is NodePath<t.File>;
    isFlow(opts?: object): this is NodePath<t.Flow>;
    isFlowBaseAnnotation(opts?: object): this is NodePath<t.FlowBaseAnnotation>;
    isFlowDeclaration(opts?: object): this is NodePath<t.FlowDeclaration>;
    isFlowPredicate(opts?: object): this is NodePath<t.FlowPredicate>;
    isFlowType(opts?: object): this is NodePath<t.FlowType>;
    isFor(opts?: object): this is NodePath<t.For>;
    isForInStatement(opts?: object): this is NodePath<t.ForInStatement>;
    isForOfStatement(opts?: object): this is NodePath<t.ForOfStatement>;
    isForStatement(opts?: object): this is NodePath<t.ForStatement>;
    isForXStatement(opts?: object): this is NodePath<t.ForXStatement>;
    isFunction(opts?: object): this is NodePath<t.Function>;
    isFunctionDeclaration(opts?: object): this is NodePath<t.FunctionDeclaration>;
    isFunctionExpression(opts?: object): this is NodePath<t.FunctionExpression>;
    isFunctionParent(opts?: object): this is NodePath<t.FunctionParent>;
    isFunctionTypeAnnotation(opts?: object): this is NodePath<t.FunctionTypeAnnotation>;
    isFunctionTypeParam(opts?: object): this is NodePath<t.FunctionTypeParam>;
    isGenericTypeAnnotation(opts?: object): this is NodePath<t.GenericTypeAnnotation>;
    isIdentifier(opts?: object): this is NodePath<t.Identifier>;
    isIfStatement(opts?: object): this is NodePath<t.IfStatement>;
    isImmutable(opts?: object): this is NodePath<t.Immutable>;
    isImport(opts?: object): this is NodePath<t.Import>;
    isImportAttribute(opts?: object): this is NodePath<t.ImportAttribute>;
    isImportDeclaration(opts?: object): this is NodePath<t.ImportDeclaration>;
    isImportDefaultSpecifier(opts?: object): this is NodePath<t.ImportDefaultSpecifier>;
    isImportNamespaceSpecifier(opts?: object): this is NodePath<t.ImportNamespaceSpecifier>;
    isImportSpecifier(opts?: object): this is NodePath<t.ImportSpecifier>;
    isIndexedAccessType(opts?: object): this is NodePath<t.IndexedAccessType>;
    isInferredPredicate(opts?: object): this is NodePath<t.InferredPredicate>;
    isInterfaceDeclaration(opts?: object): this is NodePath<t.InterfaceDeclaration>;
    isInterfaceExtends(opts?: object): this is NodePath<t.InterfaceExtends>;
    isInterfaceTypeAnnotation(opts?: object): this is NodePath<t.InterfaceTypeAnnotation>;
    isInterpreterDirective(opts?: object): this is NodePath<t.InterpreterDirective>;
    isIntersectionTypeAnnotation(opts?: object): this is NodePath<t.IntersectionTypeAnnotation>;
    isJSX(opts?: object): this is NodePath<t.JSX>;
    isJSXAttribute(opts?: object): this is NodePath<t.JSXAttribute>;
    isJSXClosingElement(opts?: object): this is NodePath<t.JSXClosingElement>;
    isJSXClosingFragment(opts?: object): this is NodePath<t.JSXClosingFragment>;
    isJSXElement(opts?: object): this is NodePath<t.JSXElement>;
    isJSXEmptyExpression(opts?: object): this is NodePath<t.JSXEmptyExpression>;
    isJSXExpressionContainer(opts?: object): this is NodePath<t.JSXExpressionContainer>;
    isJSXFragment(opts?: object): this is NodePath<t.JSXFragment>;
    isJSXIdentifier(opts?: object): this is NodePath<t.JSXIdentifier>;
    isJSXMemberExpression(opts?: object): this is NodePath<t.JSXMemberExpression>;
    isJSXNamespacedName(opts?: object): this is NodePath<t.JSXNamespacedName>;
    isJSXOpeningElement(opts?: object): this is NodePath<t.JSXOpeningElement>;
    isJSXOpeningFragment(opts?: object): this is NodePath<t.JSXOpeningFragment>;
    isJSXSpreadAttribute(opts?: object): this is NodePath<t.JSXSpreadAttribute>;
    isJSXSpreadChild(opts?: object): this is NodePath<t.JSXSpreadChild>;
    isJSXText(opts?: object): this is NodePath<t.JSXText>;
    isLVal(opts?: object): this is NodePath<t.LVal>;
    isLabeledStatement(opts?: object): this is NodePath<t.LabeledStatement>;
    isLiteral(opts?: object): this is NodePath<t.Literal>;
    isLogicalExpression(opts?: object): this is NodePath<t.LogicalExpression>;
    isLoop(opts?: object): this is NodePath<t.Loop>;
    isMemberExpression(opts?: object): this is NodePath<t.MemberExpression>;
    isMetaProperty(opts?: object): this is NodePath<t.MetaProperty>;
    isMethod(opts?: object): this is NodePath<t.Method>;
    isMiscellaneous(opts?: object): this is NodePath<t.Miscellaneous>;
    isMixedTypeAnnotation(opts?: object): this is NodePath<t.MixedTypeAnnotation>;
    isModuleDeclaration(opts?: object): this is NodePath<t.ModuleDeclaration>;
    isModuleExpression(opts?: object): this is NodePath<t.ModuleExpression>;
    isModuleSpecifier(opts?: object): this is NodePath<t.ModuleSpecifier>;
    isNewExpression(opts?: object): this is NodePath<t.NewExpression>;
    isNoop(opts?: object): this is NodePath<t.Noop>;
    isNullLiteral(opts?: object): this is NodePath<t.NullLiteral>;
    isNullLiteralTypeAnnotation(opts?: object): this is NodePath<t.NullLiteralTypeAnnotation>;
    isNullableTypeAnnotation(opts?: object): this is NodePath<t.NullableTypeAnnotation>;

    /** @deprecated Use `isNumericLiteral` */
    isNumberLiteral(opts?: object): this is NodePath<t.NumberLiteral>;
    isNumberLiteralTypeAnnotation(opts?: object): this is NodePath<t.NumberLiteralTypeAnnotation>;
    isNumberTypeAnnotation(opts?: object): this is NodePath<t.NumberTypeAnnotation>;
    isNumericLiteral(opts?: object): this is NodePath<t.NumericLiteral>;
    isObjectExpression(opts?: object): this is NodePath<t.ObjectExpression>;
    isObjectMember(opts?: object): this is NodePath<t.ObjectMember>;
    isObjectMethod(opts?: object): this is NodePath<t.ObjectMethod>;
    isObjectPattern(opts?: object): this is NodePath<t.ObjectPattern>;
    isObjectProperty(opts?: object): this is NodePath<t.ObjectProperty>;
    isObjectTypeAnnotation(opts?: object): this is NodePath<t.ObjectTypeAnnotation>;
    isObjectTypeCallProperty(opts?: object): this is NodePath<t.ObjectTypeCallProperty>;
    isObjectTypeIndexer(opts?: object): this is NodePath<t.ObjectTypeIndexer>;
    isObjectTypeInternalSlot(opts?: object): this is NodePath<t.ObjectTypeInternalSlot>;
    isObjectTypeProperty(opts?: object): this is NodePath<t.ObjectTypeProperty>;
    isObjectTypeSpreadProperty(opts?: object): this is NodePath<t.ObjectTypeSpreadProperty>;
    isOpaqueType(opts?: object): this is NodePath<t.OpaqueType>;
    isOptionalCallExpression(opts?: object): this is NodePath<t.OptionalCallExpression>;
    isOptionalIndexedAccessType(opts?: object): this is NodePath<t.OptionalIndexedAccessType>;
    isOptionalMemberExpression(opts?: object): this is NodePath<t.OptionalMemberExpression>;
    isParenthesizedExpression(opts?: object): this is NodePath<t.ParenthesizedExpression>;
    isPattern(opts?: object): this is NodePath<t.Pattern>;
    isPatternLike(opts?: object): this is NodePath<t.PatternLike>;
    isPipelineBareFunction(opts?: object): this is NodePath<t.PipelineBareFunction>;
    isPipelinePrimaryTopicReference(opts?: object): this is NodePath<t.PipelinePrimaryTopicReference>;
    isPipelineTopicExpression(opts?: object): this is NodePath<t.PipelineTopicExpression>;
    isPlaceholder(opts?: object): this is NodePath<t.Placeholder>;
    isPrivate(opts?: object): this is NodePath<t.Private>;
    isPrivateName(opts?: object): this is NodePath<t.PrivateName>;
    isProgram(opts?: object): this is NodePath<t.Program>;
    isProperty(opts?: object): this is NodePath<t.Property>;
    isPureish(opts?: object): this is NodePath<t.Pureish>;
    isQualifiedTypeIdentifier(opts?: object): this is NodePath<t.QualifiedTypeIdentifier>;
    isRecordExpression(opts?: object): this is NodePath<t.RecordExpression>;
    isRegExpLiteral(opts?: object): this is NodePath<t.RegExpLiteral>;

    /** @deprecated Use `isRegExpLiteral` */
    isRegexLiteral(opts?: object): this is NodePath<t.RegexLiteral>;
    isRestElement(opts?: object): this is NodePath<t.RestElement>;

    /** @deprecated Use `isRestElement` */
    isRestProperty(opts?: object): this is NodePath<t.RestProperty>;
    isReturnStatement(opts?: object): this is NodePath<t.ReturnStatement>;
    isScopable(opts?: object): this is NodePath<t.Scopable>;
    isSequenceExpression(opts?: object): this is NodePath<t.SequenceExpression>;
    isSpreadElement(opts?: object): this is NodePath<t.SpreadElement>;

    /** @deprecated Use `isSpreadElement` */
    isSpreadProperty(opts?: object): this is NodePath<t.SpreadProperty>;
    isStandardized(opts?: object): this is NodePath<t.Standardized>;
    isStatement(opts?: object): this is NodePath<t.Statement>;
    isStaticBlock(opts?: object): this is NodePath<t.StaticBlock>;
    isStringLiteral(opts?: object): this is NodePath<t.StringLiteral>;
    isStringLiteralTypeAnnotation(opts?: object): this is NodePath<t.StringLiteralTypeAnnotation>;
    isStringTypeAnnotation(opts?: object): this is NodePath<t.StringTypeAnnotation>;
    isSuper(opts?: object): this is NodePath<t.Super>;
    isSwitchCase(opts?: object): this is NodePath<t.SwitchCase>;
    isSwitchStatement(opts?: object): this is NodePath<t.SwitchStatement>;
    isSymbolTypeAnnotation(opts?: object): this is NodePath<t.SymbolTypeAnnotation>;
    isTSAnyKeyword(opts?: object): this is NodePath<t.TSAnyKeyword>;
    isTSArrayType(opts?: object): this is NodePath<t.TSArrayType>;
    isTSAsExpression(opts?: object): this is NodePath<t.TSAsExpression>;
    isTSBaseType(opts?: object): this is NodePath<t.TSBaseType>;
    isTSBigIntKeyword(opts?: object): this is NodePath<t.TSBigIntKeyword>;
    isTSBooleanKeyword(opts?: object): this is NodePath<t.TSBooleanKeyword>;
    isTSCallSignatureDeclaration(opts?: object): this is NodePath<t.TSCallSignatureDeclaration>;
    isTSConditionalType(opts?: object): this is NodePath<t.TSConditionalType>;
    isTSConstructSignatureDeclaration(opts?: object): this is NodePath<t.TSConstructSignatureDeclaration>;
    isTSConstructorType(opts?: object): this is NodePath<t.TSConstructorType>;
    isTSDeclareFunction(opts?: object): this is NodePath<t.TSDeclareFunction>;
    isTSDeclareMethod(opts?: object): this is NodePath<t.TSDeclareMethod>;
    isTSEntityName(opts?: object): this is NodePath<t.TSEntityName>;
    isTSEnumDeclaration(opts?: object): this is NodePath<t.TSEnumDeclaration>;
    isTSEnumMember(opts?: object): this is NodePath<t.TSEnumMember>;
    isTSExportAssignment(opts?: object): this is NodePath<t.TSExportAssignment>;
    isTSExpressionWithTypeArguments(opts?: object): this is NodePath<t.TSExpressionWithTypeArguments>;
    isTSExternalModuleReference(opts?: object): this is NodePath<t.TSExternalModuleReference>;
    isTSFunctionType(opts?: object): this is NodePath<t.TSFunctionType>;
    isTSImportEqualsDeclaration(opts?: object): this is NodePath<t.TSImportEqualsDeclaration>;
    isTSImportType(opts?: object): this is NodePath<t.TSImportType>;
    isTSIndexSignature(opts?: object): this is NodePath<t.TSIndexSignature>;
    isTSIndexedAccessType(opts?: object): this is NodePath<t.TSIndexedAccessType>;
    isTSInferType(opts?: object): this is NodePath<t.TSInferType>;
    isTSInstantiationExpression(opts?: object): this is NodePath<t.TSInstantiationExpression>;
    isTSInterfaceBody(opts?: object): this is NodePath<t.TSInterfaceBody>;
    isTSInterfaceDeclaration(opts?: object): this is NodePath<t.TSInterfaceDeclaration>;
    isTSIntersectionType(opts?: object): this is NodePath<t.TSIntersectionType>;
    isTSIntrinsicKeyword(opts?: object): this is NodePath<t.TSIntrinsicKeyword>;
    isTSLiteralType(opts?: object): this is NodePath<t.TSLiteralType>;
    isTSMappedType(opts?: object): this is NodePath<t.TSMappedType>;
    isTSMethodSignature(opts?: object): this is NodePath<t.TSMethodSignature>;
    isTSModuleBlock(opts?: object): this is NodePath<t.TSModuleBlock>;
    isTSModuleDeclaration(opts?: object): this is NodePath<t.TSModuleDeclaration>;
    isTSNamedTupleMember(opts?: object): this is NodePath<t.TSNamedTupleMember>;
    isTSNamespaceExportDeclaration(opts?: object): this is NodePath<t.TSNamespaceExportDeclaration>;
    isTSNeverKeyword(opts?: object): this is NodePath<t.TSNeverKeyword>;
    isTSNonNullExpression(opts?: object): this is NodePath<t.TSNonNullExpression>;
    isTSNullKeyword(opts?: object): this is NodePath<t.TSNullKeyword>;
    isTSNumberKeyword(opts?: object): this is NodePath<t.TSNumberKeyword>;
    isTSObjectKeyword(opts?: object): this is NodePath<t.TSObjectKeyword>;
    isTSOptionalType(opts?: object): this is NodePath<t.TSOptionalType>;
    isTSParameterProperty(opts?: object): this is NodePath<t.TSParameterProperty>;
    isTSParenthesizedType(opts?: object): this is NodePath<t.TSParenthesizedType>;
    isTSPropertySignature(opts?: object): this is NodePath<t.TSPropertySignature>;
    isTSQualifiedName(opts?: object): this is NodePath<t.TSQualifiedName>;
    isTSRestType(opts?: object): this is NodePath<t.TSRestType>;
    isTSSatisfiesExpression(opts?: object): this is NodePath<t.TSSatisfiesExpression>;
    isTSStringKeyword(opts?: object): this is NodePath<t.TSStringKeyword>;
    isTSSymbolKeyword(opts?: object): this is NodePath<t.TSSymbolKeyword>;
    isTSThisType(opts?: object): this is NodePath<t.TSThisType>;
    isTSTupleType(opts?: object): this is NodePath<t.TSTupleType>;
    isTSType(opts?: object): this is NodePath<t.TSType>;
    isTSTypeAliasDeclaration(opts?: object): this is NodePath<t.TSTypeAliasDeclaration>;
    isTSTypeAnnotation(opts?: object): this is NodePath<t.TSTypeAnnotation>;
    isTSTypeAssertion(opts?: object): this is NodePath<t.TSTypeAssertion>;
    isTSTypeElement(opts?: object): this is NodePath<t.TSTypeElement>;
    isTSTypeLiteral(opts?: object): this is NodePath<t.TSTypeLiteral>;
    isTSTypeOperator(opts?: object): this is NodePath<t.TSTypeOperator>;
    isTSTypeParameter(opts?: object): this is NodePath<t.TSTypeParameter>;
    isTSTypeParameterDeclaration(opts?: object): this is NodePath<t.TSTypeParameterDeclaration>;
    isTSTypeParameterInstantiation(opts?: object): this is NodePath<t.TSTypeParameterInstantiation>;
    isTSTypePredicate(opts?: object): this is NodePath<t.TSTypePredicate>;
    isTSTypeQuery(opts?: object): this is NodePath<t.TSTypeQuery>;
    isTSTypeReference(opts?: object): this is NodePath<t.TSTypeReference>;
    isTSUndefinedKeyword(opts?: object): this is NodePath<t.TSUndefinedKeyword>;
    isTSUnionType(opts?: object): this is NodePath<t.TSUnionType>;
    isTSUnknownKeyword(opts?: object): this is NodePath<t.TSUnknownKeyword>;
    isTSVoidKeyword(opts?: object): this is NodePath<t.TSVoidKeyword>;
    isTaggedTemplateExpression(opts?: object): this is NodePath<t.TaggedTemplateExpression>;
    isTemplateElement(opts?: object): this is NodePath<t.TemplateElement>;
    isTemplateLiteral(opts?: object): this is NodePath<t.TemplateLiteral>;
    isTerminatorless(opts?: object): this is NodePath<t.Terminatorless>;
    isThisExpression(opts?: object): this is NodePath<t.ThisExpression>;
    isThisTypeAnnotation(opts?: object): this is NodePath<t.ThisTypeAnnotation>;
    isThrowStatement(opts?: object): this is NodePath<t.ThrowStatement>;
    isTopicReference(opts?: object): this is NodePath<t.TopicReference>;
    isTryStatement(opts?: object): this is NodePath<t.TryStatement>;
    isTupleExpression(opts?: object): this is NodePath<t.TupleExpression>;
    isTupleTypeAnnotation(opts?: object): this is NodePath<t.TupleTypeAnnotation>;
    isTypeAlias(opts?: object): this is NodePath<t.TypeAlias>;
    isTypeAnnotation(opts?: object): this is NodePath<t.TypeAnnotation>;
    isTypeCastExpression(opts?: object): this is NodePath<t.TypeCastExpression>;
    isTypeParameter(opts?: object): this is NodePath<t.TypeParameter>;
    isTypeParameterDeclaration(opts?: object): this is NodePath<t.TypeParameterDeclaration>;
    isTypeParameterInstantiation(opts?: object): this is NodePath<t.TypeParameterInstantiation>;
    isTypeScript(opts?: object): this is NodePath<t.TypeScript>;
    isTypeofTypeAnnotation(opts?: object): this is NodePath<t.TypeofTypeAnnotation>;
    isUnaryExpression(opts?: object): this is NodePath<t.UnaryExpression>;
    isUnaryLike(opts?: object): this is NodePath<t.UnaryLike>;
    isUnionTypeAnnotation(opts?: object): this is NodePath<t.UnionTypeAnnotation>;
    isUpdateExpression(opts?: object): this is NodePath<t.UpdateExpression>;
    isUserWhitespacable(opts?: object): this is NodePath<t.UserWhitespacable>;
    isV8IntrinsicIdentifier(opts?: object): this is NodePath<t.V8IntrinsicIdentifier>;
    isVariableDeclaration(opts?: object): this is NodePath<t.VariableDeclaration>;
    isVariableDeclarator(opts?: object): this is NodePath<t.VariableDeclarator>;
    isVariance(opts?: object): this is NodePath<t.Variance>;
    isVoidTypeAnnotation(opts?: object): this is NodePath<t.VoidTypeAnnotation>;
    isWhile(opts?: object): this is NodePath<t.While>;
    isWhileStatement(opts?: object): this is NodePath<t.WhileStatement>;
    isWithStatement(opts?: object): this is NodePath<t.WithStatement>;
    isYieldExpression(opts?: object): this is NodePath<t.YieldExpression>;

    isBindingIdentifier(opts?: object): this is NodePath<VirtualTypeAliases["BindingIdentifier"]>;
    isBlockScoped(opts?: object): this is NodePath<t.FunctionDeclaration | t.ClassDeclaration | t.VariableDeclaration>;

    /** @deprecated */
    isExistentialTypeParam(opts?: object): this is NodePath<VirtualTypeAliases["ExistentialTypeParam"]>;
    isForAwaitStatement(opts?: object): this is NodePath<VirtualTypeAliases["ForAwaitStatement"]>;
    isGenerated(opts?: object): boolean;

    /** @deprecated */
    isNumericLiteralTypeAnnotation(opts?: object): void;
    isPure(opts?: object): boolean;
    isReferenced(opts?: object): boolean;
    isReferencedIdentifier(opts?: object): this is NodePath<VirtualTypeAliases["ReferencedIdentifier"]>;
    isReferencedMemberExpression(opts?: object): this is NodePath<VirtualTypeAliases["ReferencedMemberExpression"]>;
    isScope(opts?: object): this is NodePath<VirtualTypeAliases["Scope"]>;
    isUser(opts?: object): boolean;
    isVar(opts?: object): this is NodePath<VirtualTypeAliases["Var"]>;
    // #endregion

    // #region ------------------------- assertXXX -------------------------
    assertAccessor(opts?: object): asserts this is NodePath<t.Accessor>;
    assertAnyTypeAnnotation(opts?: object): asserts this is NodePath<t.AnyTypeAnnotation>;
    assertArgumentPlaceholder(opts?: object): asserts this is NodePath<t.ArgumentPlaceholder>;
    assertArrayExpression(opts?: object): asserts this is NodePath<t.ArrayExpression>;
    assertArrayPattern(opts?: object): asserts this is NodePath<t.ArrayPattern>;
    assertArrayTypeAnnotation(opts?: object): asserts this is NodePath<t.ArrayTypeAnnotation>;
    assertArrowFunctionExpression(opts?: object): asserts this is NodePath<t.ArrowFunctionExpression>;
    assertAssignmentExpression(opts?: object): asserts this is NodePath<t.AssignmentExpression>;
    assertAssignmentPattern(opts?: object): asserts this is NodePath<t.AssignmentPattern>;
    assertAwaitExpression(opts?: object): asserts this is NodePath<t.AwaitExpression>;
    assertBigIntLiteral(opts?: object): asserts this is NodePath<t.BigIntLiteral>;
    assertBinary(opts?: object): asserts this is NodePath<t.Binary>;
    assertBinaryExpression(opts?: object): asserts this is NodePath<t.BinaryExpression>;
    assertBindExpression(opts?: object): asserts this is NodePath<t.BindExpression>;
    assertBlock(opts?: object): asserts this is NodePath<t.Block>;
    assertBlockParent(opts?: object): asserts this is NodePath<t.BlockParent>;
    assertBlockStatement(opts?: object): asserts this is NodePath<t.BlockStatement>;
    assertBooleanLiteral(opts?: object): asserts this is NodePath<t.BooleanLiteral>;
    assertBooleanLiteralTypeAnnotation(opts?: object): asserts this is NodePath<t.BooleanLiteralTypeAnnotation>;
    assertBooleanTypeAnnotation(opts?: object): asserts this is NodePath<t.BooleanTypeAnnotation>;
    assertBreakStatement(opts?: object): asserts this is NodePath<t.BreakStatement>;
    assertCallExpression(opts?: object): asserts this is NodePath<t.CallExpression>;
    assertCatchClause(opts?: object): asserts this is NodePath<t.CatchClause>;
    assertClass(opts?: object): asserts this is NodePath<t.Class>;
    assertClassAccessorProperty(opts?: object): asserts this is NodePath<t.ClassAccessorProperty>;
    assertClassBody(opts?: object): asserts this is NodePath<t.ClassBody>;
    assertClassDeclaration(opts?: object): asserts this is NodePath<t.ClassDeclaration>;
    assertClassExpression(opts?: object): asserts this is NodePath<t.ClassExpression>;
    assertClassImplements(opts?: object): asserts this is NodePath<t.ClassImplements>;
    assertClassMethod(opts?: object): asserts this is NodePath<t.ClassMethod>;
    assertClassPrivateMethod(opts?: object): asserts this is NodePath<t.ClassPrivateMethod>;
    assertClassPrivateProperty(opts?: object): asserts this is NodePath<t.ClassPrivateProperty>;
    assertClassProperty(opts?: object): asserts this is NodePath<t.ClassProperty>;
    assertCompletionStatement(opts?: object): asserts this is NodePath<t.CompletionStatement>;
    assertConditional(opts?: object): asserts this is NodePath<t.Conditional>;
    assertConditionalExpression(opts?: object): asserts this is NodePath<t.ConditionalExpression>;
    assertContinueStatement(opts?: object): asserts this is NodePath<t.ContinueStatement>;
    assertDebuggerStatement(opts?: object): asserts this is NodePath<t.DebuggerStatement>;
    assertDecimalLiteral(opts?: object): asserts this is NodePath<t.DecimalLiteral>;
    assertDeclaration(opts?: object): asserts this is NodePath<t.Declaration>;
    assertDeclareClass(opts?: object): asserts this is NodePath<t.DeclareClass>;
    assertDeclareExportAllDeclaration(opts?: object): asserts this is NodePath<t.DeclareExportAllDeclaration>;
    assertDeclareExportDeclaration(opts?: object): asserts this is NodePath<t.DeclareExportDeclaration>;
    assertDeclareFunction(opts?: object): asserts this is NodePath<t.DeclareFunction>;
    assertDeclareInterface(opts?: object): asserts this is NodePath<t.DeclareInterface>;
    assertDeclareModule(opts?: object): asserts this is NodePath<t.DeclareModule>;
    assertDeclareModuleExports(opts?: object): asserts this is NodePath<t.DeclareModuleExports>;
    assertDeclareOpaqueType(opts?: object): asserts this is NodePath<t.DeclareOpaqueType>;
    assertDeclareTypeAlias(opts?: object): asserts this is NodePath<t.DeclareTypeAlias>;
    assertDeclareVariable(opts?: object): asserts this is NodePath<t.DeclareVariable>;
    assertDeclaredPredicate(opts?: object): asserts this is NodePath<t.DeclaredPredicate>;
    assertDecorator(opts?: object): asserts this is NodePath<t.Decorator>;
    assertDirective(opts?: object): asserts this is NodePath<t.Directive>;
    assertDirectiveLiteral(opts?: object): asserts this is NodePath<t.DirectiveLiteral>;
    assertDoExpression(opts?: object): asserts this is NodePath<t.DoExpression>;
    assertDoWhileStatement(opts?: object): asserts this is NodePath<t.DoWhileStatement>;
    assertEmptyStatement(opts?: object): asserts this is NodePath<t.EmptyStatement>;
    assertEmptyTypeAnnotation(opts?: object): asserts this is NodePath<t.EmptyTypeAnnotation>;
    assertEnumBody(opts?: object): asserts this is NodePath<t.EnumBody>;
    assertEnumBooleanBody(opts?: object): asserts this is NodePath<t.EnumBooleanBody>;
    assertEnumBooleanMember(opts?: object): asserts this is NodePath<t.EnumBooleanMember>;
    assertEnumDeclaration(opts?: object): asserts this is NodePath<t.EnumDeclaration>;
    assertEnumDefaultedMember(opts?: object): asserts this is NodePath<t.EnumDefaultedMember>;
    assertEnumMember(opts?: object): asserts this is NodePath<t.EnumMember>;
    assertEnumNumberBody(opts?: object): asserts this is NodePath<t.EnumNumberBody>;
    assertEnumNumberMember(opts?: object): asserts this is NodePath<t.EnumNumberMember>;
    assertEnumStringBody(opts?: object): asserts this is NodePath<t.EnumStringBody>;
    assertEnumStringMember(opts?: object): asserts this is NodePath<t.EnumStringMember>;
    assertEnumSymbolBody(opts?: object): asserts this is NodePath<t.EnumSymbolBody>;
    assertExistsTypeAnnotation(opts?: object): asserts this is NodePath<t.ExistsTypeAnnotation>;
    assertExportAllDeclaration(opts?: object): asserts this is NodePath<t.ExportAllDeclaration>;
    assertExportDeclaration(opts?: object): asserts this is NodePath<t.ExportDeclaration>;
    assertExportDefaultDeclaration(opts?: object): asserts this is NodePath<t.ExportDefaultDeclaration>;
    assertExportDefaultSpecifier(opts?: object): asserts this is NodePath<t.ExportDefaultSpecifier>;
    assertExportNamedDeclaration(opts?: object): asserts this is NodePath<t.ExportNamedDeclaration>;
    assertExportNamespaceSpecifier(opts?: object): asserts this is NodePath<t.ExportNamespaceSpecifier>;
    assertExportSpecifier(opts?: object): asserts this is NodePath<t.ExportSpecifier>;
    assertExpression(opts?: object): asserts this is NodePath<t.Expression>;
    assertExpressionStatement(opts?: object): asserts this is NodePath<t.ExpressionStatement>;
    assertExpressionWrapper(opts?: object): asserts this is NodePath<t.ExpressionWrapper>;
    assertFile(opts?: object): asserts this is NodePath<t.File>;
    assertFlow(opts?: object): asserts this is NodePath<t.Flow>;
    assertFlowBaseAnnotation(opts?: object): asserts this is NodePath<t.FlowBaseAnnotation>;
    assertFlowDeclaration(opts?: object): asserts this is NodePath<t.FlowDeclaration>;
    assertFlowPredicate(opts?: object): asserts this is NodePath<t.FlowPredicate>;
    assertFlowType(opts?: object): asserts this is NodePath<t.FlowType>;
    assertFor(opts?: object): asserts this is NodePath<t.For>;
    assertForInStatement(opts?: object): asserts this is NodePath<t.ForInStatement>;
    assertForOfStatement(opts?: object): asserts this is NodePath<t.ForOfStatement>;
    assertForStatement(opts?: object): asserts this is NodePath<t.ForStatement>;
    assertForXStatement(opts?: object): asserts this is NodePath<t.ForXStatement>;
    assertFunction(opts?: object): asserts this is NodePath<t.Function>;
    assertFunctionDeclaration(opts?: object): asserts this is NodePath<t.FunctionDeclaration>;
    assertFunctionExpression(opts?: object): asserts this is NodePath<t.FunctionExpression>;
    assertFunctionParent(opts?: object): asserts this is NodePath<t.FunctionParent>;
    assertFunctionTypeAnnotation(opts?: object): asserts this is NodePath<t.FunctionTypeAnnotation>;
    assertFunctionTypeParam(opts?: object): asserts this is NodePath<t.FunctionTypeParam>;
    assertGenericTypeAnnotation(opts?: object): asserts this is NodePath<t.GenericTypeAnnotation>;
    assertIdentifier(opts?: object): asserts this is NodePath<t.Identifier>;
    assertIfStatement(opts?: object): asserts this is NodePath<t.IfStatement>;
    assertImmutable(opts?: object): asserts this is NodePath<t.Immutable>;
    assertImport(opts?: object): asserts this is NodePath<t.Import>;
    assertImportAttribute(opts?: object): asserts this is NodePath<t.ImportAttribute>;
    assertImportDeclaration(opts?: object): asserts this is NodePath<t.ImportDeclaration>;
    assertImportDefaultSpecifier(opts?: object): asserts this is NodePath<t.ImportDefaultSpecifier>;
    assertImportNamespaceSpecifier(opts?: object): asserts this is NodePath<t.ImportNamespaceSpecifier>;
    assertImportSpecifier(opts?: object): asserts this is NodePath<t.ImportSpecifier>;
    assertIndexedAccessType(opts?: object): asserts this is NodePath<t.IndexedAccessType>;
    assertInferredPredicate(opts?: object): asserts this is NodePath<t.InferredPredicate>;
    assertInterfaceDeclaration(opts?: object): asserts this is NodePath<t.InterfaceDeclaration>;
    assertInterfaceExtends(opts?: object): asserts this is NodePath<t.InterfaceExtends>;
    assertInterfaceTypeAnnotation(opts?: object): asserts this is NodePath<t.InterfaceTypeAnnotation>;
    assertInterpreterDirective(opts?: object): asserts this is NodePath<t.InterpreterDirective>;
    assertIntersectionTypeAnnotation(opts?: object): asserts this is NodePath<t.IntersectionTypeAnnotation>;
    assertJSX(opts?: object): asserts this is NodePath<t.JSX>;
    assertJSXAttribute(opts?: object): asserts this is NodePath<t.JSXAttribute>;
    assertJSXClosingElement(opts?: object): asserts this is NodePath<t.JSXClosingElement>;
    assertJSXClosingFragment(opts?: object): asserts this is NodePath<t.JSXClosingFragment>;
    assertJSXElement(opts?: object): asserts this is NodePath<t.JSXElement>;
    assertJSXEmptyExpression(opts?: object): asserts this is NodePath<t.JSXEmptyExpression>;
    assertJSXExpressionContainer(opts?: object): asserts this is NodePath<t.JSXExpressionContainer>;
    assertJSXFragment(opts?: object): asserts this is NodePath<t.JSXFragment>;
    assertJSXIdentifier(opts?: object): asserts this is NodePath<t.JSXIdentifier>;
    assertJSXMemberExpression(opts?: object): asserts this is NodePath<t.JSXMemberExpression>;
    assertJSXNamespacedName(opts?: object): asserts this is NodePath<t.JSXNamespacedName>;
    assertJSXOpeningElement(opts?: object): asserts this is NodePath<t.JSXOpeningElement>;
    assertJSXOpeningFragment(opts?: object): asserts this is NodePath<t.JSXOpeningFragment>;
    assertJSXSpreadAttribute(opts?: object): asserts this is NodePath<t.JSXSpreadAttribute>;
    assertJSXSpreadChild(opts?: object): asserts this is NodePath<t.JSXSpreadChild>;
    assertJSXText(opts?: object): asserts this is NodePath<t.JSXText>;
    assertLVal(opts?: object): asserts this is NodePath<t.LVal>;
    assertLabeledStatement(opts?: object): asserts this is NodePath<t.LabeledStatement>;
    assertLiteral(opts?: object): asserts this is NodePath<t.Literal>;
    assertLogicalExpression(opts?: object): asserts this is NodePath<t.LogicalExpression>;
    assertLoop(opts?: object): asserts this is NodePath<t.Loop>;
    assertMemberExpression(opts?: object): asserts this is NodePath<t.MemberExpression>;
    assertMetaProperty(opts?: object): asserts this is NodePath<t.MetaProperty>;
    assertMethod(opts?: object): asserts this is NodePath<t.Method>;
    assertMiscellaneous(opts?: object): asserts this is NodePath<t.Miscellaneous>;
    assertMixedTypeAnnotation(opts?: object): asserts this is NodePath<t.MixedTypeAnnotation>;
    assertModuleDeclaration(opts?: object): asserts this is NodePath<t.ModuleDeclaration>;
    assertModuleExpression(opts?: object): asserts this is NodePath<t.ModuleExpression>;
    assertModuleSpecifier(opts?: object): asserts this is NodePath<t.ModuleSpecifier>;
    assertNewExpression(opts?: object): asserts this is NodePath<t.NewExpression>;
    assertNoop(opts?: object): asserts this is NodePath<t.Noop>;
    assertNullLiteral(opts?: object): asserts this is NodePath<t.NullLiteral>;
    assertNullLiteralTypeAnnotation(opts?: object): asserts this is NodePath<t.NullLiteralTypeAnnotation>;
    assertNullableTypeAnnotation(opts?: object): asserts this is NodePath<t.NullableTypeAnnotation>;

    /** @deprecated Use `assertNumericLiteral` */
    assertNumberLiteral(opts?: object): asserts this is NodePath<t.NumberLiteral>;
    assertNumberLiteralTypeAnnotation(opts?: object): asserts this is NodePath<t.NumberLiteralTypeAnnotation>;
    assertNumberTypeAnnotation(opts?: object): asserts this is NodePath<t.NumberTypeAnnotation>;
    assertNumericLiteral(opts?: object): asserts this is NodePath<t.NumericLiteral>;
    assertObjectExpression(opts?: object): asserts this is NodePath<t.ObjectExpression>;
    assertObjectMember(opts?: object): asserts this is NodePath<t.ObjectMember>;
    assertObjectMethod(opts?: object): asserts this is NodePath<t.ObjectMethod>;
    assertObjectPattern(opts?: object): asserts this is NodePath<t.ObjectPattern>;
    assertObjectProperty(opts?: object): asserts this is NodePath<t.ObjectProperty>;
    assertObjectTypeAnnotation(opts?: object): asserts this is NodePath<t.ObjectTypeAnnotation>;
    assertObjectTypeCallProperty(opts?: object): asserts this is NodePath<t.ObjectTypeCallProperty>;
    assertObjectTypeIndexer(opts?: object): asserts this is NodePath<t.ObjectTypeIndexer>;
    assertObjectTypeInternalSlot(opts?: object): asserts this is NodePath<t.ObjectTypeInternalSlot>;
    assertObjectTypeProperty(opts?: object): asserts this is NodePath<t.ObjectTypeProperty>;
    assertObjectTypeSpreadProperty(opts?: object): asserts this is NodePath<t.ObjectTypeSpreadProperty>;
    assertOpaqueType(opts?: object): asserts this is NodePath<t.OpaqueType>;
    assertOptionalCallExpression(opts?: object): asserts this is NodePath<t.OptionalCallExpression>;
    assertOptionalIndexedAccessType(opts?: object): asserts this is NodePath<t.OptionalIndexedAccessType>;
    assertOptionalMemberExpression(opts?: object): asserts this is NodePath<t.OptionalMemberExpression>;
    assertParenthesizedExpression(opts?: object): asserts this is NodePath<t.ParenthesizedExpression>;
    assertPattern(opts?: object): asserts this is NodePath<t.Pattern>;
    assertPatternLike(opts?: object): asserts this is NodePath<t.PatternLike>;
    assertPipelineBareFunction(opts?: object): asserts this is NodePath<t.PipelineBareFunction>;
    assertPipelinePrimaryTopicReference(opts?: object): asserts this is NodePath<t.PipelinePrimaryTopicReference>;
    assertPipelineTopicExpression(opts?: object): asserts this is NodePath<t.PipelineTopicExpression>;
    assertPlaceholder(opts?: object): asserts this is NodePath<t.Placeholder>;
    assertPrivate(opts?: object): asserts this is NodePath<t.Private>;
    assertPrivateName(opts?: object): asserts this is NodePath<t.PrivateName>;
    assertProgram(opts?: object): asserts this is NodePath<t.Program>;
    assertProperty(opts?: object): asserts this is NodePath<t.Property>;
    assertPureish(opts?: object): asserts this is NodePath<t.Pureish>;
    assertQualifiedTypeIdentifier(opts?: object): asserts this is NodePath<t.QualifiedTypeIdentifier>;
    assertRecordExpression(opts?: object): asserts this is NodePath<t.RecordExpression>;
    assertRegExpLiteral(opts?: object): asserts this is NodePath<t.RegExpLiteral>;

    /** @deprecated Use `assertRegExpLiteral` */
    assertRegexLiteral(opts?: object): asserts this is NodePath<t.RegexLiteral>;
    assertRestElement(opts?: object): asserts this is NodePath<t.RestElement>;

    /** @deprecated Use `assertRestElement` */
    assertRestProperty(opts?: object): asserts this is NodePath<t.RestProperty>;
    assertReturnStatement(opts?: object): asserts this is NodePath<t.ReturnStatement>;
    assertScopable(opts?: object): asserts this is NodePath<t.Scopable>;
    assertSequenceExpression(opts?: object): asserts this is NodePath<t.SequenceExpression>;
    assertSpreadElement(opts?: object): asserts this is NodePath<t.SpreadElement>;

    /** @deprecated Use `assertSpreadElement` */
    assertSpreadProperty(opts?: object): asserts this is NodePath<t.SpreadProperty>;
    assertStandardized(opts?: object): asserts this is NodePath<t.Standardized>;
    assertStatement(opts?: object): asserts this is NodePath<t.Statement>;
    assertStaticBlock(opts?: object): asserts this is NodePath<t.StaticBlock>;
    assertStringLiteral(opts?: object): asserts this is NodePath<t.StringLiteral>;
    assertStringLiteralTypeAnnotation(opts?: object): asserts this is NodePath<t.StringLiteralTypeAnnotation>;
    assertStringTypeAnnotation(opts?: object): asserts this is NodePath<t.StringTypeAnnotation>;
    assertSuper(opts?: object): asserts this is NodePath<t.Super>;
    assertSwitchCase(opts?: object): asserts this is NodePath<t.SwitchCase>;
    assertSwitchStatement(opts?: object): asserts this is NodePath<t.SwitchStatement>;
    assertSymbolTypeAnnotation(opts?: object): asserts this is NodePath<t.SymbolTypeAnnotation>;
    assertTSAnyKeyword(opts?: object): asserts this is NodePath<t.TSAnyKeyword>;
    assertTSArrayType(opts?: object): asserts this is NodePath<t.TSArrayType>;
    assertTSAsExpression(opts?: object): asserts this is NodePath<t.TSAsExpression>;
    assertTSBaseType(opts?: object): asserts this is NodePath<t.TSBaseType>;
    assertTSBigIntKeyword(opts?: object): asserts this is NodePath<t.TSBigIntKeyword>;
    assertTSBooleanKeyword(opts?: object): asserts this is NodePath<t.TSBooleanKeyword>;
    assertTSCallSignatureDeclaration(opts?: object): asserts this is NodePath<t.TSCallSignatureDeclaration>;
    assertTSConditionalType(opts?: object): asserts this is NodePath<t.TSConditionalType>;
    assertTSConstructSignatureDeclaration(opts?: object): asserts this is NodePath<t.TSConstructSignatureDeclaration>;
    assertTSConstructorType(opts?: object): asserts this is NodePath<t.TSConstructorType>;
    assertTSDeclareFunction(opts?: object): asserts this is NodePath<t.TSDeclareFunction>;
    assertTSDeclareMethod(opts?: object): asserts this is NodePath<t.TSDeclareMethod>;
    assertTSEntityName(opts?: object): asserts this is NodePath<t.TSEntityName>;
    assertTSEnumDeclaration(opts?: object): asserts this is NodePath<t.TSEnumDeclaration>;
    assertTSEnumMember(opts?: object): asserts this is NodePath<t.TSEnumMember>;
    assertTSExportAssignment(opts?: object): asserts this is NodePath<t.TSExportAssignment>;
    assertTSExpressionWithTypeArguments(opts?: object): asserts this is NodePath<t.TSExpressionWithTypeArguments>;
    assertTSExternalModuleReference(opts?: object): asserts this is NodePath<t.TSExternalModuleReference>;
    assertTSFunctionType(opts?: object): asserts this is NodePath<t.TSFunctionType>;
    assertTSImportEqualsDeclaration(opts?: object): asserts this is NodePath<t.TSImportEqualsDeclaration>;
    assertTSImportType(opts?: object): asserts this is NodePath<t.TSImportType>;
    assertTSIndexSignature(opts?: object): asserts this is NodePath<t.TSIndexSignature>;
    assertTSIndexedAccessType(opts?: object): asserts this is NodePath<t.TSIndexedAccessType>;
    assertTSInferType(opts?: object): asserts this is NodePath<t.TSInferType>;
    assertTSInstantiationExpression(opts?: object): asserts this is NodePath<t.TSInstantiationExpression>;
    assertTSInterfaceBody(opts?: object): asserts this is NodePath<t.TSInterfaceBody>;
    assertTSInterfaceDeclaration(opts?: object): asserts this is NodePath<t.TSInterfaceDeclaration>;
    assertTSIntersectionType(opts?: object): asserts this is NodePath<t.TSIntersectionType>;
    assertTSIntrinsicKeyword(opts?: object): asserts this is NodePath<t.TSIntrinsicKeyword>;
    assertTSLiteralType(opts?: object): asserts this is NodePath<t.TSLiteralType>;
    assertTSMappedType(opts?: object): asserts this is NodePath<t.TSMappedType>;
    assertTSMethodSignature(opts?: object): asserts this is NodePath<t.TSMethodSignature>;
    assertTSModuleBlock(opts?: object): asserts this is NodePath<t.TSModuleBlock>;
    assertTSModuleDeclaration(opts?: object): asserts this is NodePath<t.TSModuleDeclaration>;
    assertTSNamedTupleMember(opts?: object): asserts this is NodePath<t.TSNamedTupleMember>;
    assertTSNamespaceExportDeclaration(opts?: object): asserts this is NodePath<t.TSNamespaceExportDeclaration>;
    assertTSNeverKeyword(opts?: object): asserts this is NodePath<t.TSNeverKeyword>;
    assertTSNonNullExpression(opts?: object): asserts this is NodePath<t.TSNonNullExpression>;
    assertTSNullKeyword(opts?: object): asserts this is NodePath<t.TSNullKeyword>;
    assertTSNumberKeyword(opts?: object): asserts this is NodePath<t.TSNumberKeyword>;
    assertTSObjectKeyword(opts?: object): asserts this is NodePath<t.TSObjectKeyword>;
    assertTSOptionalType(opts?: object): asserts this is NodePath<t.TSOptionalType>;
    assertTSParameterProperty(opts?: object): asserts this is NodePath<t.TSParameterProperty>;
    assertTSParenthesizedType(opts?: object): asserts this is NodePath<t.TSParenthesizedType>;
    assertTSPropertySignature(opts?: object): asserts this is NodePath<t.TSPropertySignature>;
    assertTSQualifiedName(opts?: object): asserts this is NodePath<t.TSQualifiedName>;
    assertTSRestType(opts?: object): asserts this is NodePath<t.TSRestType>;
    assertTSSatisfiesExpression(opts?: object): asserts this is NodePath<t.TSSatisfiesExpression>;
    assertTSStringKeyword(opts?: object): asserts this is NodePath<t.TSStringKeyword>;
    assertTSSymbolKeyword(opts?: object): asserts this is NodePath<t.TSSymbolKeyword>;
    assertTSThisType(opts?: object): asserts this is NodePath<t.TSThisType>;
    assertTSTupleType(opts?: object): asserts this is NodePath<t.TSTupleType>;
    assertTSType(opts?: object): asserts this is NodePath<t.TSType>;
    assertTSTypeAliasDeclaration(opts?: object): asserts this is NodePath<t.TSTypeAliasDeclaration>;
    assertTSTypeAnnotation(opts?: object): asserts this is NodePath<t.TSTypeAnnotation>;
    assertTSTypeAssertion(opts?: object): asserts this is NodePath<t.TSTypeAssertion>;
    assertTSTypeElement(opts?: object): asserts this is NodePath<t.TSTypeElement>;
    assertTSTypeLiteral(opts?: object): asserts this is NodePath<t.TSTypeLiteral>;
    assertTSTypeOperator(opts?: object): asserts this is NodePath<t.TSTypeOperator>;
    assertTSTypeParameter(opts?: object): asserts this is NodePath<t.TSTypeParameter>;
    assertTSTypeParameterDeclaration(opts?: object): asserts this is NodePath<t.TSTypeParameterDeclaration>;
    assertTSTypeParameterInstantiation(opts?: object): asserts this is NodePath<t.TSTypeParameterInstantiation>;
    assertTSTypePredicate(opts?: object): asserts this is NodePath<t.TSTypePredicate>;
    assertTSTypeQuery(opts?: object): asserts this is NodePath<t.TSTypeQuery>;
    assertTSTypeReference(opts?: object): asserts this is NodePath<t.TSTypeReference>;
    assertTSUndefinedKeyword(opts?: object): asserts this is NodePath<t.TSUndefinedKeyword>;
    assertTSUnionType(opts?: object): asserts this is NodePath<t.TSUnionType>;
    assertTSUnknownKeyword(opts?: object): asserts this is NodePath<t.TSUnknownKeyword>;
    assertTSVoidKeyword(opts?: object): asserts this is NodePath<t.TSVoidKeyword>;
    assertTaggedTemplateExpression(opts?: object): asserts this is NodePath<t.TaggedTemplateExpression>;
    assertTemplateElement(opts?: object): asserts this is NodePath<t.TemplateElement>;
    assertTemplateLiteral(opts?: object): asserts this is NodePath<t.TemplateLiteral>;
    assertTerminatorless(opts?: object): asserts this is NodePath<t.Terminatorless>;
    assertThisExpression(opts?: object): asserts this is NodePath<t.ThisExpression>;
    assertThisTypeAnnotation(opts?: object): asserts this is NodePath<t.ThisTypeAnnotation>;
    assertThrowStatement(opts?: object): asserts this is NodePath<t.ThrowStatement>;
    assertTopicReference(opts?: object): asserts this is NodePath<t.TopicReference>;
    assertTryStatement(opts?: object): asserts this is NodePath<t.TryStatement>;
    assertTupleExpression(opts?: object): asserts this is NodePath<t.TupleExpression>;
    assertTupleTypeAnnotation(opts?: object): asserts this is NodePath<t.TupleTypeAnnotation>;
    assertTypeAlias(opts?: object): asserts this is NodePath<t.TypeAlias>;
    assertTypeAnnotation(opts?: object): asserts this is NodePath<t.TypeAnnotation>;
    assertTypeCastExpression(opts?: object): asserts this is NodePath<t.TypeCastExpression>;
    assertTypeParameter(opts?: object): asserts this is NodePath<t.TypeParameter>;
    assertTypeParameterDeclaration(opts?: object): asserts this is NodePath<t.TypeParameterDeclaration>;
    assertTypeParameterInstantiation(opts?: object): asserts this is NodePath<t.TypeParameterInstantiation>;
    assertTypeScript(opts?: object): asserts this is NodePath<t.TypeScript>;
    assertTypeofTypeAnnotation(opts?: object): asserts this is NodePath<t.TypeofTypeAnnotation>;
    assertUnaryExpression(opts?: object): asserts this is NodePath<t.UnaryExpression>;
    assertUnaryLike(opts?: object): asserts this is NodePath<t.UnaryLike>;
    assertUnionTypeAnnotation(opts?: object): asserts this is NodePath<t.UnionTypeAnnotation>;
    assertUpdateExpression(opts?: object): asserts this is NodePath<t.UpdateExpression>;
    assertUserWhitespacable(opts?: object): asserts this is NodePath<t.UserWhitespacable>;
    assertV8IntrinsicIdentifier(opts?: object): asserts this is NodePath<t.V8IntrinsicIdentifier>;
    assertVariableDeclaration(opts?: object): asserts this is NodePath<t.VariableDeclaration>;
    assertVariableDeclarator(opts?: object): asserts this is NodePath<t.VariableDeclarator>;
    assertVariance(opts?: object): asserts this is NodePath<t.Variance>;
    assertVoidTypeAnnotation(opts?: object): asserts this is NodePath<t.VoidTypeAnnotation>;
    assertWhile(opts?: object): asserts this is NodePath<t.While>;
    assertWhileStatement(opts?: object): asserts this is NodePath<t.WhileStatement>;
    assertWithStatement(opts?: object): asserts this is NodePath<t.WithStatement>;
    assertYieldExpression(opts?: object): asserts this is NodePath<t.YieldExpression>;
    // #endregion
}

export interface HubInterface {
    getCode(): string | undefined;
    getScope(): Scope | undefined;
    addHelper(name: string): any;
    buildError(node: Node, msg: string, Error: ErrorConstructor): Error;
}

export class Hub implements HubInterface {
    constructor();
    getCode(): string | undefined;
    getScope(): Scope | undefined;
    addHelper(name: string): any;
    buildError(node: Node, msg: string, Error?: ErrorConstructor): Error;
}

export interface TraversalContext<S = unknown> {
    parentPath: NodePath;
    scope: Scope;
    state: S;
    opts: TraverseOptions;
}

export type NodePathResult<T> =
    | (Extract<T, Node | null | undefined> extends never ? never : NodePath<Extract<T, Node | null | undefined>>)
    | (T extends Array<Node | null | undefined> ? Array<NodePath<T[number]>> : never);

export interface VirtualTypeAliases {
    BindingIdentifier: t.Identifier;
    BlockScoped: Node;
    ExistentialTypeParam: t.ExistsTypeAnnotation;
    Flow: t.Flow | t.ImportDeclaration | t.ExportDeclaration | t.ImportSpecifier;
    ForAwaitStatement: t.ForOfStatement;
    Generated: Node;
    NumericLiteralTypeAnnotation: t.NumberLiteralTypeAnnotation;
    Pure: Node;
    Referenced: Node;
    ReferencedIdentifier: t.Identifier | t.JSXIdentifier;
    ReferencedMemberExpression: t.MemberExpression;
    RestProperty: t.RestElement;
    Scope: t.Scopable | t.Pattern;
    SpreadProperty: t.RestElement;
    User: Node;
    Var: t.VariableDeclaration;
}

----------------------------------------
File: ./animations/node_modules/@types/d3-path/README.md
----------------------------------------
# Installation
> `npm install --save @types/d3-path`

# Summary
This package contains type definitions for d3-path (https://github.com/d3/d3-path/).

# Details
Files were exported from https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/d3-path.

### Additional Details
 * Last updated: Wed, 07 Feb 2024 18:07:36 GMT
 * Dependencies: none

# Credits
These definitions were written by [Tom Wanzek](https://github.com/tomwanzek), [Alex Ford](https://github.com/gustavderdrache), [Boris Yankov](https://github.com/borisyankov), and [Nathan Bierema](https://github.com/Methuselah96).

----------------------------------------
File: ./animations/node_modules/@types/d3-path/index.d.ts
----------------------------------------
// Last module patch version validated against: 3.1.0

/**
 * A D3 path serializer implementing CanvasPathMethods
 */
export interface Path {
    /**
     * Move to the specified point ⟨x, y⟩. Equivalent to context.moveTo and SVG’s “moveto” command.
     *
     * @param x x-Coordinate of point to move to
     * @param y y-Coordinate of point to move to
     */
    moveTo(x: number, y: number): void;

    /**
     * Ends the current subpath and causes an automatic straight line to be drawn from the current point to the initial point of the current subpath.
     * Equivalent to context.closePath and SVG’s “closepath” command.
     */
    closePath(): void;

    /**
     * Draws a straight line from the current point to the specified point ⟨x, y⟩.
     * Equivalent to context.lineTo and SVG’s “lineto” command.
     *
     * @param x x-Coordinate of point to draw the line to
     * @param y y-Coordinate of point to draw the line to
     */
    lineTo(x: number, y: number): void;

    /**
     * Draws a quadratic Bézier segment from the current point to the specified point ⟨x, y⟩, with the specified control point ⟨cpx, cpy⟩.
     * Equivalent to context.quadraticCurveTo and SVG’s quadratic Bézier curve commands.
     *
     * @param cpx x-Coordinate of the control point for the quadratic Bézier curve
     * @param cpy y-Coordinate of the control point for the quadratic Bézier curve
     * @param x x-Coordinate of point to draw the curve to
     * @param y y-Coordinate of point to draw the curve to
     */
    quadraticCurveTo(cpx: number, cpy: number, x: number, y: number): void;

    /**
     * Draws a cubic Bézier segment from the current point to the specified point ⟨x, y⟩, with the specified control points ⟨cpx1, cpy1⟩ and ⟨cpx2, cpy2⟩.
     * Equivalent to context.bezierCurveTo and SVG’s cubic Bézier curve commands.
     *
     * @param cpx1 x-Coordinate of the first control point for the Bézier curve
     * @param cpy1 y-Coordinate of the first control point for the Bézier curve
     * @param cpx2 x-Coordinate of the second control point for the Bézier curve
     * @param cpy2 y-Coordinate of the second control point for the Bézier curve
     * @param x x-Coordinate of point to draw the curve to
     * @param y y-Coordinate of point to draw the curve to
     */
    bezierCurveTo(cpx1: number, cpy1: number, cpx2: number, cpy2: number, x: number, y: number): void;

    /**
     * Draws a circular arc segment with the specified radius that starts tangent to the line between the current point and the specified point ⟨x1, y1⟩
     * and ends tangent to the line between the specified points ⟨x1, y1⟩ and ⟨x2, y2⟩. If the first tangent point is not equal to the current point,
     * a straight line is drawn between the current point and the first tangent point. Equivalent to context.arcTo and uses SVG’s elliptical arc curve commands.
     *
     * @param x1 x-Coordinate of the first tangent point
     * @param y1 y-Coordinate of the first tangent point
     * @param x2 x-Coordinate of the second tangent point
     * @param y2 y-Coordinate of the second tangent point
     * @param r  Radius of the arc segment
     */
    arcTo(x1: number, y1: number, x2: number, y2: number, radius: number): void;

    /**
     * Draws a circular arc segment with the specified center ⟨x, y⟩, radius, startAngle and endAngle. If anticlockwise is true,
     * the arc is drawn in the anticlockwise direction; otherwise, it is drawn in the clockwise direction.
     * If the current point is not equal to the starting point of the arc, a straight line is drawn from the current point to the start of the arc.
     * Equivalent to context.arc and uses SVG’s elliptical arc curve commands.
     *
     * @param x x-Coordinate of the center point of the arc segment
     * @param y y-Coordinate of the center point of the arc segment
     * @param startAngle Start angle of arc segment
     * @param endAngle End angle of arc segment
     * @param anticlockwise Flag indicating directionality (true = anti-clockwise, false = clockwise)
     */
    arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, anticlockwise?: boolean): void;

    /**
     * Creates a new subpath containing just the four points ⟨x, y⟩, ⟨x + w, y⟩, ⟨x + w, y + h⟩, ⟨x, y + h⟩,
     * with those four points connected by straight lines, and then marks the subpath as closed. Equivalent to context.rect and uses SVG’s “lineto” commands.
     *
     * @param x x-Coordinate of starting point for drawing the rectangle
     * @param y y-Coordinate of starting point for drawing the rectangle
     * @param w Width of rectangle
     * @param h Height of rectangle
     */
    rect(x: number, y: number, w: number, h: number): void;

    /**
     * Returns the string representation of this path according to SVG’s path data specification.
     */
    toString(): string;
}

/**
 * Construct a D3 Path serializer
 */
export function path(): Path;

/**
 * Like {@link path}, except limits the digits after the decimal to the specified number of digits.
 * Useful for reducing the size of generated SVG path data.
 */
export function pathRound(digits?: number): Path;

----------------------------------------
File: ./animations/node_modules/@types/prop-types/README.md
----------------------------------------
# Installation
> `npm install --save @types/prop-types`

# Summary
This package contains type definitions for prop-types (https://github.com/facebook/prop-types).

# Details
Files were exported from https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/prop-types.

### Additional Details
 * Last updated: Thu, 05 Dec 2024 19:32:25 GMT
 * Dependencies: none

# Credits
These definitions were written by [DovydasNavickas](https://github.com/DovydasNavickas), [Ferdy Budhidharma](https://github.com/ferdaber), and [Sebastian Silbermann](https://github.com/eps1lon).

----------------------------------------
File: ./animations/node_modules/@types/prop-types/index.d.ts
----------------------------------------
// eslint-disable-next-line @definitelytyped/export-just-namespace
export = PropTypes;

declare namespace PropTypes {
    type ReactComponentLike =
        | string
        | ((props: any) => any)
        | (new(props: any) => any);

    interface ReactElementLike {
        type: ReactComponentLike;
        props: unknown;
        key: string | null;
    }

    interface ReactNodeArray extends Iterable<ReactNodeLike> {}

    /**
     * @internal Use `Awaited<ReactNodeLike>` instead
     */
    // Helper type to enable `Awaited<ReactNodeLike>`.
    // Must be a copy of the non-thenables of `ReactNodeLike`.
    type AwaitedReactNodeLike =
        | ReactElementLike
        | string
        | number
        | bigint
        | ReactNodeArray
        | boolean
        | null
        | undefined;

    type ReactNodeLike =
        | ReactElementLike
        | ReactNodeArray
        | string
        | number
        | bigint
        | boolean
        | null
        | undefined
        | Promise<AwaitedReactNodeLike>;

    const nominalTypeHack: unique symbol;

    type IsOptional<T> = undefined extends T ? true : false;

    type RequiredKeys<V> = {
        [K in keyof V]-?: Exclude<V[K], undefined> extends Validator<infer T> ? IsOptional<T> extends true ? never : K
            : never;
    }[keyof V];
    type OptionalKeys<V> = Exclude<keyof V, RequiredKeys<V>>;
    type InferPropsInner<V> = { [K in keyof V]-?: InferType<V[K]> };

    interface Validator<T> {
        (
            props: { [key: string]: any },
            propName: string,
            componentName: string,
            location: string,
            propFullName: string,
        ): Error | null;
        [nominalTypeHack]?: {
            type: T;
        } | undefined;
    }

    interface Requireable<T> extends Validator<T | undefined | null> {
        isRequired: Validator<NonNullable<T>>;
    }

    type ValidationMap<T> = { [K in keyof T]?: Validator<T[K]> };

    /**
     * Like {@link ValidationMap} but treats `undefined`, `null` and optional properties the same.
     * This type is only added as a migration path in React 19 where this type was removed from React.
     * Runtime and compile time types would mismatch since you could see `undefined` at runtime when your types don't expect this type.
     */
    type WeakValidationMap<T> = {
        [K in keyof T]?: null extends T[K] ? Validator<T[K] | null | undefined>
            : undefined extends T[K] ? Validator<T[K] | null | undefined>
            : Validator<T[K]>;
    };

    type InferType<V> = V extends Validator<infer T> ? T : any;
    type InferProps<V> =
        & InferPropsInner<Pick<V, RequiredKeys<V>>>
        & Partial<InferPropsInner<Pick<V, OptionalKeys<V>>>>;

    const any: Requireable<any>;
    const array: Requireable<any[]>;
    const bool: Requireable<boolean>;
    const func: Requireable<(...args: any[]) => any>;
    const number: Requireable<number>;
    const object: Requireable<object>;
    const string: Requireable<string>;
    const node: Requireable<ReactNodeLike>;
    const element: Requireable<ReactElementLike>;
    const symbol: Requireable<symbol>;
    const elementType: Requireable<ReactComponentLike>;
    function instanceOf<T>(expectedClass: new(...args: any[]) => T): Requireable<T>;
    function oneOf<T>(types: readonly T[]): Requireable<T>;
    function oneOfType<T extends Validator<any>>(types: T[]): Requireable<NonNullable<InferType<T>>>;
    function arrayOf<T>(type: Validator<T>): Requireable<T[]>;
    function objectOf<T>(type: Validator<T>): Requireable<{ [K in keyof any]: T }>;
    function shape<P extends ValidationMap<any>>(type: P): Requireable<InferProps<P>>;
    function exact<P extends ValidationMap<any>>(type: P): Requireable<Required<InferProps<P>>>;

    /**
     * Assert that the values match with the type specs.
     * Error messages are memorized and will only be shown once.
     *
     * @param typeSpecs Map of name to a ReactPropType
     * @param values Runtime values that need to be type-checked
     * @param location e.g. "prop", "context", "child context"
     * @param componentName Name of the component for error messages
     * @param getStack Returns the component stack
     */
    function checkPropTypes(
        typeSpecs: any,
        values: any,
        location: string,
        componentName: string,
        getStack?: () => any,
    ): void;

    /**
     * Only available if NODE_ENV=production
     */
    function resetWarningCache(): void;
}

----------------------------------------
File: ./animations/node_modules/@types/cookie/README.md
----------------------------------------
# Installation
> `npm install --save @types/cookie`

# Summary
This package contains type definitions for cookie (https://github.com/jshttp/cookie).

# Details
Files were exported from https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/cookie.

### Additional Details
 * Last updated: Sun, 26 Nov 2023 22:07:01 GMT
 * Dependencies: none

# Credits
These definitions were written by [Pine Mizune](https://github.com/pine), and [Piotr Błażejewicz](https://github.com/peterblazejewicz).

----------------------------------------
File: ./animations/node_modules/@types/cookie/index.d.ts
----------------------------------------
/**
 * Basic HTTP cookie parser and serializer for HTTP servers.
 */

/**
 * Additional serialization options
 */
export interface CookieSerializeOptions {
    /**
     * Specifies the value for the {@link https://tools.ietf.org/html/rfc6265#section-5.2.3|Domain Set-Cookie attribute}. By default, no
     * domain is set, and most clients will consider the cookie to apply to only
     * the current domain.
     */
    domain?: string | undefined;

    /**
     * Specifies a function that will be used to encode a cookie's value. Since
     * value of a cookie has a limited character set (and must be a simple
     * string), this function can be used to encode a value into a string suited
     * for a cookie's value.
     *
     * The default function is the global `encodeURIComponent`, which will
     * encode a JavaScript string into UTF-8 byte sequences and then URL-encode
     * any that fall outside of the cookie range.
     */
    encode?(value: string): string;

    /**
     * Specifies the `Date` object to be the value for the {@link https://tools.ietf.org/html/rfc6265#section-5.2.1|`Expires` `Set-Cookie` attribute}. By default,
     * no expiration is set, and most clients will consider this a "non-persistent cookie" and will delete
     * it on a condition like exiting a web browser application.
     *
     * *Note* the {@link https://tools.ietf.org/html/rfc6265#section-5.3|cookie storage model specification}
     * states that if both `expires` and `maxAge` are set, then `maxAge` takes precedence, but it is
     * possible not all clients by obey this, so if both are set, they should
     * point to the same date and time.
     */
    expires?: Date | undefined;
    /**
     * Specifies the boolean value for the {@link https://tools.ietf.org/html/rfc6265#section-5.2.6|`HttpOnly` `Set-Cookie` attribute}.
     * When truthy, the `HttpOnly` attribute is set, otherwise it is not. By
     * default, the `HttpOnly` attribute is not set.
     *
     * *Note* be careful when setting this to true, as compliant clients will
     * not allow client-side JavaScript to see the cookie in `document.cookie`.
     */
    httpOnly?: boolean | undefined;
    /**
     * Specifies the number (in seconds) to be the value for the `Max-Age`
     * `Set-Cookie` attribute. The given number will be converted to an integer
     * by rounding down. By default, no maximum age is set.
     *
     * *Note* the {@link https://tools.ietf.org/html/rfc6265#section-5.3|cookie storage model specification}
     * states that if both `expires` and `maxAge` are set, then `maxAge` takes precedence, but it is
     * possible not all clients by obey this, so if both are set, they should
     * point to the same date and time.
     */
    maxAge?: number | undefined;
    /**
     * Specifies the `boolean` value for the [`Partitioned` `Set-Cookie`](rfc-cutler-httpbis-partitioned-cookies)
     * attribute. When truthy, the `Partitioned` attribute is set, otherwise it is not. By default, the
     * `Partitioned` attribute is not set.
     *
     * **note** This is an attribute that has not yet been fully standardized, and may change in the future.
     * This also means many clients may ignore this attribute until they understand it.
     *
     * More information about can be found in [the proposal](https://github.com/privacycg/CHIPS)
     */
    partitioned?: boolean | undefined;
    /**
     * Specifies the value for the {@link https://tools.ietf.org/html/rfc6265#section-5.2.4|`Path` `Set-Cookie` attribute}.
     * By default, the path is considered the "default path".
     */
    path?: string | undefined;
    /**
     * Specifies the `string` to be the value for the [`Priority` `Set-Cookie` attribute][rfc-west-cookie-priority-00-4.1].
     *
     * - `'low'` will set the `Priority` attribute to `Low`.
     * - `'medium'` will set the `Priority` attribute to `Medium`, the default priority when not set.
     * - `'high'` will set the `Priority` attribute to `High`.
     *
     * More information about the different priority levels can be found in
     * [the specification][rfc-west-cookie-priority-00-4.1].
     *
     * **note** This is an attribute that has not yet been fully standardized, and may change in the future.
     * This also means many clients may ignore this attribute until they understand it.
     */
    priority?: "low" | "medium" | "high" | undefined;
    /**
     * Specifies the boolean or string to be the value for the {@link https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-03#section-4.1.2.7|`SameSite` `Set-Cookie` attribute}.
     *
     * - `true` will set the `SameSite` attribute to `Strict` for strict same
     * site enforcement.
     * - `false` will not set the `SameSite` attribute.
     * - `'lax'` will set the `SameSite` attribute to Lax for lax same site
     * enforcement.
     * - `'strict'` will set the `SameSite` attribute to Strict for strict same
     * site enforcement.
     *  - `'none'` will set the SameSite attribute to None for an explicit
     *  cross-site cookie.
     *
     * More information about the different enforcement levels can be found in {@link https://tools.ietf.org/html/draft-ietf-httpbis-rfc6265bis-03#section-4.1.2.7|the specification}.
     *
     * *note* This is an attribute that has not yet been fully standardized, and may change in the future. This also means many clients may ignore this attribute until they understand it.
     */
    sameSite?: true | false | "lax" | "strict" | "none" | undefined;
    /**
     * Specifies the boolean value for the {@link https://tools.ietf.org/html/rfc6265#section-5.2.5|`Secure` `Set-Cookie` attribute}. When truthy, the
     * `Secure` attribute is set, otherwise it is not. By default, the `Secure` attribute is not set.
     *
     * *Note* be careful when setting this to `true`, as compliant clients will
     * not send the cookie back to the server in the future if the browser does
     * not have an HTTPS connection.
     */
    secure?: boolean | undefined;
}

/**
 * Additional parsing options
 */
export interface CookieParseOptions {
    /**
     * Specifies a function that will be used to decode a cookie's value. Since
     * the value of a cookie has a limited character set (and must be a simple
     * string), this function can be used to decode a previously-encoded cookie
     * value into a JavaScript string or other object.
     *
     * The default function is the global `decodeURIComponent`, which will decode
     * any URL-encoded sequences into their byte representations.
     *
     * *Note* if an error is thrown from this function, the original, non-decoded
     * cookie value will be returned as the cookie's value.
     */
    decode?(value: string): string;
}

/**
 * Parse an HTTP Cookie header string and returning an object of all cookie
 * name-value pairs.
 *
 * @param str the string representing a `Cookie` header value
 * @param [options] object containing parsing options
 */
export function parse(str: string, options?: CookieParseOptions): Record<string, string>;

/**
 * Serialize a cookie name-value pair into a `Set-Cookie` header string.
 *
 * @param name the name for the cookie
 * @param value value to set the cookie to
 * @param [options] object containing serialization options
 * @throws {TypeError} when `maxAge` options is invalid
 */
export function serialize(name: string, value: string, options?: CookieSerializeOptions): string;

----------------------------------------
File: ./animations/node_modules/@types/estree/README.md
----------------------------------------
# Installation
> `npm install --save @types/estree`

# Summary
This package contains type definitions for estree (https://github.com/estree/estree).

# Details
Files were exported from https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/estree.

### Additional Details
 * Last updated: Wed, 18 Sep 2024 09:37:00 GMT
 * Dependencies: none

# Credits
These definitions were written by [RReverser](https://github.com/RReverser).

----------------------------------------
File: ./animations/node_modules/@types/estree/flow.d.ts
----------------------------------------
declare namespace ESTree {
    interface FlowTypeAnnotation extends Node {}

    interface FlowBaseTypeAnnotation extends FlowTypeAnnotation {}

    interface FlowLiteralTypeAnnotation extends FlowTypeAnnotation, Literal {}

    interface FlowDeclaration extends Declaration {}

    interface AnyTypeAnnotation extends FlowBaseTypeAnnotation {}

    interface ArrayTypeAnnotation extends FlowTypeAnnotation {
        elementType: FlowTypeAnnotation;
    }

    interface BooleanLiteralTypeAnnotation extends FlowLiteralTypeAnnotation {}

    interface BooleanTypeAnnotation extends FlowBaseTypeAnnotation {}

    interface ClassImplements extends Node {
        id: Identifier;
        typeParameters?: TypeParameterInstantiation | null;
    }

    interface ClassProperty {
        key: Expression;
        value?: Expression | null;
        typeAnnotation?: TypeAnnotation | null;
        computed: boolean;
        static: boolean;
    }

    interface DeclareClass extends FlowDeclaration {
        id: Identifier;
        typeParameters?: TypeParameterDeclaration | null;
        body: ObjectTypeAnnotation;
        extends: InterfaceExtends[];
    }

    interface DeclareFunction extends FlowDeclaration {
        id: Identifier;
    }

    interface DeclareModule extends FlowDeclaration {
        id: Literal | Identifier;
        body: BlockStatement;
    }

    interface DeclareVariable extends FlowDeclaration {
        id: Identifier;
    }

    interface FunctionTypeAnnotation extends FlowTypeAnnotation {
        params: FunctionTypeParam[];
        returnType: FlowTypeAnnotation;
        rest?: FunctionTypeParam | null;
        typeParameters?: TypeParameterDeclaration | null;
    }

    interface FunctionTypeParam {
        name: Identifier;
        typeAnnotation: FlowTypeAnnotation;
        optional: boolean;
    }

    interface GenericTypeAnnotation extends FlowTypeAnnotation {
        id: Identifier | QualifiedTypeIdentifier;
        typeParameters?: TypeParameterInstantiation | null;
    }

    interface InterfaceExtends extends Node {
        id: Identifier | QualifiedTypeIdentifier;
        typeParameters?: TypeParameterInstantiation | null;
    }

    interface InterfaceDeclaration extends FlowDeclaration {
        id: Identifier;
        typeParameters?: TypeParameterDeclaration | null;
        extends: InterfaceExtends[];
        body: ObjectTypeAnnotation;
    }

    interface IntersectionTypeAnnotation extends FlowTypeAnnotation {
        types: FlowTypeAnnotation[];
    }

    interface MixedTypeAnnotation extends FlowBaseTypeAnnotation {}

    interface NullableTypeAnnotation extends FlowTypeAnnotation {
        typeAnnotation: TypeAnnotation;
    }

    interface NumberLiteralTypeAnnotation extends FlowLiteralTypeAnnotation {}

    interface NumberTypeAnnotation extends FlowBaseTypeAnnotation {}

    interface StringLiteralTypeAnnotation extends FlowLiteralTypeAnnotation {}

    interface StringTypeAnnotation extends FlowBaseTypeAnnotation {}

    interface TupleTypeAnnotation extends FlowTypeAnnotation {
        types: FlowTypeAnnotation[];
    }

    interface TypeofTypeAnnotation extends FlowTypeAnnotation {
        argument: FlowTypeAnnotation;
    }

    interface TypeAlias extends FlowDeclaration {
        id: Identifier;
        typeParameters?: TypeParameterDeclaration | null;
        right: FlowTypeAnnotation;
    }

    interface TypeAnnotation extends Node {
        typeAnnotation: FlowTypeAnnotation;
    }

    interface TypeCastExpression extends Expression {
        expression: Expression;
        typeAnnotation: TypeAnnotation;
    }

    interface TypeParameterDeclaration extends Node {
        params: Identifier[];
    }

    interface TypeParameterInstantiation extends Node {
        params: FlowTypeAnnotation[];
    }

    interface ObjectTypeAnnotation extends FlowTypeAnnotation {
        properties: ObjectTypeProperty[];
        indexers: ObjectTypeIndexer[];
        callProperties: ObjectTypeCallProperty[];
    }

    interface ObjectTypeCallProperty extends Node {
        value: FunctionTypeAnnotation;
        static: boolean;
    }

    interface ObjectTypeIndexer extends Node {
        id: Identifier;
        key: FlowTypeAnnotation;
        value: FlowTypeAnnotation;
        static: boolean;
    }

    interface ObjectTypeProperty extends Node {
        key: Expression;
        value: FlowTypeAnnotation;
        optional: boolean;
        static: boolean;
    }

    interface QualifiedTypeIdentifier extends Node {
        qualification: Identifier | QualifiedTypeIdentifier;
        id: Identifier;
    }

    interface UnionTypeAnnotation extends FlowTypeAnnotation {
        types: FlowTypeAnnotation[];
    }

    interface VoidTypeAnnotation extends FlowBaseTypeAnnotation {}
}

----------------------------------------
File: ./animations/node_modules/@types/estree/index.d.ts
----------------------------------------
// This definition file follows a somewhat unusual format. ESTree allows
// runtime type checks based on the `type` parameter. In order to explain this
// to typescript we want to use discriminated union types:
// https://github.com/Microsoft/TypeScript/pull/9163
//
// For ESTree this is a bit tricky because the high level interfaces like
// Node or Function are pulling double duty. We want to pass common fields down
// to the interfaces that extend them (like Identifier or
// ArrowFunctionExpression), but you can't extend a type union or enforce
// common fields on them. So we've split the high level interfaces into two
// types, a base type which passes down inherited fields, and a type union of
// all types which extend the base type. Only the type union is exported, and
// the union is how other types refer to the collection of inheriting types.
//
// This makes the definitions file here somewhat more difficult to maintain,
// but it has the notable advantage of making ESTree much easier to use as
// an end user.

export interface BaseNodeWithoutComments {
    // Every leaf interface that extends BaseNode must specify a type property.
    // The type property should be a string literal. For example, Identifier
    // has: `type: "Identifier"`
    type: string;
    loc?: SourceLocation | null | undefined;
    range?: [number, number] | undefined;
}

export interface BaseNode extends BaseNodeWithoutComments {
    leadingComments?: Comment[] | undefined;
    trailingComments?: Comment[] | undefined;
}

export interface NodeMap {
    AssignmentProperty: AssignmentProperty;
    CatchClause: CatchClause;
    Class: Class;
    ClassBody: ClassBody;
    Expression: Expression;
    Function: Function;
    Identifier: Identifier;
    Literal: Literal;
    MethodDefinition: MethodDefinition;
    ModuleDeclaration: ModuleDeclaration;
    ModuleSpecifier: ModuleSpecifier;
    Pattern: Pattern;
    PrivateIdentifier: PrivateIdentifier;
    Program: Program;
    Property: Property;
    PropertyDefinition: PropertyDefinition;
    SpreadElement: SpreadElement;
    Statement: Statement;
    Super: Super;
    SwitchCase: SwitchCase;
    TemplateElement: TemplateElement;
    VariableDeclarator: VariableDeclarator;
}

export type Node = NodeMap[keyof NodeMap];

export interface Comment extends BaseNodeWithoutComments {
    type: "Line" | "Block";
    value: string;
}

export interface SourceLocation {
    source?: string | null | undefined;
    start: Position;
    end: Position;
}

export interface Position {
    /** >= 1 */
    line: number;
    /** >= 0 */
    column: number;
}

export interface Program extends BaseNode {
    type: "Program";
    sourceType: "script" | "module";
    body: Array<Directive | Statement | ModuleDeclaration>;
    comments?: Comment[] | undefined;
}

export interface Directive extends BaseNode {
    type: "ExpressionStatement";
    expression: Literal;
    directive: string;
}

export interface BaseFunction extends BaseNode {
    params: Pattern[];
    generator?: boolean | undefined;
    async?: boolean | undefined;
    // The body is either BlockStatement or Expression because arrow functions
    // can have a body that's either. FunctionDeclarations and
    // FunctionExpressions have only BlockStatement bodies.
    body: BlockStatement | Expression;
}

export type Function = FunctionDeclaration | FunctionExpression | ArrowFunctionExpression;

export type Statement =
    | ExpressionStatement
    | BlockStatement
    | StaticBlock
    | EmptyStatement
    | DebuggerStatement
    | WithStatement
    | ReturnStatement
    | LabeledStatement
    | BreakStatement
    | ContinueStatement
    | IfStatement
    | SwitchStatement
    | ThrowStatement
    | TryStatement
    | WhileStatement
    | DoWhileStatement
    | ForStatement
    | ForInStatement
    | ForOfStatement
    | Declaration;

export interface BaseStatement extends BaseNode {}

export interface EmptyStatement extends BaseStatement {
    type: "EmptyStatement";
}

export interface BlockStatement extends BaseStatement {
    type: "BlockStatement";
    body: Statement[];
    innerComments?: Comment[] | undefined;
}

export interface StaticBlock extends Omit<BlockStatement, "type"> {
    type: "StaticBlock";
}

export interface ExpressionStatement extends BaseStatement {
    type: "ExpressionStatement";
    expression: Expression;
}

export interface IfStatement extends BaseStatement {
    type: "IfStatement";
    test: Expression;
    consequent: Statement;
    alternate?: Statement | null | undefined;
}

export interface LabeledStatement extends BaseStatement {
    type: "LabeledStatement";
    label: Identifier;
    body: Statement;
}

export interface BreakStatement extends BaseStatement {
    type: "BreakStatement";
    label?: Identifier | null | undefined;
}

export interface ContinueStatement extends BaseStatement {
    type: "ContinueStatement";
    label?: Identifier | null | undefined;
}

export interface WithStatement extends BaseStatement {
    type: "WithStatement";
    object: Expression;
    body: Statement;
}

export interface SwitchStatement extends BaseStatement {
    type: "SwitchStatement";
    discriminant: Expression;
    cases: SwitchCase[];
}

export interface ReturnStatement extends BaseStatement {
    type: "ReturnStatement";
    argument?: Expression | null | undefined;
}

export interface ThrowStatement extends BaseStatement {
    type: "ThrowStatement";
    argument: Expression;
}

export interface TryStatement extends BaseStatement {
    type: "TryStatement";
    block: BlockStatement;
    handler?: CatchClause | null | undefined;
    finalizer?: BlockStatement | null | undefined;
}

export interface WhileStatement extends BaseStatement {
    type: "WhileStatement";
    test: Expression;
    body: Statement;
}

export interface DoWhileStatement extends BaseStatement {
    type: "DoWhileStatement";
    body: Statement;
    test: Expression;
}

export interface ForStatement extends BaseStatement {
    type: "ForStatement";
    init?: VariableDeclaration | Expression | null | undefined;
    test?: Expression | null | undefined;
    update?: Expression | null | undefined;
    body: Statement;
}

export interface BaseForXStatement extends BaseStatement {
    left: VariableDeclaration | Pattern;
    right: Expression;
    body: Statement;
}

export interface ForInStatement extends BaseForXStatement {
    type: "ForInStatement";
}

export interface DebuggerStatement extends BaseStatement {
    type: "DebuggerStatement";
}

export type Declaration = FunctionDeclaration | VariableDeclaration | ClassDeclaration;

export interface BaseDeclaration extends BaseStatement {}

export interface MaybeNamedFunctionDeclaration extends BaseFunction, BaseDeclaration {
    type: "FunctionDeclaration";
    /** It is null when a function declaration is a part of the `export default function` statement */
    id: Identifier | null;
    body: BlockStatement;
}

export interface FunctionDeclaration extends MaybeNamedFunctionDeclaration {
    id: Identifier;
}

export interface VariableDeclaration extends BaseDeclaration {
    type: "VariableDeclaration";
    declarations: VariableDeclarator[];
    kind: "var" | "let" | "const";
}

export interface VariableDeclarator extends BaseNode {
    type: "VariableDeclarator";
    id: Pattern;
    init?: Expression | null | undefined;
}

export interface ExpressionMap {
    ArrayExpression: ArrayExpression;
    ArrowFunctionExpression: ArrowFunctionExpression;
    AssignmentExpression: AssignmentExpression;
    AwaitExpression: AwaitExpression;
    BinaryExpression: BinaryExpression;
    CallExpression: CallExpression;
    ChainExpression: ChainExpression;
    ClassExpression: ClassExpression;
    ConditionalExpression: ConditionalExpression;
    FunctionExpression: FunctionExpression;
    Identifier: Identifier;
    ImportExpression: ImportExpression;
    Literal: Literal;
    LogicalExpression: LogicalExpression;
    MemberExpression: MemberExpression;
    MetaProperty: MetaProperty;
    NewExpression: NewExpression;
    ObjectExpression: ObjectExpression;
    SequenceExpression: SequenceExpression;
    TaggedTemplateExpression: TaggedTemplateExpression;
    TemplateLiteral: TemplateLiteral;
    ThisExpression: ThisExpression;
    UnaryExpression: UnaryExpression;
    UpdateExpression: UpdateExpression;
    YieldExpression: YieldExpression;
}

export type Expression = ExpressionMap[keyof ExpressionMap];

export interface BaseExpression extends BaseNode {}

export type ChainElement = SimpleCallExpression | MemberExpression;

export interface ChainExpression extends BaseExpression {
    type: "ChainExpression";
    expression: ChainElement;
}

export interface ThisExpression extends BaseExpression {
    type: "ThisExpression";
}

export interface ArrayExpression extends BaseExpression {
    type: "ArrayExpression";
    elements: Array<Expression | SpreadElement | null>;
}

export interface ObjectExpression extends BaseExpression {
    type: "ObjectExpression";
    properties: Array<Property | SpreadElement>;
}

export interface PrivateIdentifier extends BaseNode {
    type: "PrivateIdentifier";
    name: string;
}

export interface Property extends BaseNode {
    type: "Property";
    key: Expression | PrivateIdentifier;
    value: Expression | Pattern; // Could be an AssignmentProperty
    kind: "init" | "get" | "set";
    method: boolean;
    shorthand: boolean;
    computed: boolean;
}

export interface PropertyDefinition extends BaseNode {
    type: "PropertyDefinition";
    key: Expression | PrivateIdentifier;
    value?: Expression | null | undefined;
    computed: boolean;
    static: boolean;
}

export interface FunctionExpression extends BaseFunction, BaseExpression {
    id?: Identifier | null | undefined;
    type: "FunctionExpression";
    body: BlockStatement;
}

export interface SequenceExpression extends BaseExpression {
    type: "SequenceExpression";
    expressions: Expression[];
}

export interface UnaryExpression extends BaseExpression {
    type: "UnaryExpression";
    operator: UnaryOperator;
    prefix: true;
    argument: Expression;
}

export interface BinaryExpression extends BaseExpression {
    type: "BinaryExpression";
    operator: BinaryOperator;
    left: Expression | PrivateIdentifier;
    right: Expression;
}

export interface AssignmentExpression extends BaseExpression {
    type: "AssignmentExpression";
    operator: AssignmentOperator;
    left: Pattern | MemberExpression;
    right: Expression;
}

export interface UpdateExpression extends BaseExpression {
    type: "UpdateExpression";
    operator: UpdateOperator;
    argument: Expression;
    prefix: boolean;
}

export interface LogicalExpression extends BaseExpression {
    type: "LogicalExpression";
    operator: LogicalOperator;
    left: Expression;
    right: Expression;
}

export interface ConditionalExpression extends BaseExpression {
    type: "ConditionalExpression";
    test: Expression;
    alternate: Expression;
    consequent: Expression;
}

export interface BaseCallExpression extends BaseExpression {
    callee: Expression | Super;
    arguments: Array<Expression | SpreadElement>;
}
export type CallExpression = SimpleCallExpression | NewExpression;

export interface SimpleCallExpression extends BaseCallExpression {
    type: "CallExpression";
    optional: boolean;
}

export interface NewExpression extends BaseCallExpression {
    type: "NewExpression";
}

export interface MemberExpression extends BaseExpression, BasePattern {
    type: "MemberExpression";
    object: Expression | Super;
    property: Expression | PrivateIdentifier;
    computed: boolean;
    optional: boolean;
}

export type Pattern = Identifier | ObjectPattern | ArrayPattern | RestElement | AssignmentPattern | MemberExpression;

export interface BasePattern extends BaseNode {}

export interface SwitchCase extends BaseNode {
    type: "SwitchCase";
    test?: Expression | null | undefined;
    consequent: Statement[];
}

export interface CatchClause extends BaseNode {
    type: "CatchClause";
    param: Pattern | null;
    body: BlockStatement;
}

export interface Identifier extends BaseNode, BaseExpression, BasePattern {
    type: "Identifier";
    name: string;
}

export type Literal = SimpleLiteral | RegExpLiteral | BigIntLiteral;

export interface SimpleLiteral extends BaseNode, BaseExpression {
    type: "Literal";
    value: string | boolean | number | null;
    raw?: string | undefined;
}

export interface RegExpLiteral extends BaseNode, BaseExpression {
    type: "Literal";
    value?: RegExp | null | undefined;
    regex: {
        pattern: string;
        flags: string;
    };
    raw?: string | undefined;
}

export interface BigIntLiteral extends BaseNode, BaseExpression {
    type: "Literal";
    value?: bigint | null | undefined;
    bigint: string;
    raw?: string | undefined;
}

export type UnaryOperator = "-" | "+" | "!" | "~" | "typeof" | "void" | "delete";

export type BinaryOperator =
    | "=="
    | "!="
    | "==="
    | "!=="
    | "<"
    | "<="
    | ">"
    | ">="
    | "<<"
    | ">>"
    | ">>>"
    | "+"
    | "-"
    | "*"
    | "/"
    | "%"
    | "**"
    | "|"
    | "^"
    | "&"
    | "in"
    | "instanceof";

export type LogicalOperator = "||" | "&&" | "??";

export type AssignmentOperator =
    | "="
    | "+="
    | "-="
    | "*="
    | "/="
    | "%="
    | "**="
    | "<<="
    | ">>="
    | ">>>="
    | "|="
    | "^="
    | "&="
    | "||="
    | "&&="
    | "??=";

export type UpdateOperator = "++" | "--";

export interface ForOfStatement extends BaseForXStatement {
    type: "ForOfStatement";
    await: boolean;
}

export interface Super extends BaseNode {
    type: "Super";
}

export interface SpreadElement extends BaseNode {
    type: "SpreadElement";
    argument: Expression;
}

export interface ArrowFunctionExpression extends BaseExpression, BaseFunction {
    type: "ArrowFunctionExpression";
    expression: boolean;
    body: BlockStatement | Expression;
}

export interface YieldExpression extends BaseExpression {
    type: "YieldExpression";
    argument?: Expression | null | undefined;
    delegate: boolean;
}

export interface TemplateLiteral extends BaseExpression {
    type: "TemplateLiteral";
    quasis: TemplateElement[];
    expressions: Expression[];
}

export interface TaggedTemplateExpression extends BaseExpression {
    type: "TaggedTemplateExpression";
    tag: Expression;
    quasi: TemplateLiteral;
}

export interface TemplateElement extends BaseNode {
    type: "TemplateElement";
    tail: boolean;
    value: {
        /** It is null when the template literal is tagged and the text has an invalid escape (e.g. - tag`\unicode and \u{55}`) */
        cooked?: string | null | undefined;
        raw: string;
    };
}

export interface AssignmentProperty extends Property {
    value: Pattern;
    kind: "init";
    method: boolean; // false
}

export interface ObjectPattern extends BasePattern {
    type: "ObjectPattern";
    properties: Array<AssignmentProperty | RestElement>;
}

export interface ArrayPattern extends BasePattern {
    type: "ArrayPattern";
    elements: Array<Pattern | null>;
}

export interface RestElement extends BasePattern {
    type: "RestElement";
    argument: Pattern;
}

export interface AssignmentPattern extends BasePattern {
    type: "AssignmentPattern";
    left: Pattern;
    right: Expression;
}

export type Class = ClassDeclaration | ClassExpression;
export interface BaseClass extends BaseNode {
    superClass?: Expression | null | undefined;
    body: ClassBody;
}

export interface ClassBody extends BaseNode {
    type: "ClassBody";
    body: Array<MethodDefinition | PropertyDefinition | StaticBlock>;
}

export interface MethodDefinition extends BaseNode {
    type: "MethodDefinition";
    key: Expression | PrivateIdentifier;
    value: FunctionExpression;
    kind: "constructor" | "method" | "get" | "set";
    computed: boolean;
    static: boolean;
}

export interface MaybeNamedClassDeclaration extends BaseClass, BaseDeclaration {
    type: "ClassDeclaration";
    /** It is null when a class declaration is a part of the `export default class` statement */
    id: Identifier | null;
}

export interface ClassDeclaration extends MaybeNamedClassDeclaration {
    id: Identifier;
}

export interface ClassExpression extends BaseClass, BaseExpression {
    type: "ClassExpression";
    id?: Identifier | null | undefined;
}

export interface MetaProperty extends BaseExpression {
    type: "MetaProperty";
    meta: Identifier;
    property: Identifier;
}

export type ModuleDeclaration =
    | ImportDeclaration
    | ExportNamedDeclaration
    | ExportDefaultDeclaration
    | ExportAllDeclaration;
export interface BaseModuleDeclaration extends BaseNode {}

export type ModuleSpecifier = ImportSpecifier | ImportDefaultSpecifier | ImportNamespaceSpecifier | ExportSpecifier;
export interface BaseModuleSpecifier extends BaseNode {
    local: Identifier;
}

export interface ImportDeclaration extends BaseModuleDeclaration {
    type: "ImportDeclaration";
    specifiers: Array<ImportSpecifier | ImportDefaultSpecifier | ImportNamespaceSpecifier>;
    source: Literal;
}

export interface ImportSpecifier extends BaseModuleSpecifier {
    type: "ImportSpecifier";
    imported: Identifier | Literal;
}

export interface ImportExpression extends BaseExpression {
    type: "ImportExpression";
    source: Expression;
}

export interface ImportDefaultSpecifier extends BaseModuleSpecifier {
    type: "ImportDefaultSpecifier";
}

export interface ImportNamespaceSpecifier extends BaseModuleSpecifier {
    type: "ImportNamespaceSpecifier";
}

export interface ExportNamedDeclaration extends BaseModuleDeclaration {
    type: "ExportNamedDeclaration";
    declaration?: Declaration | null | undefined;
    specifiers: ExportSpecifier[];
    source?: Literal | null | undefined;
}

export interface ExportSpecifier extends Omit<BaseModuleSpecifier, "local"> {
    type: "ExportSpecifier";
    local: Identifier | Literal;
    exported: Identifier | Literal;
}

export interface ExportDefaultDeclaration extends BaseModuleDeclaration {
    type: "ExportDefaultDeclaration";
    declaration: MaybeNamedFunctionDeclaration | MaybeNamedClassDeclaration | Expression;
}

export interface ExportAllDeclaration extends BaseModuleDeclaration {
    type: "ExportAllDeclaration";
    exported: Identifier | Literal | null;
    source: Literal;
}

export interface AwaitExpression extends BaseExpression {
    type: "AwaitExpression";
    argument: Expression;
}

----------------------------------------
File: ./animations/node_modules/@types/babel__core/README.md
----------------------------------------
# Installation
> `npm install --save @types/babel__core`

# Summary
This package contains type definitions for @babel/core (https://github.com/babel/babel/tree/master/packages/babel-core).

# Details
Files were exported from https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/babel__core.

### Additional Details
 * Last updated: Mon, 20 Nov 2023 23:36:23 GMT
 * Dependencies: [@babel/parser](https://npmjs.com/package/@babel/parser), [@babel/types](https://npmjs.com/package/@babel/types), [@types/babel__generator](https://npmjs.com/package/@types/babel__generator), [@types/babel__template](https://npmjs.com/package/@types/babel__template), [@types/babel__traverse](https://npmjs.com/package/@types/babel__traverse)

# Credits
These definitions were written by [Troy Gerwien](https://github.com/yortus), [Marvin Hagemeister](https://github.com/marvinhagemeister), [Melvin Groenhoff](https://github.com/mgroenhoff), [Jessica Franco](https://github.com/Jessidhia), and [Ifiok Jr.](https://github.com/ifiokjr).

----------------------------------------
File: ./animations/node_modules/@types/babel__core/index.d.ts
----------------------------------------
import { GeneratorOptions } from "@babel/generator";
import { ParserOptions } from "@babel/parser";
import template from "@babel/template";
import traverse, { Hub, NodePath, Scope, Visitor } from "@babel/traverse";
import * as t from "@babel/types";

export { GeneratorOptions, NodePath, ParserOptions, t as types, template, traverse, Visitor };

export type Node = t.Node;
export type ParseResult = ReturnType<typeof import("@babel/parser").parse>;
export const version: string;
export const DEFAULT_EXTENSIONS: [".js", ".jsx", ".es6", ".es", ".mjs"];

/**
 * Source map standard format as to revision 3
 * @see {@link https://sourcemaps.info/spec.html}
 * @see {@link https://github.com/mozilla/source-map/blob/HEAD/source-map.d.ts}
 */
interface InputSourceMap {
    version: number;
    sources: string[];
    names: string[];
    sourceRoot?: string | undefined;
    sourcesContent?: string[] | undefined;
    mappings: string;
    file: string;
}

export interface TransformOptions {
    /**
     * Specify which assumptions it can make about your code, to better optimize the compilation result. **NOTE**: This replaces the various `loose` options in plugins in favor of
     * top-level options that can apply to multiple plugins
     *
     * @see https://babeljs.io/docs/en/assumptions
     */
    assumptions?: { [name: string]: boolean } | null | undefined;

    /**
     * Include the AST in the returned object
     *
     * Default: `false`
     */
    ast?: boolean | null | undefined;

    /**
     * Attach a comment after all non-user injected code
     *
     * Default: `null`
     */
    auxiliaryCommentAfter?: string | null | undefined;

    /**
     * Attach a comment before all non-user injected code
     *
     * Default: `null`
     */
    auxiliaryCommentBefore?: string | null | undefined;

    /**
     * Specify the "root" folder that defines the location to search for "babel.config.js", and the default folder to allow `.babelrc` files inside of.
     *
     * Default: `"."`
     */
    root?: string | null | undefined;

    /**
     * This option, combined with the "root" value, defines how Babel chooses its project root.
     * The different modes define different ways that Babel can process the "root" value to get
     * the final project root.
     *
     * @see https://babeljs.io/docs/en/next/options#rootmode
     */
    rootMode?: "root" | "upward" | "upward-optional" | undefined;

    /**
     * The config file to load Babel's config from. Defaults to searching for "babel.config.js" inside the "root" folder. `false` will disable searching for config files.
     *
     * Default: `undefined`
     */
    configFile?: string | boolean | null | undefined;

    /**
     * Specify whether or not to use .babelrc and
     * .babelignore files.
     *
     * Default: `true`
     */
    babelrc?: boolean | null | undefined;

    /**
     * Specify which packages should be search for .babelrc files when they are being compiled. `true` to always search, or a path string or an array of paths to packages to search
     * inside of. Defaults to only searching the "root" package.
     *
     * Default: `(root)`
     */
    babelrcRoots?: boolean | MatchPattern | MatchPattern[] | null | undefined;

    /**
     * Toggles whether or not browserslist config sources are used, which includes searching for any browserslist files or referencing the browserslist key inside package.json.
     * This is useful for projects that use a browserslist config for files that won't be compiled with Babel.
     *
     * If a string is specified, it must represent the path of a browserslist configuration file. Relative paths are resolved relative to the configuration file which specifies
     * this option, or to `cwd` when it's passed as part of the programmatic options.
     *
     * Default: `true`
     */
    browserslistConfigFile?: boolean | null | undefined;

    /**
     * The Browserslist environment to use.
     *
     * Default: `undefined`
     */
    browserslistEnv?: string | null | undefined;

    /**
     * By default `babel.transformFromAst` will clone the input AST to avoid mutations.
     * Specifying `cloneInputAst: false` can improve parsing performance if the input AST is not used elsewhere.
     *
     * Default: `true`
     */
    cloneInputAst?: boolean | null | undefined;

    /**
     * Defaults to environment variable `BABEL_ENV` if set, or else `NODE_ENV` if set, or else it defaults to `"development"`
     *
     * Default: env vars
     */
    envName?: string | undefined;

    /**
     * If any of patterns match, the current configuration object is considered inactive and is ignored during config processing.
     */
    exclude?: MatchPattern | MatchPattern[] | undefined;

    /**
     * Enable code generation
     *
     * Default: `true`
     */
    code?: boolean | null | undefined;

    /**
     * Output comments in generated output
     *
     * Default: `true`
     */
    comments?: boolean | null | undefined;

    /**
     * Do not include superfluous whitespace characters and line terminators. When set to `"auto"` compact is set to `true` on input sizes of >500KB
     *
     * Default: `"auto"`
     */
    compact?: boolean | "auto" | null | undefined;

    /**
     * The working directory that Babel's programmatic options are loaded relative to.
     *
     * Default: `"."`
     */
    cwd?: string | null | undefined;

    /**
     * Utilities may pass a caller object to identify themselves to Babel and
     * pass capability-related flags for use by configs, presets and plugins.
     *
     * @see https://babeljs.io/docs/en/next/options#caller
     */
    caller?: TransformCaller | undefined;

    /**
     * This is an object of keys that represent different environments. For example, you may have: `{ env: { production: { \/* specific options *\/ } } }`
     * which will use those options when the `envName` is `production`
     *
     * Default: `{}`
     */
    env?: { [index: string]: TransformOptions | null | undefined } | null | undefined;

    /**
     * A path to a `.babelrc` file to extend
     *
     * Default: `null`
     */
    extends?: string | null | undefined;

    /**
     * Filename for use in errors etc
     *
     * Default: `"unknown"`
     */
    filename?: string | null | undefined;

    /**
     * Filename relative to `sourceRoot`
     *
     * Default: `(filename)`
     */
    filenameRelative?: string | null | undefined;

    /**
     * An object containing the options to be passed down to the babel code generator, @babel/generator
     *
     * Default: `{}`
     */
    generatorOpts?: GeneratorOptions | null | undefined;

    /**
     * Specify a custom callback to generate a module id with. Called as `getModuleId(moduleName)`. If falsy value is returned then the generated module id is used
     *
     * Default: `null`
     */
    getModuleId?: ((moduleName: string) => string | null | undefined) | null | undefined;

    /**
     * ANSI highlight syntax error code frames
     *
     * Default: `true`
     */
    highlightCode?: boolean | null | undefined;

    /**
     * Opposite to the `only` option. `ignore` is disregarded if `only` is specified
     *
     * Default: `null`
     */
    ignore?: MatchPattern[] | null | undefined;

    /**
     * This option is a synonym for "test"
     */
    include?: MatchPattern | MatchPattern[] | undefined;

    /**
     * A source map object that the output source map will be based on
     *
     * Default: `null`
     */
    inputSourceMap?: InputSourceMap | null | undefined;

    /**
     * Should the output be minified (not printing last semicolons in blocks, printing literal string values instead of escaped ones, stripping `()` from `new` when safe)
     *
     * Default: `false`
     */
    minified?: boolean | null | undefined;

    /**
     * Specify a custom name for module ids
     *
     * Default: `null`
     */
    moduleId?: string | null | undefined;

    /**
     * If truthy, insert an explicit id for modules. By default, all modules are anonymous. (Not available for `common` modules)
     *
     * Default: `false`
     */
    moduleIds?: boolean | null | undefined;

    /**
     * Optional prefix for the AMD module formatter that will be prepend to the filename on module definitions
     *
     * Default: `(sourceRoot)`
     */
    moduleRoot?: string | null | undefined;

    /**
     * A glob, regex, or mixed array of both, matching paths to **only** compile. Can also be an array of arrays containing paths to explicitly match. When attempting to compile
     * a non-matching file it's returned verbatim
     *
     * Default: `null`
     */
    only?: MatchPattern[] | null | undefined;

    /**
     * Allows users to provide an array of options that will be merged into the current configuration one at a time.
     * This feature is best used alongside the "test"/"include"/"exclude" options to provide conditions for which an override should apply
     */
    overrides?: TransformOptions[] | undefined;

    /**
     * An object containing the options to be passed down to the babel parser, @babel/parser
     *
     * Default: `{}`
     */
    parserOpts?: ParserOptions | null | undefined;

    /**
     * List of plugins to load and use
     *
     * Default: `[]`
     */
    plugins?: PluginItem[] | null | undefined;

    /**
     * List of presets (a set of plugins) to load and use
     *
     * Default: `[]`
     */
    presets?: PluginItem[] | null | undefined;

    /**
     * Retain line numbers. This will lead to wacky code but is handy for scenarios where you can't use source maps. (**NOTE**: This will not retain the columns)
     *
     * Default: `false`
     */
    retainLines?: boolean | null | undefined;

    /**
     * An optional callback that controls whether a comment should be output or not. Called as `shouldPrintComment(commentContents)`. **NOTE**: This overrides the `comment` option when used
     *
     * Default: `null`
     */
    shouldPrintComment?: ((commentContents: string) => boolean) | null | undefined;

    /**
     * Set `sources[0]` on returned source map
     *
     * Default: `(filenameRelative)`
     */
    sourceFileName?: string | null | undefined;

    /**
     * If truthy, adds a `map` property to returned output. If set to `"inline"`, a comment with a sourceMappingURL directive is added to the bottom of the returned code. If set to `"both"`
     * then a `map` property is returned as well as a source map comment appended. **This does not emit sourcemap files by itself!**
     *
     * Default: `false`
     */
    sourceMaps?: boolean | "inline" | "both" | null | undefined;

    /**
     * The root from which all sources are relative
     *
     * Default: `(moduleRoot)`
     */
    sourceRoot?: string | null | undefined;

    /**
     * Indicate the mode the code should be parsed in. Can be one of "script", "module", or "unambiguous". `"unambiguous"` will make Babel attempt to guess, based on the presence of ES6
     * `import` or `export` statements. Files with ES6 `import`s and `export`s are considered `"module"` and are otherwise `"script"`.
     *
     * Default: `("module")`
     */
    sourceType?: "script" | "module" | "unambiguous" | null | undefined;

    /**
     * If all patterns fail to match, the current configuration object is considered inactive and is ignored during config processing.
     */
    test?: MatchPattern | MatchPattern[] | undefined;

    /**
     * Describes the environments you support/target for your project.
     * This can either be a [browserslist-compatible](https://github.com/ai/browserslist) query (with [caveats](https://babeljs.io/docs/en/babel-preset-env#ineffective-browserslist-queries))
     *
     * Default: `{}`
     */
    targets?:
        | string
        | string[]
        | {
            esmodules?: boolean;
            node?: Omit<string, "current"> | "current" | true;
            safari?: Omit<string, "tp"> | "tp";
            browsers?: string | string[];
            android?: string;
            chrome?: string;
            deno?: string;
            edge?: string;
            electron?: string;
            firefox?: string;
            ie?: string;
            ios?: string;
            opera?: string;
            rhino?: string;
            samsung?: string;
        };

    /**
     * An optional callback that can be used to wrap visitor methods. **NOTE**: This is useful for things like introspection, and not really needed for implementing anything. Called as
     * `wrapPluginVisitorMethod(pluginAlias, visitorType, callback)`.
     */
    wrapPluginVisitorMethod?:
        | ((
            pluginAlias: string,
            visitorType: "enter" | "exit",
            callback: (path: NodePath, state: any) => void,
        ) => (path: NodePath, state: any) => void)
        | null
        | undefined;
}

export interface TransformCaller {
    // the only required property
    name: string;
    // e.g. set to true by `babel-loader` and false by `babel-jest`
    supportsStaticESM?: boolean | undefined;
    supportsDynamicImport?: boolean | undefined;
    supportsExportNamespaceFrom?: boolean | undefined;
    supportsTopLevelAwait?: boolean | undefined;
    // augment this with a "declare module '@babel/core' { ... }" if you need more keys
}

export type FileResultCallback = (err: Error | null, result: BabelFileResult | null) => any;

export interface MatchPatternContext {
    envName: string;
    dirname: string;
    caller: TransformCaller | undefined;
}
export type MatchPattern = string | RegExp | ((filename: string | undefined, context: MatchPatternContext) => boolean);

/**
 * Transforms the passed in code. Calling a callback with an object with the generated code, source map, and AST.
 */
export function transform(code: string, callback: FileResultCallback): void;

/**
 * Transforms the passed in code. Calling a callback with an object with the generated code, source map, and AST.
 */
export function transform(code: string, opts: TransformOptions | undefined, callback: FileResultCallback): void;

/**
 * Here for backward-compatibility. Ideally use `transformSync` if you want a synchronous API.
 */
export function transform(code: string, opts?: TransformOptions): BabelFileResult | null;

/**
 * Transforms the passed in code. Returning an object with the generated code, source map, and AST.
 */
export function transformSync(code: string, opts?: TransformOptions): BabelFileResult | null;

/**
 * Transforms the passed in code. Calling a callback with an object with the generated code, source map, and AST.
 */
export function transformAsync(code: string, opts?: TransformOptions): Promise<BabelFileResult | null>;

/**
 * Asynchronously transforms the entire contents of a file.
 */
export function transformFile(filename: string, callback: FileResultCallback): void;

/**
 * Asynchronously transforms the entire contents of a file.
 */
export function transformFile(filename: string, opts: TransformOptions | undefined, callback: FileResultCallback): void;

/**
 * Synchronous version of `babel.transformFile`. Returns the transformed contents of the `filename`.
 */
export function transformFileSync(filename: string, opts?: TransformOptions): BabelFileResult | null;

/**
 * Asynchronously transforms the entire contents of a file.
 */
export function transformFileAsync(filename: string, opts?: TransformOptions): Promise<BabelFileResult | null>;

/**
 * Given an AST, transform it.
 */
export function transformFromAst(ast: Node, code: string | undefined, callback: FileResultCallback): void;

/**
 * Given an AST, transform it.
 */
export function transformFromAst(
    ast: Node,
    code: string | undefined,
    opts: TransformOptions | undefined,
    callback: FileResultCallback,
): void;

/**
 * Here for backward-compatibility. Ideally use ".transformSync" if you want a synchronous API.
 */
export function transformFromAstSync(ast: Node, code?: string, opts?: TransformOptions): BabelFileResult | null;

/**
 * Given an AST, transform it.
 */
export function transformFromAstAsync(
    ast: Node,
    code?: string,
    opts?: TransformOptions,
): Promise<BabelFileResult | null>;

// A babel plugin is a simple function which must return an object matching
// the following interface. Babel will throw if it finds unknown properties.
// The list of allowed plugin keys is here:
// https://github.com/babel/babel/blob/4e50b2d9d9c376cee7a2cbf56553fe5b982ea53c/packages/babel-core/src/config/option-manager.js#L71
export interface PluginObj<S = PluginPass> {
    name?: string | undefined;
    manipulateOptions?(opts: any, parserOpts: any): void;
    pre?(this: S, file: BabelFile): void;
    visitor: Visitor<S>;
    post?(this: S, file: BabelFile): void;
    inherits?: any;
}

export interface BabelFile {
    ast: t.File;
    opts: TransformOptions;
    hub: Hub;
    metadata: object;
    path: NodePath<t.Program>;
    scope: Scope;
    inputMap: object | null;
    code: string;
}

export interface PluginPass {
    file: BabelFile;
    key: string;
    opts: object;
    cwd: string;
    filename: string | undefined;
    get(key: unknown): any;
    set(key: unknown, value: unknown): void;
    [key: string]: unknown;
}

export interface BabelFileResult {
    ast?: t.File | null | undefined;
    code?: string | null | undefined;
    ignored?: boolean | undefined;
    map?:
        | {
            version: number;
            sources: string[];
            names: string[];
            sourceRoot?: string | undefined;
            sourcesContent?: string[] | undefined;
            mappings: string;
            file: string;
        }
        | null
        | undefined;
    metadata?: BabelFileMetadata | undefined;
}

export interface BabelFileMetadata {
    usedHelpers: string[];
    marked: Array<{
        type: string;
        message: string;
        loc: object;
    }>;
    modules: BabelFileModulesMetadata;
}

export interface BabelFileModulesMetadata {
    imports: object[];
    exports: {
        exported: object[];
        specifiers: object[];
    };
}

export type FileParseCallback = (err: Error | null, result: ParseResult | null) => any;

/**
 * Given some code, parse it using Babel's standard behavior.
 * Referenced presets and plugins will be loaded such that optional syntax plugins are automatically enabled.
 */
export function parse(code: string, callback: FileParseCallback): void;

/**
 * Given some code, parse it using Babel's standard behavior.
 * Referenced presets and plugins will be loaded such that optional syntax plugins are automatically enabled.
 */
export function parse(code: string, options: TransformOptions | undefined, callback: FileParseCallback): void;

/**
 * Given some code, parse it using Babel's standard behavior.
 * Referenced presets and plugins will be loaded such that optional syntax plugins are automatically enabled.
 */
export function parse(code: string, options?: TransformOptions): ParseResult | null;

/**
 * Given some code, parse it using Babel's standard behavior.
 * Referenced presets and plugins will be loaded such that optional syntax plugins are automatically enabled.
 */
export function parseSync(code: string, options?: TransformOptions): ParseResult | null;

/**
 * Given some code, parse it using Babel's standard behavior.
 * Referenced presets and plugins will be loaded such that optional syntax plugins are automatically enabled.
 */
export function parseAsync(code: string, options?: TransformOptions): Promise<ParseResult | null>;

/**
 * Resolve Babel's options fully, resulting in an options object where:
 *
 * * opts.plugins is a full list of Plugin instances.
 * * opts.presets is empty and all presets are flattened into opts.
 * * It can be safely passed back to Babel. Fields like babelrc have been set to false so that later calls to Babel
 * will not make a second attempt to load config files.
 *
 * Plugin instances aren't meant to be manipulated directly, but often callers will serialize this opts to JSON to
 * use it as a cache key representing the options Babel has received. Caching on this isn't 100% guaranteed to
 * invalidate properly, but it is the best we have at the moment.
 */
export function loadOptions(options?: TransformOptions): object | null;

/**
 * To allow systems to easily manipulate and validate a user's config, this function resolves the plugins and
 * presets and proceeds no further. The expectation is that callers will take the config's .options, manipulate it
 * as then see fit and pass it back to Babel again.
 *
 * * `babelrc: string | void` - The path of the `.babelrc` file, if there was one.
 * * `babelignore: string | void` - The path of the `.babelignore` file, if there was one.
 * * `options: ValidatedOptions` - The partially resolved options, which can be manipulated and passed back
 * to Babel again.
 *  * `plugins: Array<ConfigItem>` - See below.
 *  * `presets: Array<ConfigItem>` - See below.
 *  * It can be safely passed back to Babel. Fields like `babelrc` have been set to false so that later calls to
 * Babel will not make a second attempt to load config files.
 *
 * `ConfigItem` instances expose properties to introspect the values, but each item should be treated as
 * immutable. If changes are desired, the item should be removed from the list and replaced with either a normal
 * Babel config value, or with a replacement item created by `babel.createConfigItem`. See that function for
 * information about `ConfigItem` fields.
 */
export function loadPartialConfig(options?: TransformOptions): Readonly<PartialConfig> | null;
export function loadPartialConfigAsync(options?: TransformOptions): Promise<Readonly<PartialConfig> | null>;

export interface PartialConfig {
    options: TransformOptions;
    babelrc?: string | undefined;
    babelignore?: string | undefined;
    config?: string | undefined;
    hasFilesystemConfig: () => boolean;
}

export interface ConfigItem {
    /**
     * The name that the user gave the plugin instance, e.g. `plugins: [ ['env', {}, 'my-env'] ]`
     */
    name?: string | undefined;

    /**
     * The resolved value of the plugin.
     */
    value: object | ((...args: any[]) => any);

    /**
     * The options object passed to the plugin.
     */
    options?: object | false | undefined;

    /**
     * The path that the options are relative to.
     */
    dirname: string;

    /**
     * Information about the plugin's file, if Babel knows it.
     *  *
     */
    file?:
        | {
            /**
             * The file that the user requested, e.g. `"@babel/env"`
             */
            request: string;

            /**
             * The full path of the resolved file, e.g. `"/tmp/node_modules/@babel/preset-env/lib/index.js"`
             */
            resolved: string;
        }
        | null
        | undefined;
}

export type PluginOptions = object | undefined | false;

export type PluginTarget = string | object | ((...args: any[]) => any);

export type PluginItem =
    | ConfigItem
    | PluginObj<any>
    | PluginTarget
    | [PluginTarget, PluginOptions]
    | [PluginTarget, PluginOptions, string | undefined];

export function resolvePlugin(name: string, dirname: string): string | null;
export function resolvePreset(name: string, dirname: string): string | null;

export interface CreateConfigItemOptions {
    dirname?: string | undefined;
    type?: "preset" | "plugin" | undefined;
}

/**
 * Allows build tooling to create and cache config items up front. If this function is called multiple times for a
 * given plugin, Babel will call the plugin's function itself multiple times. If you have a clear set of expected
 * plugins and presets to inject, pre-constructing the config items would be recommended.
 */
export function createConfigItem(
    value: PluginTarget | [PluginTarget, PluginOptions] | [PluginTarget, PluginOptions, string | undefined],
    options?: CreateConfigItemOptions,
): ConfigItem;

// NOTE: the documentation says the ConfigAPI also exposes @babel/core's exports, but it actually doesn't
/**
 * @see https://babeljs.io/docs/en/next/config-files#config-function-api
 */
export interface ConfigAPI {
    /**
     * The version string for the Babel version that is loading the config file.
     *
     * @see https://babeljs.io/docs/en/next/config-files#apiversion
     */
    version: string;
    /**
     * @see https://babeljs.io/docs/en/next/config-files#apicache
     */
    cache: SimpleCacheConfigurator;
    /**
     * @see https://babeljs.io/docs/en/next/config-files#apienv
     */
    env: EnvFunction;
    // undocumented; currently hardcoded to return 'false'
    // async(): boolean
    /**
     * This API is used as a way to access the `caller` data that has been passed to Babel.
     * Since many instances of Babel may be running in the same process with different `caller` values,
     * this API is designed to automatically configure `api.cache`, the same way `api.env()` does.
     *
     * The `caller` value is available as the first parameter of the callback function.
     * It is best used with something like this to toggle configuration behavior
     * based on a specific environment:
     *
     * @example
     * function isBabelRegister(caller?: { name: string }) {
     *   return !!(caller && caller.name === "@babel/register")
     * }
     * api.caller(isBabelRegister)
     *
     * @see https://babeljs.io/docs/en/next/config-files#apicallercb
     */
    caller<T extends SimpleCacheKey>(callerCallback: (caller: TransformOptions["caller"]) => T): T;
    /**
     * While `api.version` can be useful in general, it's sometimes nice to just declare your version.
     * This API exposes a simple way to do that with:
     *
     * @example
     * api.assertVersion(7) // major version only
     * api.assertVersion("^7.2")
     *
     * @see https://babeljs.io/docs/en/next/config-files#apiassertversionrange
     */
    assertVersion(versionRange: number | string): boolean;
    // NOTE: this is an undocumented reexport from "@babel/parser" but it's missing from its types
    // tokTypes: typeof tokTypes
}

/**
 * JS configs are great because they can compute a config on the fly,
 * but the downside there is that it makes caching harder.
 * Babel wants to avoid re-executing the config function every time a file is compiled,
 * because then it would also need to re-execute any plugin and preset functions
 * referenced in that config.
 *
 * To avoid this, Babel expects users of config functions to tell it how to manage caching
 * within a config file.
 *
 * @see https://babeljs.io/docs/en/next/config-files#apicache
 */
export interface SimpleCacheConfigurator {
    // there is an undocumented call signature that is a shorthand for forever()/never()/using().
    // (ever: boolean): void
    // <T extends SimpleCacheKey>(callback: CacheCallback<T>): T
    /**
     * Permacache the computed config and never call the function again.
     */
    forever(): void;
    /**
     * Do not cache this config, and re-execute the function every time.
     */
    never(): void;
    /**
     * Any time the using callback returns a value other than the one that was expected,
     * the overall config function will be called again and a new entry will be added to the cache.
     *
     * @example
     * api.cache.using(() => process.env.NODE_ENV)
     */
    using<T extends SimpleCacheKey>(callback: SimpleCacheCallback<T>): T;
    /**
     * Any time the using callback returns a value other than the one that was expected,
     * the overall config function will be called again and all entries in the cache will
     * be replaced with the result.
     *
     * @example
     * api.cache.invalidate(() => process.env.NODE_ENV)
     */
    invalidate<T extends SimpleCacheKey>(callback: SimpleCacheCallback<T>): T;
}

// https://github.com/babel/babel/blob/v7.3.3/packages/babel-core/src/config/caching.js#L231
export type SimpleCacheKey = string | boolean | number | null | undefined;
export type SimpleCacheCallback<T extends SimpleCacheKey> = () => T;

/**
 * Since `NODE_ENV` is a fairly common way to toggle behavior, Babel also includes an API function
 * meant specifically for that. This API is used as a quick way to check the `"envName"` that Babel
 * was loaded with, which takes `NODE_ENV` into account if no other overriding environment is set.
 *
 * @see https://babeljs.io/docs/en/next/config-files#apienv
 */
export interface EnvFunction {
    /**
     * @returns the current `envName` string
     */
    (): string;
    /**
     * @returns `true` if the `envName` is `===` any of the given strings
     */
    (envName: string | readonly string[]): boolean;
    // the official documentation is misleading for this one...
    // this just passes the callback to `cache.using` but with an additional argument.
    // it returns its result instead of necessarily returning a boolean.
    <T extends SimpleCacheKey>(envCallback: (envName: NonNullable<TransformOptions["envName"]>) => T): T;
}

export type ConfigFunction = (api: ConfigAPI) => TransformOptions;

export as namespace babel;

----------------------------------------
File: ./animations/node_modules/@types/react/jsx-dev-runtime.d.ts
----------------------------------------
import * as React from "./";
export { Fragment } from "./";

export namespace JSX {
    type ElementType = React.JSX.ElementType;
    interface Element extends React.JSX.Element {}
    interface ElementClass extends React.JSX.ElementClass {}
    interface ElementAttributesProperty extends React.JSX.ElementAttributesProperty {}
    interface ElementChildrenAttribute extends React.JSX.ElementChildrenAttribute {}
    type LibraryManagedAttributes<C, P> = React.JSX.LibraryManagedAttributes<C, P>;
    interface IntrinsicAttributes extends React.JSX.IntrinsicAttributes {}
    interface IntrinsicClassAttributes<T> extends React.JSX.IntrinsicClassAttributes<T> {}
    interface IntrinsicElements extends React.JSX.IntrinsicElements {}
}

export interface JSXSource {
    /**
     * The source file where the element originates from.
     */
    fileName?: string | undefined;

    /**
     * The line number where the element was created.
     */
    lineNumber?: number | undefined;

    /**
     * The column number where the element was created.
     */
    columnNumber?: number | undefined;
}

/**
 * Create a React element.
 *
 * You should not use this function directly. Use JSX and a transpiler instead.
 */
export function jsxDEV(
    type: React.ElementType,
    props: unknown,
    key: React.Key | undefined,
    isStatic: boolean,
    source?: JSXSource,
    self?: unknown,
): React.ReactElement;

----------------------------------------
File: ./animations/node_modules/@types/react/jsx-runtime.d.ts
----------------------------------------
import * as React from "./";
export { Fragment } from "./";

export namespace JSX {
    type ElementType = React.JSX.ElementType;
    interface Element extends React.JSX.Element {}
    interface ElementClass extends React.JSX.ElementClass {}
    interface ElementAttributesProperty extends React.JSX.ElementAttributesProperty {}
    interface ElementChildrenAttribute extends React.JSX.ElementChildrenAttribute {}
    type LibraryManagedAttributes<C, P> = React.JSX.LibraryManagedAttributes<C, P>;
    interface IntrinsicAttributes extends React.JSX.IntrinsicAttributes {}
    interface IntrinsicClassAttributes<T> extends React.JSX.IntrinsicClassAttributes<T> {}
    interface IntrinsicElements extends React.JSX.IntrinsicElements {}
}

/**
 * Create a React element.
 *
 * You should not use this function directly. Use JSX and a transpiler instead.
 */
export function jsx(
    type: React.ElementType,
    props: unknown,
    key?: React.Key,
): React.ReactElement;

/**
 * Create a React element.
 *
 * You should not use this function directly. Use JSX and a transpiler instead.
 */
export function jsxs(
    type: React.ElementType,
    props: unknown,
    key?: React.Key,
): React.ReactElement;

----------------------------------------
File: ./animations/node_modules/@types/react/canary.d.ts
----------------------------------------
/**
 * These are types for things that are present in the React `canary` release channel.
 *
 * To load the types declared here in an actual project, there are three ways. The easiest one,
 * if your `tsconfig.json` already has a `"types"` array in the `"compilerOptions"` section,
 * is to add `"react/canary"` to the `"types"` array.
 *
 * Alternatively, a specific import syntax can to be used from a typescript file.
 * This module does not exist in reality, which is why the {} is important:
 *
 * ```ts
 * import {} from 'react/canary'
 * ```
 *
 * It is also possible to include it through a triple-slash reference:
 *
 * ```ts
 * /// <reference types="react/canary" />
 * ```
 *
 * Either the import or the reference only needs to appear once, anywhere in the project.
 */

// See https://github.com/facebook/react/blob/main/packages/react/src/React.js to see how the exports are declared,

import React = require(".");

export {};

declare const UNDEFINED_VOID_ONLY: unique symbol;
type VoidOrUndefinedOnly = void | { [UNDEFINED_VOID_ONLY]: never };

type NativeToggleEvent = ToggleEvent;

declare module "." {
    export type Usable<T> = PromiseLike<T> | Context<T>;

    export function use<T>(usable: Usable<T>): T;

    interface ServerContextJSONArray extends ReadonlyArray<ServerContextJSONValue> {}
    export type ServerContextJSONValue =
        | string
        | boolean
        | number
        | null
        | ServerContextJSONArray
        | { [key: string]: ServerContextJSONValue };
    export interface ServerContext<T extends ServerContextJSONValue> {
        Provider: Provider<T>;
    }
    /**
     * Accepts a context object (the value returned from `React.createContext` or `React.createServerContext`) and returns the current
     * context value, as given by the nearest context provider for the given context.
     *
     * @version 16.8.0
     * @see https://react.dev/reference/react/useContext
     */
    function useContext<T extends ServerContextJSONValue>(context: ServerContext<T>): T;
    export function createServerContext<T extends ServerContextJSONValue>(
        globalName: string,
        defaultValue: T,
    ): ServerContext<T>;

    // eslint-disable-next-line @typescript-eslint/no-unsafe-function-type
    export function cache<CachedFunction extends Function>(fn: CachedFunction): CachedFunction;

    export function unstable_useCacheRefresh(): () => void;

    interface DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS {
        functions: (formData: FormData) => void | Promise<void>;
    }

    export interface TransitionStartFunction {
        /**
         * Marks all state updates inside the async function as transitions
         *
         * @see {https://react.dev/reference/react/useTransition#starttransition}
         *
         * @param callback
         */
        (callback: () => Promise<VoidOrUndefinedOnly>): void;
    }

    /**
     * Similar to `useTransition` but allows uses where hooks are not available.
     *
     * @param callback An _asynchronous_ function which causes state updates that can be deferred.
     */
    export function startTransition(scope: () => Promise<VoidOrUndefinedOnly>): void;

    export function useOptimistic<State>(
        passthrough: State,
    ): [State, (action: State | ((pendingState: State) => State)) => void];
    export function useOptimistic<State, Action>(
        passthrough: State,
        reducer: (state: State, action: Action) => State,
    ): [State, (action: Action) => void];

    interface DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES {
        cleanup: () => VoidOrUndefinedOnly;
    }

    export function useActionState<State>(
        action: (state: Awaited<State>) => State | Promise<State>,
        initialState: Awaited<State>,
        permalink?: string,
    ): [state: Awaited<State>, dispatch: () => void, isPending: boolean];
    export function useActionState<State, Payload>(
        action: (state: Awaited<State>, payload: Payload) => State | Promise<State>,
        initialState: Awaited<State>,
        permalink?: string,
    ): [state: Awaited<State>, dispatch: (payload: Payload) => void, isPending: boolean];

    interface DOMAttributes<T> {
        // Transition Events
        onTransitionCancel?: TransitionEventHandler<T> | undefined;
        onTransitionCancelCapture?: TransitionEventHandler<T> | undefined;
        onTransitionRun?: TransitionEventHandler<T> | undefined;
        onTransitionRunCapture?: TransitionEventHandler<T> | undefined;
        onTransitionStart?: TransitionEventHandler<T> | undefined;
        onTransitionStartCapture?: TransitionEventHandler<T> | undefined;
    }

    type ToggleEventHandler<T = Element> = EventHandler<ToggleEvent<T>>;

    interface HTMLAttributes<T> {
        popover?: "" | "auto" | "manual" | undefined;
        popoverTargetAction?: "toggle" | "show" | "hide" | undefined;
        popoverTarget?: string | undefined;
        onToggle?: ToggleEventHandler<T> | undefined;
        onBeforeToggle?: ToggleEventHandler<T> | undefined;
    }

    interface ToggleEvent<T = Element> extends SyntheticEvent<T, NativeToggleEvent> {
        oldState: "closed" | "open";
        newState: "closed" | "open";
    }

    interface LinkHTMLAttributes<T> {
        precedence?: string | undefined;
    }

    interface StyleHTMLAttributes<T> {
        href?: string | undefined;
        precedence?: string | undefined;
    }

    /**
     * @internal Use `Awaited<ReactNode>` instead
     */
    // Helper type to enable `Awaited<ReactNode>`.
    // Must be a copy of the non-thenables of `ReactNode`.
    type AwaitedReactNode =
        | ReactElement
        | string
        | number
        | Iterable<AwaitedReactNode>
        | ReactPortal
        | boolean
        | null
        | undefined;
    interface DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_REACT_NODES {
        promises: Promise<AwaitedReactNode>;
        bigints: bigint;
    }
}

----------------------------------------
File: ./animations/node_modules/@types/react/experimental.d.ts
----------------------------------------
/**
 * These are types for things that are present in the `experimental` builds of React but not yet
 * on a stable build.
 *
 * Once they are promoted to stable they can just be moved to the main index file.
 *
 * To load the types declared here in an actual project, there are three ways. The easiest one,
 * if your `tsconfig.json` already has a `"types"` array in the `"compilerOptions"` section,
 * is to add `"react/experimental"` to the `"types"` array.
 *
 * Alternatively, a specific import syntax can to be used from a typescript file.
 * This module does not exist in reality, which is why the {} is important:
 *
 * ```ts
 * import {} from 'react/experimental'
 * ```
 *
 * It is also possible to include it through a triple-slash reference:
 *
 * ```ts
 * /// <reference types="react/experimental" />
 * ```
 *
 * Either the import or the reference only needs to appear once, anywhere in the project.
 */

// See https://github.com/facebook/react/blob/master/packages/react/src/React.js to see how the exports are declared,
// and https://github.com/facebook/react/blob/master/packages/shared/ReactFeatureFlags.js to verify which APIs are
// flagged experimental or not. Experimental APIs will be tagged with `__EXPERIMENTAL__`.
//
// For the inputs of types exported as simply a fiber tag, the `beginWork` function of ReactFiberBeginWork.js
// is a good place to start looking for details; it generally calls prop validation functions or delegates
// all tasks done as part of the render phase (the concurrent part of the React update cycle).
//
// Suspense-related handling can be found in ReactFiberThrow.js.

import React = require("./canary");

export {};

declare const UNDEFINED_VOID_ONLY: unique symbol;
type VoidOrUndefinedOnly = void | { [UNDEFINED_VOID_ONLY]: never };

declare module "." {
    export interface SuspenseProps {
        /**
         * The presence of this prop indicates that the content is computationally expensive to render.
         * In other words, the tree is CPU bound and not I/O bound (e.g. due to fetching data).
         * @see {@link https://github.com/facebook/react/pull/19936}
         */
        unstable_expectedLoadTime?: number | undefined;
    }

    export type SuspenseListRevealOrder = "forwards" | "backwards" | "together";
    export type SuspenseListTailMode = "collapsed" | "hidden";

    export interface SuspenseListCommonProps {
        /**
         * Note that SuspenseList require more than one child;
         * it is a runtime warning to provide only a single child.
         *
         * It does, however, allow those children to be wrapped inside a single
         * level of `<React.Fragment>`.
         */
        children: ReactElement | Iterable<ReactElement>;
    }

    interface DirectionalSuspenseListProps extends SuspenseListCommonProps {
        /**
         * Defines the order in which the `SuspenseList` children should be revealed.
         */
        revealOrder: "forwards" | "backwards";
        /**
         * Dictates how unloaded items in a SuspenseList is shown.
         *
         * - By default, `SuspenseList` will show all fallbacks in the list.
         * - `collapsed` shows only the next fallback in the list.
         * - `hidden` doesn’t show any unloaded items.
         */
        tail?: SuspenseListTailMode | undefined;
    }

    interface NonDirectionalSuspenseListProps extends SuspenseListCommonProps {
        /**
         * Defines the order in which the `SuspenseList` children should be revealed.
         */
        revealOrder?: Exclude<SuspenseListRevealOrder, DirectionalSuspenseListProps["revealOrder"]> | undefined;
        /**
         * The tail property is invalid when not using the `forwards` or `backwards` reveal orders.
         */
        tail?: never | undefined;
    }

    export type SuspenseListProps = DirectionalSuspenseListProps | NonDirectionalSuspenseListProps;

    /**
     * `SuspenseList` helps coordinate many components that can suspend by orchestrating the order
     * in which these components are revealed to the user.
     *
     * When multiple components need to fetch data, this data may arrive in an unpredictable order.
     * However, if you wrap these items in a `SuspenseList`, React will not show an item in the list
     * until previous items have been displayed (this behavior is adjustable).
     *
     * @see https://reactjs.org/docs/concurrent-mode-reference.html#suspenselist
     * @see https://reactjs.org/docs/concurrent-mode-patterns.html#suspenselist
     */
    export const unstable_SuspenseList: ExoticComponent<SuspenseListProps>;

    // eslint-disable-next-line @typescript-eslint/no-unsafe-function-type
    export function experimental_useEffectEvent<T extends Function>(event: T): T;

    /**
     * Warning: Only available in development builds.
     */
    function captureOwnerStack(): string | null;

    type Reference = object;
    type TaintableUniqueValue = string | bigint | ArrayBufferView;
    function experimental_taintUniqueValue(
        message: string | undefined,
        lifetime: Reference,
        value: TaintableUniqueValue,
    ): void;
    function experimental_taintObjectReference(message: string | undefined, object: Reference): void;

    export interface HTMLAttributes<T> {
        /**
         * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert
         */
        inert?: boolean | undefined;
    }
}

----------------------------------------
File: ./animations/node_modules/@types/react/README.md
----------------------------------------
# Installation
> `npm install --save @types/react`

# Summary
This package contains type definitions for react (https://react.dev/).

# Details
Files were exported from https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/react/v18.

### Additional Details
 * Last updated: Fri, 20 Dec 2024 01:29:27 GMT
 * Dependencies: [@types/prop-types](https://npmjs.com/package/@types/prop-types), [csstype](https://npmjs.com/package/csstype)

# Credits
These definitions were written by [Asana](https://asana.com), [AssureSign](http://www.assuresign.com), [Microsoft](https://microsoft.com), [John Reilly](https://github.com/johnnyreilly), [Benoit Benezech](https://github.com/bbenezech), [Patricio Zavolinsky](https://github.com/pzavolinsky), [Eric Anderson](https://github.com/ericanderson), [Dovydas Navickas](https://github.com/DovydasNavickas), [Josh Rutherford](https://github.com/theruther4d), [Guilherme Hübner](https://github.com/guilhermehubner), [Ferdy Budhidharma](https://github.com/ferdaber), [Johann Rakotoharisoa](https://github.com/jrakotoharisoa), [Olivier Pascal](https://github.com/pascaloliv), [Martin Hochel](https://github.com/hotell), [Frank Li](https://github.com/franklixuefei), [Jessica Franco](https://github.com/Jessidhia), [Saransh Kataria](https://github.com/saranshkataria), [Kanitkorn Sujautra](https://github.com/lukyth), [Sebastian Silbermann](https://github.com/eps1lon), [Kyle Scully](https://github.com/zieka), [Cong Zhang](https://github.com/dancerphil), [Dimitri Mitropoulos](https://github.com/dimitropoulos), [JongChan Choi](https://github.com/disjukr), [Victor Magalhães](https://github.com/vhfmag), [Priyanshu Rav](https://github.com/priyanshurav), [Dmitry Semigradsky](https://github.com/Semigradsky), and [Matt Pocock](https://github.com/mattpocock).

----------------------------------------
File: ./animations/node_modules/@types/react/global.d.ts
----------------------------------------
/*
React projects that don't include the DOM library need these interfaces to compile.
React Native applications use React, but there is no DOM available. The JavaScript runtime
is ES6/ES2015 only. These definitions allow such projects to compile with only `--lib ES6`.

Warning: all of these interfaces are empty. If you want type definitions for various properties
(such as HTMLInputElement.prototype.value), you need to add `--lib DOM` (via command line or tsconfig.json).
*/

interface Event {}
interface AnimationEvent extends Event {}
interface ClipboardEvent extends Event {}
interface CompositionEvent extends Event {}
interface DragEvent extends Event {}
interface FocusEvent extends Event {}
interface KeyboardEvent extends Event {}
interface MouseEvent extends Event {}
interface TouchEvent extends Event {}
interface PointerEvent extends Event {}
interface ToggleEvent extends Event {}
interface TransitionEvent extends Event {}
interface UIEvent extends Event {}
interface WheelEvent extends Event {}

interface EventTarget {}
interface Document {}
interface DataTransfer {}
interface StyleMedia {}

interface Element {}
interface DocumentFragment {}

interface HTMLElement extends Element {}
interface HTMLAnchorElement extends HTMLElement {}
interface HTMLAreaElement extends HTMLElement {}
interface HTMLAudioElement extends HTMLElement {}
interface HTMLBaseElement extends HTMLElement {}
interface HTMLBodyElement extends HTMLElement {}
interface HTMLBRElement extends HTMLElement {}
interface HTMLButtonElement extends HTMLElement {}
interface HTMLCanvasElement extends HTMLElement {}
interface HTMLDataElement extends HTMLElement {}
interface HTMLDataListElement extends HTMLElement {}
interface HTMLDetailsElement extends HTMLElement {}
interface HTMLDialogElement extends HTMLElement {}
interface HTMLDivElement extends HTMLElement {}
interface HTMLDListElement extends HTMLElement {}
interface HTMLEmbedElement extends HTMLElement {}
interface HTMLFieldSetElement extends HTMLElement {}
interface HTMLFormElement extends HTMLElement {}
interface HTMLHeadingElement extends HTMLElement {}
interface HTMLHeadElement extends HTMLElement {}
interface HTMLHRElement extends HTMLElement {}
interface HTMLHtmlElement extends HTMLElement {}
interface HTMLIFrameElement extends HTMLElement {}
interface HTMLImageElement extends HTMLElement {}
interface HTMLInputElement extends HTMLElement {}
interface HTMLModElement extends HTMLElement {}
interface HTMLLabelElement extends HTMLElement {}
interface HTMLLegendElement extends HTMLElement {}
interface HTMLLIElement extends HTMLElement {}
interface HTMLLinkElement extends HTMLElement {}
interface HTMLMapElement extends HTMLElement {}
interface HTMLMetaElement extends HTMLElement {}
interface HTMLMeterElement extends HTMLElement {}
interface HTMLObjectElement extends HTMLElement {}
interface HTMLOListElement extends HTMLElement {}
interface HTMLOptGroupElement extends HTMLElement {}
interface HTMLOptionElement extends HTMLElement {}
interface HTMLOutputElement extends HTMLElement {}
interface HTMLParagraphElement extends HTMLElement {}
interface HTMLParamElement extends HTMLElement {}
interface HTMLPreElement extends HTMLElement {}
interface HTMLProgressElement extends HTMLElement {}
interface HTMLQuoteElement extends HTMLElement {}
interface HTMLSlotElement extends HTMLElement {}
interface HTMLScriptElement extends HTMLElement {}
interface HTMLSelectElement extends HTMLElement {}
interface HTMLSourceElement extends HTMLElement {}
interface HTMLSpanElement extends HTMLElement {}
interface HTMLStyleElement extends HTMLElement {}
interface HTMLTableElement extends HTMLElement {}
interface HTMLTableColElement extends HTMLElement {}
interface HTMLTableDataCellElement extends HTMLElement {}
interface HTMLTableHeaderCellElement extends HTMLElement {}
interface HTMLTableRowElement extends HTMLElement {}
interface HTMLTableSectionElement extends HTMLElement {}
interface HTMLTemplateElement extends HTMLElement {}
interface HTMLTextAreaElement extends HTMLElement {}
interface HTMLTimeElement extends HTMLElement {}
interface HTMLTitleElement extends HTMLElement {}
interface HTMLTrackElement extends HTMLElement {}
interface HTMLUListElement extends HTMLElement {}
interface HTMLVideoElement extends HTMLElement {}
interface HTMLWebViewElement extends HTMLElement {}

interface SVGElement extends Element {}
interface SVGSVGElement extends SVGElement {}
interface SVGCircleElement extends SVGElement {}
interface SVGClipPathElement extends SVGElement {}
interface SVGDefsElement extends SVGElement {}
interface SVGDescElement extends SVGElement {}
interface SVGEllipseElement extends SVGElement {}
interface SVGFEBlendElement extends SVGElement {}
interface SVGFEColorMatrixElement extends SVGElement {}
interface SVGFEComponentTransferElement extends SVGElement {}
interface SVGFECompositeElement extends SVGElement {}
interface SVGFEConvolveMatrixElement extends SVGElement {}
interface SVGFEDiffuseLightingElement extends SVGElement {}
interface SVGFEDisplacementMapElement extends SVGElement {}
interface SVGFEDistantLightElement extends SVGElement {}
interface SVGFEDropShadowElement extends SVGElement {}
interface SVGFEFloodElement extends SVGElement {}
interface SVGFEFuncAElement extends SVGElement {}
interface SVGFEFuncBElement extends SVGElement {}
interface SVGFEFuncGElement extends SVGElement {}
interface SVGFEFuncRElement extends SVGElement {}
interface SVGFEGaussianBlurElement extends SVGElement {}
interface SVGFEImageElement extends SVGElement {}
interface SVGFEMergeElement extends SVGElement {}
interface SVGFEMergeNodeElement extends SVGElement {}
interface SVGFEMorphologyElement extends SVGElement {}
interface SVGFEOffsetElement extends SVGElement {}
interface SVGFEPointLightElement extends SVGElement {}
interface SVGFESpecularLightingElement extends SVGElement {}
interface SVGFESpotLightElement extends SVGElement {}
interface SVGFETileElement extends SVGElement {}
interface SVGFETurbulenceElement extends SVGElement {}
interface SVGFilterElement extends SVGElement {}
interface SVGForeignObjectElement extends SVGElement {}
interface SVGGElement extends SVGElement {}
interface SVGImageElement extends SVGElement {}
interface SVGLineElement extends SVGElement {}
interface SVGLinearGradientElement extends SVGElement {}
interface SVGMarkerElement extends SVGElement {}
interface SVGMaskElement extends SVGElement {}
interface SVGMetadataElement extends SVGElement {}
interface SVGPathElement extends SVGElement {}
interface SVGPatternElement extends SVGElement {}
interface SVGPolygonElement extends SVGElement {}
interface SVGPolylineElement extends SVGElement {}
interface SVGRadialGradientElement extends SVGElement {}
interface SVGRectElement extends SVGElement {}
interface SVGSetElement extends SVGElement {}
interface SVGStopElement extends SVGElement {}
interface SVGSwitchElement extends SVGElement {}
interface SVGSymbolElement extends SVGElement {}
interface SVGTextElement extends SVGElement {}
interface SVGTextPathElement extends SVGElement {}
interface SVGTSpanElement extends SVGElement {}
interface SVGUseElement extends SVGElement {}
interface SVGViewElement extends SVGElement {}

interface FormData {}
interface Text {}
interface TouchList {}
interface WebGLRenderingContext {}
interface WebGL2RenderingContext {}

interface TrustedHTML {}

----------------------------------------
File: ./animations/node_modules/@types/react/ts5.0/jsx-dev-runtime.d.ts
----------------------------------------
import * as React from "./";
export { Fragment } from "./";

export namespace JSX {
    interface Element extends React.JSX.Element {}
    interface ElementClass extends React.JSX.ElementClass {}
    interface ElementAttributesProperty extends React.JSX.ElementAttributesProperty {}
    interface ElementChildrenAttribute extends React.JSX.ElementChildrenAttribute {}
    type LibraryManagedAttributes<C, P> = React.JSX.LibraryManagedAttributes<C, P>;
    interface IntrinsicAttributes extends React.JSX.IntrinsicAttributes {}
    interface IntrinsicClassAttributes<T> extends React.JSX.IntrinsicClassAttributes<T> {}
    interface IntrinsicElements extends React.JSX.IntrinsicElements {}
}

export interface JSXSource {
    /**
     * The source file where the element originates from.
     */
    fileName?: string | undefined;

    /**
     * The line number where the element was created.
     */
    lineNumber?: number | undefined;

    /**
     * The column number where the element was created.
     */
    columnNumber?: number | undefined;
}

/**
 * Create a React element.
 *
 * You should not use this function directly. Use JSX and a transpiler instead.
 */
export function jsxDEV(
    type: React.ElementType,
    props: unknown,
    key: React.Key | undefined,
    isStatic: boolean,
    source?: JSXSource,
    self?: unknown,
): React.ReactElement;

----------------------------------------
File: ./animations/node_modules/@types/react/ts5.0/jsx-runtime.d.ts
----------------------------------------
import * as React from "./";
export { Fragment } from "./";

export namespace JSX {
    interface Element extends React.JSX.Element {}
    interface ElementClass extends React.JSX.ElementClass {}
    interface ElementAttributesProperty extends React.JSX.ElementAttributesProperty {}
    interface ElementChildrenAttribute extends React.JSX.ElementChildrenAttribute {}
    type LibraryManagedAttributes<C, P> = React.JSX.LibraryManagedAttributes<C, P>;
    interface IntrinsicAttributes extends React.JSX.IntrinsicAttributes {}
    interface IntrinsicClassAttributes<T> extends React.JSX.IntrinsicClassAttributes<T> {}
    interface IntrinsicElements extends React.JSX.IntrinsicElements {}
}

/**
 * Create a React element.
 *
 * You should not use this function directly. Use JSX and a transpiler instead.
 */
export function jsx(
    type: React.ElementType,
    props: unknown,
    key?: React.Key,
): React.ReactElement;

/**
 * Create a React element.
 *
 * You should not use this function directly. Use JSX and a transpiler instead.
 */
export function jsxs(
    type: React.ElementType,
    props: unknown,
    key?: React.Key,
): React.ReactElement;

----------------------------------------
File: ./animations/node_modules/@types/react/ts5.0/canary.d.ts
----------------------------------------
/**
 * These are types for things that are present in the React `canary` release channel.
 *
 * To load the types declared here in an actual project, there are three ways. The easiest one,
 * if your `tsconfig.json` already has a `"types"` array in the `"compilerOptions"` section,
 * is to add `"react/canary"` to the `"types"` array.
 *
 * Alternatively, a specific import syntax can to be used from a typescript file.
 * This module does not exist in reality, which is why the {} is important:
 *
 * ```ts
 * import {} from 'react/canary'
 * ```
 *
 * It is also possible to include it through a triple-slash reference:
 *
 * ```ts
 * /// <reference types="react/canary" />
 * ```
 *
 * Either the import or the reference only needs to appear once, anywhere in the project.
 */

// See https://github.com/facebook/react/blob/main/packages/react/src/React.js to see how the exports are declared,

import React = require(".");

export {};

declare const UNDEFINED_VOID_ONLY: unique symbol;
type VoidOrUndefinedOnly = void | { [UNDEFINED_VOID_ONLY]: never };

type NativeToggleEvent = ToggleEvent;

declare module "." {
    export type Usable<T> = PromiseLike<T> | Context<T>;

    export function use<T>(usable: Usable<T>): T;

    interface ServerContextJSONArray extends ReadonlyArray<ServerContextJSONValue> {}
    export type ServerContextJSONValue =
        | string
        | boolean
        | number
        | null
        | ServerContextJSONArray
        | { [key: string]: ServerContextJSONValue };
    export interface ServerContext<T extends ServerContextJSONValue> {
        Provider: Provider<T>;
    }
    /**
     * Accepts a context object (the value returned from `React.createContext` or `React.createServerContext`) and returns the current
     * context value, as given by the nearest context provider for the given context.
     *
     * @version 16.8.0
     * @see https://react.dev/reference/react/useContext
     */
    function useContext<T extends ServerContextJSONValue>(context: ServerContext<T>): T;
    export function createServerContext<T extends ServerContextJSONValue>(
        globalName: string,
        defaultValue: T,
    ): ServerContext<T>;

    // eslint-disable-next-line @typescript-eslint/no-unsafe-function-type
    export function cache<CachedFunction extends Function>(fn: CachedFunction): CachedFunction;

    export function unstable_useCacheRefresh(): () => void;

    interface DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS {
        functions: (formData: FormData) => void | Promise<void>;
    }

    export interface TransitionStartFunction {
        /**
         * Marks all state updates inside the async function as transitions
         *
         * @see {https://react.dev/reference/react/useTransition#starttransition}
         *
         * @param callback
         */
        (callback: () => Promise<VoidOrUndefinedOnly>): void;
    }

    /**
     * Similar to `useTransition` but allows uses where hooks are not available.
     *
     * @param callback An _asynchronous_ function which causes state updates that can be deferred.
     */
    export function startTransition(scope: () => Promise<VoidOrUndefinedOnly>): void;

    export function useOptimistic<State>(
        passthrough: State,
    ): [State, (action: State | ((pendingState: State) => State)) => void];
    export function useOptimistic<State, Action>(
        passthrough: State,
        reducer: (state: State, action: Action) => State,
    ): [State, (action: Action) => void];

    interface DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES {
        cleanup: () => VoidOrUndefinedOnly;
    }

    export function useActionState<State>(
        action: (state: Awaited<State>) => State | Promise<State>,
        initialState: Awaited<State>,
        permalink?: string,
    ): [state: Awaited<State>, dispatch: () => void, isPending: boolean];
    export function useActionState<State, Payload>(
        action: (state: Awaited<State>, payload: Payload) => State | Promise<State>,
        initialState: Awaited<State>,
        permalink?: string,
    ): [state: Awaited<State>, dispatch: (payload: Payload) => void, isPending: boolean];

    interface DOMAttributes<T> {
        // Transition Events
        onTransitionCancel?: TransitionEventHandler<T> | undefined;
        onTransitionCancelCapture?: TransitionEventHandler<T> | undefined;
        onTransitionRun?: TransitionEventHandler<T> | undefined;
        onTransitionRunCapture?: TransitionEventHandler<T> | undefined;
        onTransitionStart?: TransitionEventHandler<T> | undefined;
        onTransitionStartCapture?: TransitionEventHandler<T> | undefined;
    }

    type ToggleEventHandler<T = Element> = EventHandler<ToggleEvent<T>>;

    interface HTMLAttributes<T> {
        popover?: "" | "auto" | "manual" | undefined;
        popoverTargetAction?: "toggle" | "show" | "hide" | undefined;
        popoverTarget?: string | undefined;
        onToggle?: ToggleEventHandler<T> | undefined;
        onBeforeToggle?: ToggleEventHandler<T> | undefined;
    }

    interface ToggleEvent<T = Element> extends SyntheticEvent<T, NativeToggleEvent> {
        oldState: "closed" | "open";
        newState: "closed" | "open";
    }

    interface LinkHTMLAttributes<T> {
        precedence?: string | undefined;
    }

    interface StyleHTMLAttributes<T> {
        href?: string | undefined;
        precedence?: string | undefined;
    }

    /**
     * @internal Use `Awaited<ReactNode>` instead
     */
    // Helper type to enable `Awaited<ReactNode>`.
    // Must be a copy of the non-thenables of `ReactNode`.
    type AwaitedReactNode =
        | ReactElement
        | string
        | number
        | Iterable<AwaitedReactNode>
        | ReactPortal
        | boolean
        | null
        | undefined;
    interface DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_REACT_NODES {
        promises: Promise<AwaitedReactNode>;
        bigints: bigint;
    }
}

----------------------------------------
File: ./animations/node_modules/@types/react/ts5.0/experimental.d.ts
----------------------------------------
/**
 * These are types for things that are present in the `experimental` builds of React but not yet
 * on a stable build.
 *
 * Once they are promoted to stable they can just be moved to the main index file.
 *
 * To load the types declared here in an actual project, there are three ways. The easiest one,
 * if your `tsconfig.json` already has a `"types"` array in the `"compilerOptions"` section,
 * is to add `"react/experimental"` to the `"types"` array.
 *
 * Alternatively, a specific import syntax can to be used from a typescript file.
 * This module does not exist in reality, which is why the {} is important:
 *
 * ```ts
 * import {} from 'react/experimental'
 * ```
 *
 * It is also possible to include it through a triple-slash reference:
 *
 * ```ts
 * /// <reference types="react/experimental" />
 * ```
 *
 * Either the import or the reference only needs to appear once, anywhere in the project.
 */

// See https://github.com/facebook/react/blob/master/packages/react/src/React.js to see how the exports are declared,
// and https://github.com/facebook/react/blob/master/packages/shared/ReactFeatureFlags.js to verify which APIs are
// flagged experimental or not. Experimental APIs will be tagged with `__EXPERIMENTAL__`.
//
// For the inputs of types exported as simply a fiber tag, the `beginWork` function of ReactFiberBeginWork.js
// is a good place to start looking for details; it generally calls prop validation functions or delegates
// all tasks done as part of the render phase (the concurrent part of the React update cycle).
//
// Suspense-related handling can be found in ReactFiberThrow.js.

import React = require("./canary");

export {};

declare const UNDEFINED_VOID_ONLY: unique symbol;
type VoidOrUndefinedOnly = void | { [UNDEFINED_VOID_ONLY]: never };

declare module "." {
    export interface SuspenseProps {
        /**
         * The presence of this prop indicates that the content is computationally expensive to render.
         * In other words, the tree is CPU bound and not I/O bound (e.g. due to fetching data).
         * @see {@link https://github.com/facebook/react/pull/19936}
         */
        unstable_expectedLoadTime?: number | undefined;
    }

    export type SuspenseListRevealOrder = "forwards" | "backwards" | "together";
    export type SuspenseListTailMode = "collapsed" | "hidden";

    export interface SuspenseListCommonProps {
        /**
         * Note that SuspenseList require more than one child;
         * it is a runtime warning to provide only a single child.
         *
         * It does, however, allow those children to be wrapped inside a single
         * level of `<React.Fragment>`.
         */
        children: ReactElement | Iterable<ReactElement>;
    }

    interface DirectionalSuspenseListProps extends SuspenseListCommonProps {
        /**
         * Defines the order in which the `SuspenseList` children should be revealed.
         */
        revealOrder: "forwards" | "backwards";
        /**
         * Dictates how unloaded items in a SuspenseList is shown.
         *
         * - By default, `SuspenseList` will show all fallbacks in the list.
         * - `collapsed` shows only the next fallback in the list.
         * - `hidden` doesn’t show any unloaded items.
         */
        tail?: SuspenseListTailMode | undefined;
    }

    interface NonDirectionalSuspenseListProps extends SuspenseListCommonProps {
        /**
         * Defines the order in which the `SuspenseList` children should be revealed.
         */
        revealOrder?: Exclude<SuspenseListRevealOrder, DirectionalSuspenseListProps["revealOrder"]> | undefined;
        /**
         * The tail property is invalid when not using the `forwards` or `backwards` reveal orders.
         */
        tail?: never | undefined;
    }

    export type SuspenseListProps = DirectionalSuspenseListProps | NonDirectionalSuspenseListProps;

    /**
     * `SuspenseList` helps coordinate many components that can suspend by orchestrating the order
     * in which these components are revealed to the user.
     *
     * When multiple components need to fetch data, this data may arrive in an unpredictable order.
     * However, if you wrap these items in a `SuspenseList`, React will not show an item in the list
     * until previous items have been displayed (this behavior is adjustable).
     *
     * @see https://reactjs.org/docs/concurrent-mode-reference.html#suspenselist
     * @see https://reactjs.org/docs/concurrent-mode-patterns.html#suspenselist
     */
    export const unstable_SuspenseList: ExoticComponent<SuspenseListProps>;

    // eslint-disable-next-line @typescript-eslint/no-unsafe-function-type
    export function experimental_useEffectEvent<T extends Function>(event: T): T;

    /**
     * Warning: Only available in development builds.
     */
    function captureOwnerStack(): string | null;

    type Reference = object;
    type TaintableUniqueValue = string | bigint | ArrayBufferView;
    function experimental_taintUniqueValue(
        message: string | undefined,
        lifetime: Reference,
        value: TaintableUniqueValue,
    ): void;
    function experimental_taintObjectReference(message: string | undefined, object: Reference): void;

    export interface HTMLAttributes<T> {
        /**
         * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/inert
         */
        inert?: boolean | undefined;
    }
}

----------------------------------------
File: ./animations/node_modules/@types/react/ts5.0/global.d.ts
----------------------------------------
/*
React projects that don't include the DOM library need these interfaces to compile.
React Native applications use React, but there is no DOM available. The JavaScript runtime
is ES6/ES2015 only. These definitions allow such projects to compile with only `--lib ES6`.

Warning: all of these interfaces are empty. If you want type definitions for various properties
(such as HTMLInputElement.prototype.value), you need to add `--lib DOM` (via command line or tsconfig.json).
*/

interface Event {}
interface AnimationEvent extends Event {}
interface ClipboardEvent extends Event {}
interface CompositionEvent extends Event {}
interface DragEvent extends Event {}
interface FocusEvent extends Event {}
interface KeyboardEvent extends Event {}
interface MouseEvent extends Event {}
interface TouchEvent extends Event {}
interface PointerEvent extends Event {}
interface ToggleEvent extends Event {}
interface TransitionEvent extends Event {}
interface UIEvent extends Event {}
interface WheelEvent extends Event {}

interface EventTarget {}
interface Document {}
interface DataTransfer {}
interface StyleMedia {}

interface Element {}
interface DocumentFragment {}

interface HTMLElement extends Element {}
interface HTMLAnchorElement extends HTMLElement {}
interface HTMLAreaElement extends HTMLElement {}
interface HTMLAudioElement extends HTMLElement {}
interface HTMLBaseElement extends HTMLElement {}
interface HTMLBodyElement extends HTMLElement {}
interface HTMLBRElement extends HTMLElement {}
interface HTMLButtonElement extends HTMLElement {}
interface HTMLCanvasElement extends HTMLElement {}
interface HTMLDataElement extends HTMLElement {}
interface HTMLDataListElement extends HTMLElement {}
interface HTMLDetailsElement extends HTMLElement {}
interface HTMLDialogElement extends HTMLElement {}
interface HTMLDivElement extends HTMLElement {}
interface HTMLDListElement extends HTMLElement {}
interface HTMLEmbedElement extends HTMLElement {}
interface HTMLFieldSetElement extends HTMLElement {}
interface HTMLFormElement extends HTMLElement {}
interface HTMLHeadingElement extends HTMLElement {}
interface HTMLHeadElement extends HTMLElement {}
interface HTMLHRElement extends HTMLElement {}
interface HTMLHtmlElement extends HTMLElement {}
interface HTMLIFrameElement extends HTMLElement {}
interface HTMLImageElement extends HTMLElement {}
interface HTMLInputElement extends HTMLElement {}
interface HTMLModElement extends HTMLElement {}
interface HTMLLabelElement extends HTMLElement {}
interface HTMLLegendElement extends HTMLElement {}
interface HTMLLIElement extends HTMLElement {}
interface HTMLLinkElement extends HTMLElement {}
interface HTMLMapElement extends HTMLElement {}
interface HTMLMetaElement extends HTMLElement {}
interface HTMLMeterElement extends HTMLElement {}
interface HTMLObjectElement extends HTMLElement {}
interface HTMLOListElement extends HTMLElement {}
interface HTMLOptGroupElement extends HTMLElement {}
interface HTMLOptionElement extends HTMLElement {}
interface HTMLOutputElement extends HTMLElement {}
interface HTMLParagraphElement extends HTMLElement {}
interface HTMLParamElement extends HTMLElement {}
interface HTMLPreElement extends HTMLElement {}
interface HTMLProgressElement extends HTMLElement {}
interface HTMLQuoteElement extends HTMLElement {}
interface HTMLSlotElement extends HTMLElement {}
interface HTMLScriptElement extends HTMLElement {}
interface HTMLSelectElement extends HTMLElement {}
interface HTMLSourceElement extends HTMLElement {}
interface HTMLSpanElement extends HTMLElement {}
interface HTMLStyleElement extends HTMLElement {}
interface HTMLTableElement extends HTMLElement {}
interface HTMLTableColElement extends HTMLElement {}
interface HTMLTableDataCellElement extends HTMLElement {}
interface HTMLTableHeaderCellElement extends HTMLElement {}
interface HTMLTableRowElement extends HTMLElement {}
interface HTMLTableSectionElement extends HTMLElement {}
interface HTMLTemplateElement extends HTMLElement {}
interface HTMLTextAreaElement extends HTMLElement {}
interface HTMLTimeElement extends HTMLElement {}
interface HTMLTitleElement extends HTMLElement {}
interface HTMLTrackElement extends HTMLElement {}
interface HTMLUListElement extends HTMLElement {}
interface HTMLVideoElement extends HTMLElement {}
interface HTMLWebViewElement extends HTMLElement {}

interface SVGElement extends Element {}
interface SVGSVGElement extends SVGElement {}
interface SVGCircleElement extends SVGElement {}
interface SVGClipPathElement extends SVGElement {}
interface SVGDefsElement extends SVGElement {}
interface SVGDescElement extends SVGElement {}
interface SVGEllipseElement extends SVGElement {}
interface SVGFEBlendElement extends SVGElement {}
interface SVGFEColorMatrixElement extends SVGElement {}
interface SVGFEComponentTransferElement extends SVGElement {}
interface SVGFECompositeElement extends SVGElement {}
interface SVGFEConvolveMatrixElement extends SVGElement {}
interface SVGFEDiffuseLightingElement extends SVGElement {}
interface SVGFEDisplacementMapElement extends SVGElement {}
interface SVGFEDistantLightElement extends SVGElement {}
interface SVGFEDropShadowElement extends SVGElement {}
interface SVGFEFloodElement extends SVGElement {}
interface SVGFEFuncAElement extends SVGElement {}
interface SVGFEFuncBElement extends SVGElement {}
interface SVGFEFuncGElement extends SVGElement {}
interface SVGFEFuncRElement extends SVGElement {}
interface SVGFEGaussianBlurElement extends SVGElement {}
interface SVGFEImageElement extends SVGElement {}
interface SVGFEMergeElement extends SVGElement {}
interface SVGFEMergeNodeElement extends SVGElement {}
interface SVGFEMorphologyElement extends SVGElement {}
interface SVGFEOffsetElement extends SVGElement {}
interface SVGFEPointLightElement extends SVGElement {}
interface SVGFESpecularLightingElement extends SVGElement {}
interface SVGFESpotLightElement extends SVGElement {}
interface SVGFETileElement extends SVGElement {}
interface SVGFETurbulenceElement extends SVGElement {}
interface SVGFilterElement extends SVGElement {}
interface SVGForeignObjectElement extends SVGElement {}
interface SVGGElement extends SVGElement {}
interface SVGImageElement extends SVGElement {}
interface SVGLineElement extends SVGElement {}
interface SVGLinearGradientElement extends SVGElement {}
interface SVGMarkerElement extends SVGElement {}
interface SVGMaskElement extends SVGElement {}
interface SVGMetadataElement extends SVGElement {}
interface SVGPathElement extends SVGElement {}
interface SVGPatternElement extends SVGElement {}
interface SVGPolygonElement extends SVGElement {}
interface SVGPolylineElement extends SVGElement {}
interface SVGRadialGradientElement extends SVGElement {}
interface SVGRectElement extends SVGElement {}
interface SVGSetElement extends SVGElement {}
interface SVGStopElement extends SVGElement {}
interface SVGSwitchElement extends SVGElement {}
interface SVGSymbolElement extends SVGElement {}
interface SVGTextElement extends SVGElement {}
interface SVGTextPathElement extends SVGElement {}
interface SVGTSpanElement extends SVGElement {}
interface SVGUseElement extends SVGElement {}
interface SVGViewElement extends SVGElement {}

interface FormData {}
interface Text {}
interface TouchList {}
interface WebGLRenderingContext {}
interface WebGL2RenderingContext {}

interface TrustedHTML {}

----------------------------------------
File: ./animations/node_modules/@types/react/ts5.0/index.d.ts
----------------------------------------
// NOTE: Users of the `experimental` builds of React should add a reference
// to 'react/experimental' in their project. See experimental.d.ts's top comment
// for reference and documentation on how exactly to do it.

/// <reference path="global.d.ts" />

import * as CSS from "csstype";
import * as PropTypes from "prop-types";

type NativeAnimationEvent = AnimationEvent;
type NativeClipboardEvent = ClipboardEvent;
type NativeCompositionEvent = CompositionEvent;
type NativeDragEvent = DragEvent;
type NativeFocusEvent = FocusEvent;
type NativeKeyboardEvent = KeyboardEvent;
type NativeMouseEvent = MouseEvent;
type NativeTouchEvent = TouchEvent;
type NativePointerEvent = PointerEvent;
type NativeTransitionEvent = TransitionEvent;
type NativeUIEvent = UIEvent;
type NativeWheelEvent = WheelEvent;

/**
 * Used to represent DOM API's where users can either pass
 * true or false as a boolean or as its equivalent strings.
 */
type Booleanish = boolean | "true" | "false";

/**
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/crossorigin MDN}
 */
type CrossOrigin = "anonymous" | "use-credentials" | "" | undefined;

declare const UNDEFINED_VOID_ONLY: unique symbol;

/**
 * The function returned from an effect passed to {@link React.useEffect useEffect},
 * which can be used to clean up the effect when the component unmounts.
 *
 * @see {@link https://react.dev/reference/react/useEffect React Docs}
 */
type Destructor = () => void | { [UNDEFINED_VOID_ONLY]: never };
type VoidOrUndefinedOnly = void | { [UNDEFINED_VOID_ONLY]: never };

// eslint-disable-next-line @definitelytyped/export-just-namespace
export = React;
export as namespace React;

declare namespace React {
    //
    // React Elements
    // ----------------------------------------------------------------------

    /**
     * Used to retrieve the possible components which accept a given set of props.
     *
     * Can be passed no type parameters to get a union of all possible components
     * and tags.
     *
     * Is a superset of {@link ComponentType}.
     *
     * @template P The props to match against. If not passed, defaults to any.
     * @template Tag An optional tag to match against. If not passed, attempts to match against all possible tags.
     *
     * @example
     *
     * ```tsx
     * // All components and tags (img, embed etc.)
     * // which accept `src`
     * type SrcComponents = ElementType<{ src: any }>;
     * ```
     *
     * @example
     *
     * ```tsx
     * // All components
     * type AllComponents = ElementType;
     * ```
     *
     * @example
     *
     * ```tsx
     * // All custom components which match `src`, and tags which
     * // match `src`, narrowed down to just `audio` and `embed`
     * type SrcComponents = ElementType<{ src: any }, 'audio' | 'embed'>;
     * ```
     */
    type ElementType<P = any, Tag extends keyof JSX.IntrinsicElements = keyof JSX.IntrinsicElements> =
        | { [K in Tag]: P extends JSX.IntrinsicElements[K] ? K : never }[Tag]
        | ComponentType<P>;

    /**
     * Represents any user-defined component, either as a function or a class.
     *
     * Similar to {@link JSXElementConstructor}, but with extra properties like
     * {@link FunctionComponent.defaultProps defaultProps } and
     * {@link ComponentClass.contextTypes contextTypes}.
     *
     * @template P The props the component accepts.
     *
     * @see {@link ComponentClass}
     * @see {@link FunctionComponent}
     */
    type ComponentType<P = {}> = ComponentClass<P> | FunctionComponent<P>;

    /**
     * Represents any user-defined component, either as a function or a class.
     *
     * Similar to {@link ComponentType}, but without extra properties like
     * {@link FunctionComponent.defaultProps defaultProps } and
     * {@link ComponentClass.contextTypes contextTypes}.
     *
     * @template P The props the component accepts.
     */
    type JSXElementConstructor<P> =
        | ((
            props: P,
            /**
             * @deprecated
             *
             * @see {@link https://legacy.reactjs.org/docs/legacy-context.html#referencing-context-in-stateless-function-components React Docs}
             */
            deprecatedLegacyContext?: any,
        ) => ReactElement<any, any> | null)
        | (new(
            props: P,
            /**
             * @deprecated
             *
             * @see {@link https://legacy.reactjs.org/docs/legacy-context.html#referencing-context-in-lifecycle-methods React Docs}
             */
            deprecatedLegacyContext?: any,
        ) => Component<any, any>);

    /**
     * A readonly ref container where {@link current} cannot be mutated.
     *
     * Created by {@link createRef}, or {@link useRef} when passed `null`.
     *
     * @template T The type of the ref's value.
     *
     * @example
     *
     * ```tsx
     * const ref = createRef<HTMLDivElement>();
     *
     * ref.current = document.createElement('div'); // Error
     * ```
     */
    interface RefObject<T> {
        /**
         * The current value of the ref.
         */
        readonly current: T | null;
    }

    interface DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES {
    }
    /**
     * A callback fired whenever the ref's value changes.
     *
     * @template T The type of the ref's value.
     *
     * @see {@link https://react.dev/reference/react-dom/components/common#ref-callback React Docs}
     *
     * @example
     *
     * ```tsx
     * <div ref={(node) => console.log(node)} />
     * ```
     */
    type RefCallback<T> = {
        bivarianceHack(
            instance: T | null,
        ):
            | void
            | DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[
                keyof DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES
            ];
    }["bivarianceHack"];

    /**
     * A union type of all possible shapes for React refs.
     *
     * @see {@link RefCallback}
     * @see {@link RefObject}
     */

    type Ref<T> = RefCallback<T> | RefObject<T> | null;
    /**
     * A legacy implementation of refs where you can pass a string to a ref prop.
     *
     * @see {@link https://react.dev/reference/react/Component#refs React Docs}
     *
     * @example
     *
     * ```tsx
     * <div ref="myRef" />
     * ```
     */
    // TODO: Remove the string ref special case from `PropsWithRef` once we remove LegacyRef
    type LegacyRef<T> = string | Ref<T>;

    /**
     * Retrieves the type of the 'ref' prop for a given component type or tag name.
     *
     * @template C The component type.
     *
     * @example
     *
     * ```tsx
     * type MyComponentRef = React.ElementRef<typeof MyComponent>;
     * ```
     *
     * @example
     *
     * ```tsx
     * type DivRef = React.ElementRef<'div'>;
     * ```
     */
    type ElementRef<
        C extends
            | ForwardRefExoticComponent<any>
            | { new(props: any): Component<any> }
            | ((props: any, deprecatedLegacyContext?: any) => ReactElement | null)
            | keyof JSX.IntrinsicElements,
    > =
        // need to check first if `ref` is a valid prop for ts@3.0
        // otherwise it will infer `{}` instead of `never`
        "ref" extends keyof ComponentPropsWithRef<C>
            ? NonNullable<ComponentPropsWithRef<C>["ref"]> extends RefAttributes<
                infer Instance
            >["ref"] ? Instance
            : never
            : never;

    type ComponentState = any;

    /**
     * A value which uniquely identifies a node among items in an array.
     *
     * @see {@link https://react.dev/learn/rendering-lists#keeping-list-items-in-order-with-key React Docs}
     */
    type Key = string | number | bigint;

    /**
     * @internal The props any component can receive.
     * You don't have to add this type. All components automatically accept these props.
     * ```tsx
     * const Component = () => <div />;
     * <Component key="one" />
     * ```
     *
     * WARNING: The implementation of a component will never have access to these attributes.
     * The following example would be incorrect usage because {@link Component} would never have access to `key`:
     * ```tsx
     * const Component = (props: React.Attributes) => props.key;
     * ```
     */
    interface Attributes {
        key?: Key | null | undefined;
    }
    /**
     * The props any component accepting refs can receive.
     * Class components, built-in browser components (e.g. `div`) and forwardRef components can receive refs and automatically accept these props.
     * ```tsx
     * const Component = forwardRef(() => <div />);
     * <Component ref={(current) => console.log(current)} />
     * ```
     *
     * You only need this type if you manually author the types of props that need to be compatible with legacy refs.
     * ```tsx
     * interface Props extends React.RefAttributes<HTMLDivElement> {}
     * declare const Component: React.FunctionComponent<Props>;
     * ```
     *
     * Otherwise it's simpler to directly use {@link Ref} since you can safely use the
     * props type to describe to props that a consumer can pass to the component
     * as well as describing the props the implementation of a component "sees".
     * {@link RefAttributes} is generally not safe to describe both consumer and seen props.
     *
     * ```tsx
     * interface Props extends {
     *   ref?: React.Ref<HTMLDivElement> | undefined;
     * }
     * declare const Component: React.FunctionComponent<Props>;
     * ```
     *
     * WARNING: The implementation of a component will not have access to the same type in versions of React supporting string refs.
     * The following example would be incorrect usage because {@link Component} would never have access to a `ref` with type `string`
     * ```tsx
     * const Component = (props: React.RefAttributes) => props.ref;
     * ```
     */
    interface RefAttributes<T> extends Attributes {
        /**
         * Allows getting a ref to the component instance.
         * Once the component unmounts, React will set `ref.current` to `null`
         * (or call the ref with `null` if you passed a callback ref).
         *
         * @see {@link https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom React Docs}
         */
        ref?: LegacyRef<T> | undefined;
    }

    /**
     * Represents the built-in attributes available to class components.
     */
    interface ClassAttributes<T> extends RefAttributes<T> {
    }

    /**
     * Represents a JSX element.
     *
     * Where {@link ReactNode} represents everything that can be rendered, `ReactElement`
     * only represents JSX.
     *
     * @template P The type of the props object
     * @template T The type of the component or tag
     *
     * @example
     *
     * ```tsx
     * const element: ReactElement = <div />;
     * ```
     */
    interface ReactElement<
        P = any,
        T extends string | JSXElementConstructor<any> = string | JSXElementConstructor<any>,
    > {
        type: T;
        props: P;
        key: string | null;
    }

    /**
     * @deprecated
     */
    interface ReactComponentElement<
        T extends keyof JSX.IntrinsicElements | JSXElementConstructor<any>,
        P = Pick<ComponentProps<T>, Exclude<keyof ComponentProps<T>, "key" | "ref">>,
    > extends ReactElement<P, Exclude<T, number>> {}

    interface FunctionComponentElement<P> extends ReactElement<P, FunctionComponent<P>> {
        ref?: ("ref" extends keyof P ? P extends { ref?: infer R | undefined } ? R : never : never) | undefined;
    }

    type CElement<P, T extends Component<P, ComponentState>> = ComponentElement<P, T>;
    interface ComponentElement<P, T extends Component<P, ComponentState>> extends ReactElement<P, ComponentClass<P>> {
        ref?: LegacyRef<T> | undefined;
    }

    /**
     * @deprecated Use {@link ComponentElement} instead.
     */
    type ClassicElement<P> = CElement<P, ClassicComponent<P, ComponentState>>;

    // string fallback for custom web-components
    interface DOMElement<P extends HTMLAttributes<T> | SVGAttributes<T>, T extends Element>
        extends ReactElement<P, string>
    {
        ref: LegacyRef<T>;
    }

    // ReactHTML for ReactHTMLElement
    interface ReactHTMLElement<T extends HTMLElement> extends DetailedReactHTMLElement<AllHTMLAttributes<T>, T> {}

    interface DetailedReactHTMLElement<P extends HTMLAttributes<T>, T extends HTMLElement> extends DOMElement<P, T> {
        type: keyof ReactHTML;
    }

    // ReactSVG for ReactSVGElement
    interface ReactSVGElement extends DOMElement<SVGAttributes<SVGElement>, SVGElement> {
        type: keyof ReactSVG;
    }

    interface ReactPortal extends ReactElement {
        children: ReactNode;
    }

    //
    // Factories
    // ----------------------------------------------------------------------

    /** @deprecated */
    type Factory<P> = (props?: Attributes & P, ...children: ReactNode[]) => ReactElement<P>;

    /** @deprecated */
    type SFCFactory<P> = FunctionComponentFactory<P>;

    /** @deprecated */
    type FunctionComponentFactory<P> = (
        props?: Attributes & P,
        ...children: ReactNode[]
    ) => FunctionComponentElement<P>;

    /** @deprecated */
    type ComponentFactory<P, T extends Component<P, ComponentState>> = (
        props?: ClassAttributes<T> & P,
        ...children: ReactNode[]
    ) => CElement<P, T>;

    /** @deprecated */
    type CFactory<P, T extends Component<P, ComponentState>> = ComponentFactory<P, T>;
    /** @deprecated */
    type ClassicFactory<P> = CFactory<P, ClassicComponent<P, ComponentState>>;

    /** @deprecated */
    type DOMFactory<P extends DOMAttributes<T>, T extends Element> = (
        props?: ClassAttributes<T> & P | null,
        ...children: ReactNode[]
    ) => DOMElement<P, T>;

    /** @deprecated */
    interface HTMLFactory<T extends HTMLElement> extends DetailedHTMLFactory<AllHTMLAttributes<T>, T> {}

    /** @deprecated */
    interface DetailedHTMLFactory<P extends HTMLAttributes<T>, T extends HTMLElement> extends DOMFactory<P, T> {
        (props?: ClassAttributes<T> & P | null, ...children: ReactNode[]): DetailedReactHTMLElement<P, T>;
    }

    /** @deprecated */
    interface SVGFactory extends DOMFactory<SVGAttributes<SVGElement>, SVGElement> {
        (
            props?: ClassAttributes<SVGElement> & SVGAttributes<SVGElement> | null,
            ...children: ReactNode[]
        ): ReactSVGElement;
    }

    /**
     * @deprecated - This type is not relevant when using React. Inline the type instead to make the intent clear.
     */
    type ReactText = string | number;
    /**
     * @deprecated - This type is not relevant when using React. Inline the type instead to make the intent clear.
     */
    type ReactChild = ReactElement | string | number;

    /**
     * @deprecated Use either `ReactNode[]` if you need an array or `Iterable<ReactNode>` if its passed to a host component.
     */
    interface ReactNodeArray extends ReadonlyArray<ReactNode> {}
    /**
     * WARNING: Not related to `React.Fragment`.
     * @deprecated This type is not relevant when using React. Inline the type instead to make the intent clear.
     */
    type ReactFragment = Iterable<ReactNode>;

    /**
     * For internal usage only.
     * Different release channels declare additional types of ReactNode this particular release channel accepts.
     * App or library types should never augment this interface.
     */
    interface DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_REACT_NODES {}

    /**
     * Represents all of the things React can render.
     *
     * Where {@link ReactElement} only represents JSX, `ReactNode` represents everything that can be rendered.
     *
     * @see {@link https://react-typescript-cheatsheet.netlify.app/docs/react-types/reactnode/ React TypeScript Cheatsheet}
     *
     * @example
     *
     * ```tsx
     * // Typing children
     * type Props = { children: ReactNode }
     *
     * const Component = ({ children }: Props) => <div>{children}</div>
     *
     * <Component>hello</Component>
     * ```
     *
     * @example
     *
     * ```tsx
     * // Typing a custom element
     * type Props = { customElement: ReactNode }
     *
     * const Component = ({ customElement }: Props) => <div>{customElement}</div>
     *
     * <Component customElement={<div>hello</div>} />
     * ```
     */
    // non-thenables need to be kept in sync with AwaitedReactNode
    type ReactNode =
        | ReactElement
        | string
        | number
        | Iterable<ReactNode>
        | ReactPortal
        | boolean
        | null
        | undefined
        | DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_REACT_NODES[
            keyof DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_REACT_NODES
        ];

    //
    // Top Level API
    // ----------------------------------------------------------------------

    // DOM Elements
    /** @deprecated */
    function createFactory<T extends HTMLElement>(
        type: keyof ReactHTML,
    ): HTMLFactory<T>;
    /** @deprecated */
    function createFactory(
        type: keyof ReactSVG,
    ): SVGFactory;
    /** @deprecated */
    function createFactory<P extends DOMAttributes<T>, T extends Element>(
        type: string,
    ): DOMFactory<P, T>;

    // Custom components
    /** @deprecated */
    function createFactory<P>(type: FunctionComponent<P>): FunctionComponentFactory<P>;
    /** @deprecated */
    function createFactory<P, T extends Component<P, ComponentState>, C extends ComponentClass<P>>(
        type: ClassType<P, T, C>,
    ): CFactory<P, T>;
    /** @deprecated */
    function createFactory<P>(type: ComponentClass<P>): Factory<P>;

    // DOM Elements
    // TODO: generalize this to everything in `keyof ReactHTML`, not just "input"
    function createElement(
        type: "input",
        props?: InputHTMLAttributes<HTMLInputElement> & ClassAttributes<HTMLInputElement> | null,
        ...children: ReactNode[]
    ): DetailedReactHTMLElement<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;
    function createElement<P extends HTMLAttributes<T>, T extends HTMLElement>(
        type: keyof ReactHTML,
        props?: ClassAttributes<T> & P | null,
        ...children: ReactNode[]
    ): DetailedReactHTMLElement<P, T>;
    function createElement<P extends SVGAttributes<T>, T extends SVGElement>(
        type: keyof ReactSVG,
        props?: ClassAttributes<T> & P | null,
        ...children: ReactNode[]
    ): ReactSVGElement;
    function createElement<P extends DOMAttributes<T>, T extends Element>(
        type: string,
        props?: ClassAttributes<T> & P | null,
        ...children: ReactNode[]
    ): DOMElement<P, T>;

    // Custom components

    function createElement<P extends {}>(
        type: FunctionComponent<P>,
        props?: Attributes & P | null,
        ...children: ReactNode[]
    ): FunctionComponentElement<P>;
    function createElement<P extends {}, T extends Component<P, ComponentState>, C extends ComponentClass<P>>(
        type: ClassType<P, T, C>,
        props?: ClassAttributes<T> & P | null,
        ...children: ReactNode[]
    ): CElement<P, T>;
    function createElement<P extends {}>(
        type: FunctionComponent<P> | ComponentClass<P> | string,
        props?: Attributes & P | null,
        ...children: ReactNode[]
    ): ReactElement<P>;

    // DOM Elements
    // ReactHTMLElement
    function cloneElement<P extends HTMLAttributes<T>, T extends HTMLElement>(
        element: DetailedReactHTMLElement<P, T>,
        props?: P,
        ...children: ReactNode[]
    ): DetailedReactHTMLElement<P, T>;
    // ReactHTMLElement, less specific
    function cloneElement<P extends HTMLAttributes<T>, T extends HTMLElement>(
        element: ReactHTMLElement<T>,
        props?: P,
        ...children: ReactNode[]
    ): ReactHTMLElement<T>;
    // SVGElement
    function cloneElement<P extends SVGAttributes<T>, T extends SVGElement>(
        element: ReactSVGElement,
        props?: P,
        ...children: ReactNode[]
    ): ReactSVGElement;
    // DOM Element (has to be the last, because type checking stops at first overload that fits)
    function cloneElement<P extends DOMAttributes<T>, T extends Element>(
        element: DOMElement<P, T>,
        props?: DOMAttributes<T> & P,
        ...children: ReactNode[]
    ): DOMElement<P, T>;

    // Custom components
    function cloneElement<P>(
        element: FunctionComponentElement<P>,
        props?: Partial<P> & Attributes,
        ...children: ReactNode[]
    ): FunctionComponentElement<P>;
    function cloneElement<P, T extends Component<P, ComponentState>>(
        element: CElement<P, T>,
        props?: Partial<P> & ClassAttributes<T>,
        ...children: ReactNode[]
    ): CElement<P, T>;
    function cloneElement<P>(
        element: ReactElement<P>,
        props?: Partial<P> & Attributes,
        ...children: ReactNode[]
    ): ReactElement<P>;

    /**
     * Describes the props accepted by a Context {@link Provider}.
     *
     * @template T The type of the value the context provides.
     */
    interface ProviderProps<T> {
        value: T;
        children?: ReactNode | undefined;
    }

    /**
     * Describes the props accepted by a Context {@link Consumer}.
     *
     * @template T The type of the value the context provides.
     */
    interface ConsumerProps<T> {
        children: (value: T) => ReactNode;
    }

    /**
     * An object masquerading as a component. These are created by functions
     * like {@link forwardRef}, {@link memo}, and {@link createContext}.
     *
     * In order to make TypeScript work, we pretend that they are normal
     * components.
     *
     * But they are, in fact, not callable - instead, they are objects which
     * are treated specially by the renderer.
     *
     * @template P The props the component accepts.
     */
    interface ExoticComponent<P = {}> {
        (props: P): ReactElement | null;
        readonly $$typeof: symbol;
    }

    /**
     * An {@link ExoticComponent} with a `displayName` property applied to it.
     *
     * @template P The props the component accepts.
     */
    interface NamedExoticComponent<P = {}> extends ExoticComponent<P> {
        /**
         * Used in debugging messages. You might want to set it
         * explicitly if you want to display a different name for
         * debugging purposes.
         *
         * @see {@link https://legacy.reactjs.org/docs/react-component.html#displayname Legacy React Docs}
         */
        displayName?: string | undefined;
    }

    /**
     * An {@link ExoticComponent} with a `propTypes` property applied to it.
     *
     * @template P The props the component accepts.
     */
    interface ProviderExoticComponent<P> extends ExoticComponent<P> {
        propTypes?: WeakValidationMap<P> | undefined;
    }

    /**
     * Used to retrieve the type of a context object from a {@link Context}.
     *
     * @template C The context object.
     *
     * @example
     *
     * ```tsx
     * import { createContext } from 'react';
     *
     * const MyContext = createContext({ foo: 'bar' });
     *
     * type ContextType = ContextType<typeof MyContext>;
     * // ContextType = { foo: string }
     * ```
     */
    type ContextType<C extends Context<any>> = C extends Context<infer T> ? T : never;

    /**
     * Wraps your components to specify the value of this context for all components inside.
     *
     * @see {@link https://react.dev/reference/react/createContext#provider React Docs}
     *
     * @example
     *
     * ```tsx
     * import { createContext } from 'react';
     *
     * const ThemeContext = createContext('light');
     *
     * function App() {
     *   return (
     *     <ThemeContext.Provider value="dark">
     *       <Toolbar />
     *     </ThemeContext.Provider>
     *   );
     * }
     * ```
     */
    type Provider<T> = ProviderExoticComponent<ProviderProps<T>>;

    /**
     * The old way to read context, before {@link useContext} existed.
     *
     * @see {@link https://react.dev/reference/react/createContext#consumer React Docs}
     *
     * @example
     *
     * ```tsx
     * import { UserContext } from './user-context';
     *
     * function Avatar() {
     *   return (
     *     <UserContext.Consumer>
     *       {user => <img src={user.profileImage} alt={user.name} />}
     *     </UserContext.Consumer>
     *   );
     * }
     * ```
     */
    type Consumer<T> = ExoticComponent<ConsumerProps<T>>;

    /**
     * Context lets components pass information deep down without explicitly
     * passing props.
     *
     * Created from {@link createContext}
     *
     * @see {@link https://react.dev/learn/passing-data-deeply-with-context React Docs}
     * @see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/context/ React TypeScript Cheatsheet}
     *
     * @example
     *
     * ```tsx
     * import { createContext } from 'react';
     *
     * const ThemeContext = createContext('light');
     * ```
     */
    interface Context<T> {
        Provider: Provider<T>;
        Consumer: Consumer<T>;
        /**
         * Used in debugging messages. You might want to set it
         * explicitly if you want to display a different name for
         * debugging purposes.
         *
         * @see {@link https://legacy.reactjs.org/docs/react-component.html#displayname Legacy React Docs}
         */
        displayName?: string | undefined;
    }

    /**
     * Lets you create a {@link Context} that components can provide or read.
     *
     * @param defaultValue The value you want the context to have when there is no matching
     * {@link Provider} in the tree above the component reading the context. This is meant
     * as a "last resort" fallback.
     *
     * @see {@link https://react.dev/reference/react/createContext#reference React Docs}
     * @see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/context/ React TypeScript Cheatsheet}
     *
     * @example
     *
     * ```tsx
     * import { createContext } from 'react';
     *
     * const ThemeContext = createContext('light');
     * ```
     */
    function createContext<T>(
        // If you thought this should be optional, see
        // https://github.com/DefinitelyTyped/DefinitelyTyped/pull/24509#issuecomment-382213106
        defaultValue: T,
    ): Context<T>;

    function isValidElement<P>(object: {} | null | undefined): object is ReactElement<P>;

    /**
     * Maintainer's note: Sync with {@link ReactChildren} until {@link ReactChildren} is removed.
     */
    const Children: {
        map<T, C>(
            children: C | readonly C[],
            fn: (child: C, index: number) => T,
        ): C extends null | undefined ? C : Array<Exclude<T, boolean | null | undefined>>;
        forEach<C>(children: C | readonly C[], fn: (child: C, index: number) => void): void;
        count(children: any): number;
        only<C>(children: C): C extends any[] ? never : C;
        toArray(children: ReactNode | ReactNode[]): Array<Exclude<ReactNode, boolean | null | undefined>>;
    };
    /**
     * Lets you group elements without a wrapper node.
     *
     * @see {@link https://react.dev/reference/react/Fragment React Docs}
     *
     * @example
     *
     * ```tsx
     * import { Fragment } from 'react';
     *
     * <Fragment>
     *   <td>Hello</td>
     *   <td>World</td>
     * </Fragment>
     * ```
     *
     * @example
     *
     * ```tsx
     * // Using the <></> shorthand syntax:
     *
     * <>
     *   <td>Hello</td>
     *   <td>World</td>
     * </>
     * ```
     */
    const Fragment: ExoticComponent<{ children?: ReactNode | undefined }>;

    /**
     * Lets you find common bugs in your components early during development.
     *
     * @see {@link https://react.dev/reference/react/StrictMode React Docs}
     *
     * @example
     *
     * ```tsx
     * import { StrictMode } from 'react';
     *
     * <StrictMode>
     *   <App />
     * </StrictMode>
     * ```
     */
    const StrictMode: ExoticComponent<{ children?: ReactNode | undefined }>;

    /**
     * The props accepted by {@link Suspense}.
     *
     * @see {@link https://react.dev/reference/react/Suspense React Docs}
     */
    interface SuspenseProps {
        children?: ReactNode | undefined;

        /** A fallback react tree to show when a Suspense child (like React.lazy) suspends */
        fallback?: ReactNode;

        /**
         * A name for this Suspense boundary for instrumentation purposes.
         * The name will help identify this boundary in React DevTools.
         */
        name?: string | undefined;
    }

    /**
     * Lets you display a fallback until its children have finished loading.
     *
     * @see {@link https://react.dev/reference/react/Suspense React Docs}
     *
     * @example
     *
     * ```tsx
     * import { Suspense } from 'react';
     *
     * <Suspense fallback={<Loading />}>
     *   <ProfileDetails />
     * </Suspense>
     * ```
     */
    const Suspense: ExoticComponent<SuspenseProps>;
    const version: string;

    /**
     * The callback passed to {@link ProfilerProps.onRender}.
     *
     * @see {@link https://react.dev/reference/react/Profiler#onrender-callback React Docs}
     */
    type ProfilerOnRenderCallback = (
        /**
         * The string id prop of the {@link Profiler} tree that has just committed. This lets
         * you identify which part of the tree was committed if you are using multiple
         * profilers.
         *
         * @see {@link https://react.dev/reference/react/Profiler#onrender-callback React Docs}
         */
        id: string,
        /**
         * This lets you know whether the tree has just been mounted for the first time
         * or re-rendered due to a change in props, state, or hooks.
         *
         * @see {@link https://react.dev/reference/react/Profiler#onrender-callback React Docs}
         */
        phase: "mount" | "update" | "nested-update",
        /**
         * The number of milliseconds spent rendering the {@link Profiler} and its descendants
         * for the current update. This indicates how well the subtree makes use of
         * memoization (e.g. {@link memo} and {@link useMemo}). Ideally this value should decrease
         * significantly after the initial mount as many of the descendants will only need to
         * re-render if their specific props change.
         *
         * @see {@link https://react.dev/reference/react/Profiler#onrender-callback React Docs}
         */
        actualDuration: number,
        /**
         * The number of milliseconds estimating how much time it would take to re-render the entire
         * {@link Profiler} subtree without any optimizations. It is calculated by summing up the most
         * recent render durations of each component in the tree. This value estimates a worst-case
         * cost of rendering (e.g. the initial mount or a tree with no memoization). Compare
         * {@link actualDuration} against it to see if memoization is working.
         *
         * @see {@link https://react.dev/reference/react/Profiler#onrender-callback React Docs}
         */
        baseDuration: number,
        /**
         * A numeric timestamp for when React began rendering the current update.
         *
         * @see {@link https://react.dev/reference/react/Profiler#onrender-callback React Docs}
         */
        startTime: number,
        /**
         * A numeric timestamp for when React committed the current update. This value is shared
         * between all profilers in a commit, enabling them to be grouped if desirable.
         *
         * @see {@link https://react.dev/reference/react/Profiler#onrender-callback React Docs}
         */
        commitTime: number,
    ) => void;

    /**
     * The props accepted by {@link Profiler}.
     *
     * @see {@link https://react.dev/reference/react/Profiler React Docs}
     */
    interface ProfilerProps {
        children?: ReactNode | undefined;
        id: string;
        onRender: ProfilerOnRenderCallback;
    }

    /**
     * Lets you measure rendering performance of a React tree programmatically.
     *
     * @see {@link https://react.dev/reference/react/Profiler#onrender-callback React Docs}
     *
     * @example
     *
     * ```tsx
     * <Profiler id="App" onRender={onRender}>
     *   <App />
     * </Profiler>
     * ```
     */
    const Profiler: ExoticComponent<ProfilerProps>;

    //
    // Component API
    // ----------------------------------------------------------------------

    type ReactInstance = Component<any> | Element;

    // Base component for plain JS classes
    interface Component<P = {}, S = {}, SS = any> extends ComponentLifecycle<P, S, SS> {}
    class Component<P, S> {
        /**
         * If set, `this.context` will be set at runtime to the current value of the given Context.
         *
         * @example
         *
         * ```ts
         * type MyContext = number
         * const Ctx = React.createContext<MyContext>(0)
         *
         * class Foo extends React.Component {
         *   static contextType = Ctx
         *   context!: React.ContextType<typeof Ctx>
         *   render () {
         *     return <>My context's value: {this.context}</>;
         *   }
         * }
         * ```
         *
         * @see {@link https://react.dev/reference/react/Component#static-contexttype}
         */
        static contextType?: Context<any> | undefined;

        /**
         * If using the new style context, re-declare this in your class to be the
         * `React.ContextType` of your `static contextType`.
         * Should be used with type annotation or static contextType.
         *
         * @example
         * ```ts
         * static contextType = MyContext
         * // For TS pre-3.7:
         * context!: React.ContextType<typeof MyContext>
         * // For TS 3.7 and above:
         * declare context: React.ContextType<typeof MyContext>
         * ```
         *
         * @see {@link https://react.dev/reference/react/Component#context React Docs}
         */
        context: unknown;

        constructor(props: P);
        /**
         * @deprecated
         * @see {@link https://legacy.reactjs.org/docs/legacy-context.html React Docs}
         */
        constructor(props: P, context: any);

        // We MUST keep setState() as a unified signature because it allows proper checking of the method return type.
        // See: https://github.com/DefinitelyTyped/DefinitelyTyped/issues/18365#issuecomment-351013257
        // Also, the ` | S` allows intellisense to not be dumbisense
        setState<K extends keyof S>(
            state: ((prevState: Readonly<S>, props: Readonly<P>) => Pick<S, K> | S | null) | (Pick<S, K> | S | null),
            callback?: () => void,
        ): void;

        forceUpdate(callback?: () => void): void;
        render(): ReactNode;

        readonly props: Readonly<P>;
        state: Readonly<S>;
        /**
         * @deprecated
         *
         * @see {@link https://legacy.reactjs.org/docs/refs-and-the-dom.html#legacy-api-string-refs Legacy React Docs}
         */
        refs: {
            [key: string]: ReactInstance;
        };
    }

    class PureComponent<P = {}, S = {}, SS = any> extends Component<P, S, SS> {}

    /**
     * @deprecated Use `ClassicComponent` from `create-react-class`
     *
     * @see {@link https://legacy.reactjs.org/docs/react-without-es6.html Legacy React Docs}
     * @see {@link https://www.npmjs.com/package/create-react-class `create-react-class` on npm}
     */
    interface ClassicComponent<P = {}, S = {}> extends Component<P, S> {
        replaceState(nextState: S, callback?: () => void): void;
        isMounted(): boolean;
        getInitialState?(): S;
    }

    interface ChildContextProvider<CC> {
        getChildContext(): CC;
    }

    //
    // Class Interfaces
    // ----------------------------------------------------------------------

    /**
     * Represents the type of a function component. Can optionally
     * receive a type argument that represents the props the component
     * receives.
     *
     * @template P The props the component accepts.
     * @see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}
     * @alias for {@link FunctionComponent}
     *
     * @example
     *
     * ```tsx
     * // With props:
     * type Props = { name: string }
     *
     * const MyComponent: FC<Props> = (props) => {
     *  return <div>{props.name}</div>
     * }
     * ```
     *
     * @example
     *
     * ```tsx
     * // Without props:
     * const MyComponentWithoutProps: FC = () => {
     *   return <div>MyComponentWithoutProps</div>
     * }
     * ```
     */
    type FC<P = {}> = FunctionComponent<P>;

    /**
     * Represents the type of a function component. Can optionally
     * receive a type argument that represents the props the component
     * accepts.
     *
     * @template P The props the component accepts.
     * @see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}
     *
     * @example
     *
     * ```tsx
     * // With props:
     * type Props = { name: string }
     *
     * const MyComponent: FunctionComponent<Props> = (props) => {
     *  return <div>{props.name}</div>
     * }
     * ```
     *
     * @example
     *
     * ```tsx
     * // Without props:
     * const MyComponentWithoutProps: FunctionComponent = () => {
     *   return <div>MyComponentWithoutProps</div>
     * }
     * ```
     */
    interface FunctionComponent<P = {}> {
        (
            props: P,
            /**
             * @deprecated
             *
             * @see {@link https://legacy.reactjs.org/docs/legacy-context.html#referencing-context-in-lifecycle-methods React Docs}
             */
            deprecatedLegacyContext?: any,
        ): ReactElement<any, any> | null;
        /**
         * Used to declare the types of the props accepted by the
         * component. These types will be checked during rendering
         * and in development only.
         *
         * We recommend using TypeScript instead of checking prop
         * types at runtime.
         *
         * @see {@link https://react.dev/reference/react/Component#static-proptypes React Docs}
         */
        propTypes?: WeakValidationMap<P> | undefined;
        /**
         * @deprecated
         *
         * Lets you specify which legacy context is consumed by
         * this component.
         *
         * @see {@link https://legacy.reactjs.org/docs/legacy-context.html Legacy React Docs}
         */
        contextTypes?: ValidationMap<any> | undefined;
        /**
         * Used to define default values for the props accepted by
         * the component.
         *
         * @see {@link https://react.dev/reference/react/Component#static-defaultprops React Docs}
         *
         * @example
         *
         * ```tsx
         * type Props = { name?: string }
         *
         * const MyComponent: FC<Props> = (props) => {
         *   return <div>{props.name}</div>
         * }
         *
         * MyComponent.defaultProps = {
         *   name: 'John Doe'
         * }
         * ```
         *
         * @deprecated Use {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#default_value|default values for destructuring assignments instead}.
         */
        defaultProps?: Partial<P> | undefined;
        /**
         * Used in debugging messages. You might want to set it
         * explicitly if you want to display a different name for
         * debugging purposes.
         *
         * @see {@link https://legacy.reactjs.org/docs/react-component.html#displayname Legacy React Docs}
         *
         * @example
         *
         * ```tsx
         *
         * const MyComponent: FC = () => {
         *   return <div>Hello!</div>
         * }
         *
         * MyComponent.displayName = 'MyAwesomeComponent'
         * ```
         */
        displayName?: string | undefined;
    }

    /**
     * @deprecated - Equivalent to {@link React.FunctionComponent}.
     *
     * @see {@link React.FunctionComponent}
     * @alias {@link VoidFunctionComponent}
     */
    type VFC<P = {}> = VoidFunctionComponent<P>;

    /**
     * @deprecated - Equivalent to {@link React.FunctionComponent}.
     *
     * @see {@link React.FunctionComponent}
     */
    interface VoidFunctionComponent<P = {}> {
        (
            props: P,
            /**
             * @deprecated
             *
             * @see {@link https://legacy.reactjs.org/docs/legacy-context.html#referencing-context-in-lifecycle-methods React Docs}
             */
            deprecatedLegacyContext?: any,
        ): ReactElement<any, any> | null;
        propTypes?: WeakValidationMap<P> | undefined;
        contextTypes?: ValidationMap<any> | undefined;
        /**
         * @deprecated Use {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#default_value|default values for destructuring assignments instead}.
         */
        defaultProps?: Partial<P> | undefined;
        displayName?: string | undefined;
    }

    /**
     * The type of the ref received by a {@link ForwardRefRenderFunction}.
     *
     * @see {@link ForwardRefRenderFunction}
     */
    type ForwardedRef<T> = ((instance: T | null) => void) | MutableRefObject<T | null> | null;

    /**
     * The type of the function passed to {@link forwardRef}. This is considered different
     * to a normal {@link FunctionComponent} because it receives an additional argument,
     *
     * @param props Props passed to the component, if any.
     * @param ref A ref forwarded to the component of type {@link ForwardedRef}.
     *
     * @template T The type of the forwarded ref.
     * @template P The type of the props the component accepts.
     *
     * @see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/forward_and_create_ref/ React TypeScript Cheatsheet}
     * @see {@link forwardRef}
     */
    interface ForwardRefRenderFunction<T, P = {}> {
        (props: P, ref: ForwardedRef<T>): ReactElement | null;
        /**
         * Used in debugging messages. You might want to set it
         * explicitly if you want to display a different name for
         * debugging purposes.
         *
         * Will show `ForwardRef(${Component.displayName || Component.name})`
         * in devtools by default, but can be given its own specific name.
         *
         * @see {@link https://legacy.reactjs.org/docs/react-component.html#displayname Legacy React Docs}
         */
        displayName?: string | undefined;
        /**
         * defaultProps are not supported on render functions passed to forwardRef.
         *
         * @see {@link https://github.com/microsoft/TypeScript/issues/36826 linked GitHub issue} for context
         * @see {@link https://react.dev/reference/react/Component#static-defaultprops React Docs}
         */
        defaultProps?: never | undefined;
        /**
         * propTypes are not supported on render functions passed to forwardRef.
         *
         * @see {@link https://github.com/microsoft/TypeScript/issues/36826 linked GitHub issue} for context
         * @see {@link https://react.dev/reference/react/Component#static-proptypes React Docs}
         */
        propTypes?: never | undefined;
    }

    /**
     * Represents a component class in React.
     *
     * @template P The props the component accepts.
     * @template S The internal state of the component.
     */
    interface ComponentClass<P = {}, S = ComponentState> extends StaticLifecycle<P, S> {
        new(
            props: P,
            /**
             * @deprecated
             *
             * @see {@link https://legacy.reactjs.org/docs/legacy-context.html#referencing-context-in-lifecycle-methods React Docs}
             */
            deprecatedLegacyContext?: any,
        ): Component<P, S>;
        /**
         * Used to declare the types of the props accepted by the
         * component. These types will be checked during rendering
         * and in development only.
         *
         * We recommend using TypeScript instead of checking prop
         * types at runtime.
         *
         * @see {@link https://react.dev/reference/react/Component#static-proptypes React Docs}
         */
        propTypes?: WeakValidationMap<P> | undefined;
        contextType?: Context<any> | undefined;
        /**
         * @deprecated use {@link ComponentClass.contextType} instead
         *
         * Lets you specify which legacy context is consumed by
         * this component.
         *
         * @see {@link https://legacy.reactjs.org/docs/legacy-context.html Legacy React Docs}
         */
        contextTypes?: ValidationMap<any> | undefined;
        /**
         * @deprecated
         *
         * @see {@link https://legacy.reactjs.org/docs/legacy-context.html#how-to-use-context Legacy React Docs}
         */
        childContextTypes?: ValidationMap<any> | undefined;
        /**
         * Used to define default values for the props accepted by
         * the component.
         *
         * @see {@link https://react.dev/reference/react/Component#static-defaultprops React Docs}
         */
        defaultProps?: Partial<P> | undefined;
        /**
         * Used in debugging messages. You might want to set it
         * explicitly if you want to display a different name for
         * debugging purposes.
         *
         * @see {@link https://legacy.reactjs.org/docs/react-component.html#displayname Legacy React Docs}
         */
        displayName?: string | undefined;
    }

    /**
     * @deprecated Use `ClassicComponentClass` from `create-react-class`
     *
     * @see {@link https://legacy.reactjs.org/docs/react-without-es6.html Legacy React Docs}
     * @see {@link https://www.npmjs.com/package/create-react-class `create-react-class` on npm}
     */
    interface ClassicComponentClass<P = {}> extends ComponentClass<P> {
        new(props: P, deprecatedLegacyContext?: any): ClassicComponent<P, ComponentState>;
        getDefaultProps?(): P;
    }

    /**
     * Used in {@link createElement} and {@link createFactory} to represent
     * a class.
     *
     * An intersection type is used to infer multiple type parameters from
     * a single argument, which is useful for many top-level API defs.
     * See {@link https://github.com/Microsoft/TypeScript/issues/7234 this GitHub issue}
     * for more info.
     */
    type ClassType<P, T extends Component<P, ComponentState>, C extends ComponentClass<P>> =
        & C
        & (new(props: P, deprecatedLegacyContext?: any) => T);

    //
    // Component Specs and Lifecycle
    // ----------------------------------------------------------------------

    // This should actually be something like `Lifecycle<P, S> | DeprecatedLifecycle<P, S>`,
    // as React will _not_ call the deprecated lifecycle methods if any of the new lifecycle
    // methods are present.
    interface ComponentLifecycle<P, S, SS = any> extends NewLifecycle<P, S, SS>, DeprecatedLifecycle<P, S> {
        /**
         * Called immediately after a component is mounted. Setting state here will trigger re-rendering.
         */
        componentDidMount?(): void;
        /**
         * Called to determine whether the change in props and state should trigger a re-render.
         *
         * `Component` always returns true.
         * `PureComponent` implements a shallow comparison on props and state and returns true if any
         * props or states have changed.
         *
         * If false is returned, {@link Component.render}, `componentWillUpdate`
         * and `componentDidUpdate` will not be called.
         */
        shouldComponentUpdate?(nextProps: Readonly<P>, nextState: Readonly<S>, nextContext: any): boolean;
        /**
         * Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as
         * cancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.
         */
        componentWillUnmount?(): void;
        /**
         * Catches exceptions generated in descendant components. Unhandled exceptions will cause
         * the entire component tree to unmount.
         */
        componentDidCatch?(error: Error, errorInfo: ErrorInfo): void;
    }

    // Unfortunately, we have no way of declaring that the component constructor must implement this
    interface StaticLifecycle<P, S> {
        getDerivedStateFromProps?: GetDerivedStateFromProps<P, S> | undefined;
        getDerivedStateFromError?: GetDerivedStateFromError<P, S> | undefined;
    }

    type GetDerivedStateFromProps<P, S> =
        /**
         * Returns an update to a component's state based on its new props and old state.
         *
         * Note: its presence prevents any of the deprecated lifecycle methods from being invoked
         */
        (nextProps: Readonly<P>, prevState: S) => Partial<S> | null;

    type GetDerivedStateFromError<P, S> =
        /**
         * This lifecycle is invoked after an error has been thrown by a descendant component.
         * It receives the error that was thrown as a parameter and should return a value to update state.
         *
         * Note: its presence prevents any of the deprecated lifecycle methods from being invoked
         */
        (error: any) => Partial<S> | null;

    // This should be "infer SS" but can't use it yet
    interface NewLifecycle<P, S, SS> {
        /**
         * Runs before React applies the result of {@link Component.render render} to the document, and
         * returns an object to be given to {@link componentDidUpdate}. Useful for saving
         * things such as scroll position before {@link Component.render render} causes changes to it.
         *
         * Note: the presence of this method prevents any of the deprecated
         * lifecycle events from running.
         */
        getSnapshotBeforeUpdate?(prevProps: Readonly<P>, prevState: Readonly<S>): SS | null;
        /**
         * Called immediately after updating occurs. Not called for the initial render.
         *
         * The snapshot is only present if {@link getSnapshotBeforeUpdate} is present and returns non-null.
         */
        componentDidUpdate?(prevProps: Readonly<P>, prevState: Readonly<S>, snapshot?: SS): void;
    }

    interface DeprecatedLifecycle<P, S> {
        /**
         * Called immediately before mounting occurs, and before {@link Component.render}.
         * Avoid introducing any side-effects or subscriptions in this method.
         *
         * Note: the presence of {@link NewLifecycle.getSnapshotBeforeUpdate getSnapshotBeforeUpdate}
         * or {@link StaticLifecycle.getDerivedStateFromProps getDerivedStateFromProps} prevents
         * this from being invoked.
         *
         * @deprecated 16.3, use {@link ComponentLifecycle.componentDidMount componentDidMount} or the constructor instead; will stop working in React 17
         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state}
         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path}
         */
        componentWillMount?(): void;
        /**
         * Called immediately before mounting occurs, and before {@link Component.render}.
         * Avoid introducing any side-effects or subscriptions in this method.
         *
         * This method will not stop working in React 17.
         *
         * Note: the presence of {@link NewLifecycle.getSnapshotBeforeUpdate getSnapshotBeforeUpdate}
         * or {@link StaticLifecycle.getDerivedStateFromProps getDerivedStateFromProps} prevents
         * this from being invoked.
         *
         * @deprecated 16.3, use {@link ComponentLifecycle.componentDidMount componentDidMount} or the constructor instead
         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state}
         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path}
         */
        UNSAFE_componentWillMount?(): void;
        /**
         * Called when the component may be receiving new props.
         * React may call this even if props have not changed, so be sure to compare new and existing
         * props if you only want to handle changes.
         *
         * Calling {@link Component.setState} generally does not trigger this method.
         *
         * Note: the presence of {@link NewLifecycle.getSnapshotBeforeUpdate getSnapshotBeforeUpdate}
         * or {@link StaticLifecycle.getDerivedStateFromProps getDerivedStateFromProps} prevents
         * this from being invoked.
         *
         * @deprecated 16.3, use static {@link StaticLifecycle.getDerivedStateFromProps getDerivedStateFromProps} instead; will stop working in React 17
         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props}
         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path}
         */
        componentWillReceiveProps?(nextProps: Readonly<P>, nextContext: any): void;
        /**
         * Called when the component may be receiving new props.
         * React may call this even if props have not changed, so be sure to compare new and existing
         * props if you only want to handle changes.
         *
         * Calling {@link Component.setState} generally does not trigger this method.
         *
         * This method will not stop working in React 17.
         *
         * Note: the presence of {@link NewLifecycle.getSnapshotBeforeUpdate getSnapshotBeforeUpdate}
         * or {@link StaticLifecycle.getDerivedStateFromProps getDerivedStateFromProps} prevents
         * this from being invoked.
         *
         * @deprecated 16.3, use static {@link StaticLifecycle.getDerivedStateFromProps getDerivedStateFromProps} instead
         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props}
         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path}
         */
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<P>, nextContext: any): void;
        /**
         * Called immediately before rendering when new props or state is received. Not called for the initial render.
         *
         * Note: You cannot call {@link Component.setState} here.
         *
         * Note: the presence of {@link NewLifecycle.getSnapshotBeforeUpdate getSnapshotBeforeUpdate}
         * or {@link StaticLifecycle.getDerivedStateFromProps getDerivedStateFromProps} prevents
         * this from being invoked.
         *
         * @deprecated 16.3, use getSnapshotBeforeUpdate instead; will stop working in React 17
         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update}
         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path}
         */
        componentWillUpdate?(nextProps: Readonly<P>, nextState: Readonly<S>, nextContext: any): void;
        /**
         * Called immediately before rendering when new props or state is received. Not called for the initial render.
         *
         * Note: You cannot call {@link Component.setState} here.
         *
         * This method will not stop working in React 17.
         *
         * Note: the presence of {@link NewLifecycle.getSnapshotBeforeUpdate getSnapshotBeforeUpdate}
         * or {@link StaticLifecycle.getDerivedStateFromProps getDerivedStateFromProps} prevents
         * this from being invoked.
         *
         * @deprecated 16.3, use getSnapshotBeforeUpdate instead
         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update}
         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path}
         */
        UNSAFE_componentWillUpdate?(nextProps: Readonly<P>, nextState: Readonly<S>, nextContext: any): void;
    }

    /**
     * @deprecated
     *
     * @see {@link https://legacy.reactjs.org/blog/2016/07/13/mixins-considered-harmful.html Mixins Considered Harmful}
     */
    interface Mixin<P, S> extends ComponentLifecycle<P, S> {
        mixins?: Array<Mixin<P, S>> | undefined;
        statics?: {
            [key: string]: any;
        } | undefined;

        displayName?: string | undefined;
        propTypes?: ValidationMap<any> | undefined;
        contextTypes?: ValidationMap<any> | undefined;
        childContextTypes?: ValidationMap<any> | undefined;

        getDefaultProps?(): P;
        getInitialState?(): S;
    }

    /**
     * @deprecated
     *
     * @see {@link https://legacy.reactjs.org/blog/2016/07/13/mixins-considered-harmful.html Mixins Considered Harmful}
     */
    interface ComponentSpec<P, S> extends Mixin<P, S> {
        render(): ReactNode;

        [propertyName: string]: any;
    }

    function createRef<T>(): RefObject<T>;

    /**
     * The type of the component returned from {@link forwardRef}.
     *
     * @template P The props the component accepts, if any.
     *
     * @see {@link ExoticComponent}
     */
    interface ForwardRefExoticComponent<P> extends NamedExoticComponent<P> {
        /**
         * @deprecated Use {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#default_value|default values for destructuring assignments instead}.
         */
        defaultProps?: Partial<P> | undefined;
        propTypes?: WeakValidationMap<P> | undefined;
    }

    /**
     * Lets your component expose a DOM node to a parent component
     * using a ref.
     *
     * @see {@link https://react.dev/reference/react/forwardRef React Docs}
     * @see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/forward_and_create_ref/ React TypeScript Cheatsheet}
     *
     * @param render See the {@link ForwardRefRenderFunction}.
     *
     * @template T The type of the DOM node.
     * @template P The props the component accepts, if any.
     *
     * @example
     *
     * ```tsx
     * interface Props {
     *   children?: ReactNode;
     *   type: "submit" | "button";
     * }
     *
     * export const FancyButton = forwardRef<HTMLButtonElement, Props>((props, ref) => (
     *   <button ref={ref} className="MyClassName" type={props.type}>
     *     {props.children}
     *   </button>
     * ));
     * ```
     */
    function forwardRef<T, P = {}>(
        render: ForwardRefRenderFunction<T, PropsWithoutRef<P>>,
    ): ForwardRefExoticComponent<PropsWithoutRef<P> & RefAttributes<T>>;

    /**
     * Omits the 'ref' attribute from the given props object.
     *
     * @template P The props object type.
     */
    type PropsWithoutRef<P> =
        // Omit would not be sufficient for this. We'd like to avoid unnecessary mapping and need a distributive conditional to support unions.
        // see: https://www.typescriptlang.org/docs/handbook/2/conditional-types.html#distributive-conditional-types
        // https://github.com/Microsoft/TypeScript/issues/28339
        P extends any ? ("ref" extends keyof P ? Omit<P, "ref"> : P) : P;
    /** Ensures that the props do not include string ref, which cannot be forwarded */
    type PropsWithRef<P> =
        // Note: String refs can be forwarded. We can't fix this bug without breaking a bunch of libraries now though.
        // Just "P extends { ref?: infer R }" looks sufficient, but R will infer as {} if P is {}.
        "ref" extends keyof P
            ? P extends { ref?: infer R | undefined }
                ? string extends R ? PropsWithoutRef<P> & { ref?: Exclude<R, string> | undefined }
                : P
            : P
            : P;

    type PropsWithChildren<P = unknown> = P & { children?: ReactNode | undefined };

    /**
     * Used to retrieve the props a component accepts. Can either be passed a string,
     * indicating a DOM element (e.g. 'div', 'span', etc.) or the type of a React
     * component.
     *
     * It's usually better to use {@link ComponentPropsWithRef} or {@link ComponentPropsWithoutRef}
     * instead of this type, as they let you be explicit about whether or not to include
     * the `ref` prop.
     *
     * @see {@link https://react-typescript-cheatsheet.netlify.app/docs/react-types/componentprops/ React TypeScript Cheatsheet}
     *
     * @example
     *
     * ```tsx
     * // Retrieves the props an 'input' element accepts
     * type InputProps = React.ComponentProps<'input'>;
     * ```
     *
     * @example
     *
     * ```tsx
     * const MyComponent = (props: { foo: number, bar: string }) => <div />;
     *
     * // Retrieves the props 'MyComponent' accepts
     * type MyComponentProps = React.ComponentProps<typeof MyComponent>;
     * ```
     */
    type ComponentProps<T extends keyof JSX.IntrinsicElements | JSXElementConstructor<any>> = T extends
        JSXElementConstructor<infer P> ? P
        : T extends keyof JSX.IntrinsicElements ? JSX.IntrinsicElements[T]
        : {};

    /**
     * Used to retrieve the props a component accepts with its ref. Can either be
     * passed a string, indicating a DOM element (e.g. 'div', 'span', etc.) or the
     * type of a React component.
     *
     * @see {@link https://react-typescript-cheatsheet.netlify.app/docs/react-types/componentprops/ React TypeScript Cheatsheet}
     *
     * @example
     *
     * ```tsx
     * // Retrieves the props an 'input' element accepts
     * type InputProps = React.ComponentPropsWithRef<'input'>;
     * ```
     *
     * @example
     *
     * ```tsx
     * const MyComponent = (props: { foo: number, bar: string }) => <div />;
     *
     * // Retrieves the props 'MyComponent' accepts
     * type MyComponentPropsWithRef = React.ComponentPropsWithRef<typeof MyComponent>;
     * ```
     */
    type ComponentPropsWithRef<T extends ElementType> = T extends (new(props: infer P) => Component<any, any>)
        ? PropsWithoutRef<P> & RefAttributes<InstanceType<T>>
        : PropsWithRef<ComponentProps<T>>;
    /**
     * Used to retrieve the props a custom component accepts with its ref.
     *
     * Unlike {@link ComponentPropsWithRef}, this only works with custom
     * components, i.e. components you define yourself. This is to improve
     * type-checking performance.
     *
     * @example
     *
     * ```tsx
     * const MyComponent = (props: { foo: number, bar: string }) => <div />;
     *
     * // Retrieves the props 'MyComponent' accepts
     * type MyComponentPropsWithRef = React.CustomComponentPropsWithRef<typeof MyComponent>;
     * ```
     */
    type CustomComponentPropsWithRef<T extends ComponentType> = T extends (new(props: infer P) => Component<any, any>)
        ? (PropsWithoutRef<P> & RefAttributes<InstanceType<T>>)
        : T extends ((props: infer P, legacyContext?: any) => ReactNode) ? PropsWithRef<P>
        : never;

    /**
     * Used to retrieve the props a component accepts without its ref. Can either be
     * passed a string, indicating a DOM element (e.g. 'div', 'span', etc.) or the
     * type of a React component.
     *
     * @see {@link https://react-typescript-cheatsheet.netlify.app/docs/react-types/componentprops/ React TypeScript Cheatsheet}
     *
     * @example
     *
     * ```tsx
     * // Retrieves the props an 'input' element accepts
     * type InputProps = React.ComponentPropsWithoutRef<'input'>;
     * ```
     *
     * @example
     *
     * ```tsx
     * const MyComponent = (props: { foo: number, bar: string }) => <div />;
     *
     * // Retrieves the props 'MyComponent' accepts
     * type MyComponentPropsWithoutRef = React.ComponentPropsWithoutRef<typeof MyComponent>;
     * ```
     */
    type ComponentPropsWithoutRef<T extends ElementType> = PropsWithoutRef<ComponentProps<T>>;

    type ComponentRef<T extends ElementType> = T extends NamedExoticComponent<
        ComponentPropsWithoutRef<T> & RefAttributes<infer Method>
    > ? Method
        : ComponentPropsWithRef<T> extends RefAttributes<infer Method> ? Method
        : never;

    // will show `Memo(${Component.displayName || Component.name})` in devtools by default,
    // but can be given its own specific name
    type MemoExoticComponent<T extends ComponentType<any>> = NamedExoticComponent<CustomComponentPropsWithRef<T>> & {
        readonly type: T;
    };

    /**
     * Lets you skip re-rendering a component when its props are unchanged.
     *
     * @see {@link https://react.dev/reference/react/memo React Docs}
     *
     * @param Component The component to memoize.
     * @param propsAreEqual A function that will be used to determine if the props have changed.
     *
     * @example
     *
     * ```tsx
     * import { memo } from 'react';
     *
     * const SomeComponent = memo(function SomeComponent(props: { foo: string }) {
     *   // ...
     * });
     * ```
     */
    function memo<P extends object>(
        Component: FunctionComponent<P>,
        propsAreEqual?: (prevProps: Readonly<P>, nextProps: Readonly<P>) => boolean,
    ): NamedExoticComponent<P>;
    function memo<T extends ComponentType<any>>(
        Component: T,
        propsAreEqual?: (prevProps: Readonly<ComponentProps<T>>, nextProps: Readonly<ComponentProps<T>>) => boolean,
    ): MemoExoticComponent<T>;

    interface LazyExoticComponent<T extends ComponentType<any>>
        extends ExoticComponent<CustomComponentPropsWithRef<T>>
    {
        readonly _result: T;
    }

    /**
     * Lets you defer loading a component’s code until it is rendered for the first time.
     *
     * @see {@link https://react.dev/reference/react/lazy React Docs}
     *
     * @param load A function that returns a `Promise` or another thenable (a `Promise`-like object with a
     * then method). React will not call `load` until the first time you attempt to render the returned
     * component. After React first calls load, it will wait for it to resolve, and then render the
     * resolved value’s `.default` as a React component. Both the returned `Promise` and the `Promise`’s
     * resolved value will be cached, so React will not call load more than once. If the `Promise` rejects,
     * React will throw the rejection reason for the nearest Error Boundary to handle.
     *
     * @example
     *
     * ```tsx
     * import { lazy } from 'react';
     *
     * const MarkdownPreview = lazy(() => import('./MarkdownPreview.js'));
     * ```
     */
    function lazy<T extends ComponentType<any>>(
        load: () => Promise<{ default: T }>,
    ): LazyExoticComponent<T>;

    //
    // React Hooks
    // ----------------------------------------------------------------------

    /**
     * The instruction passed to a {@link Dispatch} function in {@link useState}
     * to tell React what the next value of the {@link useState} should be.
     *
     * Often found wrapped in {@link Dispatch}.
     *
     * @template S The type of the state.
     *
     * @example
     *
     * ```tsx
     * // This return type correctly represents the type of
     * // `setCount` in the example below.
     * const useCustomState = (): Dispatch<SetStateAction<number>> => {
     *   const [count, setCount] = useState(0);
     *
     *   return setCount;
     * }
     * ```
     */
    type SetStateAction<S> = S | ((prevState: S) => S);

    /**
     * A function that can be used to update the state of a {@link useState}
     * or {@link useReducer} hook.
     */
    type Dispatch<A> = (value: A) => void;
    /**
     * A {@link Dispatch} function can sometimes be called without any arguments.
     */
    type DispatchWithoutAction = () => void;
    // Unlike redux, the actions _can_ be anything
    type Reducer<S, A> = (prevState: S, action: A) => S;
    // If useReducer accepts a reducer without action, dispatch may be called without any parameters.
    type ReducerWithoutAction<S> = (prevState: S) => S;
    // types used to try and prevent the compiler from reducing S
    // to a supertype common with the second argument to useReducer()
    type ReducerState<R extends Reducer<any, any>> = R extends Reducer<infer S, any> ? S : never;
    type ReducerAction<R extends Reducer<any, any>> = R extends Reducer<any, infer A> ? A : never;
    // The identity check is done with the SameValue algorithm (Object.is), which is stricter than ===
    type ReducerStateWithoutAction<R extends ReducerWithoutAction<any>> = R extends ReducerWithoutAction<infer S> ? S
        : never;
    type DependencyList = readonly unknown[];

    // NOTE: callbacks are _only_ allowed to return either void, or a destructor.
    type EffectCallback = () => void | Destructor;

    interface MutableRefObject<T> {
        current: T;
    }

    // This will technically work if you give a Consumer<T> or Provider<T> but it's deprecated and warns
    /**
     * Accepts a context object (the value returned from `React.createContext`) and returns the current
     * context value, as given by the nearest context provider for the given context.
     *
     * @version 16.8.0
     * @see {@link https://react.dev/reference/react/useContext}
     */
    function useContext<T>(context: Context<T> /*, (not public API) observedBits?: number|boolean */): T;
    /**
     * Returns a stateful value, and a function to update it.
     *
     * @version 16.8.0
     * @see {@link https://react.dev/reference/react/useState}
     */
    function useState<S>(initialState: S | (() => S)): [S, Dispatch<SetStateAction<S>>];
    // convenience overload when first argument is omitted
    /**
     * Returns a stateful value, and a function to update it.
     *
     * @version 16.8.0
     * @see {@link https://react.dev/reference/react/useState}
     */
    function useState<S = undefined>(): [S | undefined, Dispatch<SetStateAction<S | undefined>>];
    /**
     * An alternative to `useState`.
     *
     * `useReducer` is usually preferable to `useState` when you have complex state logic that involves
     * multiple sub-values. It also lets you optimize performance for components that trigger deep
     * updates because you can pass `dispatch` down instead of callbacks.
     *
     * @version 16.8.0
     * @see {@link https://react.dev/reference/react/useReducer}
     */
    // overload where dispatch could accept 0 arguments.
    function useReducer<R extends ReducerWithoutAction<any>, I>(
        reducer: R,
        initializerArg: I,
        initializer: (arg: I) => ReducerStateWithoutAction<R>,
    ): [ReducerStateWithoutAction<R>, DispatchWithoutAction];
    /**
     * An alternative to `useState`.
     *
     * `useReducer` is usually preferable to `useState` when you have complex state logic that involves
     * multiple sub-values. It also lets you optimize performance for components that trigger deep
     * updates because you can pass `dispatch` down instead of callbacks.
     *
     * @version 16.8.0
     * @see {@link https://react.dev/reference/react/useReducer}
     */
    // overload where dispatch could accept 0 arguments.
    function useReducer<R extends ReducerWithoutAction<any>>(
        reducer: R,
        initializerArg: ReducerStateWithoutAction<R>,
        initializer?: undefined,
    ): [ReducerStateWithoutAction<R>, DispatchWithoutAction];
    /**
     * An alternative to `useState`.
     *
     * `useReducer` is usually preferable to `useState` when you have complex state logic that involves
     * multiple sub-values. It also lets you optimize performance for components that trigger deep
     * updates because you can pass `dispatch` down instead of callbacks.
     *
     * @version 16.8.0
     * @see {@link https://react.dev/reference/react/useReducer}
     */
    // overload where "I" may be a subset of ReducerState<R>; used to provide autocompletion.
    // If "I" matches ReducerState<R> exactly then the last overload will allow initializer to be omitted.
    // the last overload effectively behaves as if the identity function (x => x) is the initializer.
    function useReducer<R extends Reducer<any, any>, I>(
        reducer: R,
        initializerArg: I & ReducerState<R>,
        initializer: (arg: I & ReducerState<R>) => ReducerState<R>,
    ): [ReducerState<R>, Dispatch<ReducerAction<R>>];
    /**
     * An alternative to `useState`.
     *
     * `useReducer` is usually preferable to `useState` when you have complex state logic that involves
     * multiple sub-values. It also lets you optimize performance for components that trigger deep
     * updates because you can pass `dispatch` down instead of callbacks.
     *
     * @version 16.8.0
     * @see {@link https://react.dev/reference/react/useReducer}
     */
    // overload for free "I"; all goes as long as initializer converts it into "ReducerState<R>".
    function useReducer<R extends Reducer<any, any>, I>(
        reducer: R,
        initializerArg: I,
        initializer: (arg: I) => ReducerState<R>,
    ): [ReducerState<R>, Dispatch<ReducerAction<R>>];
    /**
     * An alternative to `useState`.
     *
     * `useReducer` is usually preferable to `useState` when you have complex state logic that involves
     * multiple sub-values. It also lets you optimize performance for components that trigger deep
     * updates because you can pass `dispatch` down instead of callbacks.
     *
     * @version 16.8.0
     * @see {@link https://react.dev/reference/react/useReducer}
     */

    // I'm not sure if I keep this 2-ary or if I make it (2,3)-ary; it's currently (2,3)-ary.
    // The Flow types do have an overload for 3-ary invocation with undefined initializer.

    // NOTE: without the ReducerState indirection, TypeScript would reduce S to be the most common
    // supertype between the reducer's return type and the initialState (or the initializer's return type),
    // which would prevent autocompletion from ever working.

    // TODO: double-check if this weird overload logic is necessary. It is possible it's either a bug
    // in older versions, or a regression in newer versions of the typescript completion service.
    function useReducer<R extends Reducer<any, any>>(
        reducer: R,
        initialState: ReducerState<R>,
        initializer?: undefined,
    ): [ReducerState<R>, Dispatch<ReducerAction<R>>];
    /**
     * `useRef` returns a mutable ref object whose `.current` property is initialized to the passed argument
     * (`initialValue`). The returned object will persist for the full lifetime of the component.
     *
     * Note that `useRef()` is useful for more than the `ref` attribute. It’s handy for keeping any mutable
     * value around similar to how you’d use instance fields in classes.
     *
     * @version 16.8.0
     * @see {@link https://react.dev/reference/react/useRef}
     */
    function useRef<T>(initialValue: T): MutableRefObject<T>;
    // convenience overload for refs given as a ref prop as they typically start with a null value
    /**
     * `useRef` returns a mutable ref object whose `.current` property is initialized to the passed argument
     * (`initialValue`). The returned object will persist for the full lifetime of the component.
     *
     * Note that `useRef()` is useful for more than the `ref` attribute. It’s handy for keeping any mutable
     * value around similar to how you’d use instance fields in classes.
     *
     * Usage note: if you need the result of useRef to be directly mutable, include `| null` in the type
     * of the generic argument.
     *
     * @version 16.8.0
     * @see {@link https://react.dev/reference/react/useRef}
     */
    function useRef<T>(initialValue: T | null): RefObject<T>;
    // convenience overload for potentially undefined initialValue / call with 0 arguments
    // has a default to stop it from defaulting to {} instead
    /**
     * `useRef` returns a mutable ref object whose `.current` property is initialized to the passed argument
     * (`initialValue`). The returned object will persist for the full lifetime of the component.
     *
     * Note that `useRef()` is useful for more than the `ref` attribute. It’s handy for keeping any mutable
     * value around similar to how you’d use instance fields in classes.
     *
     * @version 16.8.0
     * @see {@link https://react.dev/reference/react/useRef}
     */
    function useRef<T = undefined>(initialValue?: undefined): MutableRefObject<T | undefined>;
    /**
     * The signature is identical to `useEffect`, but it fires synchronously after all DOM mutations.
     * Use this to read layout from the DOM and synchronously re-render. Updates scheduled inside
     * `useLayoutEffect` will be flushed synchronously, before the browser has a chance to paint.
     *
     * Prefer the standard `useEffect` when possible to avoid blocking visual updates.
     *
     * If you’re migrating code from a class component, `useLayoutEffect` fires in the same phase as
     * `componentDidMount` and `componentDidUpdate`.
     *
     * @version 16.8.0
     * @see {@link https://react.dev/reference/react/useLayoutEffect}
     */
    function useLayoutEffect(effect: EffectCallback, deps?: DependencyList): void;
    /**
     * Accepts a function that contains imperative, possibly effectful code.
     *
     * @param effect Imperative function that can return a cleanup function
     * @param deps If present, effect will only activate if the values in the list change.
     *
     * @version 16.8.0
     * @see {@link https://react.dev/reference/react/useEffect}
     */
    function useEffect(effect: EffectCallback, deps?: DependencyList): void;
    // NOTE: this does not accept strings, but this will have to be fixed by removing strings from type Ref<T>
    /**
     * `useImperativeHandle` customizes the instance value that is exposed to parent components when using
     * `ref`. As always, imperative code using refs should be avoided in most cases.
     *
     * `useImperativeHandle` should be used with `React.forwardRef`.
     *
     * @version 16.8.0
     * @see {@link https://react.dev/reference/react/useImperativeHandle}
     */
    function useImperativeHandle<T, R extends T>(ref: Ref<T> | undefined, init: () => R, deps?: DependencyList): void;
    // I made 'inputs' required here and in useMemo as there's no point to memoizing without the memoization key
    // useCallback(X) is identical to just using X, useMemo(() => Y) is identical to just using Y.
    /**
     * `useCallback` will return a memoized version of the callback that only changes if one of the `inputs`
     * has changed.
     *
     * @version 16.8.0
     * @see {@link https://react.dev/reference/react/useCallback}
     */
    // A specific function type would not trigger implicit any.
    // See https://github.com/DefinitelyTyped/DefinitelyTyped/issues/52873#issuecomment-845806435 for a comparison between `Function` and more specific types.
    // eslint-disable-next-line @typescript-eslint/no-unsafe-function-type
    function useCallback<T extends Function>(callback: T, deps: DependencyList): T;
    /**
     * `useMemo` will only recompute the memoized value when one of the `deps` has changed.
     *
     * @version 16.8.0
     * @see {@link https://react.dev/reference/react/useMemo}
     */
    // allow undefined, but don't make it optional as that is very likely a mistake
    function useMemo<T>(factory: () => T, deps: DependencyList): T;
    /**
     * `useDebugValue` can be used to display a label for custom hooks in React DevTools.
     *
     * NOTE: We don’t recommend adding debug values to every custom hook.
     * It’s most valuable for custom hooks that are part of shared libraries.
     *
     * @version 16.8.0
     * @see {@link https://react.dev/reference/react/useDebugValue}
     */
    // the name of the custom hook is itself derived from the function name at runtime:
    // it's just the function name without the "use" prefix.
    function useDebugValue<T>(value: T, format?: (value: T) => any): void;

    // must be synchronous
    export type TransitionFunction = () => VoidOrUndefinedOnly;
    // strange definition to allow vscode to show documentation on the invocation
    export interface TransitionStartFunction {
        /**
         * State updates caused inside the callback are allowed to be deferred.
         *
         * **If some state update causes a component to suspend, that state update should be wrapped in a transition.**
         *
         * @param callback A _synchronous_ function which causes state updates that can be deferred.
         */
        (callback: TransitionFunction): void;
    }

    /**
     * Returns a deferred version of the value that may “lag behind” it.
     *
     * This is commonly used to keep the interface responsive when you have something that renders immediately
     * based on user input and something that needs to wait for a data fetch.
     *
     * A good example of this is a text input.
     *
     * @param value The value that is going to be deferred
     *
     * @see {@link https://react.dev/reference/react/useDeferredValue}
     */
    export function useDeferredValue<T>(value: T): T;

    /**
     * Allows components to avoid undesirable loading states by waiting for content to load
     * before transitioning to the next screen. It also allows components to defer slower,
     * data fetching updates until subsequent renders so that more crucial updates can be
     * rendered immediately.
     *
     * The `useTransition` hook returns two values in an array.
     *
     * The first is a boolean, React’s way of informing us whether we’re waiting for the transition to finish.
     * The second is a function that takes a callback. We can use it to tell React which state we want to defer.
     *
     * **If some state update causes a component to suspend, that state update should be wrapped in a transition.**
     *
     * @see {@link https://react.dev/reference/react/useTransition}
     */
    export function useTransition(): [boolean, TransitionStartFunction];

    /**
     * Similar to `useTransition` but allows uses where hooks are not available.
     *
     * @param callback A _synchronous_ function which causes state updates that can be deferred.
     */
    export function startTransition(scope: TransitionFunction): void;

    /**
     * Wrap any code rendering and triggering updates to your components into `act()` calls.
     *
     * Ensures that the behavior in your tests matches what happens in the browser
     * more closely by executing pending `useEffect`s before returning. This also
     * reduces the amount of re-renders done.
     *
     * @param callback A synchronous, void callback that will execute as a single, complete React commit.
     *
     * @see https://reactjs.org/blog/2019/02/06/react-v16.8.0.html#testing-hooks
     */
    // While act does always return Thenable, if a void function is passed, we pretend the return value is also void to not trigger dangling Promise lint rules.
    export function act(callback: () => VoidOrUndefinedOnly): void;
    export function act<T>(callback: () => T | Promise<T>): Promise<T>;

    export function useId(): string;

    /**
     * @param effect Imperative function that can return a cleanup function
     * @param deps If present, effect will only activate if the values in the list change.
     *
     * @see {@link https://github.com/facebook/react/pull/21913}
     */
    export function useInsertionEffect(effect: EffectCallback, deps?: DependencyList): void;

    /**
     * @param subscribe
     * @param getSnapshot
     *
     * @see {@link https://github.com/reactwg/react-18/discussions/86}
     */
    // keep in sync with `useSyncExternalStore` from `use-sync-external-store`
    export function useSyncExternalStore<Snapshot>(
        subscribe: (onStoreChange: () => void) => () => void,
        getSnapshot: () => Snapshot,
        getServerSnapshot?: () => Snapshot,
    ): Snapshot;

    //
    // Event System
    // ----------------------------------------------------------------------
    // TODO: change any to unknown when moving to TS v3
    interface BaseSyntheticEvent<E = object, C = any, T = any> {
        nativeEvent: E;
        currentTarget: C;
        target: T;
        bubbles: boolean;
        cancelable: boolean;
        defaultPrevented: boolean;
        eventPhase: number;
        isTrusted: boolean;
        preventDefault(): void;
        isDefaultPrevented(): boolean;
        stopPropagation(): void;
        isPropagationStopped(): boolean;
        persist(): void;
        timeStamp: number;
        type: string;
    }

    /**
     * currentTarget - a reference to the element on which the event listener is registered.
     *
     * target - a reference to the element from which the event was originally dispatched.
     * This might be a child element to the element on which the event listener is registered.
     * If you thought this should be `EventTarget & T`, see https://github.com/DefinitelyTyped/DefinitelyTyped/issues/11508#issuecomment-256045682
     */
    interface SyntheticEvent<T = Element, E = Event> extends BaseSyntheticEvent<E, EventTarget & T, EventTarget> {}

    interface ClipboardEvent<T = Element> extends SyntheticEvent<T, NativeClipboardEvent> {
        clipboardData: DataTransfer;
    }

    interface CompositionEvent<T = Element> extends SyntheticEvent<T, NativeCompositionEvent> {
        data: string;
    }

    interface DragEvent<T = Element> extends MouseEvent<T, NativeDragEvent> {
        dataTransfer: DataTransfer;
    }

    interface PointerEvent<T = Element> extends MouseEvent<T, NativePointerEvent> {
        pointerId: number;
        pressure: number;
        tangentialPressure: number;
        tiltX: number;
        tiltY: number;
        twist: number;
        width: number;
        height: number;
        pointerType: "mouse" | "pen" | "touch";
        isPrimary: boolean;
    }

    interface FocusEvent<Target = Element, RelatedTarget = Element> extends SyntheticEvent<Target, NativeFocusEvent> {
        relatedTarget: (EventTarget & RelatedTarget) | null;
        target: EventTarget & Target;
    }

    interface FormEvent<T = Element> extends SyntheticEvent<T> {
    }

    interface InvalidEvent<T = Element> extends SyntheticEvent<T> {
        target: EventTarget & T;
    }

    interface ChangeEvent<T = Element> extends SyntheticEvent<T> {
        target: EventTarget & T;
    }

    export type ModifierKey =
        | "Alt"
        | "AltGraph"
        | "CapsLock"
        | "Control"
        | "Fn"
        | "FnLock"
        | "Hyper"
        | "Meta"
        | "NumLock"
        | "ScrollLock"
        | "Shift"
        | "Super"
        | "Symbol"
        | "SymbolLock";

    interface KeyboardEvent<T = Element> extends UIEvent<T, NativeKeyboardEvent> {
        altKey: boolean;
        /** @deprecated */
        charCode: number;
        ctrlKey: boolean;
        code: string;
        /**
         * See [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#keys-modifier). for a list of valid (case-sensitive) arguments to this method.
         */
        getModifierState(key: ModifierKey): boolean;
        /**
         * See the [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#named-key-attribute-values). for possible values
         */
        key: string;
        /** @deprecated */
        keyCode: number;
        locale: string;
        location: number;
        metaKey: boolean;
        repeat: boolean;
        shiftKey: boolean;
        /** @deprecated */
        which: number;
    }

    interface MouseEvent<T = Element, E = NativeMouseEvent> extends UIEvent<T, E> {
        altKey: boolean;
        button: number;
        buttons: number;
        clientX: number;
        clientY: number;
        ctrlKey: boolean;
        /**
         * See [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#keys-modifier). for a list of valid (case-sensitive) arguments to this method.
         */
        getModifierState(key: ModifierKey): boolean;
        metaKey: boolean;
        movementX: number;
        movementY: number;
        pageX: number;
        pageY: number;
        relatedTarget: EventTarget | null;
        screenX: number;
        screenY: number;
        shiftKey: boolean;
    }

    interface TouchEvent<T = Element> extends UIEvent<T, NativeTouchEvent> {
        altKey: boolean;
        changedTouches: TouchList;
        ctrlKey: boolean;
        /**
         * See [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#keys-modifier). for a list of valid (case-sensitive) arguments to this method.
         */
        getModifierState(key: ModifierKey): boolean;
        metaKey: boolean;
        shiftKey: boolean;
        targetTouches: TouchList;
        touches: TouchList;
    }

    interface UIEvent<T = Element, E = NativeUIEvent> extends SyntheticEvent<T, E> {
        detail: number;
        view: AbstractView;
    }

    interface WheelEvent<T = Element> extends MouseEvent<T, NativeWheelEvent> {
        deltaMode: number;
        deltaX: number;
        deltaY: number;
        deltaZ: number;
    }

    interface AnimationEvent<T = Element> extends SyntheticEvent<T, NativeAnimationEvent> {
        animationName: string;
        elapsedTime: number;
        pseudoElement: string;
    }

    interface TransitionEvent<T = Element> extends SyntheticEvent<T, NativeTransitionEvent> {
        elapsedTime: number;
        propertyName: string;
        pseudoElement: string;
    }

    //
    // Event Handler Types
    // ----------------------------------------------------------------------

    type EventHandler<E extends SyntheticEvent<any>> = { bivarianceHack(event: E): void }["bivarianceHack"];

    type ReactEventHandler<T = Element> = EventHandler<SyntheticEvent<T>>;

    type ClipboardEventHandler<T = Element> = EventHandler<ClipboardEvent<T>>;
    type CompositionEventHandler<T = Element> = EventHandler<CompositionEvent<T>>;
    type DragEventHandler<T = Element> = EventHandler<DragEvent<T>>;
    type FocusEventHandler<T = Element> = EventHandler<FocusEvent<T>>;
    type FormEventHandler<T = Element> = EventHandler<FormEvent<T>>;
    type ChangeEventHandler<T = Element> = EventHandler<ChangeEvent<T>>;
    type KeyboardEventHandler<T = Element> = EventHandler<KeyboardEvent<T>>;
    type MouseEventHandler<T = Element> = EventHandler<MouseEvent<T>>;
    type TouchEventHandler<T = Element> = EventHandler<TouchEvent<T>>;
    type PointerEventHandler<T = Element> = EventHandler<PointerEvent<T>>;
    type UIEventHandler<T = Element> = EventHandler<UIEvent<T>>;
    type WheelEventHandler<T = Element> = EventHandler<WheelEvent<T>>;
    type AnimationEventHandler<T = Element> = EventHandler<AnimationEvent<T>>;
    type TransitionEventHandler<T = Element> = EventHandler<TransitionEvent<T>>;

    //
    // Props / DOM Attributes
    // ----------------------------------------------------------------------

    interface HTMLProps<T> extends AllHTMLAttributes<T>, ClassAttributes<T> {
    }

    type DetailedHTMLProps<E extends HTMLAttributes<T>, T> = ClassAttributes<T> & E;

    interface SVGProps<T> extends SVGAttributes<T>, ClassAttributes<T> {
    }

    interface SVGLineElementAttributes<T> extends SVGProps<T> {}
    interface SVGTextElementAttributes<T> extends SVGProps<T> {}

    interface DOMAttributes<T> {
        children?: ReactNode | undefined;
        dangerouslySetInnerHTML?: {
            // Should be InnerHTML['innerHTML'].
            // But unfortunately we're mixing renderer-specific type declarations.
            __html: string | TrustedHTML;
        } | undefined;

        // Clipboard Events
        onCopy?: ClipboardEventHandler<T> | undefined;
        onCopyCapture?: ClipboardEventHandler<T> | undefined;
        onCut?: ClipboardEventHandler<T> | undefined;
        onCutCapture?: ClipboardEventHandler<T> | undefined;
        onPaste?: ClipboardEventHandler<T> | undefined;
        onPasteCapture?: ClipboardEventHandler<T> | undefined;

        // Composition Events
        onCompositionEnd?: CompositionEventHandler<T> | undefined;
        onCompositionEndCapture?: CompositionEventHandler<T> | undefined;
        onCompositionStart?: CompositionEventHandler<T> | undefined;
        onCompositionStartCapture?: CompositionEventHandler<T> | undefined;
        onCompositionUpdate?: CompositionEventHandler<T> | undefined;
        onCompositionUpdateCapture?: CompositionEventHandler<T> | undefined;

        // Focus Events
        onFocus?: FocusEventHandler<T> | undefined;
        onFocusCapture?: FocusEventHandler<T> | undefined;
        onBlur?: FocusEventHandler<T> | undefined;
        onBlurCapture?: FocusEventHandler<T> | undefined;

        // Form Events
        onChange?: FormEventHandler<T> | undefined;
        onChangeCapture?: FormEventHandler<T> | undefined;
        onBeforeInput?: FormEventHandler<T> | undefined;
        onBeforeInputCapture?: FormEventHandler<T> | undefined;
        onInput?: FormEventHandler<T> | undefined;
        onInputCapture?: FormEventHandler<T> | undefined;
        onReset?: FormEventHandler<T> | undefined;
        onResetCapture?: FormEventHandler<T> | undefined;
        onSubmit?: FormEventHandler<T> | undefined;
        onSubmitCapture?: FormEventHandler<T> | undefined;
        onInvalid?: FormEventHandler<T> | undefined;
        onInvalidCapture?: FormEventHandler<T> | undefined;

        // Image Events
        onLoad?: ReactEventHandler<T> | undefined;
        onLoadCapture?: ReactEventHandler<T> | undefined;
        onError?: ReactEventHandler<T> | undefined; // also a Media Event
        onErrorCapture?: ReactEventHandler<T> | undefined; // also a Media Event

        // Keyboard Events
        onKeyDown?: KeyboardEventHandler<T> | undefined;
        onKeyDownCapture?: KeyboardEventHandler<T> | undefined;
        /** @deprecated Use `onKeyUp` or `onKeyDown` instead */
        onKeyPress?: KeyboardEventHandler<T> | undefined;
        /** @deprecated Use `onKeyUpCapture` or `onKeyDownCapture` instead */
        onKeyPressCapture?: KeyboardEventHandler<T> | undefined;
        onKeyUp?: KeyboardEventHandler<T> | undefined;
        onKeyUpCapture?: KeyboardEventHandler<T> | undefined;

        // Media Events
        onAbort?: ReactEventHandler<T> | undefined;
        onAbortCapture?: ReactEventHandler<T> | undefined;
        onCanPlay?: ReactEventHandler<T> | undefined;
        onCanPlayCapture?: ReactEventHandler<T> | undefined;
        onCanPlayThrough?: ReactEventHandler<T> | undefined;
        onCanPlayThroughCapture?: ReactEventHandler<T> | undefined;
        onDurationChange?: ReactEventHandler<T> | undefined;
        onDurationChangeCapture?: ReactEventHandler<T> | undefined;
        onEmptied?: ReactEventHandler<T> | undefined;
        onEmptiedCapture?: ReactEventHandler<T> | undefined;
        onEncrypted?: ReactEventHandler<T> | undefined;
        onEncryptedCapture?: ReactEventHandler<T> | undefined;
        onEnded?: ReactEventHandler<T> | undefined;
        onEndedCapture?: ReactEventHandler<T> | undefined;
        onLoadedData?: ReactEventHandler<T> | undefined;
        onLoadedDataCapture?: ReactEventHandler<T> | undefined;
        onLoadedMetadata?: ReactEventHandler<T> | undefined;
        onLoadedMetadataCapture?: ReactEventHandler<T> | undefined;
        onLoadStart?: ReactEventHandler<T> | undefined;
        onLoadStartCapture?: ReactEventHandler<T> | undefined;
        onPause?: ReactEventHandler<T> | undefined;
        onPauseCapture?: ReactEventHandler<T> | undefined;
        onPlay?: ReactEventHandler<T> | undefined;
        onPlayCapture?: ReactEventHandler<T> | undefined;
        onPlaying?: ReactEventHandler<T> | undefined;
        onPlayingCapture?: ReactEventHandler<T> | undefined;
        onProgress?: ReactEventHandler<T> | undefined;
        onProgressCapture?: ReactEventHandler<T> | undefined;
        onRateChange?: ReactEventHandler<T> | undefined;
        onRateChangeCapture?: ReactEventHandler<T> | undefined;
        onResize?: ReactEventHandler<T> | undefined;
        onResizeCapture?: ReactEventHandler<T> | undefined;
        onSeeked?: ReactEventHandler<T> | undefined;
        onSeekedCapture?: ReactEventHandler<T> | undefined;
        onSeeking?: ReactEventHandler<T> | undefined;
        onSeekingCapture?: ReactEventHandler<T> | undefined;
        onStalled?: ReactEventHandler<T> | undefined;
        onStalledCapture?: ReactEventHandler<T> | undefined;
        onSuspend?: ReactEventHandler<T> | undefined;
        onSuspendCapture?: ReactEventHandler<T> | undefined;
        onTimeUpdate?: ReactEventHandler<T> | undefined;
        onTimeUpdateCapture?: ReactEventHandler<T> | undefined;
        onVolumeChange?: ReactEventHandler<T> | undefined;
        onVolumeChangeCapture?: ReactEventHandler<T> | undefined;
        onWaiting?: ReactEventHandler<T> | undefined;
        onWaitingCapture?: ReactEventHandler<T> | undefined;

        // MouseEvents
        onAuxClick?: MouseEventHandler<T> | undefined;
        onAuxClickCapture?: MouseEventHandler<T> | undefined;
        onClick?: MouseEventHandler<T> | undefined;
        onClickCapture?: MouseEventHandler<T> | undefined;
        onContextMenu?: MouseEventHandler<T> | undefined;
        onContextMenuCapture?: MouseEventHandler<T> | undefined;
        onDoubleClick?: MouseEventHandler<T> | undefined;
        onDoubleClickCapture?: MouseEventHandler<T> | undefined;
        onDrag?: DragEventHandler<T> | undefined;
        onDragCapture?: DragEventHandler<T> | undefined;
        onDragEnd?: DragEventHandler<T> | undefined;
        onDragEndCapture?: DragEventHandler<T> | undefined;
        onDragEnter?: DragEventHandler<T> | undefined;
        onDragEnterCapture?: DragEventHandler<T> | undefined;
        onDragExit?: DragEventHandler<T> | undefined;
        onDragExitCapture?: DragEventHandler<T> | undefined;
        onDragLeave?: DragEventHandler<T> | undefined;
        onDragLeaveCapture?: DragEventHandler<T> | undefined;
        onDragOver?: DragEventHandler<T> | undefined;
        onDragOverCapture?: DragEventHandler<T> | undefined;
        onDragStart?: DragEventHandler<T> | undefined;
        onDragStartCapture?: DragEventHandler<T> | undefined;
        onDrop?: DragEventHandler<T> | undefined;
        onDropCapture?: DragEventHandler<T> | undefined;
        onMouseDown?: MouseEventHandler<T> | undefined;
        onMouseDownCapture?: MouseEventHandler<T> | undefined;
        onMouseEnter?: MouseEventHandler<T> | undefined;
        onMouseLeave?: MouseEventHandler<T> | undefined;
        onMouseMove?: MouseEventHandler<T> | undefined;
        onMouseMoveCapture?: MouseEventHandler<T> | undefined;
        onMouseOut?: MouseEventHandler<T> | undefined;
        onMouseOutCapture?: MouseEventHandler<T> | undefined;
        onMouseOver?: MouseEventHandler<T> | undefined;
        onMouseOverCapture?: MouseEventHandler<T> | undefined;
        onMouseUp?: MouseEventHandler<T> | undefined;
        onMouseUpCapture?: MouseEventHandler<T> | undefined;

        // Selection Events
        onSelect?: ReactEventHandler<T> | undefined;
        onSelectCapture?: ReactEventHandler<T> | undefined;

        // Touch Events
        onTouchCancel?: TouchEventHandler<T> | undefined;
        onTouchCancelCapture?: TouchEventHandler<T> | undefined;
        onTouchEnd?: TouchEventHandler<T> | undefined;
        onTouchEndCapture?: TouchEventHandler<T> | undefined;
        onTouchMove?: TouchEventHandler<T> | undefined;
        onTouchMoveCapture?: TouchEventHandler<T> | undefined;
        onTouchStart?: TouchEventHandler<T> | undefined;
        onTouchStartCapture?: TouchEventHandler<T> | undefined;

        // Pointer Events
        onPointerDown?: PointerEventHandler<T> | undefined;
        onPointerDownCapture?: PointerEventHandler<T> | undefined;
        onPointerMove?: PointerEventHandler<T> | undefined;
        onPointerMoveCapture?: PointerEventHandler<T> | undefined;
        onPointerUp?: PointerEventHandler<T> | undefined;
        onPointerUpCapture?: PointerEventHandler<T> | undefined;
        onPointerCancel?: PointerEventHandler<T> | undefined;
        onPointerCancelCapture?: PointerEventHandler<T> | undefined;
        onPointerEnter?: PointerEventHandler<T> | undefined;
        onPointerLeave?: PointerEventHandler<T> | undefined;
        onPointerOver?: PointerEventHandler<T> | undefined;
        onPointerOverCapture?: PointerEventHandler<T> | undefined;
        onPointerOut?: PointerEventHandler<T> | undefined;
        onPointerOutCapture?: PointerEventHandler<T> | undefined;
        onGotPointerCapture?: PointerEventHandler<T> | undefined;
        onGotPointerCaptureCapture?: PointerEventHandler<T> | undefined;
        onLostPointerCapture?: PointerEventHandler<T> | undefined;
        onLostPointerCaptureCapture?: PointerEventHandler<T> | undefined;

        // UI Events
        onScroll?: UIEventHandler<T> | undefined;
        onScrollCapture?: UIEventHandler<T> | undefined;

        // Wheel Events
        onWheel?: WheelEventHandler<T> | undefined;
        onWheelCapture?: WheelEventHandler<T> | undefined;

        // Animation Events
        onAnimationStart?: AnimationEventHandler<T> | undefined;
        onAnimationStartCapture?: AnimationEventHandler<T> | undefined;
        onAnimationEnd?: AnimationEventHandler<T> | undefined;
        onAnimationEndCapture?: AnimationEventHandler<T> | undefined;
        onAnimationIteration?: AnimationEventHandler<T> | undefined;
        onAnimationIterationCapture?: AnimationEventHandler<T> | undefined;

        // Transition Events
        onTransitionEnd?: TransitionEventHandler<T> | undefined;
        onTransitionEndCapture?: TransitionEventHandler<T> | undefined;
    }

    export interface CSSProperties extends CSS.Properties<string | number> {
        /**
         * The index signature was removed to enable closed typing for style
         * using CSSType. You're able to use type assertion or module augmentation
         * to add properties or an index signature of your own.
         *
         * For examples and more information, visit:
         * https://github.com/frenic/csstype#what-should-i-do-when-i-get-type-errors
         */
    }

    // All the WAI-ARIA 1.1 attributes from https://www.w3.org/TR/wai-aria-1.1/
    interface AriaAttributes {
        /** Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application. */
        "aria-activedescendant"?: string | undefined;
        /** Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute. */
        "aria-atomic"?: Booleanish | undefined;
        /**
         * Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be
         * presented if they are made.
         */
        "aria-autocomplete"?: "none" | "inline" | "list" | "both" | undefined;
        /** Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user. */
        /**
         * Defines a string value that labels the current element, which is intended to be converted into Braille.
         * @see aria-label.
         */
        "aria-braillelabel"?: string | undefined;
        /**
         * Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille.
         * @see aria-roledescription.
         */
        "aria-brailleroledescription"?: string | undefined;
        "aria-busy"?: Booleanish | undefined;
        /**
         * Indicates the current "checked" state of checkboxes, radio buttons, and other widgets.
         * @see aria-pressed @see aria-selected.
         */
        "aria-checked"?: boolean | "false" | "mixed" | "true" | undefined;
        /**
         * Defines the total number of columns in a table, grid, or treegrid.
         * @see aria-colindex.
         */
        "aria-colcount"?: number | undefined;
        /**
         * Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.
         * @see aria-colcount @see aria-colspan.
         */
        "aria-colindex"?: number | undefined;
        /**
         * Defines a human readable text alternative of aria-colindex.
         * @see aria-rowindextext.
         */
        "aria-colindextext"?: string | undefined;
        /**
         * Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.
         * @see aria-colindex @see aria-rowspan.
         */
        "aria-colspan"?: number | undefined;
        /**
         * Identifies the element (or elements) whose contents or presence are controlled by the current element.
         * @see aria-owns.
         */
        "aria-controls"?: string | undefined;
        /** Indicates the element that represents the current item within a container or set of related elements. */
        "aria-current"?: boolean | "false" | "true" | "page" | "step" | "location" | "date" | "time" | undefined;
        /**
         * Identifies the element (or elements) that describes the object.
         * @see aria-labelledby
         */
        "aria-describedby"?: string | undefined;
        /**
         * Defines a string value that describes or annotates the current element.
         * @see related aria-describedby.
         */
        "aria-description"?: string | undefined;
        /**
         * Identifies the element that provides a detailed, extended description for the object.
         * @see aria-describedby.
         */
        "aria-details"?: string | undefined;
        /**
         * Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.
         * @see aria-hidden @see aria-readonly.
         */
        "aria-disabled"?: Booleanish | undefined;
        /**
         * Indicates what functions can be performed when a dragged object is released on the drop target.
         * @deprecated in ARIA 1.1
         */
        "aria-dropeffect"?: "none" | "copy" | "execute" | "link" | "move" | "popup" | undefined;
        /**
         * Identifies the element that provides an error message for the object.
         * @see aria-invalid @see aria-describedby.
         */
        "aria-errormessage"?: string | undefined;
        /** Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed. */
        "aria-expanded"?: Booleanish | undefined;
        /**
         * Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,
         * allows assistive technology to override the general default of reading in document source order.
         */
        "aria-flowto"?: string | undefined;
        /**
         * Indicates an element's "grabbed" state in a drag-and-drop operation.
         * @deprecated in ARIA 1.1
         */
        "aria-grabbed"?: Booleanish | undefined;
        /** Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element. */
        "aria-haspopup"?: boolean | "false" | "true" | "menu" | "listbox" | "tree" | "grid" | "dialog" | undefined;
        /**
         * Indicates whether the element is exposed to an accessibility API.
         * @see aria-disabled.
         */
        "aria-hidden"?: Booleanish | undefined;
        /**
         * Indicates the entered value does not conform to the format expected by the application.
         * @see aria-errormessage.
         */
        "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
        /** Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element. */
        "aria-keyshortcuts"?: string | undefined;
        /**
         * Defines a string value that labels the current element.
         * @see aria-labelledby.
         */
        "aria-label"?: string | undefined;
        /**
         * Identifies the element (or elements) that labels the current element.
         * @see aria-describedby.
         */
        "aria-labelledby"?: string | undefined;
        /** Defines the hierarchical level of an element within a structure. */
        "aria-level"?: number | undefined;
        /** Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region. */
        "aria-live"?: "off" | "assertive" | "polite" | undefined;
        /** Indicates whether an element is modal when displayed. */
        "aria-modal"?: Booleanish | undefined;
        /** Indicates whether a text box accepts multiple lines of input or only a single line. */
        "aria-multiline"?: Booleanish | undefined;
        /** Indicates that the user may select more than one item from the current selectable descendants. */
        "aria-multiselectable"?: Booleanish | undefined;
        /** Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous. */
        "aria-orientation"?: "horizontal" | "vertical" | undefined;
        /**
         * Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship
         * between DOM elements where the DOM hierarchy cannot be used to represent the relationship.
         * @see aria-controls.
         */
        "aria-owns"?: string | undefined;
        /**
         * Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.
         * A hint could be a sample value or a brief description of the expected format.
         */
        "aria-placeholder"?: string | undefined;
        /**
         * Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.
         * @see aria-setsize.
         */
        "aria-posinset"?: number | undefined;
        /**
         * Indicates the current "pressed" state of toggle buttons.
         * @see aria-checked @see aria-selected.
         */
        "aria-pressed"?: boolean | "false" | "mixed" | "true" | undefined;
        /**
         * Indicates that the element is not editable, but is otherwise operable.
         * @see aria-disabled.
         */
        "aria-readonly"?: Booleanish | undefined;
        /**
         * Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.
         * @see aria-atomic.
         */
        "aria-relevant"?:
            | "additions"
            | "additions removals"
            | "additions text"
            | "all"
            | "removals"
            | "removals additions"
            | "removals text"
            | "text"
            | "text additions"
            | "text removals"
            | undefined;
        /** Indicates that user input is required on the element before a form may be submitted. */
        "aria-required"?: Booleanish | undefined;
        /** Defines a human-readable, author-localized description for the role of an element. */
        "aria-roledescription"?: string | undefined;
        /**
         * Defines the total number of rows in a table, grid, or treegrid.
         * @see aria-rowindex.
         */
        "aria-rowcount"?: number | undefined;
        /**
         * Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.
         * @see aria-rowcount @see aria-rowspan.
         */
        "aria-rowindex"?: number | undefined;
        /**
         * Defines a human readable text alternative of aria-rowindex.
         * @see aria-colindextext.
         */
        "aria-rowindextext"?: string | undefined;
        /**
         * Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.
         * @see aria-rowindex @see aria-colspan.
         */
        "aria-rowspan"?: number | undefined;
        /**
         * Indicates the current "selected" state of various widgets.
         * @see aria-checked @see aria-pressed.
         */
        "aria-selected"?: Booleanish | undefined;
        /**
         * Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.
         * @see aria-posinset.
         */
        "aria-setsize"?: number | undefined;
        /** Indicates if items in a table or grid are sorted in ascending or descending order. */
        "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
        /** Defines the maximum allowed value for a range widget. */
        "aria-valuemax"?: number | undefined;
        /** Defines the minimum allowed value for a range widget. */
        "aria-valuemin"?: number | undefined;
        /**
         * Defines the current value for a range widget.
         * @see aria-valuetext.
         */
        "aria-valuenow"?: number | undefined;
        /** Defines the human readable text alternative of aria-valuenow for a range widget. */
        "aria-valuetext"?: string | undefined;
    }

    // All the WAI-ARIA 1.1 role attribute values from https://www.w3.org/TR/wai-aria-1.1/#role_definitions
    type AriaRole =
        | "alert"
        | "alertdialog"
        | "application"
        | "article"
        | "banner"
        | "button"
        | "cell"
        | "checkbox"
        | "columnheader"
        | "combobox"
        | "complementary"
        | "contentinfo"
        | "definition"
        | "dialog"
        | "directory"
        | "document"
        | "feed"
        | "figure"
        | "form"
        | "grid"
        | "gridcell"
        | "group"
        | "heading"
        | "img"
        | "link"
        | "list"
        | "listbox"
        | "listitem"
        | "log"
        | "main"
        | "marquee"
        | "math"
        | "menu"
        | "menubar"
        | "menuitem"
        | "menuitemcheckbox"
        | "menuitemradio"
        | "navigation"
        | "none"
        | "note"
        | "option"
        | "presentation"
        | "progressbar"
        | "radio"
        | "radiogroup"
        | "region"
        | "row"
        | "rowgroup"
        | "rowheader"
        | "scrollbar"
        | "search"
        | "searchbox"
        | "separator"
        | "slider"
        | "spinbutton"
        | "status"
        | "switch"
        | "tab"
        | "table"
        | "tablist"
        | "tabpanel"
        | "term"
        | "textbox"
        | "timer"
        | "toolbar"
        | "tooltip"
        | "tree"
        | "treegrid"
        | "treeitem"
        | (string & {});

    interface HTMLAttributes<T> extends AriaAttributes, DOMAttributes<T> {
        // React-specific Attributes
        defaultChecked?: boolean | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined;
        suppressHydrationWarning?: boolean | undefined;

        // Standard HTML Attributes
        accessKey?: string | undefined;
        autoCapitalize?: "off" | "none" | "on" | "sentences" | "words" | "characters" | undefined | (string & {});
        autoFocus?: boolean | undefined;
        className?: string | undefined;
        contentEditable?: Booleanish | "inherit" | "plaintext-only" | undefined;
        contextMenu?: string | undefined;
        dir?: string | undefined;
        draggable?: Booleanish | undefined;
        enterKeyHint?: "enter" | "done" | "go" | "next" | "previous" | "search" | "send" | undefined;
        hidden?: boolean | undefined;
        id?: string | undefined;
        lang?: string | undefined;
        nonce?: string | undefined;
        slot?: string | undefined;
        spellCheck?: Booleanish | undefined;
        style?: CSSProperties | undefined;
        tabIndex?: number | undefined;
        title?: string | undefined;
        translate?: "yes" | "no" | undefined;

        // Unknown
        radioGroup?: string | undefined; // <command>, <menuitem>

        // WAI-ARIA
        role?: AriaRole | undefined;

        // RDFa Attributes
        about?: string | undefined;
        content?: string | undefined;
        datatype?: string | undefined;
        inlist?: any;
        prefix?: string | undefined;
        property?: string | undefined;
        rel?: string | undefined;
        resource?: string | undefined;
        rev?: string | undefined;
        typeof?: string | undefined;
        vocab?: string | undefined;

        // Non-standard Attributes
        autoCorrect?: string | undefined;
        autoSave?: string | undefined;
        color?: string | undefined;
        itemProp?: string | undefined;
        itemScope?: boolean | undefined;
        itemType?: string | undefined;
        itemID?: string | undefined;
        itemRef?: string | undefined;
        results?: number | undefined;
        security?: string | undefined;
        unselectable?: "on" | "off" | undefined;

        // Living Standard
        /**
         * Hints at the type of data that might be entered by the user while editing the element or its contents
         * @see {@link https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute}
         */
        inputMode?: "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | "search" | undefined;
        /**
         * Specify that a standard HTML element should behave like a defined custom built-in element
         * @see {@link https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is}
         */
        is?: string | undefined;
    }

    /**
     * For internal usage only.
     * Different release channels declare additional types of ReactNode this particular release channel accepts.
     * App or library types should never augment this interface.
     */
    interface DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS {}

    interface AllHTMLAttributes<T> extends HTMLAttributes<T> {
        // Standard HTML Attributes
        accept?: string | undefined;
        acceptCharset?: string | undefined;
        action?:
            | string
            | undefined
            | DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS[
                keyof DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS
            ];
        allowFullScreen?: boolean | undefined;
        allowTransparency?: boolean | undefined;
        alt?: string | undefined;
        as?: string | undefined;
        async?: boolean | undefined;
        autoComplete?: string | undefined;
        autoPlay?: boolean | undefined;
        capture?: boolean | "user" | "environment" | undefined;
        cellPadding?: number | string | undefined;
        cellSpacing?: number | string | undefined;
        charSet?: string | undefined;
        challenge?: string | undefined;
        checked?: boolean | undefined;
        cite?: string | undefined;
        classID?: string | undefined;
        cols?: number | undefined;
        colSpan?: number | undefined;
        controls?: boolean | undefined;
        coords?: string | undefined;
        crossOrigin?: CrossOrigin;
        data?: string | undefined;
        dateTime?: string | undefined;
        default?: boolean | undefined;
        defer?: boolean | undefined;
        disabled?: boolean | undefined;
        download?: any;
        encType?: string | undefined;
        form?: string | undefined;
        formAction?:
            | string
            | undefined
            | DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS[
                keyof DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS
            ];
        formEncType?: string | undefined;
        formMethod?: string | undefined;
        formNoValidate?: boolean | undefined;
        formTarget?: string | undefined;
        frameBorder?: number | string | undefined;
        headers?: string | undefined;
        height?: number | string | undefined;
        high?: number | undefined;
        href?: string | undefined;
        hrefLang?: string | undefined;
        htmlFor?: string | undefined;
        httpEquiv?: string | undefined;
        integrity?: string | undefined;
        keyParams?: string | undefined;
        keyType?: string | undefined;
        kind?: string | undefined;
        label?: string | undefined;
        list?: string | undefined;
        loop?: boolean | undefined;
        low?: number | undefined;
        manifest?: string | undefined;
        marginHeight?: number | undefined;
        marginWidth?: number | undefined;
        max?: number | string | undefined;
        maxLength?: number | undefined;
        media?: string | undefined;
        mediaGroup?: string | undefined;
        method?: string | undefined;
        min?: number | string | undefined;
        minLength?: number | undefined;
        multiple?: boolean | undefined;
        muted?: boolean | undefined;
        name?: string | undefined;
        noValidate?: boolean | undefined;
        open?: boolean | undefined;
        optimum?: number | undefined;
        pattern?: string | undefined;
        placeholder?: string | undefined;
        playsInline?: boolean | undefined;
        poster?: string | undefined;
        preload?: string | undefined;
        readOnly?: boolean | undefined;
        required?: boolean | undefined;
        reversed?: boolean | undefined;
        rows?: number | undefined;
        rowSpan?: number | undefined;
        sandbox?: string | undefined;
        scope?: string | undefined;
        scoped?: boolean | undefined;
        scrolling?: string | undefined;
        seamless?: boolean | undefined;
        selected?: boolean | undefined;
        shape?: string | undefined;
        size?: number | undefined;
        sizes?: string | undefined;
        span?: number | undefined;
        src?: string | undefined;
        srcDoc?: string | undefined;
        srcLang?: string | undefined;
        srcSet?: string | undefined;
        start?: number | undefined;
        step?: number | string | undefined;
        summary?: string | undefined;
        target?: string | undefined;
        type?: string | undefined;
        useMap?: string | undefined;
        value?: string | readonly string[] | number | undefined;
        width?: number | string | undefined;
        wmode?: string | undefined;
        wrap?: string | undefined;
    }

    type HTMLAttributeReferrerPolicy =
        | ""
        | "no-referrer"
        | "no-referrer-when-downgrade"
        | "origin"
        | "origin-when-cross-origin"
        | "same-origin"
        | "strict-origin"
        | "strict-origin-when-cross-origin"
        | "unsafe-url";

    type HTMLAttributeAnchorTarget =
        | "_self"
        | "_blank"
        | "_parent"
        | "_top"
        | (string & {});

    interface AnchorHTMLAttributes<T> extends HTMLAttributes<T> {
        download?: any;
        href?: string | undefined;
        hrefLang?: string | undefined;
        media?: string | undefined;
        ping?: string | undefined;
        target?: HTMLAttributeAnchorTarget | undefined;
        type?: string | undefined;
        referrerPolicy?: HTMLAttributeReferrerPolicy | undefined;
    }

    interface AudioHTMLAttributes<T> extends MediaHTMLAttributes<T> {}

    interface AreaHTMLAttributes<T> extends HTMLAttributes<T> {
        alt?: string | undefined;
        coords?: string | undefined;
        download?: any;
        href?: string | undefined;
        hrefLang?: string | undefined;
        media?: string | undefined;
        referrerPolicy?: HTMLAttributeReferrerPolicy | undefined;
        shape?: string | undefined;
        target?: string | undefined;
    }

    interface BaseHTMLAttributes<T> extends HTMLAttributes<T> {
        href?: string | undefined;
        target?: string | undefined;
    }

    interface BlockquoteHTMLAttributes<T> extends HTMLAttributes<T> {
        cite?: string | undefined;
    }

    interface ButtonHTMLAttributes<T> extends HTMLAttributes<T> {
        disabled?: boolean | undefined;
        form?: string | undefined;
        formAction?:
            | string
            | DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS[
                keyof DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS
            ]
            | undefined;
        formEncType?: string | undefined;
        formMethod?: string | undefined;
        formNoValidate?: boolean | undefined;
        formTarget?: string | undefined;
        name?: string | undefined;
        type?: "submit" | "reset" | "button" | undefined;
        value?: string | readonly string[] | number | undefined;
    }

    interface CanvasHTMLAttributes<T> extends HTMLAttributes<T> {
        height?: number | string | undefined;
        width?: number | string | undefined;
    }

    interface ColHTMLAttributes<T> extends HTMLAttributes<T> {
        span?: number | undefined;
        width?: number | string | undefined;
    }

    interface ColgroupHTMLAttributes<T> extends HTMLAttributes<T> {
        span?: number | undefined;
    }

    interface DataHTMLAttributes<T> extends HTMLAttributes<T> {
        value?: string | readonly string[] | number | undefined;
    }

    interface DetailsHTMLAttributes<T> extends HTMLAttributes<T> {
        open?: boolean | undefined;
        onToggle?: ReactEventHandler<T> | undefined;
        name?: string | undefined;
    }

    interface DelHTMLAttributes<T> extends HTMLAttributes<T> {
        cite?: string | undefined;
        dateTime?: string | undefined;
    }

    interface DialogHTMLAttributes<T> extends HTMLAttributes<T> {
        onCancel?: ReactEventHandler<T> | undefined;
        onClose?: ReactEventHandler<T> | undefined;
        open?: boolean | undefined;
    }

    interface EmbedHTMLAttributes<T> extends HTMLAttributes<T> {
        height?: number | string | undefined;
        src?: string | undefined;
        type?: string | undefined;
        width?: number | string | undefined;
    }

    interface FieldsetHTMLAttributes<T> extends HTMLAttributes<T> {
        disabled?: boolean | undefined;
        form?: string | undefined;
        name?: string | undefined;
    }

    interface FormHTMLAttributes<T> extends HTMLAttributes<T> {
        acceptCharset?: string | undefined;
        action?:
            | string
            | undefined
            | DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS[
                keyof DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS
            ];
        autoComplete?: string | undefined;
        encType?: string | undefined;
        method?: string | undefined;
        name?: string | undefined;
        noValidate?: boolean | undefined;
        target?: string | undefined;
    }

    interface HtmlHTMLAttributes<T> extends HTMLAttributes<T> {
        manifest?: string | undefined;
    }

    interface IframeHTMLAttributes<T> extends HTMLAttributes<T> {
        allow?: string | undefined;
        allowFullScreen?: boolean | undefined;
        allowTransparency?: boolean | undefined;
        /** @deprecated */
        frameBorder?: number | string | undefined;
        height?: number | string | undefined;
        loading?: "eager" | "lazy" | undefined;
        /** @deprecated */
        marginHeight?: number | undefined;
        /** @deprecated */
        marginWidth?: number | undefined;
        name?: string | undefined;
        referrerPolicy?: HTMLAttributeReferrerPolicy | undefined;
        sandbox?: string | undefined;
        /** @deprecated */
        scrolling?: string | undefined;
        seamless?: boolean | undefined;
        src?: string | undefined;
        srcDoc?: string | undefined;
        width?: number | string | undefined;
    }

    interface ImgHTMLAttributes<T> extends HTMLAttributes<T> {
        alt?: string | undefined;
        crossOrigin?: CrossOrigin;
        decoding?: "async" | "auto" | "sync" | undefined;
        fetchPriority?: "high" | "low" | "auto";
        height?: number | string | undefined;
        loading?: "eager" | "lazy" | undefined;
        referrerPolicy?: HTMLAttributeReferrerPolicy | undefined;
        sizes?: string | undefined;
        src?: string | undefined;
        srcSet?: string | undefined;
        useMap?: string | undefined;
        width?: number | string | undefined;
    }

    interface InsHTMLAttributes<T> extends HTMLAttributes<T> {
        cite?: string | undefined;
        dateTime?: string | undefined;
    }

    type HTMLInputTypeAttribute =
        | "button"
        | "checkbox"
        | "color"
        | "date"
        | "datetime-local"
        | "email"
        | "file"
        | "hidden"
        | "image"
        | "month"
        | "number"
        | "password"
        | "radio"
        | "range"
        | "reset"
        | "search"
        | "submit"
        | "tel"
        | "text"
        | "time"
        | "url"
        | "week"
        | (string & {});

    type AutoFillAddressKind = "billing" | "shipping";
    type AutoFillBase = "" | "off" | "on";
    type AutoFillContactField =
        | "email"
        | "tel"
        | "tel-area-code"
        | "tel-country-code"
        | "tel-extension"
        | "tel-local"
        | "tel-local-prefix"
        | "tel-local-suffix"
        | "tel-national";
    type AutoFillContactKind = "home" | "mobile" | "work";
    type AutoFillCredentialField = "webauthn";
    type AutoFillNormalField =
        | "additional-name"
        | "address-level1"
        | "address-level2"
        | "address-level3"
        | "address-level4"
        | "address-line1"
        | "address-line2"
        | "address-line3"
        | "bday-day"
        | "bday-month"
        | "bday-year"
        | "cc-csc"
        | "cc-exp"
        | "cc-exp-month"
        | "cc-exp-year"
        | "cc-family-name"
        | "cc-given-name"
        | "cc-name"
        | "cc-number"
        | "cc-type"
        | "country"
        | "country-name"
        | "current-password"
        | "family-name"
        | "given-name"
        | "honorific-prefix"
        | "honorific-suffix"
        | "name"
        | "new-password"
        | "one-time-code"
        | "organization"
        | "postal-code"
        | "street-address"
        | "transaction-amount"
        | "transaction-currency"
        | "username";
    type OptionalPrefixToken<T extends string> = `${T} ` | "";
    type OptionalPostfixToken<T extends string> = ` ${T}` | "";
    type AutoFillField = AutoFillNormalField | `${OptionalPrefixToken<AutoFillContactKind>}${AutoFillContactField}`;
    type AutoFillSection = `section-${string}`;
    type AutoFill =
        | AutoFillBase
        | `${OptionalPrefixToken<AutoFillSection>}${OptionalPrefixToken<
            AutoFillAddressKind
        >}${AutoFillField}${OptionalPostfixToken<AutoFillCredentialField>}`;
    type HTMLInputAutoCompleteAttribute = AutoFill | (string & {});

    interface InputHTMLAttributes<T> extends HTMLAttributes<T> {
        accept?: string | undefined;
        alt?: string | undefined;
        autoComplete?: HTMLInputAutoCompleteAttribute | undefined;
        capture?: boolean | "user" | "environment" | undefined; // https://www.w3.org/TR/html-media-capture/#the-capture-attribute
        checked?: boolean | undefined;
        disabled?: boolean | undefined;
        form?: string | undefined;
        formAction?:
            | string
            | DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS[
                keyof DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS
            ]
            | undefined;
        formEncType?: string | undefined;
        formMethod?: string | undefined;
        formNoValidate?: boolean | undefined;
        formTarget?: string | undefined;
        height?: number | string | undefined;
        list?: string | undefined;
        max?: number | string | undefined;
        maxLength?: number | undefined;
        min?: number | string | undefined;
        minLength?: number | undefined;
        multiple?: boolean | undefined;
        name?: string | undefined;
        pattern?: string | undefined;
        placeholder?: string | undefined;
        readOnly?: boolean | undefined;
        required?: boolean | undefined;
        size?: number | undefined;
        src?: string | undefined;
        step?: number | string | undefined;
        type?: HTMLInputTypeAttribute | undefined;
        value?: string | readonly string[] | number | undefined;
        width?: number | string | undefined;

        onChange?: ChangeEventHandler<T> | undefined;
    }

    interface KeygenHTMLAttributes<T> extends HTMLAttributes<T> {
        challenge?: string | undefined;
        disabled?: boolean | undefined;
        form?: string | undefined;
        keyType?: string | undefined;
        keyParams?: string | undefined;
        name?: string | undefined;
    }

    interface LabelHTMLAttributes<T> extends HTMLAttributes<T> {
        form?: string | undefined;
        htmlFor?: string | undefined;
    }

    interface LiHTMLAttributes<T> extends HTMLAttributes<T> {
        value?: string | readonly string[] | number | undefined;
    }

    interface LinkHTMLAttributes<T> extends HTMLAttributes<T> {
        as?: string | undefined;
        crossOrigin?: CrossOrigin;
        fetchPriority?: "high" | "low" | "auto";
        href?: string | undefined;
        hrefLang?: string | undefined;
        integrity?: string | undefined;
        media?: string | undefined;
        imageSrcSet?: string | undefined;
        imageSizes?: string | undefined;
        referrerPolicy?: HTMLAttributeReferrerPolicy | undefined;
        sizes?: string | undefined;
        type?: string | undefined;
        charSet?: string | undefined;
    }

    interface MapHTMLAttributes<T> extends HTMLAttributes<T> {
        name?: string | undefined;
    }

    interface MenuHTMLAttributes<T> extends HTMLAttributes<T> {
        type?: string | undefined;
    }

    interface MediaHTMLAttributes<T> extends HTMLAttributes<T> {
        autoPlay?: boolean | undefined;
        controls?: boolean | undefined;
        controlsList?: string | undefined;
        crossOrigin?: CrossOrigin;
        loop?: boolean | undefined;
        mediaGroup?: string | undefined;
        muted?: boolean | undefined;
        playsInline?: boolean | undefined;
        preload?: string | undefined;
        src?: string | undefined;
    }

    interface MetaHTMLAttributes<T> extends HTMLAttributes<T> {
        charSet?: string | undefined;
        content?: string | undefined;
        httpEquiv?: string | undefined;
        media?: string | undefined;
        name?: string | undefined;
    }

    interface MeterHTMLAttributes<T> extends HTMLAttributes<T> {
        form?: string | undefined;
        high?: number | undefined;
        low?: number | undefined;
        max?: number | string | undefined;
        min?: number | string | undefined;
        optimum?: number | undefined;
        value?: string | readonly string[] | number | undefined;
    }

    interface QuoteHTMLAttributes<T> extends HTMLAttributes<T> {
        cite?: string | undefined;
    }

    interface ObjectHTMLAttributes<T> extends HTMLAttributes<T> {
        classID?: string | undefined;
        data?: string | undefined;
        form?: string | undefined;
        height?: number | string | undefined;
        name?: string | undefined;
        type?: string | undefined;
        useMap?: string | undefined;
        width?: number | string | undefined;
        wmode?: string | undefined;
    }

    interface OlHTMLAttributes<T> extends HTMLAttributes<T> {
        reversed?: boolean | undefined;
        start?: number | undefined;
        type?: "1" | "a" | "A" | "i" | "I" | undefined;
    }

    interface OptgroupHTMLAttributes<T> extends HTMLAttributes<T> {
        disabled?: boolean | undefined;
        label?: string | undefined;
    }

    interface OptionHTMLAttributes<T> extends HTMLAttributes<T> {
        disabled?: boolean | undefined;
        label?: string | undefined;
        selected?: boolean | undefined;
        value?: string | readonly string[] | number | undefined;
    }

    interface OutputHTMLAttributes<T> extends HTMLAttributes<T> {
        form?: string | undefined;
        htmlFor?: string | undefined;
        name?: string | undefined;
    }

    interface ParamHTMLAttributes<T> extends HTMLAttributes<T> {
        name?: string | undefined;
        value?: string | readonly string[] | number | undefined;
    }

    interface ProgressHTMLAttributes<T> extends HTMLAttributes<T> {
        max?: number | string | undefined;
        value?: string | readonly string[] | number | undefined;
    }

    interface SlotHTMLAttributes<T> extends HTMLAttributes<T> {
        name?: string | undefined;
    }

    interface ScriptHTMLAttributes<T> extends HTMLAttributes<T> {
        async?: boolean | undefined;
        /** @deprecated */
        charSet?: string | undefined;
        crossOrigin?: CrossOrigin;
        defer?: boolean | undefined;
        integrity?: string | undefined;
        noModule?: boolean | undefined;
        referrerPolicy?: HTMLAttributeReferrerPolicy | undefined;
        src?: string | undefined;
        type?: string | undefined;
    }

    interface SelectHTMLAttributes<T> extends HTMLAttributes<T> {
        autoComplete?: string | undefined;
        disabled?: boolean | undefined;
        form?: string | undefined;
        multiple?: boolean | undefined;
        name?: string | undefined;
        required?: boolean | undefined;
        size?: number | undefined;
        value?: string | readonly string[] | number | undefined;
        onChange?: ChangeEventHandler<T> | undefined;
    }

    interface SourceHTMLAttributes<T> extends HTMLAttributes<T> {
        height?: number | string | undefined;
        media?: string | undefined;
        sizes?: string | undefined;
        src?: string | undefined;
        srcSet?: string | undefined;
        type?: string | undefined;
        width?: number | string | undefined;
    }

    interface StyleHTMLAttributes<T> extends HTMLAttributes<T> {
        media?: string | undefined;
        scoped?: boolean | undefined;
        type?: string | undefined;
    }

    interface TableHTMLAttributes<T> extends HTMLAttributes<T> {
        align?: "left" | "center" | "right" | undefined;
        bgcolor?: string | undefined;
        border?: number | undefined;
        cellPadding?: number | string | undefined;
        cellSpacing?: number | string | undefined;
        frame?: boolean | undefined;
        rules?: "none" | "groups" | "rows" | "columns" | "all" | undefined;
        summary?: string | undefined;
        width?: number | string | undefined;
    }

    interface TextareaHTMLAttributes<T> extends HTMLAttributes<T> {
        autoComplete?: string | undefined;
        cols?: number | undefined;
        dirName?: string | undefined;
        disabled?: boolean | undefined;
        form?: string | undefined;
        maxLength?: number | undefined;
        minLength?: number | undefined;
        name?: string | undefined;
        placeholder?: string | undefined;
        readOnly?: boolean | undefined;
        required?: boolean | undefined;
        rows?: number | undefined;
        value?: string | readonly string[] | number | undefined;
        wrap?: string | undefined;

        onChange?: ChangeEventHandler<T> | undefined;
    }

    interface TdHTMLAttributes<T> extends HTMLAttributes<T> {
        align?: "left" | "center" | "right" | "justify" | "char" | undefined;
        colSpan?: number | undefined;
        headers?: string | undefined;
        rowSpan?: number | undefined;
        scope?: string | undefined;
        abbr?: string | undefined;
        height?: number | string | undefined;
        width?: number | string | undefined;
        valign?: "top" | "middle" | "bottom" | "baseline" | undefined;
    }

    interface ThHTMLAttributes<T> extends HTMLAttributes<T> {
        align?: "left" | "center" | "right" | "justify" | "char" | undefined;
        colSpan?: number | undefined;
        headers?: string | undefined;
        rowSpan?: number | undefined;
        scope?: string | undefined;
        abbr?: string | undefined;
    }

    interface TimeHTMLAttributes<T> extends HTMLAttributes<T> {
        dateTime?: string | undefined;
    }

    interface TrackHTMLAttributes<T> extends HTMLAttributes<T> {
        default?: boolean | undefined;
        kind?: string | undefined;
        label?: string | undefined;
        src?: string | undefined;
        srcLang?: string | undefined;
    }

    interface VideoHTMLAttributes<T> extends MediaHTMLAttributes<T> {
        height?: number | string | undefined;
        playsInline?: boolean | undefined;
        poster?: string | undefined;
        width?: number | string | undefined;
        disablePictureInPicture?: boolean | undefined;
        disableRemotePlayback?: boolean | undefined;
    }

    // this list is "complete" in that it contains every SVG attribute
    // that React supports, but the types can be improved.
    // Full list here: https://facebook.github.io/react/docs/dom-elements.html
    //
    // The three broad type categories are (in order of restrictiveness):
    //   - "number | string"
    //   - "string"
    //   - union of string literals
    interface SVGAttributes<T> extends AriaAttributes, DOMAttributes<T> {
        // React-specific Attributes
        suppressHydrationWarning?: boolean | undefined;

        // Attributes which also defined in HTMLAttributes
        // See comment in SVGDOMPropertyConfig.js
        className?: string | undefined;
        color?: string | undefined;
        height?: number | string | undefined;
        id?: string | undefined;
        lang?: string | undefined;
        max?: number | string | undefined;
        media?: string | undefined;
        method?: string | undefined;
        min?: number | string | undefined;
        name?: string | undefined;
        style?: CSSProperties | undefined;
        target?: string | undefined;
        type?: string | undefined;
        width?: number | string | undefined;

        // Other HTML properties supported by SVG elements in browsers
        role?: AriaRole | undefined;
        tabIndex?: number | undefined;
        crossOrigin?: CrossOrigin;

        // SVG Specific attributes
        accentHeight?: number | string | undefined;
        accumulate?: "none" | "sum" | undefined;
        additive?: "replace" | "sum" | undefined;
        alignmentBaseline?:
            | "auto"
            | "baseline"
            | "before-edge"
            | "text-before-edge"
            | "middle"
            | "central"
            | "after-edge"
            | "text-after-edge"
            | "ideographic"
            | "alphabetic"
            | "hanging"
            | "mathematical"
            | "inherit"
            | undefined;
        allowReorder?: "no" | "yes" | undefined;
        alphabetic?: number | string | undefined;
        amplitude?: number | string | undefined;
        arabicForm?: "initial" | "medial" | "terminal" | "isolated" | undefined;
        ascent?: number | string | undefined;
        attributeName?: string | undefined;
        attributeType?: string | undefined;
        autoReverse?: Booleanish | undefined;
        azimuth?: number | string | undefined;
        baseFrequency?: number | string | undefined;
        baselineShift?: number | string | undefined;
        baseProfile?: number | string | undefined;
        bbox?: number | string | undefined;
        begin?: number | string | undefined;
        bias?: number | string | undefined;
        by?: number | string | undefined;
        calcMode?: number | string | undefined;
        capHeight?: number | string | undefined;
        clip?: number | string | undefined;
        clipPath?: string | undefined;
        clipPathUnits?: number | string | undefined;
        clipRule?: number | string | undefined;
        colorInterpolation?: number | string | undefined;
        colorInterpolationFilters?: "auto" | "sRGB" | "linearRGB" | "inherit" | undefined;
        colorProfile?: number | string | undefined;
        colorRendering?: number | string | undefined;
        contentScriptType?: number | string | undefined;
        contentStyleType?: number | string | undefined;
        cursor?: number | string | undefined;
        cx?: number | string | undefined;
        cy?: number | string | undefined;
        d?: string | undefined;
        decelerate?: number | string | undefined;
        descent?: number | string | undefined;
        diffuseConstant?: number | string | undefined;
        direction?: number | string | undefined;
        display?: number | string | undefined;
        divisor?: number | string | undefined;
        dominantBaseline?: number | string | undefined;
        dur?: number | string | undefined;
        dx?: number | string | undefined;
        dy?: number | string | undefined;
        edgeMode?: number | string | undefined;
        elevation?: number | string | undefined;
        enableBackground?: number | string | undefined;
        end?: number | string | undefined;
        exponent?: number | string | undefined;
        externalResourcesRequired?: Booleanish | undefined;
        fill?: string | undefined;
        fillOpacity?: number | string | undefined;
        fillRule?: "nonzero" | "evenodd" | "inherit" | undefined;
        filter?: string | undefined;
        filterRes?: number | string | undefined;
        filterUnits?: number | string | undefined;
        floodColor?: number | string | undefined;
        floodOpacity?: number | string | undefined;
        focusable?: Booleanish | "auto" | undefined;
        fontFamily?: string | undefined;
        fontSize?: number | string | undefined;
        fontSizeAdjust?: number | string | undefined;
        fontStretch?: number | string | undefined;
        fontStyle?: number | string | undefined;
        fontVariant?: number | string | undefined;
        fontWeight?: number | string | undefined;
        format?: number | string | undefined;
        fr?: number | string | undefined;
        from?: number | string | undefined;
        fx?: number | string | undefined;
        fy?: number | string | undefined;
        g1?: number | string | undefined;
        g2?: number | string | undefined;
        glyphName?: number | string | undefined;
        glyphOrientationHorizontal?: number | string | undefined;
        glyphOrientationVertical?: number | string | undefined;
        glyphRef?: number | string | undefined;
        gradientTransform?: string | undefined;
        gradientUnits?: string | undefined;
        hanging?: number | string | undefined;
        horizAdvX?: number | string | undefined;
        horizOriginX?: number | string | undefined;
        href?: string | undefined;
        ideographic?: number | string | undefined;
        imageRendering?: number | string | undefined;
        in2?: number | string | undefined;
        in?: string | undefined;
        intercept?: number | string | undefined;
        k1?: number | string | undefined;
        k2?: number | string | undefined;
        k3?: number | string | undefined;
        k4?: number | string | undefined;
        k?: number | string | undefined;
        kernelMatrix?: number | string | undefined;
        kernelUnitLength?: number | string | undefined;
        kerning?: number | string | undefined;
        keyPoints?: number | string | undefined;
        keySplines?: number | string | undefined;
        keyTimes?: number | string | undefined;
        lengthAdjust?: number | string | undefined;
        letterSpacing?: number | string | undefined;
        lightingColor?: number | string | undefined;
        limitingConeAngle?: number | string | undefined;
        local?: number | string | undefined;
        markerEnd?: string | undefined;
        markerHeight?: number | string | undefined;
        markerMid?: string | undefined;
        markerStart?: string | undefined;
        markerUnits?: number | string | undefined;
        markerWidth?: number | string | undefined;
        mask?: string | undefined;
        maskContentUnits?: number | string | undefined;
        maskUnits?: number | string | undefined;
        mathematical?: number | string | undefined;
        mode?: number | string | undefined;
        numOctaves?: number | string | undefined;
        offset?: number | string | undefined;
        opacity?: number | string | undefined;
        operator?: number | string | undefined;
        order?: number | string | undefined;
        orient?: number | string | undefined;
        orientation?: number | string | undefined;
        origin?: number | string | undefined;
        overflow?: number | string | undefined;
        overlinePosition?: number | string | undefined;
        overlineThickness?: number | string | undefined;
        paintOrder?: number | string | undefined;
        panose1?: number | string | undefined;
        path?: string | undefined;
        pathLength?: number | string | undefined;
        patternContentUnits?: string | undefined;
        patternTransform?: number | string | undefined;
        patternUnits?: string | undefined;
        pointerEvents?: number | string | undefined;
        points?: string | undefined;
        pointsAtX?: number | string | undefined;
        pointsAtY?: number | string | undefined;
        pointsAtZ?: number | string | undefined;
        preserveAlpha?: Booleanish | undefined;
        preserveAspectRatio?: string | undefined;
        primitiveUnits?: number | string | undefined;
        r?: number | string | undefined;
        radius?: number | string | undefined;
        refX?: number | string | undefined;
        refY?: number | string | undefined;
        renderingIntent?: number | string | undefined;
        repeatCount?: number | string | undefined;
        repeatDur?: number | string | undefined;
        requiredExtensions?: number | string | undefined;
        requiredFeatures?: number | string | undefined;
        restart?: number | string | undefined;
        result?: string | undefined;
        rotate?: number | string | undefined;
        rx?: number | string | undefined;
        ry?: number | string | undefined;
        scale?: number | string | undefined;
        seed?: number | string | undefined;
        shapeRendering?: number | string | undefined;
        slope?: number | string | undefined;
        spacing?: number | string | undefined;
        specularConstant?: number | string | undefined;
        specularExponent?: number | string | undefined;
        speed?: number | string | undefined;
        spreadMethod?: string | undefined;
        startOffset?: number | string | undefined;
        stdDeviation?: number | string | undefined;
        stemh?: number | string | undefined;
        stemv?: number | string | undefined;
        stitchTiles?: number | string | undefined;
        stopColor?: string | undefined;
        stopOpacity?: number | string | undefined;
        strikethroughPosition?: number | string | undefined;
        strikethroughThickness?: number | string | undefined;
        string?: number | string | undefined;
        stroke?: string | undefined;
        strokeDasharray?: string | number | undefined;
        strokeDashoffset?: string | number | undefined;
        strokeLinecap?: "butt" | "round" | "square" | "inherit" | undefined;
        strokeLinejoin?: "miter" | "round" | "bevel" | "inherit" | undefined;
        strokeMiterlimit?: number | string | undefined;
        strokeOpacity?: number | string | undefined;
        strokeWidth?: number | string | undefined;
        surfaceScale?: number | string | undefined;
        systemLanguage?: number | string | undefined;
        tableValues?: number | string | undefined;
        targetX?: number | string | undefined;
        targetY?: number | string | undefined;
        textAnchor?: string | undefined;
        textDecoration?: number | string | undefined;
        textLength?: number | string | undefined;
        textRendering?: number | string | undefined;
        to?: number | string | undefined;
        transform?: string | undefined;
        u1?: number | string | undefined;
        u2?: number | string | undefined;
        underlinePosition?: number | string | undefined;
        underlineThickness?: number | string | undefined;
        unicode?: number | string | undefined;
        unicodeBidi?: number | string | undefined;
        unicodeRange?: number | string | undefined;
        unitsPerEm?: number | string | undefined;
        vAlphabetic?: number | string | undefined;
        values?: string | undefined;
        vectorEffect?: number | string | undefined;
        version?: string | undefined;
        vertAdvY?: number | string | undefined;
        vertOriginX?: number | string | undefined;
        vertOriginY?: number | string | undefined;
        vHanging?: number | string | undefined;
        vIdeographic?: number | string | undefined;
        viewBox?: string | undefined;
        viewTarget?: number | string | undefined;
        visibility?: number | string | undefined;
        vMathematical?: number | string | undefined;
        widths?: number | string | undefined;
        wordSpacing?: number | string | undefined;
        writingMode?: number | string | undefined;
        x1?: number | string | undefined;
        x2?: number | string | undefined;
        x?: number | string | undefined;
        xChannelSelector?: string | undefined;
        xHeight?: number | string | undefined;
        xlinkActuate?: string | undefined;
        xlinkArcrole?: string | undefined;
        xlinkHref?: string | undefined;
        xlinkRole?: string | undefined;
        xlinkShow?: string | undefined;
        xlinkTitle?: string | undefined;
        xlinkType?: string | undefined;
        xmlBase?: string | undefined;
        xmlLang?: string | undefined;
        xmlns?: string | undefined;
        xmlnsXlink?: string | undefined;
        xmlSpace?: string | undefined;
        y1?: number | string | undefined;
        y2?: number | string | undefined;
        y?: number | string | undefined;
        yChannelSelector?: string | undefined;
        z?: number | string | undefined;
        zoomAndPan?: string | undefined;
    }

    interface WebViewHTMLAttributes<T> extends HTMLAttributes<T> {
        allowFullScreen?: boolean | undefined;
        allowpopups?: boolean | undefined;
        autosize?: boolean | undefined;
        blinkfeatures?: string | undefined;
        disableblinkfeatures?: string | undefined;
        disableguestresize?: boolean | undefined;
        disablewebsecurity?: boolean | undefined;
        guestinstance?: string | undefined;
        httpreferrer?: string | undefined;
        nodeintegration?: boolean | undefined;
        partition?: string | undefined;
        plugins?: boolean | undefined;
        preload?: string | undefined;
        src?: string | undefined;
        useragent?: string | undefined;
        webpreferences?: string | undefined;
    }

    //
    // React.DOM
    // ----------------------------------------------------------------------

    /* deprecated */
    interface ReactHTML {
        a: DetailedHTMLFactory<AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>;
        abbr: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        address: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        area: DetailedHTMLFactory<AreaHTMLAttributes<HTMLAreaElement>, HTMLAreaElement>;
        article: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        aside: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        audio: DetailedHTMLFactory<AudioHTMLAttributes<HTMLAudioElement>, HTMLAudioElement>;
        b: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        base: DetailedHTMLFactory<BaseHTMLAttributes<HTMLBaseElement>, HTMLBaseElement>;
        bdi: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        bdo: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        big: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        blockquote: DetailedHTMLFactory<BlockquoteHTMLAttributes<HTMLQuoteElement>, HTMLQuoteElement>;
        body: DetailedHTMLFactory<HTMLAttributes<HTMLBodyElement>, HTMLBodyElement>;
        br: DetailedHTMLFactory<HTMLAttributes<HTMLBRElement>, HTMLBRElement>;
        button: DetailedHTMLFactory<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;
        canvas: DetailedHTMLFactory<CanvasHTMLAttributes<HTMLCanvasElement>, HTMLCanvasElement>;
        caption: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        center: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        cite: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        code: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        col: DetailedHTMLFactory<ColHTMLAttributes<HTMLTableColElement>, HTMLTableColElement>;
        colgroup: DetailedHTMLFactory<ColgroupHTMLAttributes<HTMLTableColElement>, HTMLTableColElement>;
        data: DetailedHTMLFactory<DataHTMLAttributes<HTMLDataElement>, HTMLDataElement>;
        datalist: DetailedHTMLFactory<HTMLAttributes<HTMLDataListElement>, HTMLDataListElement>;
        dd: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        del: DetailedHTMLFactory<DelHTMLAttributes<HTMLModElement>, HTMLModElement>;
        details: DetailedHTMLFactory<DetailsHTMLAttributes<HTMLDetailsElement>, HTMLDetailsElement>;
        dfn: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        dialog: DetailedHTMLFactory<DialogHTMLAttributes<HTMLDialogElement>, HTMLDialogElement>;
        div: DetailedHTMLFactory<HTMLAttributes<HTMLDivElement>, HTMLDivElement>;
        dl: DetailedHTMLFactory<HTMLAttributes<HTMLDListElement>, HTMLDListElement>;
        dt: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        em: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        embed: DetailedHTMLFactory<EmbedHTMLAttributes<HTMLEmbedElement>, HTMLEmbedElement>;
        fieldset: DetailedHTMLFactory<FieldsetHTMLAttributes<HTMLFieldSetElement>, HTMLFieldSetElement>;
        figcaption: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        figure: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        footer: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        form: DetailedHTMLFactory<FormHTMLAttributes<HTMLFormElement>, HTMLFormElement>;
        h1: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;
        h2: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;
        h3: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;
        h4: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;
        h5: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;
        h6: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;
        head: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLHeadElement>;
        header: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        hgroup: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        hr: DetailedHTMLFactory<HTMLAttributes<HTMLHRElement>, HTMLHRElement>;
        html: DetailedHTMLFactory<HtmlHTMLAttributes<HTMLHtmlElement>, HTMLHtmlElement>;
        i: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        iframe: DetailedHTMLFactory<IframeHTMLAttributes<HTMLIFrameElement>, HTMLIFrameElement>;
        img: DetailedHTMLFactory<ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>;
        input: DetailedHTMLFactory<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;
        ins: DetailedHTMLFactory<InsHTMLAttributes<HTMLModElement>, HTMLModElement>;
        kbd: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        keygen: DetailedHTMLFactory<KeygenHTMLAttributes<HTMLElement>, HTMLElement>;
        label: DetailedHTMLFactory<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>;
        legend: DetailedHTMLFactory<HTMLAttributes<HTMLLegendElement>, HTMLLegendElement>;
        li: DetailedHTMLFactory<LiHTMLAttributes<HTMLLIElement>, HTMLLIElement>;
        link: DetailedHTMLFactory<LinkHTMLAttributes<HTMLLinkElement>, HTMLLinkElement>;
        main: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        map: DetailedHTMLFactory<MapHTMLAttributes<HTMLMapElement>, HTMLMapElement>;
        mark: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        menu: DetailedHTMLFactory<MenuHTMLAttributes<HTMLElement>, HTMLElement>;
        menuitem: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        meta: DetailedHTMLFactory<MetaHTMLAttributes<HTMLMetaElement>, HTMLMetaElement>;
        meter: DetailedHTMLFactory<MeterHTMLAttributes<HTMLMeterElement>, HTMLMeterElement>;
        nav: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        noscript: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        object: DetailedHTMLFactory<ObjectHTMLAttributes<HTMLObjectElement>, HTMLObjectElement>;
        ol: DetailedHTMLFactory<OlHTMLAttributes<HTMLOListElement>, HTMLOListElement>;
        optgroup: DetailedHTMLFactory<OptgroupHTMLAttributes<HTMLOptGroupElement>, HTMLOptGroupElement>;
        option: DetailedHTMLFactory<OptionHTMLAttributes<HTMLOptionElement>, HTMLOptionElement>;
        output: DetailedHTMLFactory<OutputHTMLAttributes<HTMLOutputElement>, HTMLOutputElement>;
        p: DetailedHTMLFactory<HTMLAttributes<HTMLParagraphElement>, HTMLParagraphElement>;
        param: DetailedHTMLFactory<ParamHTMLAttributes<HTMLParamElement>, HTMLParamElement>;
        picture: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        pre: DetailedHTMLFactory<HTMLAttributes<HTMLPreElement>, HTMLPreElement>;
        progress: DetailedHTMLFactory<ProgressHTMLAttributes<HTMLProgressElement>, HTMLProgressElement>;
        q: DetailedHTMLFactory<QuoteHTMLAttributes<HTMLQuoteElement>, HTMLQuoteElement>;
        rp: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        rt: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        ruby: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        s: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        samp: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        search: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        slot: DetailedHTMLFactory<SlotHTMLAttributes<HTMLSlotElement>, HTMLSlotElement>;
        script: DetailedHTMLFactory<ScriptHTMLAttributes<HTMLScriptElement>, HTMLScriptElement>;
        section: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        select: DetailedHTMLFactory<SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>;
        small: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        source: DetailedHTMLFactory<SourceHTMLAttributes<HTMLSourceElement>, HTMLSourceElement>;
        span: DetailedHTMLFactory<HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>;
        strong: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        style: DetailedHTMLFactory<StyleHTMLAttributes<HTMLStyleElement>, HTMLStyleElement>;
        sub: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        summary: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        sup: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        table: DetailedHTMLFactory<TableHTMLAttributes<HTMLTableElement>, HTMLTableElement>;
        template: DetailedHTMLFactory<HTMLAttributes<HTMLTemplateElement>, HTMLTemplateElement>;
        tbody: DetailedHTMLFactory<HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;
        td: DetailedHTMLFactory<TdHTMLAttributes<HTMLTableDataCellElement>, HTMLTableDataCellElement>;
        textarea: DetailedHTMLFactory<TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>;
        tfoot: DetailedHTMLFactory<HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;
        th: DetailedHTMLFactory<ThHTMLAttributes<HTMLTableHeaderCellElement>, HTMLTableHeaderCellElement>;
        thead: DetailedHTMLFactory<HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;
        time: DetailedHTMLFactory<TimeHTMLAttributes<HTMLTimeElement>, HTMLTimeElement>;
        title: DetailedHTMLFactory<HTMLAttributes<HTMLTitleElement>, HTMLTitleElement>;
        tr: DetailedHTMLFactory<HTMLAttributes<HTMLTableRowElement>, HTMLTableRowElement>;
        track: DetailedHTMLFactory<TrackHTMLAttributes<HTMLTrackElement>, HTMLTrackElement>;
        u: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        ul: DetailedHTMLFactory<HTMLAttributes<HTMLUListElement>, HTMLUListElement>;
        "var": DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        video: DetailedHTMLFactory<VideoHTMLAttributes<HTMLVideoElement>, HTMLVideoElement>;
        wbr: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        webview: DetailedHTMLFactory<WebViewHTMLAttributes<HTMLWebViewElement>, HTMLWebViewElement>;
    }

    /* deprecated */
    interface ReactSVG {
        animate: SVGFactory;
        circle: SVGFactory;
        clipPath: SVGFactory;
        defs: SVGFactory;
        desc: SVGFactory;
        ellipse: SVGFactory;
        feBlend: SVGFactory;
        feColorMatrix: SVGFactory;
        feComponentTransfer: SVGFactory;
        feComposite: SVGFactory;
        feConvolveMatrix: SVGFactory;
        feDiffuseLighting: SVGFactory;
        feDisplacementMap: SVGFactory;
        feDistantLight: SVGFactory;
        feDropShadow: SVGFactory;
        feFlood: SVGFactory;
        feFuncA: SVGFactory;
        feFuncB: SVGFactory;
        feFuncG: SVGFactory;
        feFuncR: SVGFactory;
        feGaussianBlur: SVGFactory;
        feImage: SVGFactory;
        feMerge: SVGFactory;
        feMergeNode: SVGFactory;
        feMorphology: SVGFactory;
        feOffset: SVGFactory;
        fePointLight: SVGFactory;
        feSpecularLighting: SVGFactory;
        feSpotLight: SVGFactory;
        feTile: SVGFactory;
        feTurbulence: SVGFactory;
        filter: SVGFactory;
        foreignObject: SVGFactory;
        g: SVGFactory;
        image: SVGFactory;
        line: SVGFactory;
        linearGradient: SVGFactory;
        marker: SVGFactory;
        mask: SVGFactory;
        metadata: SVGFactory;
        path: SVGFactory;
        pattern: SVGFactory;
        polygon: SVGFactory;
        polyline: SVGFactory;
        radialGradient: SVGFactory;
        rect: SVGFactory;
        stop: SVGFactory;
        svg: SVGFactory;
        switch: SVGFactory;
        symbol: SVGFactory;
        text: SVGFactory;
        textPath: SVGFactory;
        tspan: SVGFactory;
        use: SVGFactory;
        view: SVGFactory;
    }

    /* deprecated */
    interface ReactDOM extends ReactHTML, ReactSVG {}

    //
    // React.PropTypes
    // ----------------------------------------------------------------------

    /**
     * @deprecated Use `Validator` from the ´prop-types` instead.
     */
    type Validator<T> = PropTypes.Validator<T>;

    /**
     * @deprecated Use `Requireable` from the ´prop-types` instead.
     */
    type Requireable<T> = PropTypes.Requireable<T>;

    /**
     * @deprecated Use `ValidationMap` from the ´prop-types` instead.
     */
    type ValidationMap<T> = PropTypes.ValidationMap<T>;

    /**
     * @deprecated Use `WeakValidationMap` from the ´prop-types` instead.
     */
    type WeakValidationMap<T> = {
        [K in keyof T]?: null extends T[K] ? Validator<T[K] | null | undefined>
            : undefined extends T[K] ? Validator<T[K] | null | undefined>
            : Validator<T[K]>;
    };

    /**
     * @deprecated Use `PropTypes.*` where `PropTypes` comes from `import * as PropTypes from 'prop-types'` instead.
     */
    interface ReactPropTypes {
        any: typeof PropTypes.any;
        array: typeof PropTypes.array;
        bool: typeof PropTypes.bool;
        func: typeof PropTypes.func;
        number: typeof PropTypes.number;
        object: typeof PropTypes.object;
        string: typeof PropTypes.string;
        node: typeof PropTypes.node;
        element: typeof PropTypes.element;
        instanceOf: typeof PropTypes.instanceOf;
        oneOf: typeof PropTypes.oneOf;
        oneOfType: typeof PropTypes.oneOfType;
        arrayOf: typeof PropTypes.arrayOf;
        objectOf: typeof PropTypes.objectOf;
        shape: typeof PropTypes.shape;
        exact: typeof PropTypes.exact;
    }

    //
    // React.Children
    // ----------------------------------------------------------------------

    /**
     * @deprecated - Use `typeof React.Children` instead.
     */
    // Sync with type of `const Children`.
    interface ReactChildren {
        map<T, C>(
            children: C | readonly C[],
            fn: (child: C, index: number) => T,
        ): C extends null | undefined ? C : Array<Exclude<T, boolean | null | undefined>>;
        forEach<C>(children: C | readonly C[], fn: (child: C, index: number) => void): void;
        count(children: any): number;
        only<C>(children: C): C extends any[] ? never : C;
        toArray(children: ReactNode | ReactNode[]): Array<Exclude<ReactNode, boolean | null | undefined>>;
    }

    //
    // Browser Interfaces
    // https://github.com/nikeee/2048-typescript/blob/master/2048/js/touch.d.ts
    // ----------------------------------------------------------------------

    interface AbstractView {
        styleMedia: StyleMedia;
        document: Document;
    }

    interface Touch {
        identifier: number;
        target: EventTarget;
        screenX: number;
        screenY: number;
        clientX: number;
        clientY: number;
        pageX: number;
        pageY: number;
    }

    interface TouchList {
        [index: number]: Touch;
        length: number;
        item(index: number): Touch;
        identifiedTouch(identifier: number): Touch;
    }

    //
    // Error Interfaces
    // ----------------------------------------------------------------------
    interface ErrorInfo {
        /**
         * Captures which component contained the exception, and its ancestors.
         */
        componentStack?: string | null;
        digest?: string | null;
    }

    // Keep in sync with JSX namespace in ./jsx-runtime.d.ts and ./jsx-dev-runtime.d.ts
    namespace JSX {
        interface Element extends GlobalJSXElement {}
        interface ElementClass extends GlobalJSXElementClass {}
        interface ElementAttributesProperty extends GlobalJSXElementAttributesProperty {}
        interface ElementChildrenAttribute extends GlobalJSXElementChildrenAttribute {}

        type LibraryManagedAttributes<C, P> = GlobalJSXLibraryManagedAttributes<C, P>;

        interface IntrinsicAttributes extends GlobalJSXIntrinsicAttributes {}
        interface IntrinsicClassAttributes<T> extends GlobalJSXIntrinsicClassAttributes<T> {}
        interface IntrinsicElements extends GlobalJSXIntrinsicElements {}
    }
}

// naked 'any' type in a conditional type will short circuit and union both the then/else branches
// so boolean is only resolved for T = any
type IsExactlyAny<T> = boolean extends (T extends never ? true : false) ? true : false;

type ExactlyAnyPropertyKeys<T> = { [K in keyof T]: IsExactlyAny<T[K]> extends true ? K : never }[keyof T];
type NotExactlyAnyPropertyKeys<T> = Exclude<keyof T, ExactlyAnyPropertyKeys<T>>;

// Try to resolve ill-defined props like for JS users: props can be any, or sometimes objects with properties of type any
type MergePropTypes<P, T> =
    // Distribute over P in case it is a union type
    P extends any
        // If props is type any, use propTypes definitions
        ? IsExactlyAny<P> extends true ? T
            // If declared props have indexed properties, ignore inferred props entirely as keyof gets widened
        : string extends keyof P ? P
            // Prefer declared types which are not exactly any
        :
            & Pick<P, NotExactlyAnyPropertyKeys<P>>
            // For props which are exactly any, use the type inferred from propTypes if present
            & Pick<T, Exclude<keyof T, NotExactlyAnyPropertyKeys<P>>>
            // Keep leftover props not specified in propTypes
            & Pick<P, Exclude<keyof P, keyof T>>
        : never;

type InexactPartial<T> = { [K in keyof T]?: T[K] | undefined };

// Any prop that has a default prop becomes optional, but its type is unchanged
// Undeclared default props are augmented into the resulting allowable attributes
// If declared props have indexed properties, ignore default props entirely as keyof gets widened
// Wrap in an outer-level conditional type to allow distribution over props that are unions
type Defaultize<P, D> = P extends any ? string extends keyof P ? P
    :
        & Pick<P, Exclude<keyof P, keyof D>>
        & InexactPartial<Pick<P, Extract<keyof P, keyof D>>>
        & InexactPartial<Pick<D, Exclude<keyof D, keyof P>>>
    : never;

type ReactManagedAttributes<C, P> = C extends { propTypes: infer T; defaultProps: infer D }
    ? Defaultize<MergePropTypes<P, PropTypes.InferProps<T>>, D>
    : C extends { propTypes: infer T } ? MergePropTypes<P, PropTypes.InferProps<T>>
    : C extends { defaultProps: infer D } ? Defaultize<P, D>
    : P;

declare global {
    /**
     * @deprecated Use `React.JSX` instead of the global `JSX` namespace.
     */
    namespace JSX {
        interface Element extends React.ReactElement<any, any> {}
        interface ElementClass extends React.Component<any> {
            render(): React.ReactNode;
        }
        interface ElementAttributesProperty {
            props: {};
        }
        interface ElementChildrenAttribute {
            children: {};
        }

        // We can't recurse forever because `type` can't be self-referential;
        // let's assume it's reasonable to do a single React.lazy() around a single React.memo() / vice-versa
        type LibraryManagedAttributes<C, P> = C extends
            React.MemoExoticComponent<infer T> | React.LazyExoticComponent<infer T>
            ? T extends React.MemoExoticComponent<infer U> | React.LazyExoticComponent<infer U>
                ? ReactManagedAttributes<U, P>
            : ReactManagedAttributes<T, P>
            : ReactManagedAttributes<C, P>;

        interface IntrinsicAttributes extends React.Attributes {}
        interface IntrinsicClassAttributes<T> extends React.ClassAttributes<T> {}

        interface IntrinsicElements {
            // HTML
            a: React.DetailedHTMLProps<React.AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>;
            abbr: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            address: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            area: React.DetailedHTMLProps<React.AreaHTMLAttributes<HTMLAreaElement>, HTMLAreaElement>;
            article: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            aside: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            audio: React.DetailedHTMLProps<React.AudioHTMLAttributes<HTMLAudioElement>, HTMLAudioElement>;
            b: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            base: React.DetailedHTMLProps<React.BaseHTMLAttributes<HTMLBaseElement>, HTMLBaseElement>;
            bdi: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            bdo: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            big: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            blockquote: React.DetailedHTMLProps<React.BlockquoteHTMLAttributes<HTMLQuoteElement>, HTMLQuoteElement>;
            body: React.DetailedHTMLProps<React.HTMLAttributes<HTMLBodyElement>, HTMLBodyElement>;
            br: React.DetailedHTMLProps<React.HTMLAttributes<HTMLBRElement>, HTMLBRElement>;
            button: React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;
            canvas: React.DetailedHTMLProps<React.CanvasHTMLAttributes<HTMLCanvasElement>, HTMLCanvasElement>;
            caption: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            center: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            cite: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            code: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            col: React.DetailedHTMLProps<React.ColHTMLAttributes<HTMLTableColElement>, HTMLTableColElement>;
            colgroup: React.DetailedHTMLProps<React.ColgroupHTMLAttributes<HTMLTableColElement>, HTMLTableColElement>;
            data: React.DetailedHTMLProps<React.DataHTMLAttributes<HTMLDataElement>, HTMLDataElement>;
            datalist: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDataListElement>, HTMLDataListElement>;
            dd: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            del: React.DetailedHTMLProps<React.DelHTMLAttributes<HTMLModElement>, HTMLModElement>;
            details: React.DetailedHTMLProps<React.DetailsHTMLAttributes<HTMLDetailsElement>, HTMLDetailsElement>;
            dfn: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            dialog: React.DetailedHTMLProps<React.DialogHTMLAttributes<HTMLDialogElement>, HTMLDialogElement>;
            div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>;
            dl: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDListElement>, HTMLDListElement>;
            dt: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            em: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            embed: React.DetailedHTMLProps<React.EmbedHTMLAttributes<HTMLEmbedElement>, HTMLEmbedElement>;
            fieldset: React.DetailedHTMLProps<React.FieldsetHTMLAttributes<HTMLFieldSetElement>, HTMLFieldSetElement>;
            figcaption: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            figure: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            footer: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            form: React.DetailedHTMLProps<React.FormHTMLAttributes<HTMLFormElement>, HTMLFormElement>;
            h1: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;
            h2: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;
            h3: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;
            h4: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;
            h5: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;
            h6: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;
            head: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadElement>, HTMLHeadElement>;
            header: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            hgroup: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            hr: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHRElement>, HTMLHRElement>;
            html: React.DetailedHTMLProps<React.HtmlHTMLAttributes<HTMLHtmlElement>, HTMLHtmlElement>;
            i: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            iframe: React.DetailedHTMLProps<React.IframeHTMLAttributes<HTMLIFrameElement>, HTMLIFrameElement>;
            img: React.DetailedHTMLProps<React.ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>;
            input: React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;
            ins: React.DetailedHTMLProps<React.InsHTMLAttributes<HTMLModElement>, HTMLModElement>;
            kbd: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            keygen: React.DetailedHTMLProps<React.KeygenHTMLAttributes<HTMLElement>, HTMLElement>;
            label: React.DetailedHTMLProps<React.LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>;
            legend: React.DetailedHTMLProps<React.HTMLAttributes<HTMLLegendElement>, HTMLLegendElement>;
            li: React.DetailedHTMLProps<React.LiHTMLAttributes<HTMLLIElement>, HTMLLIElement>;
            link: React.DetailedHTMLProps<React.LinkHTMLAttributes<HTMLLinkElement>, HTMLLinkElement>;
            main: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            map: React.DetailedHTMLProps<React.MapHTMLAttributes<HTMLMapElement>, HTMLMapElement>;
            mark: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            menu: React.DetailedHTMLProps<React.MenuHTMLAttributes<HTMLElement>, HTMLElement>;
            menuitem: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            meta: React.DetailedHTMLProps<React.MetaHTMLAttributes<HTMLMetaElement>, HTMLMetaElement>;
            meter: React.DetailedHTMLProps<React.MeterHTMLAttributes<HTMLMeterElement>, HTMLMeterElement>;
            nav: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            noindex: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            noscript: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            object: React.DetailedHTMLProps<React.ObjectHTMLAttributes<HTMLObjectElement>, HTMLObjectElement>;
            ol: React.DetailedHTMLProps<React.OlHTMLAttributes<HTMLOListElement>, HTMLOListElement>;
            optgroup: React.DetailedHTMLProps<React.OptgroupHTMLAttributes<HTMLOptGroupElement>, HTMLOptGroupElement>;
            option: React.DetailedHTMLProps<React.OptionHTMLAttributes<HTMLOptionElement>, HTMLOptionElement>;
            output: React.DetailedHTMLProps<React.OutputHTMLAttributes<HTMLOutputElement>, HTMLOutputElement>;
            p: React.DetailedHTMLProps<React.HTMLAttributes<HTMLParagraphElement>, HTMLParagraphElement>;
            param: React.DetailedHTMLProps<React.ParamHTMLAttributes<HTMLParamElement>, HTMLParamElement>;
            picture: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            pre: React.DetailedHTMLProps<React.HTMLAttributes<HTMLPreElement>, HTMLPreElement>;
            progress: React.DetailedHTMLProps<React.ProgressHTMLAttributes<HTMLProgressElement>, HTMLProgressElement>;
            q: React.DetailedHTMLProps<React.QuoteHTMLAttributes<HTMLQuoteElement>, HTMLQuoteElement>;
            rp: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            rt: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            ruby: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            s: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            samp: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            search: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            slot: React.DetailedHTMLProps<React.SlotHTMLAttributes<HTMLSlotElement>, HTMLSlotElement>;
            script: React.DetailedHTMLProps<React.ScriptHTMLAttributes<HTMLScriptElement>, HTMLScriptElement>;
            section: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            select: React.DetailedHTMLProps<React.SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>;
            small: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            source: React.DetailedHTMLProps<React.SourceHTMLAttributes<HTMLSourceElement>, HTMLSourceElement>;
            span: React.DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>;
            strong: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            style: React.DetailedHTMLProps<React.StyleHTMLAttributes<HTMLStyleElement>, HTMLStyleElement>;
            sub: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            summary: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            sup: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            table: React.DetailedHTMLProps<React.TableHTMLAttributes<HTMLTableElement>, HTMLTableElement>;
            template: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTemplateElement>, HTMLTemplateElement>;
            tbody: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;
            td: React.DetailedHTMLProps<React.TdHTMLAttributes<HTMLTableDataCellElement>, HTMLTableDataCellElement>;
            textarea: React.DetailedHTMLProps<React.TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>;
            tfoot: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;
            th: React.DetailedHTMLProps<React.ThHTMLAttributes<HTMLTableHeaderCellElement>, HTMLTableHeaderCellElement>;
            thead: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;
            time: React.DetailedHTMLProps<React.TimeHTMLAttributes<HTMLTimeElement>, HTMLTimeElement>;
            title: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTitleElement>, HTMLTitleElement>;
            tr: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableRowElement>, HTMLTableRowElement>;
            track: React.DetailedHTMLProps<React.TrackHTMLAttributes<HTMLTrackElement>, HTMLTrackElement>;
            u: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            ul: React.DetailedHTMLProps<React.HTMLAttributes<HTMLUListElement>, HTMLUListElement>;
            "var": React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            video: React.DetailedHTMLProps<React.VideoHTMLAttributes<HTMLVideoElement>, HTMLVideoElement>;
            wbr: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            webview: React.DetailedHTMLProps<React.WebViewHTMLAttributes<HTMLWebViewElement>, HTMLWebViewElement>;

            // SVG
            svg: React.SVGProps<SVGSVGElement>;

            animate: React.SVGProps<SVGElement>; // TODO: It is SVGAnimateElement but is not in TypeScript's lib.dom.d.ts for now.
            animateMotion: React.SVGProps<SVGElement>;
            animateTransform: React.SVGProps<SVGElement>; // TODO: It is SVGAnimateTransformElement but is not in TypeScript's lib.dom.d.ts for now.
            circle: React.SVGProps<SVGCircleElement>;
            clipPath: React.SVGProps<SVGClipPathElement>;
            defs: React.SVGProps<SVGDefsElement>;
            desc: React.SVGProps<SVGDescElement>;
            ellipse: React.SVGProps<SVGEllipseElement>;
            feBlend: React.SVGProps<SVGFEBlendElement>;
            feColorMatrix: React.SVGProps<SVGFEColorMatrixElement>;
            feComponentTransfer: React.SVGProps<SVGFEComponentTransferElement>;
            feComposite: React.SVGProps<SVGFECompositeElement>;
            feConvolveMatrix: React.SVGProps<SVGFEConvolveMatrixElement>;
            feDiffuseLighting: React.SVGProps<SVGFEDiffuseLightingElement>;
            feDisplacementMap: React.SVGProps<SVGFEDisplacementMapElement>;
            feDistantLight: React.SVGProps<SVGFEDistantLightElement>;
            feDropShadow: React.SVGProps<SVGFEDropShadowElement>;
            feFlood: React.SVGProps<SVGFEFloodElement>;
            feFuncA: React.SVGProps<SVGFEFuncAElement>;
            feFuncB: React.SVGProps<SVGFEFuncBElement>;
            feFuncG: React.SVGProps<SVGFEFuncGElement>;
            feFuncR: React.SVGProps<SVGFEFuncRElement>;
            feGaussianBlur: React.SVGProps<SVGFEGaussianBlurElement>;
            feImage: React.SVGProps<SVGFEImageElement>;
            feMerge: React.SVGProps<SVGFEMergeElement>;
            feMergeNode: React.SVGProps<SVGFEMergeNodeElement>;
            feMorphology: React.SVGProps<SVGFEMorphologyElement>;
            feOffset: React.SVGProps<SVGFEOffsetElement>;
            fePointLight: React.SVGProps<SVGFEPointLightElement>;
            feSpecularLighting: React.SVGProps<SVGFESpecularLightingElement>;
            feSpotLight: React.SVGProps<SVGFESpotLightElement>;
            feTile: React.SVGProps<SVGFETileElement>;
            feTurbulence: React.SVGProps<SVGFETurbulenceElement>;
            filter: React.SVGProps<SVGFilterElement>;
            foreignObject: React.SVGProps<SVGForeignObjectElement>;
            g: React.SVGProps<SVGGElement>;
            image: React.SVGProps<SVGImageElement>;
            line: React.SVGLineElementAttributes<SVGLineElement>;
            linearGradient: React.SVGProps<SVGLinearGradientElement>;
            marker: React.SVGProps<SVGMarkerElement>;
            mask: React.SVGProps<SVGMaskElement>;
            metadata: React.SVGProps<SVGMetadataElement>;
            mpath: React.SVGProps<SVGElement>;
            path: React.SVGProps<SVGPathElement>;
            pattern: React.SVGProps<SVGPatternElement>;
            polygon: React.SVGProps<SVGPolygonElement>;
            polyline: React.SVGProps<SVGPolylineElement>;
            radialGradient: React.SVGProps<SVGRadialGradientElement>;
            rect: React.SVGProps<SVGRectElement>;
            set: React.SVGProps<SVGSetElement>;
            stop: React.SVGProps<SVGStopElement>;
            switch: React.SVGProps<SVGSwitchElement>;
            symbol: React.SVGProps<SVGSymbolElement>;
            text: React.SVGTextElementAttributes<SVGTextElement>;
            textPath: React.SVGProps<SVGTextPathElement>;
            tspan: React.SVGProps<SVGTSpanElement>;
            use: React.SVGProps<SVGUseElement>;
            view: React.SVGProps<SVGViewElement>;
        }
    }
}

// React.JSX needs to point to global.JSX to keep global module augmentations intact.
// But we can't access global.JSX so we need to create these aliases instead.
// Once the global JSX namespace will be removed we replace React.JSX with the contents of global.JSX
interface GlobalJSXElement extends JSX.Element {}
interface GlobalJSXElementClass extends JSX.ElementClass {}
interface GlobalJSXElementAttributesProperty extends JSX.ElementAttributesProperty {}
interface GlobalJSXElementChildrenAttribute extends JSX.ElementChildrenAttribute {}

type GlobalJSXLibraryManagedAttributes<C, P> = JSX.LibraryManagedAttributes<C, P>;

interface GlobalJSXIntrinsicAttributes extends JSX.IntrinsicAttributes {}
interface GlobalJSXIntrinsicClassAttributes<T> extends JSX.IntrinsicClassAttributes<T> {}

interface GlobalJSXIntrinsicElements extends JSX.IntrinsicElements {}

----------------------------------------
File: ./animations/node_modules/@types/react/index.d.ts
----------------------------------------
// NOTE: Users of the `experimental` builds of React should add a reference
// to 'react/experimental' in their project. See experimental.d.ts's top comment
// for reference and documentation on how exactly to do it.

/// <reference path="global.d.ts" />

import * as CSS from "csstype";
import * as PropTypes from "prop-types";

type NativeAnimationEvent = AnimationEvent;
type NativeClipboardEvent = ClipboardEvent;
type NativeCompositionEvent = CompositionEvent;
type NativeDragEvent = DragEvent;
type NativeFocusEvent = FocusEvent;
type NativeKeyboardEvent = KeyboardEvent;
type NativeMouseEvent = MouseEvent;
type NativeTouchEvent = TouchEvent;
type NativePointerEvent = PointerEvent;
type NativeTransitionEvent = TransitionEvent;
type NativeUIEvent = UIEvent;
type NativeWheelEvent = WheelEvent;

/**
 * Used to represent DOM API's where users can either pass
 * true or false as a boolean or as its equivalent strings.
 */
type Booleanish = boolean | "true" | "false";

/**
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/crossorigin MDN}
 */
type CrossOrigin = "anonymous" | "use-credentials" | "" | undefined;

declare const UNDEFINED_VOID_ONLY: unique symbol;

/**
 * The function returned from an effect passed to {@link React.useEffect useEffect},
 * which can be used to clean up the effect when the component unmounts.
 *
 * @see {@link https://react.dev/reference/react/useEffect React Docs}
 */
type Destructor = () => void | { [UNDEFINED_VOID_ONLY]: never };
type VoidOrUndefinedOnly = void | { [UNDEFINED_VOID_ONLY]: never };

// eslint-disable-next-line @definitelytyped/export-just-namespace
export = React;
export as namespace React;

declare namespace React {
    //
    // React Elements
    // ----------------------------------------------------------------------

    /**
     * Used to retrieve the possible components which accept a given set of props.
     *
     * Can be passed no type parameters to get a union of all possible components
     * and tags.
     *
     * Is a superset of {@link ComponentType}.
     *
     * @template P The props to match against. If not passed, defaults to any.
     * @template Tag An optional tag to match against. If not passed, attempts to match against all possible tags.
     *
     * @example
     *
     * ```tsx
     * // All components and tags (img, embed etc.)
     * // which accept `src`
     * type SrcComponents = ElementType<{ src: any }>;
     * ```
     *
     * @example
     *
     * ```tsx
     * // All components
     * type AllComponents = ElementType;
     * ```
     *
     * @example
     *
     * ```tsx
     * // All custom components which match `src`, and tags which
     * // match `src`, narrowed down to just `audio` and `embed`
     * type SrcComponents = ElementType<{ src: any }, 'audio' | 'embed'>;
     * ```
     */
    type ElementType<P = any, Tag extends keyof JSX.IntrinsicElements = keyof JSX.IntrinsicElements> =
        | { [K in Tag]: P extends JSX.IntrinsicElements[K] ? K : never }[Tag]
        | ComponentType<P>;

    /**
     * Represents any user-defined component, either as a function or a class.
     *
     * Similar to {@link JSXElementConstructor}, but with extra properties like
     * {@link FunctionComponent.defaultProps defaultProps } and
     * {@link ComponentClass.contextTypes contextTypes}.
     *
     * @template P The props the component accepts.
     *
     * @see {@link ComponentClass}
     * @see {@link FunctionComponent}
     */
    type ComponentType<P = {}> = ComponentClass<P> | FunctionComponent<P>;

    /**
     * Represents any user-defined component, either as a function or a class.
     *
     * Similar to {@link ComponentType}, but without extra properties like
     * {@link FunctionComponent.defaultProps defaultProps } and
     * {@link ComponentClass.contextTypes contextTypes}.
     *
     * @template P The props the component accepts.
     */
    type JSXElementConstructor<P> =
        | ((
            props: P,
            /**
             * @deprecated
             *
             * @see {@link https://legacy.reactjs.org/docs/legacy-context.html#referencing-context-in-stateless-function-components React Docs}
             */
            deprecatedLegacyContext?: any,
        ) => ReactNode)
        | (new(
            props: P,
            /**
             * @deprecated
             *
             * @see {@link https://legacy.reactjs.org/docs/legacy-context.html#referencing-context-in-lifecycle-methods React Docs}
             */
            deprecatedLegacyContext?: any,
        ) => Component<any, any>);

    /**
     * A readonly ref container where {@link current} cannot be mutated.
     *
     * Created by {@link createRef}, or {@link useRef} when passed `null`.
     *
     * @template T The type of the ref's value.
     *
     * @example
     *
     * ```tsx
     * const ref = createRef<HTMLDivElement>();
     *
     * ref.current = document.createElement('div'); // Error
     * ```
     */
    interface RefObject<T> {
        /**
         * The current value of the ref.
         */
        readonly current: T | null;
    }

    interface DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES {
    }
    /**
     * A callback fired whenever the ref's value changes.
     *
     * @template T The type of the ref's value.
     *
     * @see {@link https://react.dev/reference/react-dom/components/common#ref-callback React Docs}
     *
     * @example
     *
     * ```tsx
     * <div ref={(node) => console.log(node)} />
     * ```
     */
    type RefCallback<T> = {
        bivarianceHack(
            instance: T | null,
        ):
            | void
            | DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[
                keyof DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES
            ];
    }["bivarianceHack"];

    /**
     * A union type of all possible shapes for React refs.
     *
     * @see {@link RefCallback}
     * @see {@link RefObject}
     */

    type Ref<T> = RefCallback<T> | RefObject<T> | null;
    /**
     * A legacy implementation of refs where you can pass a string to a ref prop.
     *
     * @see {@link https://react.dev/reference/react/Component#refs React Docs}
     *
     * @example
     *
     * ```tsx
     * <div ref="myRef" />
     * ```
     */
    // TODO: Remove the string ref special case from `PropsWithRef` once we remove LegacyRef
    type LegacyRef<T> = string | Ref<T>;

    /**
     * Retrieves the type of the 'ref' prop for a given component type or tag name.
     *
     * @template C The component type.
     *
     * @example
     *
     * ```tsx
     * type MyComponentRef = React.ElementRef<typeof MyComponent>;
     * ```
     *
     * @example
     *
     * ```tsx
     * type DivRef = React.ElementRef<'div'>;
     * ```
     */
    type ElementRef<
        C extends
            | ForwardRefExoticComponent<any>
            | { new(props: any): Component<any> }
            | ((props: any, deprecatedLegacyContext?: any) => ReactNode)
            | keyof JSX.IntrinsicElements,
    > =
        // need to check first if `ref` is a valid prop for ts@3.0
        // otherwise it will infer `{}` instead of `never`
        "ref" extends keyof ComponentPropsWithRef<C>
            ? NonNullable<ComponentPropsWithRef<C>["ref"]> extends RefAttributes<
                infer Instance
            >["ref"] ? Instance
            : never
            : never;

    type ComponentState = any;

    /**
     * A value which uniquely identifies a node among items in an array.
     *
     * @see {@link https://react.dev/learn/rendering-lists#keeping-list-items-in-order-with-key React Docs}
     */
    type Key = string | number | bigint;

    /**
     * @internal The props any component can receive.
     * You don't have to add this type. All components automatically accept these props.
     * ```tsx
     * const Component = () => <div />;
     * <Component key="one" />
     * ```
     *
     * WARNING: The implementation of a component will never have access to these attributes.
     * The following example would be incorrect usage because {@link Component} would never have access to `key`:
     * ```tsx
     * const Component = (props: React.Attributes) => props.key;
     * ```
     */
    interface Attributes {
        key?: Key | null | undefined;
    }
    /**
     * The props any component accepting refs can receive.
     * Class components, built-in browser components (e.g. `div`) and forwardRef components can receive refs and automatically accept these props.
     * ```tsx
     * const Component = forwardRef(() => <div />);
     * <Component ref={(current) => console.log(current)} />
     * ```
     *
     * You only need this type if you manually author the types of props that need to be compatible with legacy refs.
     * ```tsx
     * interface Props extends React.RefAttributes<HTMLDivElement> {}
     * declare const Component: React.FunctionComponent<Props>;
     * ```
     *
     * Otherwise it's simpler to directly use {@link Ref} since you can safely use the
     * props type to describe to props that a consumer can pass to the component
     * as well as describing the props the implementation of a component "sees".
     * {@link RefAttributes} is generally not safe to describe both consumer and seen props.
     *
     * ```tsx
     * interface Props extends {
     *   ref?: React.Ref<HTMLDivElement> | undefined;
     * }
     * declare const Component: React.FunctionComponent<Props>;
     * ```
     *
     * WARNING: The implementation of a component will not have access to the same type in versions of React supporting string refs.
     * The following example would be incorrect usage because {@link Component} would never have access to a `ref` with type `string`
     * ```tsx
     * const Component = (props: React.RefAttributes) => props.ref;
     * ```
     */
    interface RefAttributes<T> extends Attributes {
        /**
         * Allows getting a ref to the component instance.
         * Once the component unmounts, React will set `ref.current` to `null`
         * (or call the ref with `null` if you passed a callback ref).
         *
         * @see {@link https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom React Docs}
         */
        ref?: LegacyRef<T> | undefined;
    }

    /**
     * Represents the built-in attributes available to class components.
     */
    interface ClassAttributes<T> extends RefAttributes<T> {
    }

    /**
     * Represents a JSX element.
     *
     * Where {@link ReactNode} represents everything that can be rendered, `ReactElement`
     * only represents JSX.
     *
     * @template P The type of the props object
     * @template T The type of the component or tag
     *
     * @example
     *
     * ```tsx
     * const element: ReactElement = <div />;
     * ```
     */
    interface ReactElement<
        P = any,
        T extends string | JSXElementConstructor<any> = string | JSXElementConstructor<any>,
    > {
        type: T;
        props: P;
        key: string | null;
    }

    /**
     * @deprecated
     */
    interface ReactComponentElement<
        T extends keyof JSX.IntrinsicElements | JSXElementConstructor<any>,
        P = Pick<ComponentProps<T>, Exclude<keyof ComponentProps<T>, "key" | "ref">>,
    > extends ReactElement<P, Exclude<T, number>> {}

    interface FunctionComponentElement<P> extends ReactElement<P, FunctionComponent<P>> {
        ref?: ("ref" extends keyof P ? P extends { ref?: infer R | undefined } ? R : never : never) | undefined;
    }

    type CElement<P, T extends Component<P, ComponentState>> = ComponentElement<P, T>;
    interface ComponentElement<P, T extends Component<P, ComponentState>> extends ReactElement<P, ComponentClass<P>> {
        ref?: LegacyRef<T> | undefined;
    }

    /**
     * @deprecated Use {@link ComponentElement} instead.
     */
    type ClassicElement<P> = CElement<P, ClassicComponent<P, ComponentState>>;

    // string fallback for custom web-components
    interface DOMElement<P extends HTMLAttributes<T> | SVGAttributes<T>, T extends Element>
        extends ReactElement<P, string>
    {
        ref: LegacyRef<T>;
    }

    // ReactHTML for ReactHTMLElement
    interface ReactHTMLElement<T extends HTMLElement> extends DetailedReactHTMLElement<AllHTMLAttributes<T>, T> {}

    interface DetailedReactHTMLElement<P extends HTMLAttributes<T>, T extends HTMLElement> extends DOMElement<P, T> {
        type: keyof ReactHTML;
    }

    // ReactSVG for ReactSVGElement
    interface ReactSVGElement extends DOMElement<SVGAttributes<SVGElement>, SVGElement> {
        type: keyof ReactSVG;
    }

    interface ReactPortal extends ReactElement {
        children: ReactNode;
    }

    //
    // Factories
    // ----------------------------------------------------------------------

    /** @deprecated */
    type Factory<P> = (props?: Attributes & P, ...children: ReactNode[]) => ReactElement<P>;

    /** @deprecated */
    type SFCFactory<P> = FunctionComponentFactory<P>;

    /** @deprecated */
    type FunctionComponentFactory<P> = (
        props?: Attributes & P,
        ...children: ReactNode[]
    ) => FunctionComponentElement<P>;

    /** @deprecated */
    type ComponentFactory<P, T extends Component<P, ComponentState>> = (
        props?: ClassAttributes<T> & P,
        ...children: ReactNode[]
    ) => CElement<P, T>;

    /** @deprecated */
    type CFactory<P, T extends Component<P, ComponentState>> = ComponentFactory<P, T>;
    /** @deprecated */
    type ClassicFactory<P> = CFactory<P, ClassicComponent<P, ComponentState>>;

    /** @deprecated */
    type DOMFactory<P extends DOMAttributes<T>, T extends Element> = (
        props?: ClassAttributes<T> & P | null,
        ...children: ReactNode[]
    ) => DOMElement<P, T>;

    /** @deprecated */
    interface HTMLFactory<T extends HTMLElement> extends DetailedHTMLFactory<AllHTMLAttributes<T>, T> {}

    /** @deprecated */
    interface DetailedHTMLFactory<P extends HTMLAttributes<T>, T extends HTMLElement> extends DOMFactory<P, T> {
        (props?: ClassAttributes<T> & P | null, ...children: ReactNode[]): DetailedReactHTMLElement<P, T>;
    }

    /** @deprecated */
    interface SVGFactory extends DOMFactory<SVGAttributes<SVGElement>, SVGElement> {
        (
            props?: ClassAttributes<SVGElement> & SVGAttributes<SVGElement> | null,
            ...children: ReactNode[]
        ): ReactSVGElement;
    }

    /**
     * @deprecated - This type is not relevant when using React. Inline the type instead to make the intent clear.
     */
    type ReactText = string | number;
    /**
     * @deprecated - This type is not relevant when using React. Inline the type instead to make the intent clear.
     */
    type ReactChild = ReactElement | string | number;

    /**
     * @deprecated Use either `ReactNode[]` if you need an array or `Iterable<ReactNode>` if its passed to a host component.
     */
    interface ReactNodeArray extends ReadonlyArray<ReactNode> {}
    /**
     * WARNING: Not related to `React.Fragment`.
     * @deprecated This type is not relevant when using React. Inline the type instead to make the intent clear.
     */
    type ReactFragment = Iterable<ReactNode>;

    /**
     * Different release channels declare additional types of ReactNode this particular release channel accepts.
     * App or library types should never augment this interface.
     */
    interface DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_REACT_NODES {}

    /**
     * Represents all of the things React can render.
     *
     * Where {@link ReactElement} only represents JSX, `ReactNode` represents everything that can be rendered.
     *
     * @see {@link https://react-typescript-cheatsheet.netlify.app/docs/react-types/reactnode/ React TypeScript Cheatsheet}
     *
     * @example
     *
     * ```tsx
     * // Typing children
     * type Props = { children: ReactNode }
     *
     * const Component = ({ children }: Props) => <div>{children}</div>
     *
     * <Component>hello</Component>
     * ```
     *
     * @example
     *
     * ```tsx
     * // Typing a custom element
     * type Props = { customElement: ReactNode }
     *
     * const Component = ({ customElement }: Props) => <div>{customElement}</div>
     *
     * <Component customElement={<div>hello</div>} />
     * ```
     */
    // non-thenables need to be kept in sync with AwaitedReactNode
    type ReactNode =
        | ReactElement
        | string
        | number
        | Iterable<ReactNode>
        | ReactPortal
        | boolean
        | null
        | undefined
        | DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_REACT_NODES[
            keyof DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_REACT_NODES
        ];

    //
    // Top Level API
    // ----------------------------------------------------------------------

    // DOM Elements
    /** @deprecated */
    function createFactory<T extends HTMLElement>(
        type: keyof ReactHTML,
    ): HTMLFactory<T>;
    /** @deprecated */
    function createFactory(
        type: keyof ReactSVG,
    ): SVGFactory;
    /** @deprecated */
    function createFactory<P extends DOMAttributes<T>, T extends Element>(
        type: string,
    ): DOMFactory<P, T>;

    // Custom components
    /** @deprecated */
    function createFactory<P>(type: FunctionComponent<P>): FunctionComponentFactory<P>;
    /** @deprecated */
    function createFactory<P, T extends Component<P, ComponentState>, C extends ComponentClass<P>>(
        type: ClassType<P, T, C>,
    ): CFactory<P, T>;
    /** @deprecated */
    function createFactory<P>(type: ComponentClass<P>): Factory<P>;

    // DOM Elements
    // TODO: generalize this to everything in `keyof ReactHTML`, not just "input"
    function createElement(
        type: "input",
        props?: InputHTMLAttributes<HTMLInputElement> & ClassAttributes<HTMLInputElement> | null,
        ...children: ReactNode[]
    ): DetailedReactHTMLElement<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;
    function createElement<P extends HTMLAttributes<T>, T extends HTMLElement>(
        type: keyof ReactHTML,
        props?: ClassAttributes<T> & P | null,
        ...children: ReactNode[]
    ): DetailedReactHTMLElement<P, T>;
    function createElement<P extends SVGAttributes<T>, T extends SVGElement>(
        type: keyof ReactSVG,
        props?: ClassAttributes<T> & P | null,
        ...children: ReactNode[]
    ): ReactSVGElement;
    function createElement<P extends DOMAttributes<T>, T extends Element>(
        type: string,
        props?: ClassAttributes<T> & P | null,
        ...children: ReactNode[]
    ): DOMElement<P, T>;

    // Custom components

    function createElement<P extends {}>(
        type: FunctionComponent<P>,
        props?: Attributes & P | null,
        ...children: ReactNode[]
    ): FunctionComponentElement<P>;
    function createElement<P extends {}, T extends Component<P, ComponentState>, C extends ComponentClass<P>>(
        type: ClassType<P, T, C>,
        props?: ClassAttributes<T> & P | null,
        ...children: ReactNode[]
    ): CElement<P, T>;
    function createElement<P extends {}>(
        type: FunctionComponent<P> | ComponentClass<P> | string,
        props?: Attributes & P | null,
        ...children: ReactNode[]
    ): ReactElement<P>;

    // DOM Elements
    // ReactHTMLElement
    function cloneElement<P extends HTMLAttributes<T>, T extends HTMLElement>(
        element: DetailedReactHTMLElement<P, T>,
        props?: P,
        ...children: ReactNode[]
    ): DetailedReactHTMLElement<P, T>;
    // ReactHTMLElement, less specific
    function cloneElement<P extends HTMLAttributes<T>, T extends HTMLElement>(
        element: ReactHTMLElement<T>,
        props?: P,
        ...children: ReactNode[]
    ): ReactHTMLElement<T>;
    // SVGElement
    function cloneElement<P extends SVGAttributes<T>, T extends SVGElement>(
        element: ReactSVGElement,
        props?: P,
        ...children: ReactNode[]
    ): ReactSVGElement;
    // DOM Element (has to be the last, because type checking stops at first overload that fits)
    function cloneElement<P extends DOMAttributes<T>, T extends Element>(
        element: DOMElement<P, T>,
        props?: DOMAttributes<T> & P,
        ...children: ReactNode[]
    ): DOMElement<P, T>;

    // Custom components
    function cloneElement<P>(
        element: FunctionComponentElement<P>,
        props?: Partial<P> & Attributes,
        ...children: ReactNode[]
    ): FunctionComponentElement<P>;
    function cloneElement<P, T extends Component<P, ComponentState>>(
        element: CElement<P, T>,
        props?: Partial<P> & ClassAttributes<T>,
        ...children: ReactNode[]
    ): CElement<P, T>;
    function cloneElement<P>(
        element: ReactElement<P>,
        props?: Partial<P> & Attributes,
        ...children: ReactNode[]
    ): ReactElement<P>;

    /**
     * Describes the props accepted by a Context {@link Provider}.
     *
     * @template T The type of the value the context provides.
     */
    interface ProviderProps<T> {
        value: T;
        children?: ReactNode | undefined;
    }

    /**
     * Describes the props accepted by a Context {@link Consumer}.
     *
     * @template T The type of the value the context provides.
     */
    interface ConsumerProps<T> {
        children: (value: T) => ReactNode;
    }

    /**
     * An object masquerading as a component. These are created by functions
     * like {@link forwardRef}, {@link memo}, and {@link createContext}.
     *
     * In order to make TypeScript work, we pretend that they are normal
     * components.
     *
     * But they are, in fact, not callable - instead, they are objects which
     * are treated specially by the renderer.
     *
     * @template P The props the component accepts.
     */
    interface ExoticComponent<P = {}> {
        (props: P): ReactNode;
        readonly $$typeof: symbol;
    }

    /**
     * An {@link ExoticComponent} with a `displayName` property applied to it.
     *
     * @template P The props the component accepts.
     */
    interface NamedExoticComponent<P = {}> extends ExoticComponent<P> {
        /**
         * Used in debugging messages. You might want to set it
         * explicitly if you want to display a different name for
         * debugging purposes.
         *
         * @see {@link https://legacy.reactjs.org/docs/react-component.html#displayname Legacy React Docs}
         */
        displayName?: string | undefined;
    }

    /**
     * An {@link ExoticComponent} with a `propTypes` property applied to it.
     *
     * @template P The props the component accepts.
     */
    interface ProviderExoticComponent<P> extends ExoticComponent<P> {
        propTypes?: WeakValidationMap<P> | undefined;
    }

    /**
     * Used to retrieve the type of a context object from a {@link Context}.
     *
     * @template C The context object.
     *
     * @example
     *
     * ```tsx
     * import { createContext } from 'react';
     *
     * const MyContext = createContext({ foo: 'bar' });
     *
     * type ContextType = ContextType<typeof MyContext>;
     * // ContextType = { foo: string }
     * ```
     */
    type ContextType<C extends Context<any>> = C extends Context<infer T> ? T : never;

    /**
     * Wraps your components to specify the value of this context for all components inside.
     *
     * @see {@link https://react.dev/reference/react/createContext#provider React Docs}
     *
     * @example
     *
     * ```tsx
     * import { createContext } from 'react';
     *
     * const ThemeContext = createContext('light');
     *
     * function App() {
     *   return (
     *     <ThemeContext.Provider value="dark">
     *       <Toolbar />
     *     </ThemeContext.Provider>
     *   );
     * }
     * ```
     */
    type Provider<T> = ProviderExoticComponent<ProviderProps<T>>;

    /**
     * The old way to read context, before {@link useContext} existed.
     *
     * @see {@link https://react.dev/reference/react/createContext#consumer React Docs}
     *
     * @example
     *
     * ```tsx
     * import { UserContext } from './user-context';
     *
     * function Avatar() {
     *   return (
     *     <UserContext.Consumer>
     *       {user => <img src={user.profileImage} alt={user.name} />}
     *     </UserContext.Consumer>
     *   );
     * }
     * ```
     */
    type Consumer<T> = ExoticComponent<ConsumerProps<T>>;

    /**
     * Context lets components pass information deep down without explicitly
     * passing props.
     *
     * Created from {@link createContext}
     *
     * @see {@link https://react.dev/learn/passing-data-deeply-with-context React Docs}
     * @see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/context/ React TypeScript Cheatsheet}
     *
     * @example
     *
     * ```tsx
     * import { createContext } from 'react';
     *
     * const ThemeContext = createContext('light');
     * ```
     */
    interface Context<T> {
        Provider: Provider<T>;
        Consumer: Consumer<T>;
        /**
         * Used in debugging messages. You might want to set it
         * explicitly if you want to display a different name for
         * debugging purposes.
         *
         * @see {@link https://legacy.reactjs.org/docs/react-component.html#displayname Legacy React Docs}
         */
        displayName?: string | undefined;
    }

    /**
     * Lets you create a {@link Context} that components can provide or read.
     *
     * @param defaultValue The value you want the context to have when there is no matching
     * {@link Provider} in the tree above the component reading the context. This is meant
     * as a "last resort" fallback.
     *
     * @see {@link https://react.dev/reference/react/createContext#reference React Docs}
     * @see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/context/ React TypeScript Cheatsheet}
     *
     * @example
     *
     * ```tsx
     * import { createContext } from 'react';
     *
     * const ThemeContext = createContext('light');
     * ```
     */
    function createContext<T>(
        // If you thought this should be optional, see
        // https://github.com/DefinitelyTyped/DefinitelyTyped/pull/24509#issuecomment-382213106
        defaultValue: T,
    ): Context<T>;

    function isValidElement<P>(object: {} | null | undefined): object is ReactElement<P>;

    /**
     * Maintainer's note: Sync with {@link ReactChildren} until {@link ReactChildren} is removed.
     */
    const Children: {
        map<T, C>(
            children: C | readonly C[],
            fn: (child: C, index: number) => T,
        ): C extends null | undefined ? C : Array<Exclude<T, boolean | null | undefined>>;
        forEach<C>(children: C | readonly C[], fn: (child: C, index: number) => void): void;
        count(children: any): number;
        only<C>(children: C): C extends any[] ? never : C;
        toArray(children: ReactNode | ReactNode[]): Array<Exclude<ReactNode, boolean | null | undefined>>;
    };
    /**
     * Lets you group elements without a wrapper node.
     *
     * @see {@link https://react.dev/reference/react/Fragment React Docs}
     *
     * @example
     *
     * ```tsx
     * import { Fragment } from 'react';
     *
     * <Fragment>
     *   <td>Hello</td>
     *   <td>World</td>
     * </Fragment>
     * ```
     *
     * @example
     *
     * ```tsx
     * // Using the <></> shorthand syntax:
     *
     * <>
     *   <td>Hello</td>
     *   <td>World</td>
     * </>
     * ```
     */
    const Fragment: ExoticComponent<{ children?: ReactNode | undefined }>;

    /**
     * Lets you find common bugs in your components early during development.
     *
     * @see {@link https://react.dev/reference/react/StrictMode React Docs}
     *
     * @example
     *
     * ```tsx
     * import { StrictMode } from 'react';
     *
     * <StrictMode>
     *   <App />
     * </StrictMode>
     * ```
     */
    const StrictMode: ExoticComponent<{ children?: ReactNode | undefined }>;

    /**
     * The props accepted by {@link Suspense}.
     *
     * @see {@link https://react.dev/reference/react/Suspense React Docs}
     */
    interface SuspenseProps {
        children?: ReactNode | undefined;

        /** A fallback react tree to show when a Suspense child (like React.lazy) suspends */
        fallback?: ReactNode;

        /**
         * A name for this Suspense boundary for instrumentation purposes.
         * The name will help identify this boundary in React DevTools.
         */
        name?: string | undefined;
    }

    /**
     * Lets you display a fallback until its children have finished loading.
     *
     * @see {@link https://react.dev/reference/react/Suspense React Docs}
     *
     * @example
     *
     * ```tsx
     * import { Suspense } from 'react';
     *
     * <Suspense fallback={<Loading />}>
     *   <ProfileDetails />
     * </Suspense>
     * ```
     */
    const Suspense: ExoticComponent<SuspenseProps>;
    const version: string;

    /**
     * The callback passed to {@link ProfilerProps.onRender}.
     *
     * @see {@link https://react.dev/reference/react/Profiler#onrender-callback React Docs}
     */
    type ProfilerOnRenderCallback = (
        /**
         * The string id prop of the {@link Profiler} tree that has just committed. This lets
         * you identify which part of the tree was committed if you are using multiple
         * profilers.
         *
         * @see {@link https://react.dev/reference/react/Profiler#onrender-callback React Docs}
         */
        id: string,
        /**
         * This lets you know whether the tree has just been mounted for the first time
         * or re-rendered due to a change in props, state, or hooks.
         *
         * @see {@link https://react.dev/reference/react/Profiler#onrender-callback React Docs}
         */
        phase: "mount" | "update" | "nested-update",
        /**
         * The number of milliseconds spent rendering the {@link Profiler} and its descendants
         * for the current update. This indicates how well the subtree makes use of
         * memoization (e.g. {@link memo} and {@link useMemo}). Ideally this value should decrease
         * significantly after the initial mount as many of the descendants will only need to
         * re-render if their specific props change.
         *
         * @see {@link https://react.dev/reference/react/Profiler#onrender-callback React Docs}
         */
        actualDuration: number,
        /**
         * The number of milliseconds estimating how much time it would take to re-render the entire
         * {@link Profiler} subtree without any optimizations. It is calculated by summing up the most
         * recent render durations of each component in the tree. This value estimates a worst-case
         * cost of rendering (e.g. the initial mount or a tree with no memoization). Compare
         * {@link actualDuration} against it to see if memoization is working.
         *
         * @see {@link https://react.dev/reference/react/Profiler#onrender-callback React Docs}
         */
        baseDuration: number,
        /**
         * A numeric timestamp for when React began rendering the current update.
         *
         * @see {@link https://react.dev/reference/react/Profiler#onrender-callback React Docs}
         */
        startTime: number,
        /**
         * A numeric timestamp for when React committed the current update. This value is shared
         * between all profilers in a commit, enabling them to be grouped if desirable.
         *
         * @see {@link https://react.dev/reference/react/Profiler#onrender-callback React Docs}
         */
        commitTime: number,
    ) => void;

    /**
     * The props accepted by {@link Profiler}.
     *
     * @see {@link https://react.dev/reference/react/Profiler React Docs}
     */
    interface ProfilerProps {
        children?: ReactNode | undefined;
        id: string;
        onRender: ProfilerOnRenderCallback;
    }

    /**
     * Lets you measure rendering performance of a React tree programmatically.
     *
     * @see {@link https://react.dev/reference/react/Profiler#onrender-callback React Docs}
     *
     * @example
     *
     * ```tsx
     * <Profiler id="App" onRender={onRender}>
     *   <App />
     * </Profiler>
     * ```
     */
    const Profiler: ExoticComponent<ProfilerProps>;

    //
    // Component API
    // ----------------------------------------------------------------------

    type ReactInstance = Component<any> | Element;

    // Base component for plain JS classes
    interface Component<P = {}, S = {}, SS = any> extends ComponentLifecycle<P, S, SS> {}
    class Component<P, S> {
        /**
         * If set, `this.context` will be set at runtime to the current value of the given Context.
         *
         * @example
         *
         * ```ts
         * type MyContext = number
         * const Ctx = React.createContext<MyContext>(0)
         *
         * class Foo extends React.Component {
         *   static contextType = Ctx
         *   context!: React.ContextType<typeof Ctx>
         *   render () {
         *     return <>My context's value: {this.context}</>;
         *   }
         * }
         * ```
         *
         * @see {@link https://react.dev/reference/react/Component#static-contexttype}
         */
        static contextType?: Context<any> | undefined;

        /**
         * If using the new style context, re-declare this in your class to be the
         * `React.ContextType` of your `static contextType`.
         * Should be used with type annotation or static contextType.
         *
         * @example
         * ```ts
         * static contextType = MyContext
         * // For TS pre-3.7:
         * context!: React.ContextType<typeof MyContext>
         * // For TS 3.7 and above:
         * declare context: React.ContextType<typeof MyContext>
         * ```
         *
         * @see {@link https://react.dev/reference/react/Component#context React Docs}
         */
        context: unknown;

        constructor(props: P);
        /**
         * @deprecated
         * @see {@link https://legacy.reactjs.org/docs/legacy-context.html React Docs}
         */
        constructor(props: P, context: any);

        // We MUST keep setState() as a unified signature because it allows proper checking of the method return type.
        // See: https://github.com/DefinitelyTyped/DefinitelyTyped/issues/18365#issuecomment-351013257
        // Also, the ` | S` allows intellisense to not be dumbisense
        setState<K extends keyof S>(
            state: ((prevState: Readonly<S>, props: Readonly<P>) => Pick<S, K> | S | null) | (Pick<S, K> | S | null),
            callback?: () => void,
        ): void;

        forceUpdate(callback?: () => void): void;
        render(): ReactNode;

        readonly props: Readonly<P>;
        state: Readonly<S>;
        /**
         * @deprecated
         *
         * @see {@link https://legacy.reactjs.org/docs/refs-and-the-dom.html#legacy-api-string-refs Legacy React Docs}
         */
        refs: {
            [key: string]: ReactInstance;
        };
    }

    class PureComponent<P = {}, S = {}, SS = any> extends Component<P, S, SS> {}

    /**
     * @deprecated Use `ClassicComponent` from `create-react-class`
     *
     * @see {@link https://legacy.reactjs.org/docs/react-without-es6.html Legacy React Docs}
     * @see {@link https://www.npmjs.com/package/create-react-class `create-react-class` on npm}
     */
    interface ClassicComponent<P = {}, S = {}> extends Component<P, S> {
        replaceState(nextState: S, callback?: () => void): void;
        isMounted(): boolean;
        getInitialState?(): S;
    }

    interface ChildContextProvider<CC> {
        getChildContext(): CC;
    }

    //
    // Class Interfaces
    // ----------------------------------------------------------------------

    /**
     * Represents the type of a function component. Can optionally
     * receive a type argument that represents the props the component
     * receives.
     *
     * @template P The props the component accepts.
     * @see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}
     * @alias for {@link FunctionComponent}
     *
     * @example
     *
     * ```tsx
     * // With props:
     * type Props = { name: string }
     *
     * const MyComponent: FC<Props> = (props) => {
     *  return <div>{props.name}</div>
     * }
     * ```
     *
     * @example
     *
     * ```tsx
     * // Without props:
     * const MyComponentWithoutProps: FC = () => {
     *   return <div>MyComponentWithoutProps</div>
     * }
     * ```
     */
    type FC<P = {}> = FunctionComponent<P>;

    /**
     * Represents the type of a function component. Can optionally
     * receive a type argument that represents the props the component
     * accepts.
     *
     * @template P The props the component accepts.
     * @see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}
     *
     * @example
     *
     * ```tsx
     * // With props:
     * type Props = { name: string }
     *
     * const MyComponent: FunctionComponent<Props> = (props) => {
     *  return <div>{props.name}</div>
     * }
     * ```
     *
     * @example
     *
     * ```tsx
     * // Without props:
     * const MyComponentWithoutProps: FunctionComponent = () => {
     *   return <div>MyComponentWithoutProps</div>
     * }
     * ```
     */
    interface FunctionComponent<P = {}> {
        (
            props: P,
            /**
             * @deprecated
             *
             * @see {@link https://legacy.reactjs.org/docs/legacy-context.html#referencing-context-in-lifecycle-methods React Docs}
             */
            deprecatedLegacyContext?: any,
        ): ReactNode;
        /**
         * Used to declare the types of the props accepted by the
         * component. These types will be checked during rendering
         * and in development only.
         *
         * We recommend using TypeScript instead of checking prop
         * types at runtime.
         *
         * @see {@link https://react.dev/reference/react/Component#static-proptypes React Docs}
         */
        propTypes?: WeakValidationMap<P> | undefined;
        /**
         * @deprecated
         *
         * Lets you specify which legacy context is consumed by
         * this component.
         *
         * @see {@link https://legacy.reactjs.org/docs/legacy-context.html Legacy React Docs}
         */
        contextTypes?: ValidationMap<any> | undefined;
        /**
         * Used to define default values for the props accepted by
         * the component.
         *
         * @see {@link https://react.dev/reference/react/Component#static-defaultprops React Docs}
         *
         * @example
         *
         * ```tsx
         * type Props = { name?: string }
         *
         * const MyComponent: FC<Props> = (props) => {
         *   return <div>{props.name}</div>
         * }
         *
         * MyComponent.defaultProps = {
         *   name: 'John Doe'
         * }
         * ```
         *
         * @deprecated Use {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#default_value|default values for destructuring assignments instead}.
         */
        defaultProps?: Partial<P> | undefined;
        /**
         * Used in debugging messages. You might want to set it
         * explicitly if you want to display a different name for
         * debugging purposes.
         *
         * @see {@link https://legacy.reactjs.org/docs/react-component.html#displayname Legacy React Docs}
         *
         * @example
         *
         * ```tsx
         *
         * const MyComponent: FC = () => {
         *   return <div>Hello!</div>
         * }
         *
         * MyComponent.displayName = 'MyAwesomeComponent'
         * ```
         */
        displayName?: string | undefined;
    }

    /**
     * @deprecated - Equivalent to {@link React.FunctionComponent}.
     *
     * @see {@link React.FunctionComponent}
     * @alias {@link VoidFunctionComponent}
     */
    type VFC<P = {}> = VoidFunctionComponent<P>;

    /**
     * @deprecated - Equivalent to {@link React.FunctionComponent}.
     *
     * @see {@link React.FunctionComponent}
     */
    interface VoidFunctionComponent<P = {}> {
        (
            props: P,
            /**
             * @deprecated
             *
             * @see {@link https://legacy.reactjs.org/docs/legacy-context.html#referencing-context-in-lifecycle-methods React Docs}
             */
            deprecatedLegacyContext?: any,
        ): ReactNode;
        propTypes?: WeakValidationMap<P> | undefined;
        contextTypes?: ValidationMap<any> | undefined;
        /**
         * @deprecated Use {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#default_value|default values for destructuring assignments instead}.
         */
        defaultProps?: Partial<P> | undefined;
        displayName?: string | undefined;
    }

    /**
     * The type of the ref received by a {@link ForwardRefRenderFunction}.
     *
     * @see {@link ForwardRefRenderFunction}
     */
    type ForwardedRef<T> = ((instance: T | null) => void) | MutableRefObject<T | null> | null;

    /**
     * The type of the function passed to {@link forwardRef}. This is considered different
     * to a normal {@link FunctionComponent} because it receives an additional argument,
     *
     * @param props Props passed to the component, if any.
     * @param ref A ref forwarded to the component of type {@link ForwardedRef}.
     *
     * @template T The type of the forwarded ref.
     * @template P The type of the props the component accepts.
     *
     * @see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/forward_and_create_ref/ React TypeScript Cheatsheet}
     * @see {@link forwardRef}
     */
    interface ForwardRefRenderFunction<T, P = {}> {
        (props: P, ref: ForwardedRef<T>): ReactNode;
        /**
         * Used in debugging messages. You might want to set it
         * explicitly if you want to display a different name for
         * debugging purposes.
         *
         * Will show `ForwardRef(${Component.displayName || Component.name})`
         * in devtools by default, but can be given its own specific name.
         *
         * @see {@link https://legacy.reactjs.org/docs/react-component.html#displayname Legacy React Docs}
         */
        displayName?: string | undefined;
        /**
         * defaultProps are not supported on render functions passed to forwardRef.
         *
         * @see {@link https://github.com/microsoft/TypeScript/issues/36826 linked GitHub issue} for context
         * @see {@link https://react.dev/reference/react/Component#static-defaultprops React Docs}
         */
        defaultProps?: never | undefined;
        /**
         * propTypes are not supported on render functions passed to forwardRef.
         *
         * @see {@link https://github.com/microsoft/TypeScript/issues/36826 linked GitHub issue} for context
         * @see {@link https://react.dev/reference/react/Component#static-proptypes React Docs}
         */
        propTypes?: never | undefined;
    }

    /**
     * Represents a component class in React.
     *
     * @template P The props the component accepts.
     * @template S The internal state of the component.
     */
    interface ComponentClass<P = {}, S = ComponentState> extends StaticLifecycle<P, S> {
        new(
            props: P,
            /**
             * @deprecated
             *
             * @see {@link https://legacy.reactjs.org/docs/legacy-context.html#referencing-context-in-lifecycle-methods React Docs}
             */
            deprecatedLegacyContext?: any,
        ): Component<P, S>;
        /**
         * Used to declare the types of the props accepted by the
         * component. These types will be checked during rendering
         * and in development only.
         *
         * We recommend using TypeScript instead of checking prop
         * types at runtime.
         *
         * @see {@link https://react.dev/reference/react/Component#static-proptypes React Docs}
         */
        propTypes?: WeakValidationMap<P> | undefined;
        contextType?: Context<any> | undefined;
        /**
         * @deprecated use {@link ComponentClass.contextType} instead
         *
         * Lets you specify which legacy context is consumed by
         * this component.
         *
         * @see {@link https://legacy.reactjs.org/docs/legacy-context.html Legacy React Docs}
         */
        contextTypes?: ValidationMap<any> | undefined;
        /**
         * @deprecated
         *
         * @see {@link https://legacy.reactjs.org/docs/legacy-context.html#how-to-use-context Legacy React Docs}
         */
        childContextTypes?: ValidationMap<any> | undefined;
        /**
         * Used to define default values for the props accepted by
         * the component.
         *
         * @see {@link https://react.dev/reference/react/Component#static-defaultprops React Docs}
         */
        defaultProps?: Partial<P> | undefined;
        /**
         * Used in debugging messages. You might want to set it
         * explicitly if you want to display a different name for
         * debugging purposes.
         *
         * @see {@link https://legacy.reactjs.org/docs/react-component.html#displayname Legacy React Docs}
         */
        displayName?: string | undefined;
    }

    /**
     * @deprecated Use `ClassicComponentClass` from `create-react-class`
     *
     * @see {@link https://legacy.reactjs.org/docs/react-without-es6.html Legacy React Docs}
     * @see {@link https://www.npmjs.com/package/create-react-class `create-react-class` on npm}
     */
    interface ClassicComponentClass<P = {}> extends ComponentClass<P> {
        new(props: P, deprecatedLegacyContext?: any): ClassicComponent<P, ComponentState>;
        getDefaultProps?(): P;
    }

    /**
     * Used in {@link createElement} and {@link createFactory} to represent
     * a class.
     *
     * An intersection type is used to infer multiple type parameters from
     * a single argument, which is useful for many top-level API defs.
     * See {@link https://github.com/Microsoft/TypeScript/issues/7234 this GitHub issue}
     * for more info.
     */
    type ClassType<P, T extends Component<P, ComponentState>, C extends ComponentClass<P>> =
        & C
        & (new(props: P, deprecatedLegacyContext?: any) => T);

    //
    // Component Specs and Lifecycle
    // ----------------------------------------------------------------------

    // This should actually be something like `Lifecycle<P, S> | DeprecatedLifecycle<P, S>`,
    // as React will _not_ call the deprecated lifecycle methods if any of the new lifecycle
    // methods are present.
    interface ComponentLifecycle<P, S, SS = any> extends NewLifecycle<P, S, SS>, DeprecatedLifecycle<P, S> {
        /**
         * Called immediately after a component is mounted. Setting state here will trigger re-rendering.
         */
        componentDidMount?(): void;
        /**
         * Called to determine whether the change in props and state should trigger a re-render.
         *
         * `Component` always returns true.
         * `PureComponent` implements a shallow comparison on props and state and returns true if any
         * props or states have changed.
         *
         * If false is returned, {@link Component.render}, `componentWillUpdate`
         * and `componentDidUpdate` will not be called.
         */
        shouldComponentUpdate?(nextProps: Readonly<P>, nextState: Readonly<S>, nextContext: any): boolean;
        /**
         * Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as
         * cancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.
         */
        componentWillUnmount?(): void;
        /**
         * Catches exceptions generated in descendant components. Unhandled exceptions will cause
         * the entire component tree to unmount.
         */
        componentDidCatch?(error: Error, errorInfo: ErrorInfo): void;
    }

    // Unfortunately, we have no way of declaring that the component constructor must implement this
    interface StaticLifecycle<P, S> {
        getDerivedStateFromProps?: GetDerivedStateFromProps<P, S> | undefined;
        getDerivedStateFromError?: GetDerivedStateFromError<P, S> | undefined;
    }

    type GetDerivedStateFromProps<P, S> =
        /**
         * Returns an update to a component's state based on its new props and old state.
         *
         * Note: its presence prevents any of the deprecated lifecycle methods from being invoked
         */
        (nextProps: Readonly<P>, prevState: S) => Partial<S> | null;

    type GetDerivedStateFromError<P, S> =
        /**
         * This lifecycle is invoked after an error has been thrown by a descendant component.
         * It receives the error that was thrown as a parameter and should return a value to update state.
         *
         * Note: its presence prevents any of the deprecated lifecycle methods from being invoked
         */
        (error: any) => Partial<S> | null;

    // This should be "infer SS" but can't use it yet
    interface NewLifecycle<P, S, SS> {
        /**
         * Runs before React applies the result of {@link Component.render render} to the document, and
         * returns an object to be given to {@link componentDidUpdate}. Useful for saving
         * things such as scroll position before {@link Component.render render} causes changes to it.
         *
         * Note: the presence of this method prevents any of the deprecated
         * lifecycle events from running.
         */
        getSnapshotBeforeUpdate?(prevProps: Readonly<P>, prevState: Readonly<S>): SS | null;
        /**
         * Called immediately after updating occurs. Not called for the initial render.
         *
         * The snapshot is only present if {@link getSnapshotBeforeUpdate} is present and returns non-null.
         */
        componentDidUpdate?(prevProps: Readonly<P>, prevState: Readonly<S>, snapshot?: SS): void;
    }

    interface DeprecatedLifecycle<P, S> {
        /**
         * Called immediately before mounting occurs, and before {@link Component.render}.
         * Avoid introducing any side-effects or subscriptions in this method.
         *
         * Note: the presence of {@link NewLifecycle.getSnapshotBeforeUpdate getSnapshotBeforeUpdate}
         * or {@link StaticLifecycle.getDerivedStateFromProps getDerivedStateFromProps} prevents
         * this from being invoked.
         *
         * @deprecated 16.3, use {@link ComponentLifecycle.componentDidMount componentDidMount} or the constructor instead; will stop working in React 17
         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state}
         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path}
         */
        componentWillMount?(): void;
        /**
         * Called immediately before mounting occurs, and before {@link Component.render}.
         * Avoid introducing any side-effects or subscriptions in this method.
         *
         * This method will not stop working in React 17.
         *
         * Note: the presence of {@link NewLifecycle.getSnapshotBeforeUpdate getSnapshotBeforeUpdate}
         * or {@link StaticLifecycle.getDerivedStateFromProps getDerivedStateFromProps} prevents
         * this from being invoked.
         *
         * @deprecated 16.3, use {@link ComponentLifecycle.componentDidMount componentDidMount} or the constructor instead
         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state}
         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path}
         */
        UNSAFE_componentWillMount?(): void;
        /**
         * Called when the component may be receiving new props.
         * React may call this even if props have not changed, so be sure to compare new and existing
         * props if you only want to handle changes.
         *
         * Calling {@link Component.setState} generally does not trigger this method.
         *
         * Note: the presence of {@link NewLifecycle.getSnapshotBeforeUpdate getSnapshotBeforeUpdate}
         * or {@link StaticLifecycle.getDerivedStateFromProps getDerivedStateFromProps} prevents
         * this from being invoked.
         *
         * @deprecated 16.3, use static {@link StaticLifecycle.getDerivedStateFromProps getDerivedStateFromProps} instead; will stop working in React 17
         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props}
         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path}
         */
        componentWillReceiveProps?(nextProps: Readonly<P>, nextContext: any): void;
        /**
         * Called when the component may be receiving new props.
         * React may call this even if props have not changed, so be sure to compare new and existing
         * props if you only want to handle changes.
         *
         * Calling {@link Component.setState} generally does not trigger this method.
         *
         * This method will not stop working in React 17.
         *
         * Note: the presence of {@link NewLifecycle.getSnapshotBeforeUpdate getSnapshotBeforeUpdate}
         * or {@link StaticLifecycle.getDerivedStateFromProps getDerivedStateFromProps} prevents
         * this from being invoked.
         *
         * @deprecated 16.3, use static {@link StaticLifecycle.getDerivedStateFromProps getDerivedStateFromProps} instead
         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props}
         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path}
         */
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<P>, nextContext: any): void;
        /**
         * Called immediately before rendering when new props or state is received. Not called for the initial render.
         *
         * Note: You cannot call {@link Component.setState} here.
         *
         * Note: the presence of {@link NewLifecycle.getSnapshotBeforeUpdate getSnapshotBeforeUpdate}
         * or {@link StaticLifecycle.getDerivedStateFromProps getDerivedStateFromProps} prevents
         * this from being invoked.
         *
         * @deprecated 16.3, use getSnapshotBeforeUpdate instead; will stop working in React 17
         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update}
         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path}
         */
        componentWillUpdate?(nextProps: Readonly<P>, nextState: Readonly<S>, nextContext: any): void;
        /**
         * Called immediately before rendering when new props or state is received. Not called for the initial render.
         *
         * Note: You cannot call {@link Component.setState} here.
         *
         * This method will not stop working in React 17.
         *
         * Note: the presence of {@link NewLifecycle.getSnapshotBeforeUpdate getSnapshotBeforeUpdate}
         * or {@link StaticLifecycle.getDerivedStateFromProps getDerivedStateFromProps} prevents
         * this from being invoked.
         *
         * @deprecated 16.3, use getSnapshotBeforeUpdate instead
         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update}
         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path}
         */
        UNSAFE_componentWillUpdate?(nextProps: Readonly<P>, nextState: Readonly<S>, nextContext: any): void;
    }

    /**
     * @deprecated
     *
     * @see {@link https://legacy.reactjs.org/blog/2016/07/13/mixins-considered-harmful.html Mixins Considered Harmful}
     */
    interface Mixin<P, S> extends ComponentLifecycle<P, S> {
        mixins?: Array<Mixin<P, S>> | undefined;
        statics?: {
            [key: string]: any;
        } | undefined;

        displayName?: string | undefined;
        propTypes?: ValidationMap<any> | undefined;
        contextTypes?: ValidationMap<any> | undefined;
        childContextTypes?: ValidationMap<any> | undefined;

        getDefaultProps?(): P;
        getInitialState?(): S;
    }

    /**
     * @deprecated
     *
     * @see {@link https://legacy.reactjs.org/blog/2016/07/13/mixins-considered-harmful.html Mixins Considered Harmful}
     */
    interface ComponentSpec<P, S> extends Mixin<P, S> {
        render(): ReactNode;

        [propertyName: string]: any;
    }

    function createRef<T>(): RefObject<T>;

    /**
     * The type of the component returned from {@link forwardRef}.
     *
     * @template P The props the component accepts, if any.
     *
     * @see {@link ExoticComponent}
     */
    interface ForwardRefExoticComponent<P> extends NamedExoticComponent<P> {
        /**
         * @deprecated Use {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#default_value|default values for destructuring assignments instead}.
         */
        defaultProps?: Partial<P> | undefined;
        propTypes?: WeakValidationMap<P> | undefined;
    }

    /**
     * Lets your component expose a DOM node to a parent component
     * using a ref.
     *
     * @see {@link https://react.dev/reference/react/forwardRef React Docs}
     * @see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/forward_and_create_ref/ React TypeScript Cheatsheet}
     *
     * @param render See the {@link ForwardRefRenderFunction}.
     *
     * @template T The type of the DOM node.
     * @template P The props the component accepts, if any.
     *
     * @example
     *
     * ```tsx
     * interface Props {
     *   children?: ReactNode;
     *   type: "submit" | "button";
     * }
     *
     * export const FancyButton = forwardRef<HTMLButtonElement, Props>((props, ref) => (
     *   <button ref={ref} className="MyClassName" type={props.type}>
     *     {props.children}
     *   </button>
     * ));
     * ```
     */
    function forwardRef<T, P = {}>(
        render: ForwardRefRenderFunction<T, PropsWithoutRef<P>>,
    ): ForwardRefExoticComponent<PropsWithoutRef<P> & RefAttributes<T>>;

    /**
     * Omits the 'ref' attribute from the given props object.
     *
     * @template P The props object type.
     */
    type PropsWithoutRef<P> =
        // Omit would not be sufficient for this. We'd like to avoid unnecessary mapping and need a distributive conditional to support unions.
        // see: https://www.typescriptlang.org/docs/handbook/2/conditional-types.html#distributive-conditional-types
        // https://github.com/Microsoft/TypeScript/issues/28339
        P extends any ? ("ref" extends keyof P ? Omit<P, "ref"> : P) : P;
    /** Ensures that the props do not include string ref, which cannot be forwarded */
    type PropsWithRef<P> =
        // Note: String refs can be forwarded. We can't fix this bug without breaking a bunch of libraries now though.
        // Just "P extends { ref?: infer R }" looks sufficient, but R will infer as {} if P is {}.
        "ref" extends keyof P
            ? P extends { ref?: infer R | undefined }
                ? string extends R ? PropsWithoutRef<P> & { ref?: Exclude<R, string> | undefined }
                : P
            : P
            : P;

    type PropsWithChildren<P = unknown> = P & { children?: ReactNode | undefined };

    /**
     * Used to retrieve the props a component accepts. Can either be passed a string,
     * indicating a DOM element (e.g. 'div', 'span', etc.) or the type of a React
     * component.
     *
     * It's usually better to use {@link ComponentPropsWithRef} or {@link ComponentPropsWithoutRef}
     * instead of this type, as they let you be explicit about whether or not to include
     * the `ref` prop.
     *
     * @see {@link https://react-typescript-cheatsheet.netlify.app/docs/react-types/componentprops/ React TypeScript Cheatsheet}
     *
     * @example
     *
     * ```tsx
     * // Retrieves the props an 'input' element accepts
     * type InputProps = React.ComponentProps<'input'>;
     * ```
     *
     * @example
     *
     * ```tsx
     * const MyComponent = (props: { foo: number, bar: string }) => <div />;
     *
     * // Retrieves the props 'MyComponent' accepts
     * type MyComponentProps = React.ComponentProps<typeof MyComponent>;
     * ```
     */
    type ComponentProps<T extends keyof JSX.IntrinsicElements | JSXElementConstructor<any>> = T extends
        JSXElementConstructor<infer P> ? P
        : T extends keyof JSX.IntrinsicElements ? JSX.IntrinsicElements[T]
        : {};

    /**
     * Used to retrieve the props a component accepts with its ref. Can either be
     * passed a string, indicating a DOM element (e.g. 'div', 'span', etc.) or the
     * type of a React component.
     *
     * @see {@link https://react-typescript-cheatsheet.netlify.app/docs/react-types/componentprops/ React TypeScript Cheatsheet}
     *
     * @example
     *
     * ```tsx
     * // Retrieves the props an 'input' element accepts
     * type InputProps = React.ComponentPropsWithRef<'input'>;
     * ```
     *
     * @example
     *
     * ```tsx
     * const MyComponent = (props: { foo: number, bar: string }) => <div />;
     *
     * // Retrieves the props 'MyComponent' accepts
     * type MyComponentPropsWithRef = React.ComponentPropsWithRef<typeof MyComponent>;
     * ```
     */
    type ComponentPropsWithRef<T extends ElementType> = T extends (new(props: infer P) => Component<any, any>)
        ? PropsWithoutRef<P> & RefAttributes<InstanceType<T>>
        : PropsWithRef<ComponentProps<T>>;
    /**
     * Used to retrieve the props a custom component accepts with its ref.
     *
     * Unlike {@link ComponentPropsWithRef}, this only works with custom
     * components, i.e. components you define yourself. This is to improve
     * type-checking performance.
     *
     * @example
     *
     * ```tsx
     * const MyComponent = (props: { foo: number, bar: string }) => <div />;
     *
     * // Retrieves the props 'MyComponent' accepts
     * type MyComponentPropsWithRef = React.CustomComponentPropsWithRef<typeof MyComponent>;
     * ```
     */
    type CustomComponentPropsWithRef<T extends ComponentType> = T extends (new(props: infer P) => Component<any, any>)
        ? (PropsWithoutRef<P> & RefAttributes<InstanceType<T>>)
        : T extends ((props: infer P, legacyContext?: any) => ReactNode) ? PropsWithRef<P>
        : never;

    /**
     * Used to retrieve the props a component accepts without its ref. Can either be
     * passed a string, indicating a DOM element (e.g. 'div', 'span', etc.) or the
     * type of a React component.
     *
     * @see {@link https://react-typescript-cheatsheet.netlify.app/docs/react-types/componentprops/ React TypeScript Cheatsheet}
     *
     * @example
     *
     * ```tsx
     * // Retrieves the props an 'input' element accepts
     * type InputProps = React.ComponentPropsWithoutRef<'input'>;
     * ```
     *
     * @example
     *
     * ```tsx
     * const MyComponent = (props: { foo: number, bar: string }) => <div />;
     *
     * // Retrieves the props 'MyComponent' accepts
     * type MyComponentPropsWithoutRef = React.ComponentPropsWithoutRef<typeof MyComponent>;
     * ```
     */
    type ComponentPropsWithoutRef<T extends ElementType> = PropsWithoutRef<ComponentProps<T>>;

    type ComponentRef<T extends ElementType> = T extends NamedExoticComponent<
        ComponentPropsWithoutRef<T> & RefAttributes<infer Method>
    > ? Method
        : ComponentPropsWithRef<T> extends RefAttributes<infer Method> ? Method
        : never;

    // will show `Memo(${Component.displayName || Component.name})` in devtools by default,
    // but can be given its own specific name
    type MemoExoticComponent<T extends ComponentType<any>> = NamedExoticComponent<CustomComponentPropsWithRef<T>> & {
        readonly type: T;
    };

    /**
     * Lets you skip re-rendering a component when its props are unchanged.
     *
     * @see {@link https://react.dev/reference/react/memo React Docs}
     *
     * @param Component The component to memoize.
     * @param propsAreEqual A function that will be used to determine if the props have changed.
     *
     * @example
     *
     * ```tsx
     * import { memo } from 'react';
     *
     * const SomeComponent = memo(function SomeComponent(props: { foo: string }) {
     *   // ...
     * });
     * ```
     */
    function memo<P extends object>(
        Component: FunctionComponent<P>,
        propsAreEqual?: (prevProps: Readonly<P>, nextProps: Readonly<P>) => boolean,
    ): NamedExoticComponent<P>;
    function memo<T extends ComponentType<any>>(
        Component: T,
        propsAreEqual?: (prevProps: Readonly<ComponentProps<T>>, nextProps: Readonly<ComponentProps<T>>) => boolean,
    ): MemoExoticComponent<T>;

    interface LazyExoticComponent<T extends ComponentType<any>>
        extends ExoticComponent<CustomComponentPropsWithRef<T>>
    {
        readonly _result: T;
    }

    /**
     * Lets you defer loading a component’s code until it is rendered for the first time.
     *
     * @see {@link https://react.dev/reference/react/lazy React Docs}
     *
     * @param load A function that returns a `Promise` or another thenable (a `Promise`-like object with a
     * then method). React will not call `load` until the first time you attempt to render the returned
     * component. After React first calls load, it will wait for it to resolve, and then render the
     * resolved value’s `.default` as a React component. Both the returned `Promise` and the `Promise`’s
     * resolved value will be cached, so React will not call load more than once. If the `Promise` rejects,
     * React will throw the rejection reason for the nearest Error Boundary to handle.
     *
     * @example
     *
     * ```tsx
     * import { lazy } from 'react';
     *
     * const MarkdownPreview = lazy(() => import('./MarkdownPreview.js'));
     * ```
     */
    function lazy<T extends ComponentType<any>>(
        load: () => Promise<{ default: T }>,
    ): LazyExoticComponent<T>;

    //
    // React Hooks
    // ----------------------------------------------------------------------

    /**
     * The instruction passed to a {@link Dispatch} function in {@link useState}
     * to tell React what the next value of the {@link useState} should be.
     *
     * Often found wrapped in {@link Dispatch}.
     *
     * @template S The type of the state.
     *
     * @example
     *
     * ```tsx
     * // This return type correctly represents the type of
     * // `setCount` in the example below.
     * const useCustomState = (): Dispatch<SetStateAction<number>> => {
     *   const [count, setCount] = useState(0);
     *
     *   return setCount;
     * }
     * ```
     */
    type SetStateAction<S> = S | ((prevState: S) => S);

    /**
     * A function that can be used to update the state of a {@link useState}
     * or {@link useReducer} hook.
     */
    type Dispatch<A> = (value: A) => void;
    /**
     * A {@link Dispatch} function can sometimes be called without any arguments.
     */
    type DispatchWithoutAction = () => void;
    // Unlike redux, the actions _can_ be anything
    type Reducer<S, A> = (prevState: S, action: A) => S;
    // If useReducer accepts a reducer without action, dispatch may be called without any parameters.
    type ReducerWithoutAction<S> = (prevState: S) => S;
    // types used to try and prevent the compiler from reducing S
    // to a supertype common with the second argument to useReducer()
    type ReducerState<R extends Reducer<any, any>> = R extends Reducer<infer S, any> ? S : never;
    type ReducerAction<R extends Reducer<any, any>> = R extends Reducer<any, infer A> ? A : never;
    // The identity check is done with the SameValue algorithm (Object.is), which is stricter than ===
    type ReducerStateWithoutAction<R extends ReducerWithoutAction<any>> = R extends ReducerWithoutAction<infer S> ? S
        : never;
    type DependencyList = readonly unknown[];

    // NOTE: callbacks are _only_ allowed to return either void, or a destructor.
    type EffectCallback = () => void | Destructor;

    interface MutableRefObject<T> {
        current: T;
    }

    // This will technically work if you give a Consumer<T> or Provider<T> but it's deprecated and warns
    /**
     * Accepts a context object (the value returned from `React.createContext`) and returns the current
     * context value, as given by the nearest context provider for the given context.
     *
     * @version 16.8.0
     * @see {@link https://react.dev/reference/react/useContext}
     */
    function useContext<T>(context: Context<T> /*, (not public API) observedBits?: number|boolean */): T;
    /**
     * Returns a stateful value, and a function to update it.
     *
     * @version 16.8.0
     * @see {@link https://react.dev/reference/react/useState}
     */
    function useState<S>(initialState: S | (() => S)): [S, Dispatch<SetStateAction<S>>];
    // convenience overload when first argument is omitted
    /**
     * Returns a stateful value, and a function to update it.
     *
     * @version 16.8.0
     * @see {@link https://react.dev/reference/react/useState}
     */
    function useState<S = undefined>(): [S | undefined, Dispatch<SetStateAction<S | undefined>>];
    /**
     * An alternative to `useState`.
     *
     * `useReducer` is usually preferable to `useState` when you have complex state logic that involves
     * multiple sub-values. It also lets you optimize performance for components that trigger deep
     * updates because you can pass `dispatch` down instead of callbacks.
     *
     * @version 16.8.0
     * @see {@link https://react.dev/reference/react/useReducer}
     */
    // overload where dispatch could accept 0 arguments.
    function useReducer<R extends ReducerWithoutAction<any>, I>(
        reducer: R,
        initializerArg: I,
        initializer: (arg: I) => ReducerStateWithoutAction<R>,
    ): [ReducerStateWithoutAction<R>, DispatchWithoutAction];
    /**
     * An alternative to `useState`.
     *
     * `useReducer` is usually preferable to `useState` when you have complex state logic that involves
     * multiple sub-values. It also lets you optimize performance for components that trigger deep
     * updates because you can pass `dispatch` down instead of callbacks.
     *
     * @version 16.8.0
     * @see {@link https://react.dev/reference/react/useReducer}
     */
    // overload where dispatch could accept 0 arguments.
    function useReducer<R extends ReducerWithoutAction<any>>(
        reducer: R,
        initializerArg: ReducerStateWithoutAction<R>,
        initializer?: undefined,
    ): [ReducerStateWithoutAction<R>, DispatchWithoutAction];
    /**
     * An alternative to `useState`.
     *
     * `useReducer` is usually preferable to `useState` when you have complex state logic that involves
     * multiple sub-values. It also lets you optimize performance for components that trigger deep
     * updates because you can pass `dispatch` down instead of callbacks.
     *
     * @version 16.8.0
     * @see {@link https://react.dev/reference/react/useReducer}
     */
    // overload where "I" may be a subset of ReducerState<R>; used to provide autocompletion.
    // If "I" matches ReducerState<R> exactly then the last overload will allow initializer to be omitted.
    // the last overload effectively behaves as if the identity function (x => x) is the initializer.
    function useReducer<R extends Reducer<any, any>, I>(
        reducer: R,
        initializerArg: I & ReducerState<R>,
        initializer: (arg: I & ReducerState<R>) => ReducerState<R>,
    ): [ReducerState<R>, Dispatch<ReducerAction<R>>];
    /**
     * An alternative to `useState`.
     *
     * `useReducer` is usually preferable to `useState` when you have complex state logic that involves
     * multiple sub-values. It also lets you optimize performance for components that trigger deep
     * updates because you can pass `dispatch` down instead of callbacks.
     *
     * @version 16.8.0
     * @see {@link https://react.dev/reference/react/useReducer}
     */
    // overload for free "I"; all goes as long as initializer converts it into "ReducerState<R>".
    function useReducer<R extends Reducer<any, any>, I>(
        reducer: R,
        initializerArg: I,
        initializer: (arg: I) => ReducerState<R>,
    ): [ReducerState<R>, Dispatch<ReducerAction<R>>];
    /**
     * An alternative to `useState`.
     *
     * `useReducer` is usually preferable to `useState` when you have complex state logic that involves
     * multiple sub-values. It also lets you optimize performance for components that trigger deep
     * updates because you can pass `dispatch` down instead of callbacks.
     *
     * @version 16.8.0
     * @see {@link https://react.dev/reference/react/useReducer}
     */

    // I'm not sure if I keep this 2-ary or if I make it (2,3)-ary; it's currently (2,3)-ary.
    // The Flow types do have an overload for 3-ary invocation with undefined initializer.

    // NOTE: without the ReducerState indirection, TypeScript would reduce S to be the most common
    // supertype between the reducer's return type and the initialState (or the initializer's return type),
    // which would prevent autocompletion from ever working.

    // TODO: double-check if this weird overload logic is necessary. It is possible it's either a bug
    // in older versions, or a regression in newer versions of the typescript completion service.
    function useReducer<R extends Reducer<any, any>>(
        reducer: R,
        initialState: ReducerState<R>,
        initializer?: undefined,
    ): [ReducerState<R>, Dispatch<ReducerAction<R>>];
    /**
     * `useRef` returns a mutable ref object whose `.current` property is initialized to the passed argument
     * (`initialValue`). The returned object will persist for the full lifetime of the component.
     *
     * Note that `useRef()` is useful for more than the `ref` attribute. It’s handy for keeping any mutable
     * value around similar to how you’d use instance fields in classes.
     *
     * @version 16.8.0
     * @see {@link https://react.dev/reference/react/useRef}
     */
    function useRef<T>(initialValue: T): MutableRefObject<T>;
    // convenience overload for refs given as a ref prop as they typically start with a null value
    /**
     * `useRef` returns a mutable ref object whose `.current` property is initialized to the passed argument
     * (`initialValue`). The returned object will persist for the full lifetime of the component.
     *
     * Note that `useRef()` is useful for more than the `ref` attribute. It’s handy for keeping any mutable
     * value around similar to how you’d use instance fields in classes.
     *
     * Usage note: if you need the result of useRef to be directly mutable, include `| null` in the type
     * of the generic argument.
     *
     * @version 16.8.0
     * @see {@link https://react.dev/reference/react/useRef}
     */
    function useRef<T>(initialValue: T | null): RefObject<T>;
    // convenience overload for potentially undefined initialValue / call with 0 arguments
    // has a default to stop it from defaulting to {} instead
    /**
     * `useRef` returns a mutable ref object whose `.current` property is initialized to the passed argument
     * (`initialValue`). The returned object will persist for the full lifetime of the component.
     *
     * Note that `useRef()` is useful for more than the `ref` attribute. It’s handy for keeping any mutable
     * value around similar to how you’d use instance fields in classes.
     *
     * @version 16.8.0
     * @see {@link https://react.dev/reference/react/useRef}
     */
    function useRef<T = undefined>(initialValue?: undefined): MutableRefObject<T | undefined>;
    /**
     * The signature is identical to `useEffect`, but it fires synchronously after all DOM mutations.
     * Use this to read layout from the DOM and synchronously re-render. Updates scheduled inside
     * `useLayoutEffect` will be flushed synchronously, before the browser has a chance to paint.
     *
     * Prefer the standard `useEffect` when possible to avoid blocking visual updates.
     *
     * If you’re migrating code from a class component, `useLayoutEffect` fires in the same phase as
     * `componentDidMount` and `componentDidUpdate`.
     *
     * @version 16.8.0
     * @see {@link https://react.dev/reference/react/useLayoutEffect}
     */
    function useLayoutEffect(effect: EffectCallback, deps?: DependencyList): void;
    /**
     * Accepts a function that contains imperative, possibly effectful code.
     *
     * @param effect Imperative function that can return a cleanup function
     * @param deps If present, effect will only activate if the values in the list change.
     *
     * @version 16.8.0
     * @see {@link https://react.dev/reference/react/useEffect}
     */
    function useEffect(effect: EffectCallback, deps?: DependencyList): void;
    // NOTE: this does not accept strings, but this will have to be fixed by removing strings from type Ref<T>
    /**
     * `useImperativeHandle` customizes the instance value that is exposed to parent components when using
     * `ref`. As always, imperative code using refs should be avoided in most cases.
     *
     * `useImperativeHandle` should be used with `React.forwardRef`.
     *
     * @version 16.8.0
     * @see {@link https://react.dev/reference/react/useImperativeHandle}
     */
    function useImperativeHandle<T, R extends T>(ref: Ref<T> | undefined, init: () => R, deps?: DependencyList): void;
    // I made 'inputs' required here and in useMemo as there's no point to memoizing without the memoization key
    // useCallback(X) is identical to just using X, useMemo(() => Y) is identical to just using Y.
    /**
     * `useCallback` will return a memoized version of the callback that only changes if one of the `inputs`
     * has changed.
     *
     * @version 16.8.0
     * @see {@link https://react.dev/reference/react/useCallback}
     */
    // A specific function type would not trigger implicit any.
    // See https://github.com/DefinitelyTyped/DefinitelyTyped/issues/52873#issuecomment-845806435 for a comparison between `Function` and more specific types.
    // eslint-disable-next-line @typescript-eslint/no-unsafe-function-type
    function useCallback<T extends Function>(callback: T, deps: DependencyList): T;
    /**
     * `useMemo` will only recompute the memoized value when one of the `deps` has changed.
     *
     * @version 16.8.0
     * @see {@link https://react.dev/reference/react/useMemo}
     */
    // allow undefined, but don't make it optional as that is very likely a mistake
    function useMemo<T>(factory: () => T, deps: DependencyList): T;
    /**
     * `useDebugValue` can be used to display a label for custom hooks in React DevTools.
     *
     * NOTE: We don’t recommend adding debug values to every custom hook.
     * It’s most valuable for custom hooks that are part of shared libraries.
     *
     * @version 16.8.0
     * @see {@link https://react.dev/reference/react/useDebugValue}
     */
    // the name of the custom hook is itself derived from the function name at runtime:
    // it's just the function name without the "use" prefix.
    function useDebugValue<T>(value: T, format?: (value: T) => any): void;

    // must be synchronous
    export type TransitionFunction = () => VoidOrUndefinedOnly;
    // strange definition to allow vscode to show documentation on the invocation
    export interface TransitionStartFunction {
        /**
         * State updates caused inside the callback are allowed to be deferred.
         *
         * **If some state update causes a component to suspend, that state update should be wrapped in a transition.**
         *
         * @param callback A _synchronous_ function which causes state updates that can be deferred.
         */
        (callback: TransitionFunction): void;
    }

    /**
     * Returns a deferred version of the value that may “lag behind” it.
     *
     * This is commonly used to keep the interface responsive when you have something that renders immediately
     * based on user input and something that needs to wait for a data fetch.
     *
     * A good example of this is a text input.
     *
     * @param value The value that is going to be deferred
     *
     * @see {@link https://react.dev/reference/react/useDeferredValue}
     */
    export function useDeferredValue<T>(value: T): T;

    /**
     * Allows components to avoid undesirable loading states by waiting for content to load
     * before transitioning to the next screen. It also allows components to defer slower,
     * data fetching updates until subsequent renders so that more crucial updates can be
     * rendered immediately.
     *
     * The `useTransition` hook returns two values in an array.
     *
     * The first is a boolean, React’s way of informing us whether we’re waiting for the transition to finish.
     * The second is a function that takes a callback. We can use it to tell React which state we want to defer.
     *
     * **If some state update causes a component to suspend, that state update should be wrapped in a transition.**
     *
     * @see {@link https://react.dev/reference/react/useTransition}
     */
    export function useTransition(): [boolean, TransitionStartFunction];

    /**
     * Similar to `useTransition` but allows uses where hooks are not available.
     *
     * @param callback A _synchronous_ function which causes state updates that can be deferred.
     */
    export function startTransition(scope: TransitionFunction): void;

    /**
     * Wrap any code rendering and triggering updates to your components into `act()` calls.
     *
     * Ensures that the behavior in your tests matches what happens in the browser
     * more closely by executing pending `useEffect`s before returning. This also
     * reduces the amount of re-renders done.
     *
     * @param callback A synchronous, void callback that will execute as a single, complete React commit.
     *
     * @see https://reactjs.org/blog/2019/02/06/react-v16.8.0.html#testing-hooks
     */
    // While act does always return Thenable, if a void function is passed, we pretend the return value is also void to not trigger dangling Promise lint rules.
    export function act(callback: () => VoidOrUndefinedOnly): void;
    export function act<T>(callback: () => T | Promise<T>): Promise<T>;

    export function useId(): string;

    /**
     * @param effect Imperative function that can return a cleanup function
     * @param deps If present, effect will only activate if the values in the list change.
     *
     * @see {@link https://github.com/facebook/react/pull/21913}
     */
    export function useInsertionEffect(effect: EffectCallback, deps?: DependencyList): void;

    /**
     * @param subscribe
     * @param getSnapshot
     *
     * @see {@link https://github.com/reactwg/react-18/discussions/86}
     */
    // keep in sync with `useSyncExternalStore` from `use-sync-external-store`
    export function useSyncExternalStore<Snapshot>(
        subscribe: (onStoreChange: () => void) => () => void,
        getSnapshot: () => Snapshot,
        getServerSnapshot?: () => Snapshot,
    ): Snapshot;

    //
    // Event System
    // ----------------------------------------------------------------------
    // TODO: change any to unknown when moving to TS v3
    interface BaseSyntheticEvent<E = object, C = any, T = any> {
        nativeEvent: E;
        currentTarget: C;
        target: T;
        bubbles: boolean;
        cancelable: boolean;
        defaultPrevented: boolean;
        eventPhase: number;
        isTrusted: boolean;
        preventDefault(): void;
        isDefaultPrevented(): boolean;
        stopPropagation(): void;
        isPropagationStopped(): boolean;
        persist(): void;
        timeStamp: number;
        type: string;
    }

    /**
     * currentTarget - a reference to the element on which the event listener is registered.
     *
     * target - a reference to the element from which the event was originally dispatched.
     * This might be a child element to the element on which the event listener is registered.
     * If you thought this should be `EventTarget & T`, see https://github.com/DefinitelyTyped/DefinitelyTyped/issues/11508#issuecomment-256045682
     */
    interface SyntheticEvent<T = Element, E = Event> extends BaseSyntheticEvent<E, EventTarget & T, EventTarget> {}

    interface ClipboardEvent<T = Element> extends SyntheticEvent<T, NativeClipboardEvent> {
        clipboardData: DataTransfer;
    }

    interface CompositionEvent<T = Element> extends SyntheticEvent<T, NativeCompositionEvent> {
        data: string;
    }

    interface DragEvent<T = Element> extends MouseEvent<T, NativeDragEvent> {
        dataTransfer: DataTransfer;
    }

    interface PointerEvent<T = Element> extends MouseEvent<T, NativePointerEvent> {
        pointerId: number;
        pressure: number;
        tangentialPressure: number;
        tiltX: number;
        tiltY: number;
        twist: number;
        width: number;
        height: number;
        pointerType: "mouse" | "pen" | "touch";
        isPrimary: boolean;
    }

    interface FocusEvent<Target = Element, RelatedTarget = Element> extends SyntheticEvent<Target, NativeFocusEvent> {
        relatedTarget: (EventTarget & RelatedTarget) | null;
        target: EventTarget & Target;
    }

    interface FormEvent<T = Element> extends SyntheticEvent<T> {
    }

    interface InvalidEvent<T = Element> extends SyntheticEvent<T> {
        target: EventTarget & T;
    }

    interface ChangeEvent<T = Element> extends SyntheticEvent<T> {
        target: EventTarget & T;
    }

    export type ModifierKey =
        | "Alt"
        | "AltGraph"
        | "CapsLock"
        | "Control"
        | "Fn"
        | "FnLock"
        | "Hyper"
        | "Meta"
        | "NumLock"
        | "ScrollLock"
        | "Shift"
        | "Super"
        | "Symbol"
        | "SymbolLock";

    interface KeyboardEvent<T = Element> extends UIEvent<T, NativeKeyboardEvent> {
        altKey: boolean;
        /** @deprecated */
        charCode: number;
        ctrlKey: boolean;
        code: string;
        /**
         * See [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#keys-modifier). for a list of valid (case-sensitive) arguments to this method.
         */
        getModifierState(key: ModifierKey): boolean;
        /**
         * See the [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#named-key-attribute-values). for possible values
         */
        key: string;
        /** @deprecated */
        keyCode: number;
        locale: string;
        location: number;
        metaKey: boolean;
        repeat: boolean;
        shiftKey: boolean;
        /** @deprecated */
        which: number;
    }

    interface MouseEvent<T = Element, E = NativeMouseEvent> extends UIEvent<T, E> {
        altKey: boolean;
        button: number;
        buttons: number;
        clientX: number;
        clientY: number;
        ctrlKey: boolean;
        /**
         * See [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#keys-modifier). for a list of valid (case-sensitive) arguments to this method.
         */
        getModifierState(key: ModifierKey): boolean;
        metaKey: boolean;
        movementX: number;
        movementY: number;
        pageX: number;
        pageY: number;
        relatedTarget: EventTarget | null;
        screenX: number;
        screenY: number;
        shiftKey: boolean;
    }

    interface TouchEvent<T = Element> extends UIEvent<T, NativeTouchEvent> {
        altKey: boolean;
        changedTouches: TouchList;
        ctrlKey: boolean;
        /**
         * See [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#keys-modifier). for a list of valid (case-sensitive) arguments to this method.
         */
        getModifierState(key: ModifierKey): boolean;
        metaKey: boolean;
        shiftKey: boolean;
        targetTouches: TouchList;
        touches: TouchList;
    }

    interface UIEvent<T = Element, E = NativeUIEvent> extends SyntheticEvent<T, E> {
        detail: number;
        view: AbstractView;
    }

    interface WheelEvent<T = Element> extends MouseEvent<T, NativeWheelEvent> {
        deltaMode: number;
        deltaX: number;
        deltaY: number;
        deltaZ: number;
    }

    interface AnimationEvent<T = Element> extends SyntheticEvent<T, NativeAnimationEvent> {
        animationName: string;
        elapsedTime: number;
        pseudoElement: string;
    }

    interface TransitionEvent<T = Element> extends SyntheticEvent<T, NativeTransitionEvent> {
        elapsedTime: number;
        propertyName: string;
        pseudoElement: string;
    }

    //
    // Event Handler Types
    // ----------------------------------------------------------------------

    type EventHandler<E extends SyntheticEvent<any>> = { bivarianceHack(event: E): void }["bivarianceHack"];

    type ReactEventHandler<T = Element> = EventHandler<SyntheticEvent<T>>;

    type ClipboardEventHandler<T = Element> = EventHandler<ClipboardEvent<T>>;
    type CompositionEventHandler<T = Element> = EventHandler<CompositionEvent<T>>;
    type DragEventHandler<T = Element> = EventHandler<DragEvent<T>>;
    type FocusEventHandler<T = Element> = EventHandler<FocusEvent<T>>;
    type FormEventHandler<T = Element> = EventHandler<FormEvent<T>>;
    type ChangeEventHandler<T = Element> = EventHandler<ChangeEvent<T>>;
    type KeyboardEventHandler<T = Element> = EventHandler<KeyboardEvent<T>>;
    type MouseEventHandler<T = Element> = EventHandler<MouseEvent<T>>;
    type TouchEventHandler<T = Element> = EventHandler<TouchEvent<T>>;
    type PointerEventHandler<T = Element> = EventHandler<PointerEvent<T>>;
    type UIEventHandler<T = Element> = EventHandler<UIEvent<T>>;
    type WheelEventHandler<T = Element> = EventHandler<WheelEvent<T>>;
    type AnimationEventHandler<T = Element> = EventHandler<AnimationEvent<T>>;
    type TransitionEventHandler<T = Element> = EventHandler<TransitionEvent<T>>;

    //
    // Props / DOM Attributes
    // ----------------------------------------------------------------------

    interface HTMLProps<T> extends AllHTMLAttributes<T>, ClassAttributes<T> {
    }

    type DetailedHTMLProps<E extends HTMLAttributes<T>, T> = ClassAttributes<T> & E;

    interface SVGProps<T> extends SVGAttributes<T>, ClassAttributes<T> {
    }

    interface SVGLineElementAttributes<T> extends SVGProps<T> {}
    interface SVGTextElementAttributes<T> extends SVGProps<T> {}

    interface DOMAttributes<T> {
        children?: ReactNode | undefined;
        dangerouslySetInnerHTML?: {
            // Should be InnerHTML['innerHTML'].
            // But unfortunately we're mixing renderer-specific type declarations.
            __html: string | TrustedHTML;
        } | undefined;

        // Clipboard Events
        onCopy?: ClipboardEventHandler<T> | undefined;
        onCopyCapture?: ClipboardEventHandler<T> | undefined;
        onCut?: ClipboardEventHandler<T> | undefined;
        onCutCapture?: ClipboardEventHandler<T> | undefined;
        onPaste?: ClipboardEventHandler<T> | undefined;
        onPasteCapture?: ClipboardEventHandler<T> | undefined;

        // Composition Events
        onCompositionEnd?: CompositionEventHandler<T> | undefined;
        onCompositionEndCapture?: CompositionEventHandler<T> | undefined;
        onCompositionStart?: CompositionEventHandler<T> | undefined;
        onCompositionStartCapture?: CompositionEventHandler<T> | undefined;
        onCompositionUpdate?: CompositionEventHandler<T> | undefined;
        onCompositionUpdateCapture?: CompositionEventHandler<T> | undefined;

        // Focus Events
        onFocus?: FocusEventHandler<T> | undefined;
        onFocusCapture?: FocusEventHandler<T> | undefined;
        onBlur?: FocusEventHandler<T> | undefined;
        onBlurCapture?: FocusEventHandler<T> | undefined;

        // Form Events
        onChange?: FormEventHandler<T> | undefined;
        onChangeCapture?: FormEventHandler<T> | undefined;
        onBeforeInput?: FormEventHandler<T> | undefined;
        onBeforeInputCapture?: FormEventHandler<T> | undefined;
        onInput?: FormEventHandler<T> | undefined;
        onInputCapture?: FormEventHandler<T> | undefined;
        onReset?: FormEventHandler<T> | undefined;
        onResetCapture?: FormEventHandler<T> | undefined;
        onSubmit?: FormEventHandler<T> | undefined;
        onSubmitCapture?: FormEventHandler<T> | undefined;
        onInvalid?: FormEventHandler<T> | undefined;
        onInvalidCapture?: FormEventHandler<T> | undefined;

        // Image Events
        onLoad?: ReactEventHandler<T> | undefined;
        onLoadCapture?: ReactEventHandler<T> | undefined;
        onError?: ReactEventHandler<T> | undefined; // also a Media Event
        onErrorCapture?: ReactEventHandler<T> | undefined; // also a Media Event

        // Keyboard Events
        onKeyDown?: KeyboardEventHandler<T> | undefined;
        onKeyDownCapture?: KeyboardEventHandler<T> | undefined;
        /** @deprecated Use `onKeyUp` or `onKeyDown` instead */
        onKeyPress?: KeyboardEventHandler<T> | undefined;
        /** @deprecated Use `onKeyUpCapture` or `onKeyDownCapture` instead */
        onKeyPressCapture?: KeyboardEventHandler<T> | undefined;
        onKeyUp?: KeyboardEventHandler<T> | undefined;
        onKeyUpCapture?: KeyboardEventHandler<T> | undefined;

        // Media Events
        onAbort?: ReactEventHandler<T> | undefined;
        onAbortCapture?: ReactEventHandler<T> | undefined;
        onCanPlay?: ReactEventHandler<T> | undefined;
        onCanPlayCapture?: ReactEventHandler<T> | undefined;
        onCanPlayThrough?: ReactEventHandler<T> | undefined;
        onCanPlayThroughCapture?: ReactEventHandler<T> | undefined;
        onDurationChange?: ReactEventHandler<T> | undefined;
        onDurationChangeCapture?: ReactEventHandler<T> | undefined;
        onEmptied?: ReactEventHandler<T> | undefined;
        onEmptiedCapture?: ReactEventHandler<T> | undefined;
        onEncrypted?: ReactEventHandler<T> | undefined;
        onEncryptedCapture?: ReactEventHandler<T> | undefined;
        onEnded?: ReactEventHandler<T> | undefined;
        onEndedCapture?: ReactEventHandler<T> | undefined;
        onLoadedData?: ReactEventHandler<T> | undefined;
        onLoadedDataCapture?: ReactEventHandler<T> | undefined;
        onLoadedMetadata?: ReactEventHandler<T> | undefined;
        onLoadedMetadataCapture?: ReactEventHandler<T> | undefined;
        onLoadStart?: ReactEventHandler<T> | undefined;
        onLoadStartCapture?: ReactEventHandler<T> | undefined;
        onPause?: ReactEventHandler<T> | undefined;
        onPauseCapture?: ReactEventHandler<T> | undefined;
        onPlay?: ReactEventHandler<T> | undefined;
        onPlayCapture?: ReactEventHandler<T> | undefined;
        onPlaying?: ReactEventHandler<T> | undefined;
        onPlayingCapture?: ReactEventHandler<T> | undefined;
        onProgress?: ReactEventHandler<T> | undefined;
        onProgressCapture?: ReactEventHandler<T> | undefined;
        onRateChange?: ReactEventHandler<T> | undefined;
        onRateChangeCapture?: ReactEventHandler<T> | undefined;
        onResize?: ReactEventHandler<T> | undefined;
        onResizeCapture?: ReactEventHandler<T> | undefined;
        onSeeked?: ReactEventHandler<T> | undefined;
        onSeekedCapture?: ReactEventHandler<T> | undefined;
        onSeeking?: ReactEventHandler<T> | undefined;
        onSeekingCapture?: ReactEventHandler<T> | undefined;
        onStalled?: ReactEventHandler<T> | undefined;
        onStalledCapture?: ReactEventHandler<T> | undefined;
        onSuspend?: ReactEventHandler<T> | undefined;
        onSuspendCapture?: ReactEventHandler<T> | undefined;
        onTimeUpdate?: ReactEventHandler<T> | undefined;
        onTimeUpdateCapture?: ReactEventHandler<T> | undefined;
        onVolumeChange?: ReactEventHandler<T> | undefined;
        onVolumeChangeCapture?: ReactEventHandler<T> | undefined;
        onWaiting?: ReactEventHandler<T> | undefined;
        onWaitingCapture?: ReactEventHandler<T> | undefined;

        // MouseEvents
        onAuxClick?: MouseEventHandler<T> | undefined;
        onAuxClickCapture?: MouseEventHandler<T> | undefined;
        onClick?: MouseEventHandler<T> | undefined;
        onClickCapture?: MouseEventHandler<T> | undefined;
        onContextMenu?: MouseEventHandler<T> | undefined;
        onContextMenuCapture?: MouseEventHandler<T> | undefined;
        onDoubleClick?: MouseEventHandler<T> | undefined;
        onDoubleClickCapture?: MouseEventHandler<T> | undefined;
        onDrag?: DragEventHandler<T> | undefined;
        onDragCapture?: DragEventHandler<T> | undefined;
        onDragEnd?: DragEventHandler<T> | undefined;
        onDragEndCapture?: DragEventHandler<T> | undefined;
        onDragEnter?: DragEventHandler<T> | undefined;
        onDragEnterCapture?: DragEventHandler<T> | undefined;
        onDragExit?: DragEventHandler<T> | undefined;
        onDragExitCapture?: DragEventHandler<T> | undefined;
        onDragLeave?: DragEventHandler<T> | undefined;
        onDragLeaveCapture?: DragEventHandler<T> | undefined;
        onDragOver?: DragEventHandler<T> | undefined;
        onDragOverCapture?: DragEventHandler<T> | undefined;
        onDragStart?: DragEventHandler<T> | undefined;
        onDragStartCapture?: DragEventHandler<T> | undefined;
        onDrop?: DragEventHandler<T> | undefined;
        onDropCapture?: DragEventHandler<T> | undefined;
        onMouseDown?: MouseEventHandler<T> | undefined;
        onMouseDownCapture?: MouseEventHandler<T> | undefined;
        onMouseEnter?: MouseEventHandler<T> | undefined;
        onMouseLeave?: MouseEventHandler<T> | undefined;
        onMouseMove?: MouseEventHandler<T> | undefined;
        onMouseMoveCapture?: MouseEventHandler<T> | undefined;
        onMouseOut?: MouseEventHandler<T> | undefined;
        onMouseOutCapture?: MouseEventHandler<T> | undefined;
        onMouseOver?: MouseEventHandler<T> | undefined;
        onMouseOverCapture?: MouseEventHandler<T> | undefined;
        onMouseUp?: MouseEventHandler<T> | undefined;
        onMouseUpCapture?: MouseEventHandler<T> | undefined;

        // Selection Events
        onSelect?: ReactEventHandler<T> | undefined;
        onSelectCapture?: ReactEventHandler<T> | undefined;

        // Touch Events
        onTouchCancel?: TouchEventHandler<T> | undefined;
        onTouchCancelCapture?: TouchEventHandler<T> | undefined;
        onTouchEnd?: TouchEventHandler<T> | undefined;
        onTouchEndCapture?: TouchEventHandler<T> | undefined;
        onTouchMove?: TouchEventHandler<T> | undefined;
        onTouchMoveCapture?: TouchEventHandler<T> | undefined;
        onTouchStart?: TouchEventHandler<T> | undefined;
        onTouchStartCapture?: TouchEventHandler<T> | undefined;

        // Pointer Events
        onPointerDown?: PointerEventHandler<T> | undefined;
        onPointerDownCapture?: PointerEventHandler<T> | undefined;
        onPointerMove?: PointerEventHandler<T> | undefined;
        onPointerMoveCapture?: PointerEventHandler<T> | undefined;
        onPointerUp?: PointerEventHandler<T> | undefined;
        onPointerUpCapture?: PointerEventHandler<T> | undefined;
        onPointerCancel?: PointerEventHandler<T> | undefined;
        onPointerCancelCapture?: PointerEventHandler<T> | undefined;
        onPointerEnter?: PointerEventHandler<T> | undefined;
        onPointerLeave?: PointerEventHandler<T> | undefined;
        onPointerOver?: PointerEventHandler<T> | undefined;
        onPointerOverCapture?: PointerEventHandler<T> | undefined;
        onPointerOut?: PointerEventHandler<T> | undefined;
        onPointerOutCapture?: PointerEventHandler<T> | undefined;
        onGotPointerCapture?: PointerEventHandler<T> | undefined;
        onGotPointerCaptureCapture?: PointerEventHandler<T> | undefined;
        onLostPointerCapture?: PointerEventHandler<T> | undefined;
        onLostPointerCaptureCapture?: PointerEventHandler<T> | undefined;

        // UI Events
        onScroll?: UIEventHandler<T> | undefined;
        onScrollCapture?: UIEventHandler<T> | undefined;

        // Wheel Events
        onWheel?: WheelEventHandler<T> | undefined;
        onWheelCapture?: WheelEventHandler<T> | undefined;

        // Animation Events
        onAnimationStart?: AnimationEventHandler<T> | undefined;
        onAnimationStartCapture?: AnimationEventHandler<T> | undefined;
        onAnimationEnd?: AnimationEventHandler<T> | undefined;
        onAnimationEndCapture?: AnimationEventHandler<T> | undefined;
        onAnimationIteration?: AnimationEventHandler<T> | undefined;
        onAnimationIterationCapture?: AnimationEventHandler<T> | undefined;

        // Transition Events
        onTransitionEnd?: TransitionEventHandler<T> | undefined;
        onTransitionEndCapture?: TransitionEventHandler<T> | undefined;
    }

    export interface CSSProperties extends CSS.Properties<string | number> {
        /**
         * The index signature was removed to enable closed typing for style
         * using CSSType. You're able to use type assertion or module augmentation
         * to add properties or an index signature of your own.
         *
         * For examples and more information, visit:
         * https://github.com/frenic/csstype#what-should-i-do-when-i-get-type-errors
         */
    }

    // All the WAI-ARIA 1.1 attributes from https://www.w3.org/TR/wai-aria-1.1/
    interface AriaAttributes {
        /** Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application. */
        "aria-activedescendant"?: string | undefined;
        /** Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute. */
        "aria-atomic"?: Booleanish | undefined;
        /**
         * Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be
         * presented if they are made.
         */
        "aria-autocomplete"?: "none" | "inline" | "list" | "both" | undefined;
        /** Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user. */
        /**
         * Defines a string value that labels the current element, which is intended to be converted into Braille.
         * @see aria-label.
         */
        "aria-braillelabel"?: string | undefined;
        /**
         * Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille.
         * @see aria-roledescription.
         */
        "aria-brailleroledescription"?: string | undefined;
        "aria-busy"?: Booleanish | undefined;
        /**
         * Indicates the current "checked" state of checkboxes, radio buttons, and other widgets.
         * @see aria-pressed @see aria-selected.
         */
        "aria-checked"?: boolean | "false" | "mixed" | "true" | undefined;
        /**
         * Defines the total number of columns in a table, grid, or treegrid.
         * @see aria-colindex.
         */
        "aria-colcount"?: number | undefined;
        /**
         * Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.
         * @see aria-colcount @see aria-colspan.
         */
        "aria-colindex"?: number | undefined;
        /**
         * Defines a human readable text alternative of aria-colindex.
         * @see aria-rowindextext.
         */
        "aria-colindextext"?: string | undefined;
        /**
         * Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.
         * @see aria-colindex @see aria-rowspan.
         */
        "aria-colspan"?: number | undefined;
        /**
         * Identifies the element (or elements) whose contents or presence are controlled by the current element.
         * @see aria-owns.
         */
        "aria-controls"?: string | undefined;
        /** Indicates the element that represents the current item within a container or set of related elements. */
        "aria-current"?: boolean | "false" | "true" | "page" | "step" | "location" | "date" | "time" | undefined;
        /**
         * Identifies the element (or elements) that describes the object.
         * @see aria-labelledby
         */
        "aria-describedby"?: string | undefined;
        /**
         * Defines a string value that describes or annotates the current element.
         * @see related aria-describedby.
         */
        "aria-description"?: string | undefined;
        /**
         * Identifies the element that provides a detailed, extended description for the object.
         * @see aria-describedby.
         */
        "aria-details"?: string | undefined;
        /**
         * Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.
         * @see aria-hidden @see aria-readonly.
         */
        "aria-disabled"?: Booleanish | undefined;
        /**
         * Indicates what functions can be performed when a dragged object is released on the drop target.
         * @deprecated in ARIA 1.1
         */
        "aria-dropeffect"?: "none" | "copy" | "execute" | "link" | "move" | "popup" | undefined;
        /**
         * Identifies the element that provides an error message for the object.
         * @see aria-invalid @see aria-describedby.
         */
        "aria-errormessage"?: string | undefined;
        /** Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed. */
        "aria-expanded"?: Booleanish | undefined;
        /**
         * Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,
         * allows assistive technology to override the general default of reading in document source order.
         */
        "aria-flowto"?: string | undefined;
        /**
         * Indicates an element's "grabbed" state in a drag-and-drop operation.
         * @deprecated in ARIA 1.1
         */
        "aria-grabbed"?: Booleanish | undefined;
        /** Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element. */
        "aria-haspopup"?: boolean | "false" | "true" | "menu" | "listbox" | "tree" | "grid" | "dialog" | undefined;
        /**
         * Indicates whether the element is exposed to an accessibility API.
         * @see aria-disabled.
         */
        "aria-hidden"?: Booleanish | undefined;
        /**
         * Indicates the entered value does not conform to the format expected by the application.
         * @see aria-errormessage.
         */
        "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
        /** Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element. */
        "aria-keyshortcuts"?: string | undefined;
        /**
         * Defines a string value that labels the current element.
         * @see aria-labelledby.
         */
        "aria-label"?: string | undefined;
        /**
         * Identifies the element (or elements) that labels the current element.
         * @see aria-describedby.
         */
        "aria-labelledby"?: string | undefined;
        /** Defines the hierarchical level of an element within a structure. */
        "aria-level"?: number | undefined;
        /** Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region. */
        "aria-live"?: "off" | "assertive" | "polite" | undefined;
        /** Indicates whether an element is modal when displayed. */
        "aria-modal"?: Booleanish | undefined;
        /** Indicates whether a text box accepts multiple lines of input or only a single line. */
        "aria-multiline"?: Booleanish | undefined;
        /** Indicates that the user may select more than one item from the current selectable descendants. */
        "aria-multiselectable"?: Booleanish | undefined;
        /** Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous. */
        "aria-orientation"?: "horizontal" | "vertical" | undefined;
        /**
         * Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship
         * between DOM elements where the DOM hierarchy cannot be used to represent the relationship.
         * @see aria-controls.
         */
        "aria-owns"?: string | undefined;
        /**
         * Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.
         * A hint could be a sample value or a brief description of the expected format.
         */
        "aria-placeholder"?: string | undefined;
        /**
         * Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.
         * @see aria-setsize.
         */
        "aria-posinset"?: number | undefined;
        /**
         * Indicates the current "pressed" state of toggle buttons.
         * @see aria-checked @see aria-selected.
         */
        "aria-pressed"?: boolean | "false" | "mixed" | "true" | undefined;
        /**
         * Indicates that the element is not editable, but is otherwise operable.
         * @see aria-disabled.
         */
        "aria-readonly"?: Booleanish | undefined;
        /**
         * Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.
         * @see aria-atomic.
         */
        "aria-relevant"?:
            | "additions"
            | "additions removals"
            | "additions text"
            | "all"
            | "removals"
            | "removals additions"
            | "removals text"
            | "text"
            | "text additions"
            | "text removals"
            | undefined;
        /** Indicates that user input is required on the element before a form may be submitted. */
        "aria-required"?: Booleanish | undefined;
        /** Defines a human-readable, author-localized description for the role of an element. */
        "aria-roledescription"?: string | undefined;
        /**
         * Defines the total number of rows in a table, grid, or treegrid.
         * @see aria-rowindex.
         */
        "aria-rowcount"?: number | undefined;
        /**
         * Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.
         * @see aria-rowcount @see aria-rowspan.
         */
        "aria-rowindex"?: number | undefined;
        /**
         * Defines a human readable text alternative of aria-rowindex.
         * @see aria-colindextext.
         */
        "aria-rowindextext"?: string | undefined;
        /**
         * Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.
         * @see aria-rowindex @see aria-colspan.
         */
        "aria-rowspan"?: number | undefined;
        /**
         * Indicates the current "selected" state of various widgets.
         * @see aria-checked @see aria-pressed.
         */
        "aria-selected"?: Booleanish | undefined;
        /**
         * Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.
         * @see aria-posinset.
         */
        "aria-setsize"?: number | undefined;
        /** Indicates if items in a table or grid are sorted in ascending or descending order. */
        "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
        /** Defines the maximum allowed value for a range widget. */
        "aria-valuemax"?: number | undefined;
        /** Defines the minimum allowed value for a range widget. */
        "aria-valuemin"?: number | undefined;
        /**
         * Defines the current value for a range widget.
         * @see aria-valuetext.
         */
        "aria-valuenow"?: number | undefined;
        /** Defines the human readable text alternative of aria-valuenow for a range widget. */
        "aria-valuetext"?: string | undefined;
    }

    // All the WAI-ARIA 1.1 role attribute values from https://www.w3.org/TR/wai-aria-1.1/#role_definitions
    type AriaRole =
        | "alert"
        | "alertdialog"
        | "application"
        | "article"
        | "banner"
        | "button"
        | "cell"
        | "checkbox"
        | "columnheader"
        | "combobox"
        | "complementary"
        | "contentinfo"
        | "definition"
        | "dialog"
        | "directory"
        | "document"
        | "feed"
        | "figure"
        | "form"
        | "grid"
        | "gridcell"
        | "group"
        | "heading"
        | "img"
        | "link"
        | "list"
        | "listbox"
        | "listitem"
        | "log"
        | "main"
        | "marquee"
        | "math"
        | "menu"
        | "menubar"
        | "menuitem"
        | "menuitemcheckbox"
        | "menuitemradio"
        | "navigation"
        | "none"
        | "note"
        | "option"
        | "presentation"
        | "progressbar"
        | "radio"
        | "radiogroup"
        | "region"
        | "row"
        | "rowgroup"
        | "rowheader"
        | "scrollbar"
        | "search"
        | "searchbox"
        | "separator"
        | "slider"
        | "spinbutton"
        | "status"
        | "switch"
        | "tab"
        | "table"
        | "tablist"
        | "tabpanel"
        | "term"
        | "textbox"
        | "timer"
        | "toolbar"
        | "tooltip"
        | "tree"
        | "treegrid"
        | "treeitem"
        | (string & {});

    interface HTMLAttributes<T> extends AriaAttributes, DOMAttributes<T> {
        // React-specific Attributes
        defaultChecked?: boolean | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined;
        suppressHydrationWarning?: boolean | undefined;

        // Standard HTML Attributes
        accessKey?: string | undefined;
        autoCapitalize?: "off" | "none" | "on" | "sentences" | "words" | "characters" | undefined | (string & {});
        autoFocus?: boolean | undefined;
        className?: string | undefined;
        contentEditable?: Booleanish | "inherit" | "plaintext-only" | undefined;
        contextMenu?: string | undefined;
        dir?: string | undefined;
        draggable?: Booleanish | undefined;
        enterKeyHint?: "enter" | "done" | "go" | "next" | "previous" | "search" | "send" | undefined;
        hidden?: boolean | undefined;
        id?: string | undefined;
        lang?: string | undefined;
        nonce?: string | undefined;
        slot?: string | undefined;
        spellCheck?: Booleanish | undefined;
        style?: CSSProperties | undefined;
        tabIndex?: number | undefined;
        title?: string | undefined;
        translate?: "yes" | "no" | undefined;

        // Unknown
        radioGroup?: string | undefined; // <command>, <menuitem>

        // WAI-ARIA
        role?: AriaRole | undefined;

        // RDFa Attributes
        about?: string | undefined;
        content?: string | undefined;
        datatype?: string | undefined;
        inlist?: any;
        prefix?: string | undefined;
        property?: string | undefined;
        rel?: string | undefined;
        resource?: string | undefined;
        rev?: string | undefined;
        typeof?: string | undefined;
        vocab?: string | undefined;

        // Non-standard Attributes
        autoCorrect?: string | undefined;
        autoSave?: string | undefined;
        color?: string | undefined;
        itemProp?: string | undefined;
        itemScope?: boolean | undefined;
        itemType?: string | undefined;
        itemID?: string | undefined;
        itemRef?: string | undefined;
        results?: number | undefined;
        security?: string | undefined;
        unselectable?: "on" | "off" | undefined;

        // Living Standard
        /**
         * Hints at the type of data that might be entered by the user while editing the element or its contents
         * @see {@link https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute}
         */
        inputMode?: "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | "search" | undefined;
        /**
         * Specify that a standard HTML element should behave like a defined custom built-in element
         * @see {@link https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is}
         */
        is?: string | undefined;
    }

    /**
     * For internal usage only.
     * Different release channels declare additional types of ReactNode this particular release channel accepts.
     * App or library types should never augment this interface.
     */
    interface DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS {}

    interface AllHTMLAttributes<T> extends HTMLAttributes<T> {
        // Standard HTML Attributes
        accept?: string | undefined;
        acceptCharset?: string | undefined;
        action?:
            | string
            | undefined
            | DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS[
                keyof DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS
            ];
        allowFullScreen?: boolean | undefined;
        allowTransparency?: boolean | undefined;
        alt?: string | undefined;
        as?: string | undefined;
        async?: boolean | undefined;
        autoComplete?: string | undefined;
        autoPlay?: boolean | undefined;
        capture?: boolean | "user" | "environment" | undefined;
        cellPadding?: number | string | undefined;
        cellSpacing?: number | string | undefined;
        charSet?: string | undefined;
        challenge?: string | undefined;
        checked?: boolean | undefined;
        cite?: string | undefined;
        classID?: string | undefined;
        cols?: number | undefined;
        colSpan?: number | undefined;
        controls?: boolean | undefined;
        coords?: string | undefined;
        crossOrigin?: CrossOrigin;
        data?: string | undefined;
        dateTime?: string | undefined;
        default?: boolean | undefined;
        defer?: boolean | undefined;
        disabled?: boolean | undefined;
        download?: any;
        encType?: string | undefined;
        form?: string | undefined;
        formAction?:
            | string
            | undefined
            | DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS[
                keyof DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS
            ];
        formEncType?: string | undefined;
        formMethod?: string | undefined;
        formNoValidate?: boolean | undefined;
        formTarget?: string | undefined;
        frameBorder?: number | string | undefined;
        headers?: string | undefined;
        height?: number | string | undefined;
        high?: number | undefined;
        href?: string | undefined;
        hrefLang?: string | undefined;
        htmlFor?: string | undefined;
        httpEquiv?: string | undefined;
        integrity?: string | undefined;
        keyParams?: string | undefined;
        keyType?: string | undefined;
        kind?: string | undefined;
        label?: string | undefined;
        list?: string | undefined;
        loop?: boolean | undefined;
        low?: number | undefined;
        manifest?: string | undefined;
        marginHeight?: number | undefined;
        marginWidth?: number | undefined;
        max?: number | string | undefined;
        maxLength?: number | undefined;
        media?: string | undefined;
        mediaGroup?: string | undefined;
        method?: string | undefined;
        min?: number | string | undefined;
        minLength?: number | undefined;
        multiple?: boolean | undefined;
        muted?: boolean | undefined;
        name?: string | undefined;
        noValidate?: boolean | undefined;
        open?: boolean | undefined;
        optimum?: number | undefined;
        pattern?: string | undefined;
        placeholder?: string | undefined;
        playsInline?: boolean | undefined;
        poster?: string | undefined;
        preload?: string | undefined;
        readOnly?: boolean | undefined;
        required?: boolean | undefined;
        reversed?: boolean | undefined;
        rows?: number | undefined;
        rowSpan?: number | undefined;
        sandbox?: string | undefined;
        scope?: string | undefined;
        scoped?: boolean | undefined;
        scrolling?: string | undefined;
        seamless?: boolean | undefined;
        selected?: boolean | undefined;
        shape?: string | undefined;
        size?: number | undefined;
        sizes?: string | undefined;
        span?: number | undefined;
        src?: string | undefined;
        srcDoc?: string | undefined;
        srcLang?: string | undefined;
        srcSet?: string | undefined;
        start?: number | undefined;
        step?: number | string | undefined;
        summary?: string | undefined;
        target?: string | undefined;
        type?: string | undefined;
        useMap?: string | undefined;
        value?: string | readonly string[] | number | undefined;
        width?: number | string | undefined;
        wmode?: string | undefined;
        wrap?: string | undefined;
    }

    type HTMLAttributeReferrerPolicy =
        | ""
        | "no-referrer"
        | "no-referrer-when-downgrade"
        | "origin"
        | "origin-when-cross-origin"
        | "same-origin"
        | "strict-origin"
        | "strict-origin-when-cross-origin"
        | "unsafe-url";

    type HTMLAttributeAnchorTarget =
        | "_self"
        | "_blank"
        | "_parent"
        | "_top"
        | (string & {});

    interface AnchorHTMLAttributes<T> extends HTMLAttributes<T> {
        download?: any;
        href?: string | undefined;
        hrefLang?: string | undefined;
        media?: string | undefined;
        ping?: string | undefined;
        target?: HTMLAttributeAnchorTarget | undefined;
        type?: string | undefined;
        referrerPolicy?: HTMLAttributeReferrerPolicy | undefined;
    }

    interface AudioHTMLAttributes<T> extends MediaHTMLAttributes<T> {}

    interface AreaHTMLAttributes<T> extends HTMLAttributes<T> {
        alt?: string | undefined;
        coords?: string | undefined;
        download?: any;
        href?: string | undefined;
        hrefLang?: string | undefined;
        media?: string | undefined;
        referrerPolicy?: HTMLAttributeReferrerPolicy | undefined;
        shape?: string | undefined;
        target?: string | undefined;
    }

    interface BaseHTMLAttributes<T> extends HTMLAttributes<T> {
        href?: string | undefined;
        target?: string | undefined;
    }

    interface BlockquoteHTMLAttributes<T> extends HTMLAttributes<T> {
        cite?: string | undefined;
    }

    interface ButtonHTMLAttributes<T> extends HTMLAttributes<T> {
        disabled?: boolean | undefined;
        form?: string | undefined;
        formAction?:
            | string
            | DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS[
                keyof DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS
            ]
            | undefined;
        formEncType?: string | undefined;
        formMethod?: string | undefined;
        formNoValidate?: boolean | undefined;
        formTarget?: string | undefined;
        name?: string | undefined;
        type?: "submit" | "reset" | "button" | undefined;
        value?: string | readonly string[] | number | undefined;
    }

    interface CanvasHTMLAttributes<T> extends HTMLAttributes<T> {
        height?: number | string | undefined;
        width?: number | string | undefined;
    }

    interface ColHTMLAttributes<T> extends HTMLAttributes<T> {
        span?: number | undefined;
        width?: number | string | undefined;
    }

    interface ColgroupHTMLAttributes<T> extends HTMLAttributes<T> {
        span?: number | undefined;
    }

    interface DataHTMLAttributes<T> extends HTMLAttributes<T> {
        value?: string | readonly string[] | number | undefined;
    }

    interface DetailsHTMLAttributes<T> extends HTMLAttributes<T> {
        open?: boolean | undefined;
        onToggle?: ReactEventHandler<T> | undefined;
        name?: string | undefined;
    }

    interface DelHTMLAttributes<T> extends HTMLAttributes<T> {
        cite?: string | undefined;
        dateTime?: string | undefined;
    }

    interface DialogHTMLAttributes<T> extends HTMLAttributes<T> {
        onCancel?: ReactEventHandler<T> | undefined;
        onClose?: ReactEventHandler<T> | undefined;
        open?: boolean | undefined;
    }

    interface EmbedHTMLAttributes<T> extends HTMLAttributes<T> {
        height?: number | string | undefined;
        src?: string | undefined;
        type?: string | undefined;
        width?: number | string | undefined;
    }

    interface FieldsetHTMLAttributes<T> extends HTMLAttributes<T> {
        disabled?: boolean | undefined;
        form?: string | undefined;
        name?: string | undefined;
    }

    interface FormHTMLAttributes<T> extends HTMLAttributes<T> {
        acceptCharset?: string | undefined;
        action?:
            | string
            | undefined
            | DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS[
                keyof DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS
            ];
        autoComplete?: string | undefined;
        encType?: string | undefined;
        method?: string | undefined;
        name?: string | undefined;
        noValidate?: boolean | undefined;
        target?: string | undefined;
    }

    interface HtmlHTMLAttributes<T> extends HTMLAttributes<T> {
        manifest?: string | undefined;
    }

    interface IframeHTMLAttributes<T> extends HTMLAttributes<T> {
        allow?: string | undefined;
        allowFullScreen?: boolean | undefined;
        allowTransparency?: boolean | undefined;
        /** @deprecated */
        frameBorder?: number | string | undefined;
        height?: number | string | undefined;
        loading?: "eager" | "lazy" | undefined;
        /** @deprecated */
        marginHeight?: number | undefined;
        /** @deprecated */
        marginWidth?: number | undefined;
        name?: string | undefined;
        referrerPolicy?: HTMLAttributeReferrerPolicy | undefined;
        sandbox?: string | undefined;
        /** @deprecated */
        scrolling?: string | undefined;
        seamless?: boolean | undefined;
        src?: string | undefined;
        srcDoc?: string | undefined;
        width?: number | string | undefined;
    }

    interface ImgHTMLAttributes<T> extends HTMLAttributes<T> {
        alt?: string | undefined;
        crossOrigin?: CrossOrigin;
        decoding?: "async" | "auto" | "sync" | undefined;
        fetchPriority?: "high" | "low" | "auto";
        height?: number | string | undefined;
        loading?: "eager" | "lazy" | undefined;
        referrerPolicy?: HTMLAttributeReferrerPolicy | undefined;
        sizes?: string | undefined;
        src?: string | undefined;
        srcSet?: string | undefined;
        useMap?: string | undefined;
        width?: number | string | undefined;
    }

    interface InsHTMLAttributes<T> extends HTMLAttributes<T> {
        cite?: string | undefined;
        dateTime?: string | undefined;
    }

    type HTMLInputTypeAttribute =
        | "button"
        | "checkbox"
        | "color"
        | "date"
        | "datetime-local"
        | "email"
        | "file"
        | "hidden"
        | "image"
        | "month"
        | "number"
        | "password"
        | "radio"
        | "range"
        | "reset"
        | "search"
        | "submit"
        | "tel"
        | "text"
        | "time"
        | "url"
        | "week"
        | (string & {});

    type AutoFillAddressKind = "billing" | "shipping";
    type AutoFillBase = "" | "off" | "on";
    type AutoFillContactField =
        | "email"
        | "tel"
        | "tel-area-code"
        | "tel-country-code"
        | "tel-extension"
        | "tel-local"
        | "tel-local-prefix"
        | "tel-local-suffix"
        | "tel-national";
    type AutoFillContactKind = "home" | "mobile" | "work";
    type AutoFillCredentialField = "webauthn";
    type AutoFillNormalField =
        | "additional-name"
        | "address-level1"
        | "address-level2"
        | "address-level3"
        | "address-level4"
        | "address-line1"
        | "address-line2"
        | "address-line3"
        | "bday-day"
        | "bday-month"
        | "bday-year"
        | "cc-csc"
        | "cc-exp"
        | "cc-exp-month"
        | "cc-exp-year"
        | "cc-family-name"
        | "cc-given-name"
        | "cc-name"
        | "cc-number"
        | "cc-type"
        | "country"
        | "country-name"
        | "current-password"
        | "family-name"
        | "given-name"
        | "honorific-prefix"
        | "honorific-suffix"
        | "name"
        | "new-password"
        | "one-time-code"
        | "organization"
        | "postal-code"
        | "street-address"
        | "transaction-amount"
        | "transaction-currency"
        | "username";
    type OptionalPrefixToken<T extends string> = `${T} ` | "";
    type OptionalPostfixToken<T extends string> = ` ${T}` | "";
    type AutoFillField = AutoFillNormalField | `${OptionalPrefixToken<AutoFillContactKind>}${AutoFillContactField}`;
    type AutoFillSection = `section-${string}`;
    type AutoFill =
        | AutoFillBase
        | `${OptionalPrefixToken<AutoFillSection>}${OptionalPrefixToken<
            AutoFillAddressKind
        >}${AutoFillField}${OptionalPostfixToken<AutoFillCredentialField>}`;
    type HTMLInputAutoCompleteAttribute = AutoFill | (string & {});

    interface InputHTMLAttributes<T> extends HTMLAttributes<T> {
        accept?: string | undefined;
        alt?: string | undefined;
        autoComplete?: HTMLInputAutoCompleteAttribute | undefined;
        capture?: boolean | "user" | "environment" | undefined; // https://www.w3.org/TR/html-media-capture/#the-capture-attribute
        checked?: boolean | undefined;
        disabled?: boolean | undefined;
        form?: string | undefined;
        formAction?:
            | string
            | DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS[
                keyof DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS
            ]
            | undefined;
        formEncType?: string | undefined;
        formMethod?: string | undefined;
        formNoValidate?: boolean | undefined;
        formTarget?: string | undefined;
        height?: number | string | undefined;
        list?: string | undefined;
        max?: number | string | undefined;
        maxLength?: number | undefined;
        min?: number | string | undefined;
        minLength?: number | undefined;
        multiple?: boolean | undefined;
        name?: string | undefined;
        pattern?: string | undefined;
        placeholder?: string | undefined;
        readOnly?: boolean | undefined;
        required?: boolean | undefined;
        size?: number | undefined;
        src?: string | undefined;
        step?: number | string | undefined;
        type?: HTMLInputTypeAttribute | undefined;
        value?: string | readonly string[] | number | undefined;
        width?: number | string | undefined;

        onChange?: ChangeEventHandler<T> | undefined;
    }

    interface KeygenHTMLAttributes<T> extends HTMLAttributes<T> {
        challenge?: string | undefined;
        disabled?: boolean | undefined;
        form?: string | undefined;
        keyType?: string | undefined;
        keyParams?: string | undefined;
        name?: string | undefined;
    }

    interface LabelHTMLAttributes<T> extends HTMLAttributes<T> {
        form?: string | undefined;
        htmlFor?: string | undefined;
    }

    interface LiHTMLAttributes<T> extends HTMLAttributes<T> {
        value?: string | readonly string[] | number | undefined;
    }

    interface LinkHTMLAttributes<T> extends HTMLAttributes<T> {
        as?: string | undefined;
        crossOrigin?: CrossOrigin;
        fetchPriority?: "high" | "low" | "auto";
        href?: string | undefined;
        hrefLang?: string | undefined;
        integrity?: string | undefined;
        media?: string | undefined;
        imageSrcSet?: string | undefined;
        imageSizes?: string | undefined;
        referrerPolicy?: HTMLAttributeReferrerPolicy | undefined;
        sizes?: string | undefined;
        type?: string | undefined;
        charSet?: string | undefined;
    }

    interface MapHTMLAttributes<T> extends HTMLAttributes<T> {
        name?: string | undefined;
    }

    interface MenuHTMLAttributes<T> extends HTMLAttributes<T> {
        type?: string | undefined;
    }

    interface MediaHTMLAttributes<T> extends HTMLAttributes<T> {
        autoPlay?: boolean | undefined;
        controls?: boolean | undefined;
        controlsList?: string | undefined;
        crossOrigin?: CrossOrigin;
        loop?: boolean | undefined;
        mediaGroup?: string | undefined;
        muted?: boolean | undefined;
        playsInline?: boolean | undefined;
        preload?: string | undefined;
        src?: string | undefined;
    }

    interface MetaHTMLAttributes<T> extends HTMLAttributes<T> {
        charSet?: string | undefined;
        content?: string | undefined;
        httpEquiv?: string | undefined;
        media?: string | undefined;
        name?: string | undefined;
    }

    interface MeterHTMLAttributes<T> extends HTMLAttributes<T> {
        form?: string | undefined;
        high?: number | undefined;
        low?: number | undefined;
        max?: number | string | undefined;
        min?: number | string | undefined;
        optimum?: number | undefined;
        value?: string | readonly string[] | number | undefined;
    }

    interface QuoteHTMLAttributes<T> extends HTMLAttributes<T> {
        cite?: string | undefined;
    }

    interface ObjectHTMLAttributes<T> extends HTMLAttributes<T> {
        classID?: string | undefined;
        data?: string | undefined;
        form?: string | undefined;
        height?: number | string | undefined;
        name?: string | undefined;
        type?: string | undefined;
        useMap?: string | undefined;
        width?: number | string | undefined;
        wmode?: string | undefined;
    }

    interface OlHTMLAttributes<T> extends HTMLAttributes<T> {
        reversed?: boolean | undefined;
        start?: number | undefined;
        type?: "1" | "a" | "A" | "i" | "I" | undefined;
    }

    interface OptgroupHTMLAttributes<T> extends HTMLAttributes<T> {
        disabled?: boolean | undefined;
        label?: string | undefined;
    }

    interface OptionHTMLAttributes<T> extends HTMLAttributes<T> {
        disabled?: boolean | undefined;
        label?: string | undefined;
        selected?: boolean | undefined;
        value?: string | readonly string[] | number | undefined;
    }

    interface OutputHTMLAttributes<T> extends HTMLAttributes<T> {
        form?: string | undefined;
        htmlFor?: string | undefined;
        name?: string | undefined;
    }

    interface ParamHTMLAttributes<T> extends HTMLAttributes<T> {
        name?: string | undefined;
        value?: string | readonly string[] | number | undefined;
    }

    interface ProgressHTMLAttributes<T> extends HTMLAttributes<T> {
        max?: number | string | undefined;
        value?: string | readonly string[] | number | undefined;
    }

    interface SlotHTMLAttributes<T> extends HTMLAttributes<T> {
        name?: string | undefined;
    }

    interface ScriptHTMLAttributes<T> extends HTMLAttributes<T> {
        async?: boolean | undefined;
        /** @deprecated */
        charSet?: string | undefined;
        crossOrigin?: CrossOrigin;
        defer?: boolean | undefined;
        integrity?: string | undefined;
        noModule?: boolean | undefined;
        referrerPolicy?: HTMLAttributeReferrerPolicy | undefined;
        src?: string | undefined;
        type?: string | undefined;
    }

    interface SelectHTMLAttributes<T> extends HTMLAttributes<T> {
        autoComplete?: string | undefined;
        disabled?: boolean | undefined;
        form?: string | undefined;
        multiple?: boolean | undefined;
        name?: string | undefined;
        required?: boolean | undefined;
        size?: number | undefined;
        value?: string | readonly string[] | number | undefined;
        onChange?: ChangeEventHandler<T> | undefined;
    }

    interface SourceHTMLAttributes<T> extends HTMLAttributes<T> {
        height?: number | string | undefined;
        media?: string | undefined;
        sizes?: string | undefined;
        src?: string | undefined;
        srcSet?: string | undefined;
        type?: string | undefined;
        width?: number | string | undefined;
    }

    interface StyleHTMLAttributes<T> extends HTMLAttributes<T> {
        media?: string | undefined;
        scoped?: boolean | undefined;
        type?: string | undefined;
    }

    interface TableHTMLAttributes<T> extends HTMLAttributes<T> {
        align?: "left" | "center" | "right" | undefined;
        bgcolor?: string | undefined;
        border?: number | undefined;
        cellPadding?: number | string | undefined;
        cellSpacing?: number | string | undefined;
        frame?: boolean | undefined;
        rules?: "none" | "groups" | "rows" | "columns" | "all" | undefined;
        summary?: string | undefined;
        width?: number | string | undefined;
    }

    interface TextareaHTMLAttributes<T> extends HTMLAttributes<T> {
        autoComplete?: string | undefined;
        cols?: number | undefined;
        dirName?: string | undefined;
        disabled?: boolean | undefined;
        form?: string | undefined;
        maxLength?: number | undefined;
        minLength?: number | undefined;
        name?: string | undefined;
        placeholder?: string | undefined;
        readOnly?: boolean | undefined;
        required?: boolean | undefined;
        rows?: number | undefined;
        value?: string | readonly string[] | number | undefined;
        wrap?: string | undefined;

        onChange?: ChangeEventHandler<T> | undefined;
    }

    interface TdHTMLAttributes<T> extends HTMLAttributes<T> {
        align?: "left" | "center" | "right" | "justify" | "char" | undefined;
        colSpan?: number | undefined;
        headers?: string | undefined;
        rowSpan?: number | undefined;
        scope?: string | undefined;
        abbr?: string | undefined;
        height?: number | string | undefined;
        width?: number | string | undefined;
        valign?: "top" | "middle" | "bottom" | "baseline" | undefined;
    }

    interface ThHTMLAttributes<T> extends HTMLAttributes<T> {
        align?: "left" | "center" | "right" | "justify" | "char" | undefined;
        colSpan?: number | undefined;
        headers?: string | undefined;
        rowSpan?: number | undefined;
        scope?: string | undefined;
        abbr?: string | undefined;
    }

    interface TimeHTMLAttributes<T> extends HTMLAttributes<T> {
        dateTime?: string | undefined;
    }

    interface TrackHTMLAttributes<T> extends HTMLAttributes<T> {
        default?: boolean | undefined;
        kind?: string | undefined;
        label?: string | undefined;
        src?: string | undefined;
        srcLang?: string | undefined;
    }

    interface VideoHTMLAttributes<T> extends MediaHTMLAttributes<T> {
        height?: number | string | undefined;
        playsInline?: boolean | undefined;
        poster?: string | undefined;
        width?: number | string | undefined;
        disablePictureInPicture?: boolean | undefined;
        disableRemotePlayback?: boolean | undefined;
    }

    // this list is "complete" in that it contains every SVG attribute
    // that React supports, but the types can be improved.
    // Full list here: https://facebook.github.io/react/docs/dom-elements.html
    //
    // The three broad type categories are (in order of restrictiveness):
    //   - "number | string"
    //   - "string"
    //   - union of string literals
    interface SVGAttributes<T> extends AriaAttributes, DOMAttributes<T> {
        // React-specific Attributes
        suppressHydrationWarning?: boolean | undefined;

        // Attributes which also defined in HTMLAttributes
        // See comment in SVGDOMPropertyConfig.js
        className?: string | undefined;
        color?: string | undefined;
        height?: number | string | undefined;
        id?: string | undefined;
        lang?: string | undefined;
        max?: number | string | undefined;
        media?: string | undefined;
        method?: string | undefined;
        min?: number | string | undefined;
        name?: string | undefined;
        style?: CSSProperties | undefined;
        target?: string | undefined;
        type?: string | undefined;
        width?: number | string | undefined;

        // Other HTML properties supported by SVG elements in browsers
        role?: AriaRole | undefined;
        tabIndex?: number | undefined;
        crossOrigin?: CrossOrigin;

        // SVG Specific attributes
        accentHeight?: number | string | undefined;
        accumulate?: "none" | "sum" | undefined;
        additive?: "replace" | "sum" | undefined;
        alignmentBaseline?:
            | "auto"
            | "baseline"
            | "before-edge"
            | "text-before-edge"
            | "middle"
            | "central"
            | "after-edge"
            | "text-after-edge"
            | "ideographic"
            | "alphabetic"
            | "hanging"
            | "mathematical"
            | "inherit"
            | undefined;
        allowReorder?: "no" | "yes" | undefined;
        alphabetic?: number | string | undefined;
        amplitude?: number | string | undefined;
        arabicForm?: "initial" | "medial" | "terminal" | "isolated" | undefined;
        ascent?: number | string | undefined;
        attributeName?: string | undefined;
        attributeType?: string | undefined;
        autoReverse?: Booleanish | undefined;
        azimuth?: number | string | undefined;
        baseFrequency?: number | string | undefined;
        baselineShift?: number | string | undefined;
        baseProfile?: number | string | undefined;
        bbox?: number | string | undefined;
        begin?: number | string | undefined;
        bias?: number | string | undefined;
        by?: number | string | undefined;
        calcMode?: number | string | undefined;
        capHeight?: number | string | undefined;
        clip?: number | string | undefined;
        clipPath?: string | undefined;
        clipPathUnits?: number | string | undefined;
        clipRule?: number | string | undefined;
        colorInterpolation?: number | string | undefined;
        colorInterpolationFilters?: "auto" | "sRGB" | "linearRGB" | "inherit" | undefined;
        colorProfile?: number | string | undefined;
        colorRendering?: number | string | undefined;
        contentScriptType?: number | string | undefined;
        contentStyleType?: number | string | undefined;
        cursor?: number | string | undefined;
        cx?: number | string | undefined;
        cy?: number | string | undefined;
        d?: string | undefined;
        decelerate?: number | string | undefined;
        descent?: number | string | undefined;
        diffuseConstant?: number | string | undefined;
        direction?: number | string | undefined;
        display?: number | string | undefined;
        divisor?: number | string | undefined;
        dominantBaseline?: number | string | undefined;
        dur?: number | string | undefined;
        dx?: number | string | undefined;
        dy?: number | string | undefined;
        edgeMode?: number | string | undefined;
        elevation?: number | string | undefined;
        enableBackground?: number | string | undefined;
        end?: number | string | undefined;
        exponent?: number | string | undefined;
        externalResourcesRequired?: Booleanish | undefined;
        fill?: string | undefined;
        fillOpacity?: number | string | undefined;
        fillRule?: "nonzero" | "evenodd" | "inherit" | undefined;
        filter?: string | undefined;
        filterRes?: number | string | undefined;
        filterUnits?: number | string | undefined;
        floodColor?: number | string | undefined;
        floodOpacity?: number | string | undefined;
        focusable?: Booleanish | "auto" | undefined;
        fontFamily?: string | undefined;
        fontSize?: number | string | undefined;
        fontSizeAdjust?: number | string | undefined;
        fontStretch?: number | string | undefined;
        fontStyle?: number | string | undefined;
        fontVariant?: number | string | undefined;
        fontWeight?: number | string | undefined;
        format?: number | string | undefined;
        fr?: number | string | undefined;
        from?: number | string | undefined;
        fx?: number | string | undefined;
        fy?: number | string | undefined;
        g1?: number | string | undefined;
        g2?: number | string | undefined;
        glyphName?: number | string | undefined;
        glyphOrientationHorizontal?: number | string | undefined;
        glyphOrientationVertical?: number | string | undefined;
        glyphRef?: number | string | undefined;
        gradientTransform?: string | undefined;
        gradientUnits?: string | undefined;
        hanging?: number | string | undefined;
        horizAdvX?: number | string | undefined;
        horizOriginX?: number | string | undefined;
        href?: string | undefined;
        ideographic?: number | string | undefined;
        imageRendering?: number | string | undefined;
        in2?: number | string | undefined;
        in?: string | undefined;
        intercept?: number | string | undefined;
        k1?: number | string | undefined;
        k2?: number | string | undefined;
        k3?: number | string | undefined;
        k4?: number | string | undefined;
        k?: number | string | undefined;
        kernelMatrix?: number | string | undefined;
        kernelUnitLength?: number | string | undefined;
        kerning?: number | string | undefined;
        keyPoints?: number | string | undefined;
        keySplines?: number | string | undefined;
        keyTimes?: number | string | undefined;
        lengthAdjust?: number | string | undefined;
        letterSpacing?: number | string | undefined;
        lightingColor?: number | string | undefined;
        limitingConeAngle?: number | string | undefined;
        local?: number | string | undefined;
        markerEnd?: string | undefined;
        markerHeight?: number | string | undefined;
        markerMid?: string | undefined;
        markerStart?: string | undefined;
        markerUnits?: number | string | undefined;
        markerWidth?: number | string | undefined;
        mask?: string | undefined;
        maskContentUnits?: number | string | undefined;
        maskUnits?: number | string | undefined;
        mathematical?: number | string | undefined;
        mode?: number | string | undefined;
        numOctaves?: number | string | undefined;
        offset?: number | string | undefined;
        opacity?: number | string | undefined;
        operator?: number | string | undefined;
        order?: number | string | undefined;
        orient?: number | string | undefined;
        orientation?: number | string | undefined;
        origin?: number | string | undefined;
        overflow?: number | string | undefined;
        overlinePosition?: number | string | undefined;
        overlineThickness?: number | string | undefined;
        paintOrder?: number | string | undefined;
        panose1?: number | string | undefined;
        path?: string | undefined;
        pathLength?: number | string | undefined;
        patternContentUnits?: string | undefined;
        patternTransform?: number | string | undefined;
        patternUnits?: string | undefined;
        pointerEvents?: number | string | undefined;
        points?: string | undefined;
        pointsAtX?: number | string | undefined;
        pointsAtY?: number | string | undefined;
        pointsAtZ?: number | string | undefined;
        preserveAlpha?: Booleanish | undefined;
        preserveAspectRatio?: string | undefined;
        primitiveUnits?: number | string | undefined;
        r?: number | string | undefined;
        radius?: number | string | undefined;
        refX?: number | string | undefined;
        refY?: number | string | undefined;
        renderingIntent?: number | string | undefined;
        repeatCount?: number | string | undefined;
        repeatDur?: number | string | undefined;
        requiredExtensions?: number | string | undefined;
        requiredFeatures?: number | string | undefined;
        restart?: number | string | undefined;
        result?: string | undefined;
        rotate?: number | string | undefined;
        rx?: number | string | undefined;
        ry?: number | string | undefined;
        scale?: number | string | undefined;
        seed?: number | string | undefined;
        shapeRendering?: number | string | undefined;
        slope?: number | string | undefined;
        spacing?: number | string | undefined;
        specularConstant?: number | string | undefined;
        specularExponent?: number | string | undefined;
        speed?: number | string | undefined;
        spreadMethod?: string | undefined;
        startOffset?: number | string | undefined;
        stdDeviation?: number | string | undefined;
        stemh?: number | string | undefined;
        stemv?: number | string | undefined;
        stitchTiles?: number | string | undefined;
        stopColor?: string | undefined;
        stopOpacity?: number | string | undefined;
        strikethroughPosition?: number | string | undefined;
        strikethroughThickness?: number | string | undefined;
        string?: number | string | undefined;
        stroke?: string | undefined;
        strokeDasharray?: string | number | undefined;
        strokeDashoffset?: string | number | undefined;
        strokeLinecap?: "butt" | "round" | "square" | "inherit" | undefined;
        strokeLinejoin?: "miter" | "round" | "bevel" | "inherit" | undefined;
        strokeMiterlimit?: number | string | undefined;
        strokeOpacity?: number | string | undefined;
        strokeWidth?: number | string | undefined;
        surfaceScale?: number | string | undefined;
        systemLanguage?: number | string | undefined;
        tableValues?: number | string | undefined;
        targetX?: number | string | undefined;
        targetY?: number | string | undefined;
        textAnchor?: string | undefined;
        textDecoration?: number | string | undefined;
        textLength?: number | string | undefined;
        textRendering?: number | string | undefined;
        to?: number | string | undefined;
        transform?: string | undefined;
        u1?: number | string | undefined;
        u2?: number | string | undefined;
        underlinePosition?: number | string | undefined;
        underlineThickness?: number | string | undefined;
        unicode?: number | string | undefined;
        unicodeBidi?: number | string | undefined;
        unicodeRange?: number | string | undefined;
        unitsPerEm?: number | string | undefined;
        vAlphabetic?: number | string | undefined;
        values?: string | undefined;
        vectorEffect?: number | string | undefined;
        version?: string | undefined;
        vertAdvY?: number | string | undefined;
        vertOriginX?: number | string | undefined;
        vertOriginY?: number | string | undefined;
        vHanging?: number | string | undefined;
        vIdeographic?: number | string | undefined;
        viewBox?: string | undefined;
        viewTarget?: number | string | undefined;
        visibility?: number | string | undefined;
        vMathematical?: number | string | undefined;
        widths?: number | string | undefined;
        wordSpacing?: number | string | undefined;
        writingMode?: number | string | undefined;
        x1?: number | string | undefined;
        x2?: number | string | undefined;
        x?: number | string | undefined;
        xChannelSelector?: string | undefined;
        xHeight?: number | string | undefined;
        xlinkActuate?: string | undefined;
        xlinkArcrole?: string | undefined;
        xlinkHref?: string | undefined;
        xlinkRole?: string | undefined;
        xlinkShow?: string | undefined;
        xlinkTitle?: string | undefined;
        xlinkType?: string | undefined;
        xmlBase?: string | undefined;
        xmlLang?: string | undefined;
        xmlns?: string | undefined;
        xmlnsXlink?: string | undefined;
        xmlSpace?: string | undefined;
        y1?: number | string | undefined;
        y2?: number | string | undefined;
        y?: number | string | undefined;
        yChannelSelector?: string | undefined;
        z?: number | string | undefined;
        zoomAndPan?: string | undefined;
    }

    interface WebViewHTMLAttributes<T> extends HTMLAttributes<T> {
        allowFullScreen?: boolean | undefined;
        allowpopups?: boolean | undefined;
        autosize?: boolean | undefined;
        blinkfeatures?: string | undefined;
        disableblinkfeatures?: string | undefined;
        disableguestresize?: boolean | undefined;
        disablewebsecurity?: boolean | undefined;
        guestinstance?: string | undefined;
        httpreferrer?: string | undefined;
        nodeintegration?: boolean | undefined;
        partition?: string | undefined;
        plugins?: boolean | undefined;
        preload?: string | undefined;
        src?: string | undefined;
        useragent?: string | undefined;
        webpreferences?: string | undefined;
    }

    //
    // React.DOM
    // ----------------------------------------------------------------------

    /* deprecated */
    interface ReactHTML {
        a: DetailedHTMLFactory<AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>;
        abbr: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        address: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        area: DetailedHTMLFactory<AreaHTMLAttributes<HTMLAreaElement>, HTMLAreaElement>;
        article: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        aside: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        audio: DetailedHTMLFactory<AudioHTMLAttributes<HTMLAudioElement>, HTMLAudioElement>;
        b: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        base: DetailedHTMLFactory<BaseHTMLAttributes<HTMLBaseElement>, HTMLBaseElement>;
        bdi: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        bdo: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        big: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        blockquote: DetailedHTMLFactory<BlockquoteHTMLAttributes<HTMLQuoteElement>, HTMLQuoteElement>;
        body: DetailedHTMLFactory<HTMLAttributes<HTMLBodyElement>, HTMLBodyElement>;
        br: DetailedHTMLFactory<HTMLAttributes<HTMLBRElement>, HTMLBRElement>;
        button: DetailedHTMLFactory<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;
        canvas: DetailedHTMLFactory<CanvasHTMLAttributes<HTMLCanvasElement>, HTMLCanvasElement>;
        caption: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        center: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        cite: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        code: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        col: DetailedHTMLFactory<ColHTMLAttributes<HTMLTableColElement>, HTMLTableColElement>;
        colgroup: DetailedHTMLFactory<ColgroupHTMLAttributes<HTMLTableColElement>, HTMLTableColElement>;
        data: DetailedHTMLFactory<DataHTMLAttributes<HTMLDataElement>, HTMLDataElement>;
        datalist: DetailedHTMLFactory<HTMLAttributes<HTMLDataListElement>, HTMLDataListElement>;
        dd: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        del: DetailedHTMLFactory<DelHTMLAttributes<HTMLModElement>, HTMLModElement>;
        details: DetailedHTMLFactory<DetailsHTMLAttributes<HTMLDetailsElement>, HTMLDetailsElement>;
        dfn: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        dialog: DetailedHTMLFactory<DialogHTMLAttributes<HTMLDialogElement>, HTMLDialogElement>;
        div: DetailedHTMLFactory<HTMLAttributes<HTMLDivElement>, HTMLDivElement>;
        dl: DetailedHTMLFactory<HTMLAttributes<HTMLDListElement>, HTMLDListElement>;
        dt: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        em: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        embed: DetailedHTMLFactory<EmbedHTMLAttributes<HTMLEmbedElement>, HTMLEmbedElement>;
        fieldset: DetailedHTMLFactory<FieldsetHTMLAttributes<HTMLFieldSetElement>, HTMLFieldSetElement>;
        figcaption: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        figure: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        footer: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        form: DetailedHTMLFactory<FormHTMLAttributes<HTMLFormElement>, HTMLFormElement>;
        h1: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;
        h2: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;
        h3: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;
        h4: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;
        h5: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;
        h6: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;
        head: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLHeadElement>;
        header: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        hgroup: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        hr: DetailedHTMLFactory<HTMLAttributes<HTMLHRElement>, HTMLHRElement>;
        html: DetailedHTMLFactory<HtmlHTMLAttributes<HTMLHtmlElement>, HTMLHtmlElement>;
        i: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        iframe: DetailedHTMLFactory<IframeHTMLAttributes<HTMLIFrameElement>, HTMLIFrameElement>;
        img: DetailedHTMLFactory<ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>;
        input: DetailedHTMLFactory<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;
        ins: DetailedHTMLFactory<InsHTMLAttributes<HTMLModElement>, HTMLModElement>;
        kbd: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        keygen: DetailedHTMLFactory<KeygenHTMLAttributes<HTMLElement>, HTMLElement>;
        label: DetailedHTMLFactory<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>;
        legend: DetailedHTMLFactory<HTMLAttributes<HTMLLegendElement>, HTMLLegendElement>;
        li: DetailedHTMLFactory<LiHTMLAttributes<HTMLLIElement>, HTMLLIElement>;
        link: DetailedHTMLFactory<LinkHTMLAttributes<HTMLLinkElement>, HTMLLinkElement>;
        main: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        map: DetailedHTMLFactory<MapHTMLAttributes<HTMLMapElement>, HTMLMapElement>;
        mark: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        menu: DetailedHTMLFactory<MenuHTMLAttributes<HTMLElement>, HTMLElement>;
        menuitem: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        meta: DetailedHTMLFactory<MetaHTMLAttributes<HTMLMetaElement>, HTMLMetaElement>;
        meter: DetailedHTMLFactory<MeterHTMLAttributes<HTMLMeterElement>, HTMLMeterElement>;
        nav: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        noscript: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        object: DetailedHTMLFactory<ObjectHTMLAttributes<HTMLObjectElement>, HTMLObjectElement>;
        ol: DetailedHTMLFactory<OlHTMLAttributes<HTMLOListElement>, HTMLOListElement>;
        optgroup: DetailedHTMLFactory<OptgroupHTMLAttributes<HTMLOptGroupElement>, HTMLOptGroupElement>;
        option: DetailedHTMLFactory<OptionHTMLAttributes<HTMLOptionElement>, HTMLOptionElement>;
        output: DetailedHTMLFactory<OutputHTMLAttributes<HTMLOutputElement>, HTMLOutputElement>;
        p: DetailedHTMLFactory<HTMLAttributes<HTMLParagraphElement>, HTMLParagraphElement>;
        param: DetailedHTMLFactory<ParamHTMLAttributes<HTMLParamElement>, HTMLParamElement>;
        picture: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        pre: DetailedHTMLFactory<HTMLAttributes<HTMLPreElement>, HTMLPreElement>;
        progress: DetailedHTMLFactory<ProgressHTMLAttributes<HTMLProgressElement>, HTMLProgressElement>;
        q: DetailedHTMLFactory<QuoteHTMLAttributes<HTMLQuoteElement>, HTMLQuoteElement>;
        rp: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        rt: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        ruby: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        s: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        samp: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        search: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        slot: DetailedHTMLFactory<SlotHTMLAttributes<HTMLSlotElement>, HTMLSlotElement>;
        script: DetailedHTMLFactory<ScriptHTMLAttributes<HTMLScriptElement>, HTMLScriptElement>;
        section: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        select: DetailedHTMLFactory<SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>;
        small: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        source: DetailedHTMLFactory<SourceHTMLAttributes<HTMLSourceElement>, HTMLSourceElement>;
        span: DetailedHTMLFactory<HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>;
        strong: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        style: DetailedHTMLFactory<StyleHTMLAttributes<HTMLStyleElement>, HTMLStyleElement>;
        sub: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        summary: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        sup: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        table: DetailedHTMLFactory<TableHTMLAttributes<HTMLTableElement>, HTMLTableElement>;
        template: DetailedHTMLFactory<HTMLAttributes<HTMLTemplateElement>, HTMLTemplateElement>;
        tbody: DetailedHTMLFactory<HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;
        td: DetailedHTMLFactory<TdHTMLAttributes<HTMLTableDataCellElement>, HTMLTableDataCellElement>;
        textarea: DetailedHTMLFactory<TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>;
        tfoot: DetailedHTMLFactory<HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;
        th: DetailedHTMLFactory<ThHTMLAttributes<HTMLTableHeaderCellElement>, HTMLTableHeaderCellElement>;
        thead: DetailedHTMLFactory<HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;
        time: DetailedHTMLFactory<TimeHTMLAttributes<HTMLTimeElement>, HTMLTimeElement>;
        title: DetailedHTMLFactory<HTMLAttributes<HTMLTitleElement>, HTMLTitleElement>;
        tr: DetailedHTMLFactory<HTMLAttributes<HTMLTableRowElement>, HTMLTableRowElement>;
        track: DetailedHTMLFactory<TrackHTMLAttributes<HTMLTrackElement>, HTMLTrackElement>;
        u: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        ul: DetailedHTMLFactory<HTMLAttributes<HTMLUListElement>, HTMLUListElement>;
        "var": DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        video: DetailedHTMLFactory<VideoHTMLAttributes<HTMLVideoElement>, HTMLVideoElement>;
        wbr: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;
        webview: DetailedHTMLFactory<WebViewHTMLAttributes<HTMLWebViewElement>, HTMLWebViewElement>;
    }

    /* deprecated */
    interface ReactSVG {
        animate: SVGFactory;
        circle: SVGFactory;
        clipPath: SVGFactory;
        defs: SVGFactory;
        desc: SVGFactory;
        ellipse: SVGFactory;
        feBlend: SVGFactory;
        feColorMatrix: SVGFactory;
        feComponentTransfer: SVGFactory;
        feComposite: SVGFactory;
        feConvolveMatrix: SVGFactory;
        feDiffuseLighting: SVGFactory;
        feDisplacementMap: SVGFactory;
        feDistantLight: SVGFactory;
        feDropShadow: SVGFactory;
        feFlood: SVGFactory;
        feFuncA: SVGFactory;
        feFuncB: SVGFactory;
        feFuncG: SVGFactory;
        feFuncR: SVGFactory;
        feGaussianBlur: SVGFactory;
        feImage: SVGFactory;
        feMerge: SVGFactory;
        feMergeNode: SVGFactory;
        feMorphology: SVGFactory;
        feOffset: SVGFactory;
        fePointLight: SVGFactory;
        feSpecularLighting: SVGFactory;
        feSpotLight: SVGFactory;
        feTile: SVGFactory;
        feTurbulence: SVGFactory;
        filter: SVGFactory;
        foreignObject: SVGFactory;
        g: SVGFactory;
        image: SVGFactory;
        line: SVGFactory;
        linearGradient: SVGFactory;
        marker: SVGFactory;
        mask: SVGFactory;
        metadata: SVGFactory;
        path: SVGFactory;
        pattern: SVGFactory;
        polygon: SVGFactory;
        polyline: SVGFactory;
        radialGradient: SVGFactory;
        rect: SVGFactory;
        stop: SVGFactory;
        svg: SVGFactory;
        switch: SVGFactory;
        symbol: SVGFactory;
        text: SVGFactory;
        textPath: SVGFactory;
        tspan: SVGFactory;
        use: SVGFactory;
        view: SVGFactory;
    }

    /* deprecated */
    interface ReactDOM extends ReactHTML, ReactSVG {}

    //
    // React.PropTypes
    // ----------------------------------------------------------------------

    /**
     * @deprecated Use `Validator` from the ´prop-types` instead.
     */
    type Validator<T> = PropTypes.Validator<T>;

    /**
     * @deprecated Use `Requireable` from the ´prop-types` instead.
     */
    type Requireable<T> = PropTypes.Requireable<T>;

    /**
     * @deprecated Use `ValidationMap` from the ´prop-types` instead.
     */
    type ValidationMap<T> = PropTypes.ValidationMap<T>;

    /**
     * @deprecated Use `WeakValidationMap` from the ´prop-types` instead.
     */
    type WeakValidationMap<T> = {
        [K in keyof T]?: null extends T[K] ? Validator<T[K] | null | undefined>
            : undefined extends T[K] ? Validator<T[K] | null | undefined>
            : Validator<T[K]>;
    };

    /**
     * @deprecated Use `PropTypes.*` where `PropTypes` comes from `import * as PropTypes from 'prop-types'` instead.
     */
    interface ReactPropTypes {
        any: typeof PropTypes.any;
        array: typeof PropTypes.array;
        bool: typeof PropTypes.bool;
        func: typeof PropTypes.func;
        number: typeof PropTypes.number;
        object: typeof PropTypes.object;
        string: typeof PropTypes.string;
        node: typeof PropTypes.node;
        element: typeof PropTypes.element;
        instanceOf: typeof PropTypes.instanceOf;
        oneOf: typeof PropTypes.oneOf;
        oneOfType: typeof PropTypes.oneOfType;
        arrayOf: typeof PropTypes.arrayOf;
        objectOf: typeof PropTypes.objectOf;
        shape: typeof PropTypes.shape;
        exact: typeof PropTypes.exact;
    }

    //
    // React.Children
    // ----------------------------------------------------------------------

    /**
     * @deprecated - Use `typeof React.Children` instead.
     */
    // Sync with type of `const Children`.
    interface ReactChildren {
        map<T, C>(
            children: C | readonly C[],
            fn: (child: C, index: number) => T,
        ): C extends null | undefined ? C : Array<Exclude<T, boolean | null | undefined>>;
        forEach<C>(children: C | readonly C[], fn: (child: C, index: number) => void): void;
        count(children: any): number;
        only<C>(children: C): C extends any[] ? never : C;
        toArray(children: ReactNode | ReactNode[]): Array<Exclude<ReactNode, boolean | null | undefined>>;
    }

    //
    // Browser Interfaces
    // https://github.com/nikeee/2048-typescript/blob/master/2048/js/touch.d.ts
    // ----------------------------------------------------------------------

    interface AbstractView {
        styleMedia: StyleMedia;
        document: Document;
    }

    interface Touch {
        identifier: number;
        target: EventTarget;
        screenX: number;
        screenY: number;
        clientX: number;
        clientY: number;
        pageX: number;
        pageY: number;
    }

    interface TouchList {
        [index: number]: Touch;
        length: number;
        item(index: number): Touch;
        identifiedTouch(identifier: number): Touch;
    }

    //
    // Error Interfaces
    // ----------------------------------------------------------------------
    interface ErrorInfo {
        /**
         * Captures which component contained the exception, and its ancestors.
         */
        componentStack?: string | null;
        digest?: string | null;
    }

    // Keep in sync with JSX namespace in ./jsx-runtime.d.ts and ./jsx-dev-runtime.d.ts
    namespace JSX {
        type ElementType = GlobalJSXElementType;
        interface Element extends GlobalJSXElement {}
        interface ElementClass extends GlobalJSXElementClass {}
        interface ElementAttributesProperty extends GlobalJSXElementAttributesProperty {}
        interface ElementChildrenAttribute extends GlobalJSXElementChildrenAttribute {}

        type LibraryManagedAttributes<C, P> = GlobalJSXLibraryManagedAttributes<C, P>;

        interface IntrinsicAttributes extends GlobalJSXIntrinsicAttributes {}
        interface IntrinsicClassAttributes<T> extends GlobalJSXIntrinsicClassAttributes<T> {}
        interface IntrinsicElements extends GlobalJSXIntrinsicElements {}
    }
}

// naked 'any' type in a conditional type will short circuit and union both the then/else branches
// so boolean is only resolved for T = any
type IsExactlyAny<T> = boolean extends (T extends never ? true : false) ? true : false;

type ExactlyAnyPropertyKeys<T> = { [K in keyof T]: IsExactlyAny<T[K]> extends true ? K : never }[keyof T];
type NotExactlyAnyPropertyKeys<T> = Exclude<keyof T, ExactlyAnyPropertyKeys<T>>;

// Try to resolve ill-defined props like for JS users: props can be any, or sometimes objects with properties of type any
type MergePropTypes<P, T> =
    // Distribute over P in case it is a union type
    P extends any
        // If props is type any, use propTypes definitions
        ? IsExactlyAny<P> extends true ? T
            // If declared props have indexed properties, ignore inferred props entirely as keyof gets widened
        : string extends keyof P ? P
            // Prefer declared types which are not exactly any
        :
            & Pick<P, NotExactlyAnyPropertyKeys<P>>
            // For props which are exactly any, use the type inferred from propTypes if present
            & Pick<T, Exclude<keyof T, NotExactlyAnyPropertyKeys<P>>>
            // Keep leftover props not specified in propTypes
            & Pick<P, Exclude<keyof P, keyof T>>
        : never;

type InexactPartial<T> = { [K in keyof T]?: T[K] | undefined };

// Any prop that has a default prop becomes optional, but its type is unchanged
// Undeclared default props are augmented into the resulting allowable attributes
// If declared props have indexed properties, ignore default props entirely as keyof gets widened
// Wrap in an outer-level conditional type to allow distribution over props that are unions
type Defaultize<P, D> = P extends any ? string extends keyof P ? P
    :
        & Pick<P, Exclude<keyof P, keyof D>>
        & InexactPartial<Pick<P, Extract<keyof P, keyof D>>>
        & InexactPartial<Pick<D, Exclude<keyof D, keyof P>>>
    : never;

type ReactManagedAttributes<C, P> = C extends { propTypes: infer T; defaultProps: infer D }
    ? Defaultize<MergePropTypes<P, PropTypes.InferProps<T>>, D>
    : C extends { propTypes: infer T } ? MergePropTypes<P, PropTypes.InferProps<T>>
    : C extends { defaultProps: infer D } ? Defaultize<P, D>
    : P;

declare global {
    /**
     * @deprecated Use `React.JSX` instead of the global `JSX` namespace.
     */
    namespace JSX {
        // We don't just alias React.ElementType because React.ElementType
        // historically does more than we need it to.
        // E.g. it also contains .propTypes and so TS also verifies the declared
        // props type does match the declared .propTypes.
        // But if libraries declared their .propTypes but not props type,
        // or they mismatch, you won't be able to use the class component
        // as a JSX.ElementType.
        // We could fix this everywhere but we're ultimately not interested in
        // .propTypes assignability so we might as well drop it entirely here to
        //  reduce the work of the type-checker.
        // TODO: Check impact of making React.ElementType<P = any> = React.JSXElementConstructor<P>
        type ElementType = string | React.JSXElementConstructor<any>;
        interface Element extends React.ReactElement<any, any> {}
        interface ElementClass extends React.Component<any> {
            render(): React.ReactNode;
        }
        interface ElementAttributesProperty {
            props: {};
        }
        interface ElementChildrenAttribute {
            children: {};
        }

        // We can't recurse forever because `type` can't be self-referential;
        // let's assume it's reasonable to do a single React.lazy() around a single React.memo() / vice-versa
        type LibraryManagedAttributes<C, P> = C extends
            React.MemoExoticComponent<infer T> | React.LazyExoticComponent<infer T>
            ? T extends React.MemoExoticComponent<infer U> | React.LazyExoticComponent<infer U>
                ? ReactManagedAttributes<U, P>
            : ReactManagedAttributes<T, P>
            : ReactManagedAttributes<C, P>;

        interface IntrinsicAttributes extends React.Attributes {}
        interface IntrinsicClassAttributes<T> extends React.ClassAttributes<T> {}

        interface IntrinsicElements {
            // HTML
            a: React.DetailedHTMLProps<React.AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>;
            abbr: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            address: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            area: React.DetailedHTMLProps<React.AreaHTMLAttributes<HTMLAreaElement>, HTMLAreaElement>;
            article: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            aside: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            audio: React.DetailedHTMLProps<React.AudioHTMLAttributes<HTMLAudioElement>, HTMLAudioElement>;
            b: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            base: React.DetailedHTMLProps<React.BaseHTMLAttributes<HTMLBaseElement>, HTMLBaseElement>;
            bdi: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            bdo: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            big: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            blockquote: React.DetailedHTMLProps<React.BlockquoteHTMLAttributes<HTMLQuoteElement>, HTMLQuoteElement>;
            body: React.DetailedHTMLProps<React.HTMLAttributes<HTMLBodyElement>, HTMLBodyElement>;
            br: React.DetailedHTMLProps<React.HTMLAttributes<HTMLBRElement>, HTMLBRElement>;
            button: React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;
            canvas: React.DetailedHTMLProps<React.CanvasHTMLAttributes<HTMLCanvasElement>, HTMLCanvasElement>;
            caption: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            center: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            cite: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            code: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            col: React.DetailedHTMLProps<React.ColHTMLAttributes<HTMLTableColElement>, HTMLTableColElement>;
            colgroup: React.DetailedHTMLProps<React.ColgroupHTMLAttributes<HTMLTableColElement>, HTMLTableColElement>;
            data: React.DetailedHTMLProps<React.DataHTMLAttributes<HTMLDataElement>, HTMLDataElement>;
            datalist: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDataListElement>, HTMLDataListElement>;
            dd: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            del: React.DetailedHTMLProps<React.DelHTMLAttributes<HTMLModElement>, HTMLModElement>;
            details: React.DetailedHTMLProps<React.DetailsHTMLAttributes<HTMLDetailsElement>, HTMLDetailsElement>;
            dfn: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            dialog: React.DetailedHTMLProps<React.DialogHTMLAttributes<HTMLDialogElement>, HTMLDialogElement>;
            div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>;
            dl: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDListElement>, HTMLDListElement>;
            dt: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            em: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            embed: React.DetailedHTMLProps<React.EmbedHTMLAttributes<HTMLEmbedElement>, HTMLEmbedElement>;
            fieldset: React.DetailedHTMLProps<React.FieldsetHTMLAttributes<HTMLFieldSetElement>, HTMLFieldSetElement>;
            figcaption: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            figure: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            footer: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            form: React.DetailedHTMLProps<React.FormHTMLAttributes<HTMLFormElement>, HTMLFormElement>;
            h1: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;
            h2: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;
            h3: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;
            h4: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;
            h5: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;
            h6: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;
            head: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadElement>, HTMLHeadElement>;
            header: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            hgroup: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            hr: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHRElement>, HTMLHRElement>;
            html: React.DetailedHTMLProps<React.HtmlHTMLAttributes<HTMLHtmlElement>, HTMLHtmlElement>;
            i: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            iframe: React.DetailedHTMLProps<React.IframeHTMLAttributes<HTMLIFrameElement>, HTMLIFrameElement>;
            img: React.DetailedHTMLProps<React.ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>;
            input: React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;
            ins: React.DetailedHTMLProps<React.InsHTMLAttributes<HTMLModElement>, HTMLModElement>;
            kbd: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            keygen: React.DetailedHTMLProps<React.KeygenHTMLAttributes<HTMLElement>, HTMLElement>;
            label: React.DetailedHTMLProps<React.LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>;
            legend: React.DetailedHTMLProps<React.HTMLAttributes<HTMLLegendElement>, HTMLLegendElement>;
            li: React.DetailedHTMLProps<React.LiHTMLAttributes<HTMLLIElement>, HTMLLIElement>;
            link: React.DetailedHTMLProps<React.LinkHTMLAttributes<HTMLLinkElement>, HTMLLinkElement>;
            main: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            map: React.DetailedHTMLProps<React.MapHTMLAttributes<HTMLMapElement>, HTMLMapElement>;
            mark: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            menu: React.DetailedHTMLProps<React.MenuHTMLAttributes<HTMLElement>, HTMLElement>;
            menuitem: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            meta: React.DetailedHTMLProps<React.MetaHTMLAttributes<HTMLMetaElement>, HTMLMetaElement>;
            meter: React.DetailedHTMLProps<React.MeterHTMLAttributes<HTMLMeterElement>, HTMLMeterElement>;
            nav: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            noindex: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            noscript: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            object: React.DetailedHTMLProps<React.ObjectHTMLAttributes<HTMLObjectElement>, HTMLObjectElement>;
            ol: React.DetailedHTMLProps<React.OlHTMLAttributes<HTMLOListElement>, HTMLOListElement>;
            optgroup: React.DetailedHTMLProps<React.OptgroupHTMLAttributes<HTMLOptGroupElement>, HTMLOptGroupElement>;
            option: React.DetailedHTMLProps<React.OptionHTMLAttributes<HTMLOptionElement>, HTMLOptionElement>;
            output: React.DetailedHTMLProps<React.OutputHTMLAttributes<HTMLOutputElement>, HTMLOutputElement>;
            p: React.DetailedHTMLProps<React.HTMLAttributes<HTMLParagraphElement>, HTMLParagraphElement>;
            param: React.DetailedHTMLProps<React.ParamHTMLAttributes<HTMLParamElement>, HTMLParamElement>;
            picture: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            pre: React.DetailedHTMLProps<React.HTMLAttributes<HTMLPreElement>, HTMLPreElement>;
            progress: React.DetailedHTMLProps<React.ProgressHTMLAttributes<HTMLProgressElement>, HTMLProgressElement>;
            q: React.DetailedHTMLProps<React.QuoteHTMLAttributes<HTMLQuoteElement>, HTMLQuoteElement>;
            rp: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            rt: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            ruby: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            s: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            samp: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            search: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            slot: React.DetailedHTMLProps<React.SlotHTMLAttributes<HTMLSlotElement>, HTMLSlotElement>;
            script: React.DetailedHTMLProps<React.ScriptHTMLAttributes<HTMLScriptElement>, HTMLScriptElement>;
            section: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            select: React.DetailedHTMLProps<React.SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>;
            small: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            source: React.DetailedHTMLProps<React.SourceHTMLAttributes<HTMLSourceElement>, HTMLSourceElement>;
            span: React.DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>;
            strong: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            style: React.DetailedHTMLProps<React.StyleHTMLAttributes<HTMLStyleElement>, HTMLStyleElement>;
            sub: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            summary: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            sup: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            table: React.DetailedHTMLProps<React.TableHTMLAttributes<HTMLTableElement>, HTMLTableElement>;
            template: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTemplateElement>, HTMLTemplateElement>;
            tbody: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;
            td: React.DetailedHTMLProps<React.TdHTMLAttributes<HTMLTableDataCellElement>, HTMLTableDataCellElement>;
            textarea: React.DetailedHTMLProps<React.TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>;
            tfoot: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;
            th: React.DetailedHTMLProps<React.ThHTMLAttributes<HTMLTableHeaderCellElement>, HTMLTableHeaderCellElement>;
            thead: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;
            time: React.DetailedHTMLProps<React.TimeHTMLAttributes<HTMLTimeElement>, HTMLTimeElement>;
            title: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTitleElement>, HTMLTitleElement>;
            tr: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableRowElement>, HTMLTableRowElement>;
            track: React.DetailedHTMLProps<React.TrackHTMLAttributes<HTMLTrackElement>, HTMLTrackElement>;
            u: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            ul: React.DetailedHTMLProps<React.HTMLAttributes<HTMLUListElement>, HTMLUListElement>;
            "var": React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            video: React.DetailedHTMLProps<React.VideoHTMLAttributes<HTMLVideoElement>, HTMLVideoElement>;
            wbr: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;
            webview: React.DetailedHTMLProps<React.WebViewHTMLAttributes<HTMLWebViewElement>, HTMLWebViewElement>;

            // SVG
            svg: React.SVGProps<SVGSVGElement>;

            animate: React.SVGProps<SVGElement>; // TODO: It is SVGAnimateElement but is not in TypeScript's lib.dom.d.ts for now.
            animateMotion: React.SVGProps<SVGElement>;
            animateTransform: React.SVGProps<SVGElement>; // TODO: It is SVGAnimateTransformElement but is not in TypeScript's lib.dom.d.ts for now.
            circle: React.SVGProps<SVGCircleElement>;
            clipPath: React.SVGProps<SVGClipPathElement>;
            defs: React.SVGProps<SVGDefsElement>;
            desc: React.SVGProps<SVGDescElement>;
            ellipse: React.SVGProps<SVGEllipseElement>;
            feBlend: React.SVGProps<SVGFEBlendElement>;
            feColorMatrix: React.SVGProps<SVGFEColorMatrixElement>;
            feComponentTransfer: React.SVGProps<SVGFEComponentTransferElement>;
            feComposite: React.SVGProps<SVGFECompositeElement>;
            feConvolveMatrix: React.SVGProps<SVGFEConvolveMatrixElement>;
            feDiffuseLighting: React.SVGProps<SVGFEDiffuseLightingElement>;
            feDisplacementMap: React.SVGProps<SVGFEDisplacementMapElement>;
            feDistantLight: React.SVGProps<SVGFEDistantLightElement>;
            feDropShadow: React.SVGProps<SVGFEDropShadowElement>;
            feFlood: React.SVGProps<SVGFEFloodElement>;
            feFuncA: React.SVGProps<SVGFEFuncAElement>;
            feFuncB: React.SVGProps<SVGFEFuncBElement>;
            feFuncG: React.SVGProps<SVGFEFuncGElement>;
            feFuncR: React.SVGProps<SVGFEFuncRElement>;
            feGaussianBlur: React.SVGProps<SVGFEGaussianBlurElement>;
            feImage: React.SVGProps<SVGFEImageElement>;
            feMerge: React.SVGProps<SVGFEMergeElement>;
            feMergeNode: React.SVGProps<SVGFEMergeNodeElement>;
            feMorphology: React.SVGProps<SVGFEMorphologyElement>;
            feOffset: React.SVGProps<SVGFEOffsetElement>;
            fePointLight: React.SVGProps<SVGFEPointLightElement>;
            feSpecularLighting: React.SVGProps<SVGFESpecularLightingElement>;
            feSpotLight: React.SVGProps<SVGFESpotLightElement>;
            feTile: React.SVGProps<SVGFETileElement>;
            feTurbulence: React.SVGProps<SVGFETurbulenceElement>;
            filter: React.SVGProps<SVGFilterElement>;
            foreignObject: React.SVGProps<SVGForeignObjectElement>;
            g: React.SVGProps<SVGGElement>;
            image: React.SVGProps<SVGImageElement>;
            line: React.SVGLineElementAttributes<SVGLineElement>;
            linearGradient: React.SVGProps<SVGLinearGradientElement>;
            marker: React.SVGProps<SVGMarkerElement>;
            mask: React.SVGProps<SVGMaskElement>;
            metadata: React.SVGProps<SVGMetadataElement>;
            mpath: React.SVGProps<SVGElement>;
            path: React.SVGProps<SVGPathElement>;
            pattern: React.SVGProps<SVGPatternElement>;
            polygon: React.SVGProps<SVGPolygonElement>;
            polyline: React.SVGProps<SVGPolylineElement>;
            radialGradient: React.SVGProps<SVGRadialGradientElement>;
            rect: React.SVGProps<SVGRectElement>;
            set: React.SVGProps<SVGSetElement>;
            stop: React.SVGProps<SVGStopElement>;
            switch: React.SVGProps<SVGSwitchElement>;
            symbol: React.SVGProps<SVGSymbolElement>;
            text: React.SVGTextElementAttributes<SVGTextElement>;
            textPath: React.SVGProps<SVGTextPathElement>;
            tspan: React.SVGProps<SVGTSpanElement>;
            use: React.SVGProps<SVGUseElement>;
            view: React.SVGProps<SVGViewElement>;
        }
    }
}

// React.JSX needs to point to global.JSX to keep global module augmentations intact.
// But we can't access global.JSX so we need to create these aliases instead.
// Once the global JSX namespace will be removed we replace React.JSX with the contents of global.JSX
type GlobalJSXElementType = JSX.ElementType;
interface GlobalJSXElement extends JSX.Element {}
interface GlobalJSXElementClass extends JSX.ElementClass {}
interface GlobalJSXElementAttributesProperty extends JSX.ElementAttributesProperty {}
interface GlobalJSXElementChildrenAttribute extends JSX.ElementChildrenAttribute {}

type GlobalJSXLibraryManagedAttributes<C, P> = JSX.LibraryManagedAttributes<C, P>;

interface GlobalJSXIntrinsicAttributes extends JSX.IntrinsicAttributes {}
interface GlobalJSXIntrinsicClassAttributes<T> extends JSX.IntrinsicClassAttributes<T> {}

interface GlobalJSXIntrinsicElements extends JSX.IntrinsicElements {}

----------------------------------------
File: ./animations/node_modules/@types/d3-ease/README.md
----------------------------------------
# Installation
> `npm install --save @types/d3-ease`

# Summary
This package contains type definitions for d3-ease (https://github.com/d3/d3-ease/).

# Details
Files were exported from https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/d3-ease.

### Additional Details
 * Last updated: Tue, 07 Nov 2023 15:11:36 GMT
 * Dependencies: none

# Credits
These definitions were written by [Tom Wanzek](https://github.com/tomwanzek), [Alex Ford](https://github.com/gustavderdrache), [Boris Yankov](https://github.com/borisyankov), and [Nathan Bierema](https://github.com/Methuselah96).

----------------------------------------
File: ./animations/node_modules/@types/d3-ease/index.d.ts
----------------------------------------
// Last module patch version validated against: 3.0.1

// --------------------------------------------------------------------------
// Easing Functions
// --------------------------------------------------------------------------

/**
 * Linear easing; the identity function; linear(t) returns t.
 *
 * @param normalizedTime Normalized time typically in the range [0, 1]
 */
export function easeLinear(normalizedTime: number): number;

/**
 * Symmetric quadratic easing; scales quadIn for t in [0, 0.5] and quadOut for t in [0.5, 1]. Also equivalent to poly.exponent(2).
 *
 * @param normalizedTime Normalized time typically in the range [0, 1]
 */
export function easeQuad(normalizedTime: number): number;

/**
 * Quadratic easing; equivalent to polyIn.exponent(2).
 *
 * @param normalizedTime Normalized time typically in the range [0, 1]
 */
export function easeQuadIn(normalizedTime: number): number;

/**
 * Reverse quadratic easing; equivalent to 1 - quadIn(1 - t). Also equivalent to polyOut.exponent(2).
 *
 * @param normalizedTime Normalized time typically in the range [0, 1]
 */
export function easeQuadOut(normalizedTime: number): number;

/**
 * Symmetric quadratic easing; scales quadIn for t in [0, 0.5] and quadOut for t in [0.5, 1]. Also equivalent to poly.exponent(2).
 *
 * @param normalizedTime Normalized time typically in the range [0, 1]
 */
export function easeQuadInOut(normalizedTime: number): number;

/**
 * Symmetric cubic easing; scales cubicIn for t in [0, 0.5] and cubicOut for t in [0.5, 1]. Also equivalent to poly.exponent(3).
 *
 * @param normalizedTime Normalized time typically in the range [0, 1]
 */
export function easeCubic(normalizedTime: number): number;

/**
 * Cubic easing; equivalent to polyIn.exponent(3).
 *
 * @param normalizedTime Normalized time typically in the range [0, 1]
 */
export function easeCubicIn(normalizedTime: number): number;

/**
 * Reverse cubic easing; equivalent to 1 - cubicIn(1 - t). Also equivalent to polyOut.exponent(3).
 *
 * @param normalizedTime Normalized time typically in the range [0, 1]
 */
export function easeCubicOut(normalizedTime: number): number;

/**
 * Symmetric cubic easing; scales cubicIn for t in [0, 0.5] and cubicOut for t in [0.5, 1]. Also equivalent to poly.exponent(3).
 *
 * @param normalizedTime Normalized time typically in the range [0, 1]
 */
export function easeCubicInOut(normalizedTime: number): number;

/**
 * Polynomial easing function factory
 */
export interface PolynomialEasingFactory {
    /**
     * Calculate eased time.
     * @param normalizedTime Normalized time typically in the range [0, 1]
     */
    (normalizedTime: number): number;
    /**
     * Returns a new polynomial easing with the specified exponent e.
     * If the exponent is not specified, it defaults to 3, equivalent to cubic.
     *
     * @param e Exponent for polynomial easing.
     */
    exponent(e: number): PolynomialEasingFactory;
}

/**
 * Symmetric polynomial easing/easing factory; scales polyIn for t in [0, 0.5] and polyOut for t in [0.5, 1].
 * If the exponent is not specified, it defaults to 3, equivalent to cubic.
 */
export const easePoly: PolynomialEasingFactory;
/**
 * Polynomial easing/easing factory; raises t to the specified exponent.
 * If the exponent is not specified, it defaults to 3, equivalent to cubicIn.
 */
export const easePolyIn: PolynomialEasingFactory;

/**
 * Reverse polynomial easing/easing factory; equivalent to 1 - polyIn(1 - t).
 * If the exponent is not specified, it defaults to 3, equivalent to cubicOut.
 */
export const easePolyOut: PolynomialEasingFactory;

/**
 * Symmetric polynomial easing/easing factory; scales polyIn for t in [0, 0.5] and polyOut for t in [0.5, 1].
 * If the exponent is not specified, it defaults to 3, equivalent to cubic.
 */
export const easePolyInOut: PolynomialEasingFactory;

/**
 * Symmetric sinusoidal easing; scales sinIn for t in [0, 0.5] and sinOut for t in [0.5, 1].
 *
 * @param normalizedTime Normalized time typically in the range [0, 1]
 */
export function easeSin(normalizedTime: number): number;

/**
 * Sinusoidal easing; returns sin(t).
 *
 * @param normalizedTime Normalized time typically in the range [0, 1]
 */
export function easeSinIn(normalizedTime: number): number;

/**
 * Reverse sinusoidal easing; equivalent to 1 - sinIn(1 - t).
 *
 * @param normalizedTime Normalized time typically in the range [0, 1]
 */
export function easeSinOut(normalizedTime: number): number;

/**
 * Symmetric sinusoidal easing; scales sinIn for t in [0, 0.5] and sinOut for t in [0.5, 1].
 *
 * @param normalizedTime Normalized time typically in the range [0, 1]
 */
export function easeSinInOut(normalizedTime: number): number;

/**
 * Symmetric exponential easing; scales expIn for t in [0, 0.5] and expOut for t in [0.5, 1].
 *
 * @param normalizedTime Normalized time typically in the range [0, 1]
 */
export function easeExp(normalizedTime: number): number;

/**
 * Exponential easing; raises 2 to the exponent 10 * (t - 1).
 *
 * @param normalizedTime Normalized time typically in the range [0, 1]
 */
export function easeExpIn(normalizedTime: number): number;

/**
 * Reverse exponential easing; equivalent to 1 - expIn(1 - t).
 *
 * @param normalizedTime Normalized time typically in the range [0, 1]
 */
export function easeExpOut(normalizedTime: number): number;

/**
 * Symmetric exponential easing; scales expIn for t in [0, 0.5] and expOut for t in [0.5, 1].
 *
 * @param normalizedTime Normalized time typically in the range [0, 1]
 */
export function easeExpInOut(normalizedTime: number): number;

/**
 * Symmetric circular easing; scales circleIn for t in [0, 0.5] and circleOut for t in [0.5, 1].
 *
 * @param normalizedTime Normalized time typically in the range [0, 1]
 */
export function easeCircle(normalizedTime: number): number;

/**
 * Circular easing.
 *
 * @param normalizedTime Normalized time typically in the range [0, 1]
 */
export function easeCircleIn(normalizedTime: number): number;

/**
 * Reverse circular easing; equivalent to 1 - circleIn(1 - t).
 *
 * @param normalizedTime Normalized time typically in the range [0, 1]
 */
export function easeCircleOut(normalizedTime: number): number;

/**
 * Symmetric circular easing; scales circleIn for t in [0, 0.5] and circleOut for t in [0.5, 1].
 *
 * @param normalizedTime Normalized time typically in the range [0, 1]
 */
export function easeCircleInOut(normalizedTime: number): number;

/**
 * Reverse bounce easing; equivalent to 1 - bounceIn(1 - t).
 *
 * @param normalizedTime Normalized time typically in the range [0, 1]
 */
export function easeBounce(normalizedTime: number): number;

/**
 * Bounce easing, like a rubber ball.
 *
 * @param normalizedTime Normalized time typically in the range [0, 1]
 */
export function easeBounceIn(normalizedTime: number): number;

/**
 * Reverse bounce easing; equivalent to 1 - bounceIn(1 - t).
 *
 * @param normalizedTime Normalized time typically in the range [0, 1]
 */
export function easeBounceOut(normalizedTime: number): number;

/**
 * Symmetric bounce easing; scales bounceIn for t in [0, 0.5] and bounceOut for t in [0.5, 1].
 *
 * @param normalizedTime Normalized time typically in the range [0, 1]
 */
export function easeBounceInOut(normalizedTime: number): number;

/**
 * Anticipatory easing function factory
 */
export interface BackEasingFactory {
    /**
     * Calculate eased time.
     * @param normalizedTime Normalized time typically in the range [0, 1]
     */
    (normalizedTime: number): number;
    /**
     * Returns a new back easing with the specified overshoot s.
     * The degree of overshoot is configurable; if not specified, it defaults to 1.70158.
     *
     * @param s Overshoot parameter
     */
    overshoot(s: number): BackEasingFactory;
}

/**
 * Symmetric anticipatory easing; scales backIn for t in [0, 0.5] and backOut for t in [0.5, 1].
 * The degree of overshoot is configurable; it not specified, it defaults to 1.70158.
 */
export const easeBack: BackEasingFactory;

/**
 * Anticipatory easing, like a dancer bending their knees before jumping off the floor.
 * The degree of overshoot is configurable; it not specified, it defaults to 1.70158.
 */
export const easeBackIn: BackEasingFactory;

/**
 * Reverse anticipatory easing; equivalent to 1 - backIn(1 - t).
 * The degree of overshoot is configurable; it not specified, it defaults to 1.70158.
 */
export const easeBackOut: BackEasingFactory;

/**
 * Symmetric anticipatory easing; scales backIn for t in [0, 0.5] and backOut for t in [0.5, 1].
 * The degree of overshoot is configurable; it not specified, it defaults to 1.70158.
 */
export const easeBackInOut: BackEasingFactory;

/**
 * Elastic easing function factory
 */
export interface ElasticEasingFactory {
    /**
     * Calculate eased time.
     * @param normalizedTime Normalized time typically in the range [0, 1]
     */
    (normalizedTime: number): number;
    /**
     * Returns a new elastic easing with the specified amplitude a.
     * Defaults to 1,if not specified.
     *
     * @param a Amplitude for elastic easing.
     */
    amplitude(a: number): ElasticEasingFactory;
    /**
     * Returns a new elastic easing with the specified amplitude a.
     * Defaults to 0.3,if not specified.
     *
     * @param p Period for elastic easing.
     */
    period(p: number): ElasticEasingFactory;
}

/**
 * Reverse elastic easing; equivalent to 1 - elasticIn(1 - t).
 * The amplitude and period of the oscillation are configurable;
 * if not specified, they default to 1 and 0.3, respectively.
 */
export const easeElastic: ElasticEasingFactory;

/**
 * Elastic easing, like a rubber band.
 * The amplitude and period of the oscillation are configurable;
 * if not specified, they default to 1 and 0.3, respectively.
 */
export const easeElasticIn: ElasticEasingFactory;

/**
 * Reverse elastic easing; equivalent to 1 - elasticIn(1 - t).
 * The amplitude and period of the oscillation are configurable;
 * if not specified, they default to 1 and 0.3, respectively.
 */
export const easeElasticOut: ElasticEasingFactory;

/**
 * Symmetric elastic easing; scales elasticIn for t in [0, 0.5] and elasticOut for t in [0.5, 1].
 * The amplitude and period of the oscillation are configurable;
 * if not specified, they default to 1 and 0.3, respectively.
 */
export const easeElasticInOut: ElasticEasingFactory;

----------------------------------------
File: ./animations/node_modules/@types/json-schema/README.md
----------------------------------------
# Installation
> `npm install --save @types/json-schema`

# Summary
This package contains type definitions for json-schema (https://github.com/kriszyp/json-schema).

# Details
Files were exported from https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/json-schema.

### Additional Details
 * Last updated: Tue, 07 Nov 2023 03:09:37 GMT
 * Dependencies: none

# Credits
These definitions were written by [Boris Cherny](https://github.com/bcherny), [Lucian Buzzo](https://github.com/lucianbuzzo), [Roland Groza](https://github.com/rolandjitsu), and [Jason Kwok](https://github.com/JasonHK).

----------------------------------------
File: ./animations/node_modules/@types/json-schema/index.d.ts
----------------------------------------
// ==================================================================================================
// JSON Schema Draft 04
// ==================================================================================================

/**
 * @see https://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.1
 */
export type JSONSchema4TypeName =
    | "string" //
    | "number"
    | "integer"
    | "boolean"
    | "object"
    | "array"
    | "null"
    | "any";

/**
 * @see https://tools.ietf.org/html/draft-zyp-json-schema-04#section-3.5
 */
export type JSONSchema4Type =
    | string //
    | number
    | boolean
    | JSONSchema4Object
    | JSONSchema4Array
    | null;

// Workaround for infinite type recursion
export interface JSONSchema4Object {
    [key: string]: JSONSchema4Type;
}

// Workaround for infinite type recursion
// https://github.com/Microsoft/TypeScript/issues/3496#issuecomment-128553540
export interface JSONSchema4Array extends Array<JSONSchema4Type> {}

/**
 * Meta schema
 *
 * Recommended values:
 * - 'http://json-schema.org/schema#'
 * - 'http://json-schema.org/hyper-schema#'
 * - 'http://json-schema.org/draft-04/schema#'
 * - 'http://json-schema.org/draft-04/hyper-schema#'
 * - 'http://json-schema.org/draft-03/schema#'
 * - 'http://json-schema.org/draft-03/hyper-schema#'
 *
 * @see https://tools.ietf.org/html/draft-handrews-json-schema-validation-01#section-5
 */
export type JSONSchema4Version = string;

/**
 * JSON Schema V4
 * @see https://tools.ietf.org/html/draft-zyp-json-schema-04
 */
export interface JSONSchema4 {
    id?: string | undefined;
    $ref?: string | undefined;
    $schema?: JSONSchema4Version | undefined;

    /**
     * This attribute is a string that provides a short description of the
     * instance property.
     *
     * @see https://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.21
     */
    title?: string | undefined;

    /**
     * This attribute is a string that provides a full description of the of
     * purpose the instance property.
     *
     * @see https://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.22
     */
    description?: string | undefined;

    default?: JSONSchema4Type | undefined;
    multipleOf?: number | undefined;
    maximum?: number | undefined;
    exclusiveMaximum?: boolean | undefined;
    minimum?: number | undefined;
    exclusiveMinimum?: boolean | undefined;
    maxLength?: number | undefined;
    minLength?: number | undefined;
    pattern?: string | undefined;

    /**
     * May only be defined when "items" is defined, and is a tuple of JSONSchemas.
     *
     * This provides a definition for additional items in an array instance
     * when tuple definitions of the items is provided.  This can be false
     * to indicate additional items in the array are not allowed, or it can
     * be a schema that defines the schema of the additional items.
     *
     * @see https://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.6
     */
    additionalItems?: boolean | JSONSchema4 | undefined;

    /**
     * This attribute defines the allowed items in an instance array, and
     * MUST be a schema or an array of schemas.  The default value is an
     * empty schema which allows any value for items in the instance array.
     *
     * When this attribute value is a schema and the instance value is an
     * array, then all the items in the array MUST be valid according to the
     * schema.
     *
     * When this attribute value is an array of schemas and the instance
     * value is an array, each position in the instance array MUST conform
     * to the schema in the corresponding position for this array.  This
     * called tuple typing.  When tuple typing is used, additional items are
     * allowed, disallowed, or constrained by the "additionalItems"
     * (Section 5.6) attribute using the same rules as
     * "additionalProperties" (Section 5.4) for objects.
     *
     * @see https://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.5
     */
    items?: JSONSchema4 | JSONSchema4[] | undefined;

    maxItems?: number | undefined;
    minItems?: number | undefined;
    uniqueItems?: boolean | undefined;
    maxProperties?: number | undefined;
    minProperties?: number | undefined;

    /**
     * This attribute indicates if the instance must have a value, and not
     * be undefined. This is false by default, making the instance
     * optional.
     *
     * @see https://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.7
     */
    required?: boolean | string[] | undefined;

    /**
     * This attribute defines a schema for all properties that are not
     * explicitly defined in an object type definition. If specified, the
     * value MUST be a schema or a boolean. If false is provided, no
     * additional properties are allowed beyond the properties defined in
     * the schema. The default value is an empty schema which allows any
     * value for additional properties.
     *
     * @see https://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.4
     */
    additionalProperties?: boolean | JSONSchema4 | undefined;

    definitions?: {
        [k: string]: JSONSchema4;
    } | undefined;

    /**
     * This attribute is an object with property definitions that define the
     * valid values of instance object property values. When the instance
     * value is an object, the property values of the instance object MUST
     * conform to the property definitions in this object. In this object,
     * each property definition's value MUST be a schema, and the property's
     * name MUST be the name of the instance property that it defines.  The
     * instance property value MUST be valid according to the schema from
     * the property definition. Properties are considered unordered, the
     * order of the instance properties MAY be in any order.
     *
     * @see https://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.2
     */
    properties?: {
        [k: string]: JSONSchema4;
    } | undefined;

    /**
     * This attribute is an object that defines the schema for a set of
     * property names of an object instance. The name of each property of
     * this attribute's object is a regular expression pattern in the ECMA
     * 262/Perl 5 format, while the value is a schema. If the pattern
     * matches the name of a property on the instance object, the value of
     * the instance's property MUST be valid against the pattern name's
     * schema value.
     *
     * @see https://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.3
     */
    patternProperties?: {
        [k: string]: JSONSchema4;
    } | undefined;
    dependencies?: {
        [k: string]: JSONSchema4 | string[];
    } | undefined;

    /**
     * This provides an enumeration of all possible values that are valid
     * for the instance property. This MUST be an array, and each item in
     * the array represents a possible value for the instance value. If
     * this attribute is defined, the instance value MUST be one of the
     * values in the array in order for the schema to be valid.
     *
     * @see https://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.19
     */
    enum?: JSONSchema4Type[] | undefined;

    /**
     * A single type, or a union of simple types
     */
    type?: JSONSchema4TypeName | JSONSchema4TypeName[] | undefined;

    allOf?: JSONSchema4[] | undefined;
    anyOf?: JSONSchema4[] | undefined;
    oneOf?: JSONSchema4[] | undefined;
    not?: JSONSchema4 | undefined;

    /**
     * The value of this property MUST be another schema which will provide
     * a base schema which the current schema will inherit from.  The
     * inheritance rules are such that any instance that is valid according
     * to the current schema MUST be valid according to the referenced
     * schema.  This MAY also be an array, in which case, the instance MUST
     * be valid for all the schemas in the array.  A schema that extends
     * another schema MAY define additional attributes, constrain existing
     * attributes, or add other constraints.
     *
     * Conceptually, the behavior of extends can be seen as validating an
     * instance against all constraints in the extending schema as well as
     * the extended schema(s).
     *
     * @see https://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.26
     */
    extends?: string | string[] | undefined;

    /**
     * @see https://tools.ietf.org/html/draft-zyp-json-schema-04#section-5.6
     */
    [k: string]: any;

    format?: string | undefined;
}

// ==================================================================================================
// JSON Schema Draft 06
// ==================================================================================================

export type JSONSchema6TypeName =
    | "string" //
    | "number"
    | "integer"
    | "boolean"
    | "object"
    | "array"
    | "null"
    | "any";

export type JSONSchema6Type =
    | string //
    | number
    | boolean
    | JSONSchema6Object
    | JSONSchema6Array
    | null;

// Workaround for infinite type recursion
export interface JSONSchema6Object {
    [key: string]: JSONSchema6Type;
}

// Workaround for infinite type recursion
// https://github.com/Microsoft/TypeScript/issues/3496#issuecomment-128553540
export interface JSONSchema6Array extends Array<JSONSchema6Type> {}

/**
 * Meta schema
 *
 * Recommended values:
 * - 'http://json-schema.org/schema#'
 * - 'http://json-schema.org/hyper-schema#'
 * - 'http://json-schema.org/draft-06/schema#'
 * - 'http://json-schema.org/draft-06/hyper-schema#'
 *
 * @see https://tools.ietf.org/html/draft-handrews-json-schema-validation-01#section-5
 */
export type JSONSchema6Version = string;

/**
 * JSON Schema V6
 * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01
 */
export type JSONSchema6Definition = JSONSchema6 | boolean;
export interface JSONSchema6 {
    $id?: string | undefined;
    $ref?: string | undefined;
    $schema?: JSONSchema6Version | undefined;

    /**
     * Must be strictly greater than 0.
     * A numeric instance is valid only if division by this keyword's value results in an integer.
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.1
     */
    multipleOf?: number | undefined;

    /**
     * Representing an inclusive upper limit for a numeric instance.
     * This keyword validates only if the instance is less than or exactly equal to "maximum".
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.2
     */
    maximum?: number | undefined;

    /**
     * Representing an exclusive upper limit for a numeric instance.
     * This keyword validates only if the instance is strictly less than (not equal to) to "exclusiveMaximum".
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.3
     */
    exclusiveMaximum?: number | undefined;

    /**
     * Representing an inclusive lower limit for a numeric instance.
     * This keyword validates only if the instance is greater than or exactly equal to "minimum".
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.4
     */
    minimum?: number | undefined;

    /**
     * Representing an exclusive lower limit for a numeric instance.
     * This keyword validates only if the instance is strictly greater than (not equal to) to "exclusiveMinimum".
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.5
     */
    exclusiveMinimum?: number | undefined;

    /**
     * Must be a non-negative integer.
     * A string instance is valid against this keyword if its length is less than, or equal to, the value of this keyword.
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.6
     */
    maxLength?: number | undefined;

    /**
     * Must be a non-negative integer.
     * A string instance is valid against this keyword if its length is greater than, or equal to, the value of this keyword.
     * Omitting this keyword has the same behavior as a value of 0.
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.7
     */
    minLength?: number | undefined;

    /**
     * Should be a valid regular expression, according to the ECMA 262 regular expression dialect.
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.8
     */
    pattern?: string | undefined;

    /**
     * This keyword determines how child instances validate for arrays, and does not directly validate the immediate instance itself.
     * Omitting this keyword has the same behavior as an empty schema.
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.9
     */
    items?: JSONSchema6Definition | JSONSchema6Definition[] | undefined;

    /**
     * This keyword determines how child instances validate for arrays, and does not directly validate the immediate instance itself.
     * If "items" is an array of schemas, validation succeeds if every instance element
     * at a position greater than the size of "items" validates against "additionalItems".
     * Otherwise, "additionalItems" MUST be ignored, as the "items" schema
     * (possibly the default value of an empty schema) is applied to all elements.
     * Omitting this keyword has the same behavior as an empty schema.
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.10
     */
    additionalItems?: JSONSchema6Definition | undefined;

    /**
     * Must be a non-negative integer.
     * An array instance is valid against "maxItems" if its size is less than, or equal to, the value of this keyword.
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.11
     */
    maxItems?: number | undefined;

    /**
     * Must be a non-negative integer.
     * An array instance is valid against "maxItems" if its size is greater than, or equal to, the value of this keyword.
     * Omitting this keyword has the same behavior as a value of 0.
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.12
     */
    minItems?: number | undefined;

    /**
     * If this keyword has boolean value false, the instance validates successfully.
     * If it has boolean value true, the instance validates successfully if all of its elements are unique.
     * Omitting this keyword has the same behavior as a value of false.
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.13
     */
    uniqueItems?: boolean | undefined;

    /**
     * An array instance is valid against "contains" if at least one of its elements is valid against the given schema.
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.14
     */
    contains?: JSONSchema6Definition | undefined;

    /**
     * Must be a non-negative integer.
     * An object instance is valid against "maxProperties" if its number of properties is less than, or equal to, the value of this keyword.
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.15
     */
    maxProperties?: number | undefined;

    /**
     * Must be a non-negative integer.
     * An object instance is valid against "maxProperties" if its number of properties is greater than,
     * or equal to, the value of this keyword.
     * Omitting this keyword has the same behavior as a value of 0.
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.16
     */
    minProperties?: number | undefined;

    /**
     * Elements of this array must be unique.
     * An object instance is valid against this keyword if every item in the array is the name of a property in the instance.
     * Omitting this keyword has the same behavior as an empty array.
     *
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.17
     */
    required?: string[] | undefined;

    /**
     * This keyword determines how child instances validate for objects, and does not directly validate the immediate instance itself.
     * Validation succeeds if, for each name that appears in both the instance and as a name within this keyword's value,
     * the child instance for that name successfully validates against the corresponding schema.
     * Omitting this keyword has the same behavior as an empty object.
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.18
     */
    properties?: {
        [k: string]: JSONSchema6Definition;
    } | undefined;

    /**
     * This attribute is an object that defines the schema for a set of property names of an object instance.
     * The name of each property of this attribute's object is a regular expression pattern in the ECMA 262, while the value is a schema.
     * If the pattern matches the name of a property on the instance object, the value of the instance's property
     * MUST be valid against the pattern name's schema value.
     * Omitting this keyword has the same behavior as an empty object.
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.19
     */
    patternProperties?: {
        [k: string]: JSONSchema6Definition;
    } | undefined;

    /**
     * This attribute defines a schema for all properties that are not explicitly defined in an object type definition.
     * If specified, the value MUST be a schema or a boolean.
     * If false is provided, no additional properties are allowed beyond the properties defined in the schema.
     * The default value is an empty schema which allows any value for additional properties.
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.20
     */
    additionalProperties?: JSONSchema6Definition | undefined;

    /**
     * This keyword specifies rules that are evaluated if the instance is an object and contains a certain property.
     * Each property specifies a dependency.
     * If the dependency value is an array, each element in the array must be unique.
     * Omitting this keyword has the same behavior as an empty object.
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.21
     */
    dependencies?: {
        [k: string]: JSONSchema6Definition | string[];
    } | undefined;

    /**
     * Takes a schema which validates the names of all properties rather than their values.
     * Note the property name that the schema is testing will always be a string.
     * Omitting this keyword has the same behavior as an empty schema.
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.22
     */
    propertyNames?: JSONSchema6Definition | undefined;

    /**
     * This provides an enumeration of all possible values that are valid
     * for the instance property. This MUST be an array, and each item in
     * the array represents a possible value for the instance value. If
     * this attribute is defined, the instance value MUST be one of the
     * values in the array in order for the schema to be valid.
     *
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.23
     */
    enum?: JSONSchema6Type[] | undefined;

    /**
     * More readable form of a one-element "enum"
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.24
     */
    const?: JSONSchema6Type | undefined;

    /**
     * A single type, or a union of simple types
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.25
     */
    type?: JSONSchema6TypeName | JSONSchema6TypeName[] | undefined;

    /**
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.26
     */
    allOf?: JSONSchema6Definition[] | undefined;

    /**
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.27
     */
    anyOf?: JSONSchema6Definition[] | undefined;

    /**
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.28
     */
    oneOf?: JSONSchema6Definition[] | undefined;

    /**
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-6.29
     */
    not?: JSONSchema6Definition | undefined;

    /**
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-7.1
     */
    definitions?: {
        [k: string]: JSONSchema6Definition;
    } | undefined;

    /**
     * This attribute is a string that provides a short description of the instance property.
     *
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-7.2
     */
    title?: string | undefined;

    /**
     * This attribute is a string that provides a full description of the of purpose the instance property.
     *
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-7.2
     */
    description?: string | undefined;

    /**
     * This keyword can be used to supply a default JSON value associated with a particular schema.
     * It is RECOMMENDED that a default value be valid against the associated schema.
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-7.3
     */
    default?: JSONSchema6Type | undefined;

    /**
     * Array of examples with no validation effect the value of "default" is usable as an example without repeating it under this keyword
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-7.4
     */
    examples?: JSONSchema6Type[] | undefined;

    /**
     * @see https://tools.ietf.org/html/draft-wright-json-schema-validation-01#section-8
     */
    format?: string | undefined;
}

// ==================================================================================================
// JSON Schema Draft 07
// ==================================================================================================
// https://tools.ietf.org/html/draft-handrews-json-schema-validation-01
// --------------------------------------------------------------------------------------------------

/**
 * Primitive type
 * @see https://tools.ietf.org/html/draft-handrews-json-schema-validation-01#section-6.1.1
 */
export type JSONSchema7TypeName =
    | "string" //
    | "number"
    | "integer"
    | "boolean"
    | "object"
    | "array"
    | "null";

/**
 * Primitive type
 * @see https://tools.ietf.org/html/draft-handrews-json-schema-validation-01#section-6.1.1
 */
export type JSONSchema7Type =
    | string //
    | number
    | boolean
    | JSONSchema7Object
    | JSONSchema7Array
    | null;

// Workaround for infinite type recursion
export interface JSONSchema7Object {
    [key: string]: JSONSchema7Type;
}

// Workaround for infinite type recursion
// https://github.com/Microsoft/TypeScript/issues/3496#issuecomment-128553540
export interface JSONSchema7Array extends Array<JSONSchema7Type> {}

/**
 * Meta schema
 *
 * Recommended values:
 * - 'http://json-schema.org/schema#'
 * - 'http://json-schema.org/hyper-schema#'
 * - 'http://json-schema.org/draft-07/schema#'
 * - 'http://json-schema.org/draft-07/hyper-schema#'
 *
 * @see https://tools.ietf.org/html/draft-handrews-json-schema-validation-01#section-5
 */
export type JSONSchema7Version = string;

/**
 * JSON Schema v7
 * @see https://tools.ietf.org/html/draft-handrews-json-schema-validation-01
 */
export type JSONSchema7Definition = JSONSchema7 | boolean;
export interface JSONSchema7 {
    $id?: string | undefined;
    $ref?: string | undefined;
    $schema?: JSONSchema7Version | undefined;
    $comment?: string | undefined;

    /**
     * @see https://datatracker.ietf.org/doc/html/draft-bhutton-json-schema-00#section-8.2.4
     * @see https://datatracker.ietf.org/doc/html/draft-bhutton-json-schema-validation-00#appendix-A
     */
    $defs?: {
        [key: string]: JSONSchema7Definition;
    } | undefined;

    /**
     * @see https://tools.ietf.org/html/draft-handrews-json-schema-validation-01#section-6.1
     */
    type?: JSONSchema7TypeName | JSONSchema7TypeName[] | undefined;
    enum?: JSONSchema7Type[] | undefined;
    const?: JSONSchema7Type | undefined;

    /**
     * @see https://tools.ietf.org/html/draft-handrews-json-schema-validation-01#section-6.2
     */
    multipleOf?: number | undefined;
    maximum?: number | undefined;
    exclusiveMaximum?: number | undefined;
    minimum?: number | undefined;
    exclusiveMinimum?: number | undefined;

    /**
     * @see https://tools.ietf.org/html/draft-handrews-json-schema-validation-01#section-6.3
     */
    maxLength?: number | undefined;
    minLength?: number | undefined;
    pattern?: string | undefined;

    /**
     * @see https://tools.ietf.org/html/draft-handrews-json-schema-validation-01#section-6.4
     */
    items?: JSONSchema7Definition | JSONSchema7Definition[] | undefined;
    additionalItems?: JSONSchema7Definition | undefined;
    maxItems?: number | undefined;
    minItems?: number | undefined;
    uniqueItems?: boolean | undefined;
    contains?: JSONSchema7Definition | undefined;

    /**
     * @see https://tools.ietf.org/html/draft-handrews-json-schema-validation-01#section-6.5
     */
    maxProperties?: number | undefined;
    minProperties?: number | undefined;
    required?: string[] | undefined;
    properties?: {
        [key: string]: JSONSchema7Definition;
    } | undefined;
    patternProperties?: {
        [key: string]: JSONSchema7Definition;
    } | undefined;
    additionalProperties?: JSONSchema7Definition | undefined;
    dependencies?: {
        [key: string]: JSONSchema7Definition | string[];
    } | undefined;
    propertyNames?: JSONSchema7Definition | undefined;

    /**
     * @see https://tools.ietf.org/html/draft-handrews-json-schema-validation-01#section-6.6
     */
    if?: JSONSchema7Definition | undefined;
    then?: JSONSchema7Definition | undefined;
    else?: JSONSchema7Definition | undefined;

    /**
     * @see https://tools.ietf.org/html/draft-handrews-json-schema-validation-01#section-6.7
     */
    allOf?: JSONSchema7Definition[] | undefined;
    anyOf?: JSONSchema7Definition[] | undefined;
    oneOf?: JSONSchema7Definition[] | undefined;
    not?: JSONSchema7Definition | undefined;

    /**
     * @see https://tools.ietf.org/html/draft-handrews-json-schema-validation-01#section-7
     */
    format?: string | undefined;

    /**
     * @see https://tools.ietf.org/html/draft-handrews-json-schema-validation-01#section-8
     */
    contentMediaType?: string | undefined;
    contentEncoding?: string | undefined;

    /**
     * @see https://tools.ietf.org/html/draft-handrews-json-schema-validation-01#section-9
     */
    definitions?: {
        [key: string]: JSONSchema7Definition;
    } | undefined;

    /**
     * @see https://tools.ietf.org/html/draft-handrews-json-schema-validation-01#section-10
     */
    title?: string | undefined;
    description?: string | undefined;
    default?: JSONSchema7Type | undefined;
    readOnly?: boolean | undefined;
    writeOnly?: boolean | undefined;
    examples?: JSONSchema7Type | undefined;
}

export interface ValidationResult {
    valid: boolean;
    errors: ValidationError[];
}

export interface ValidationError {
    property: string;
    message: string;
}

/**
 * To use the validator call JSONSchema.validate with an instance object and an optional schema object.
 * If a schema is provided, it will be used to validate. If the instance object refers to a schema (self-validating),
 * that schema will be used to validate and the schema parameter is not necessary (if both exist,
 * both validations will occur).
 */
export function validate(instance: {}, schema: JSONSchema4 | JSONSchema6 | JSONSchema7): ValidationResult;

/**
 * The checkPropertyChange method will check to see if an value can legally be in property with the given schema
 * This is slightly different than the validate method in that it will fail if the schema is readonly and it will
 * not check for self-validation, it is assumed that the passed in value is already internally valid.
 */
export function checkPropertyChange(
    value: any,
    schema: JSONSchema4 | JSONSchema6 | JSONSchema7,
    property: string,
): ValidationResult;

/**
 * This checks to ensure that the result is valid and will throw an appropriate error message if it is not.
 */
export function mustBeValid(result: ValidationResult): void;

----------------------------------------
File: ./animations/node_modules/globals/index.js
----------------------------------------
'use strict';
module.exports = require('./globals.json');

----------------------------------------
File: ./animations/node_modules/globals/readme.md
----------------------------------------
# globals

> Global identifiers from different JavaScript environments

It's just a [JSON file](globals.json), so you can use it in any environment.

This package is used by ESLint 8 and earlier. For ESLint 9 and later, you should depend on this package directly in [your ESLint config](https://eslint.org/docs/latest/use/configure/language-options#predefined-global-variables).

## Install

```sh
npm install globals
```

## Usage

```js
import globals from 'globals';

console.log(globals.browser);
/*
{
	addEventListener: false,
	applicationCache: false,
	ArrayBuffer: false,
	atob: false,
	…
}
*/
```

Each global is given a value of `true` or `false`. A value of `true` indicates that the variable may be overwritten. A value of `false` indicates that the variable should be considered read-only. This information is used by static analysis tools to flag incorrect behavior. We assume all variables should be `false` unless we hear otherwise.

For Node.js this package provides two sets of globals:

- `globals.nodeBuiltin`: Globals available to all code running in Node.js.
	These will usually be available as properties on the `globalThis` object and include `process`, `Buffer`, but not CommonJS arguments like `require`.
	See: https://nodejs.org/api/globals.html
- `globals.node`: A combination of the globals from `nodeBuiltin` plus all CommonJS arguments ("CommonJS module scope").
	See: https://nodejs.org/api/modules.html#modules_the_module_scope

When analyzing code that is known to run outside of a CommonJS wrapper, for example, JavaScript modules, `nodeBuiltin` can find accidental CommonJS references.

----------------------------------------
File: ./animations/node_modules/globals/index.d.ts
----------------------------------------
// This file is autogenerated by scripts/generate-types.mjs
// Do NOT modify this file manually

type GlobalsAmd = {
	readonly 'define': false;
	readonly 'require': false;
}

type GlobalsApplescript = {
	readonly '$': false;
	readonly 'Application': false;
	readonly 'Automation': false;
	readonly 'console': false;
	readonly 'delay': false;
	readonly 'Library': false;
	readonly 'ObjC': false;
	readonly 'ObjectSpecifier': false;
	readonly 'Path': false;
	readonly 'Progress': false;
	readonly 'Ref': false;
}

type GlobalsAtomtest = {
	readonly 'advanceClock': false;
	readonly 'atom': false;
	readonly 'fakeClearInterval': false;
	readonly 'fakeClearTimeout': false;
	readonly 'fakeSetInterval': false;
	readonly 'fakeSetTimeout': false;
	readonly 'resetTimeouts': false;
	readonly 'waitsForPromise': false;
}

type GlobalsBrowser = {
	readonly 'AbortController': false;
	readonly 'AbortSignal': false;
	readonly 'AbsoluteOrientationSensor': false;
	readonly 'AbstractRange': false;
	readonly 'Accelerometer': false;
	readonly 'addEventListener': false;
	readonly 'ai': false;
	readonly 'AI': false;
	readonly 'AITextSession': false;
	readonly 'alert': false;
	readonly 'AnalyserNode': false;
	readonly 'Animation': false;
	readonly 'AnimationEffect': false;
	readonly 'AnimationEvent': false;
	readonly 'AnimationPlaybackEvent': false;
	readonly 'AnimationTimeline': false;
	readonly 'atob': false;
	readonly 'Attr': false;
	readonly 'Audio': false;
	readonly 'AudioBuffer': false;
	readonly 'AudioBufferSourceNode': false;
	readonly 'AudioContext': false;
	readonly 'AudioData': false;
	readonly 'AudioDecoder': false;
	readonly 'AudioDestinationNode': false;
	readonly 'AudioEncoder': false;
	readonly 'AudioListener': false;
	readonly 'AudioNode': false;
	readonly 'AudioParam': false;
	readonly 'AudioParamMap': false;
	readonly 'AudioProcessingEvent': false;
	readonly 'AudioScheduledSourceNode': false;
	readonly 'AudioSinkInfo': false;
	readonly 'AudioWorklet': false;
	readonly 'AudioWorkletGlobalScope': false;
	readonly 'AudioWorkletNode': false;
	readonly 'AudioWorkletProcessor': false;
	readonly 'AuthenticatorAssertionResponse': false;
	readonly 'AuthenticatorAttestationResponse': false;
	readonly 'AuthenticatorResponse': false;
	readonly 'BackgroundFetchManager': false;
	readonly 'BackgroundFetchRecord': false;
	readonly 'BackgroundFetchRegistration': false;
	readonly 'BarcodeDetector': false;
	readonly 'BarProp': false;
	readonly 'BaseAudioContext': false;
	readonly 'BatteryManager': false;
	readonly 'BeforeUnloadEvent': false;
	readonly 'BiquadFilterNode': false;
	readonly 'Blob': false;
	readonly 'BlobEvent': false;
	readonly 'Bluetooth': false;
	readonly 'BluetoothCharacteristicProperties': false;
	readonly 'BluetoothDevice': false;
	readonly 'BluetoothRemoteGATTCharacteristic': false;
	readonly 'BluetoothRemoteGATTDescriptor': false;
	readonly 'BluetoothRemoteGATTServer': false;
	readonly 'BluetoothRemoteGATTService': false;
	readonly 'BluetoothUUID': false;
	readonly 'blur': false;
	readonly 'BroadcastChannel': false;
	readonly 'BrowserCaptureMediaStreamTrack': false;
	readonly 'btoa': false;
	readonly 'ByteLengthQueuingStrategy': false;
	readonly 'Cache': false;
	readonly 'caches': false;
	readonly 'CacheStorage': false;
	readonly 'cancelAnimationFrame': false;
	readonly 'cancelIdleCallback': false;
	readonly 'CanvasCaptureMediaStream': false;
	readonly 'CanvasCaptureMediaStreamTrack': false;
	readonly 'CanvasGradient': false;
	readonly 'CanvasPattern': false;
	readonly 'CanvasRenderingContext2D': false;
	readonly 'CaptureController': false;
	readonly 'CaretPosition': false;
	readonly 'CDATASection': false;
	readonly 'ChannelMergerNode': false;
	readonly 'ChannelSplitterNode': false;
	readonly 'ChapterInformation': false;
	readonly 'CharacterBoundsUpdateEvent': false;
	readonly 'CharacterData': false;
	readonly 'clearInterval': false;
	readonly 'clearTimeout': false;
	readonly 'clientInformation': false;
	readonly 'Clipboard': false;
	readonly 'ClipboardEvent': false;
	readonly 'ClipboardItem': false;
	readonly 'close': false;
	readonly 'closed': false;
	readonly 'CloseEvent': false;
	readonly 'CloseWatcher': false;
	readonly 'Comment': false;
	readonly 'CompositionEvent': false;
	readonly 'CompressionStream': false;
	readonly 'confirm': false;
	readonly 'console': false;
	readonly 'ConstantSourceNode': false;
	readonly 'ContentVisibilityAutoStateChangeEvent': false;
	readonly 'ConvolverNode': false;
	readonly 'CookieChangeEvent': false;
	readonly 'CookieDeprecationLabel': false;
	readonly 'cookieStore': false;
	readonly 'CookieStore': false;
	readonly 'CookieStoreManager': false;
	readonly 'CountQueuingStrategy': false;
	readonly 'createImageBitmap': false;
	readonly 'Credential': false;
	readonly 'credentialless': false;
	readonly 'CredentialsContainer': false;
	readonly 'CropTarget': false;
	readonly 'crossOriginIsolated': false;
	readonly 'crypto': false;
	readonly 'Crypto': false;
	readonly 'CryptoKey': false;
	readonly 'CSS': false;
	readonly 'CSSAnimation': false;
	readonly 'CSSConditionRule': false;
	readonly 'CSSContainerRule': false;
	readonly 'CSSCounterStyleRule': false;
	readonly 'CSSFontFaceRule': false;
	readonly 'CSSFontFeatureValuesRule': false;
	readonly 'CSSFontPaletteValuesRule': false;
	readonly 'CSSGroupingRule': false;
	readonly 'CSSImageValue': false;
	readonly 'CSSImportRule': false;
	readonly 'CSSKeyframeRule': false;
	readonly 'CSSKeyframesRule': false;
	readonly 'CSSKeywordValue': false;
	readonly 'CSSLayerBlockRule': false;
	readonly 'CSSLayerStatementRule': false;
	readonly 'CSSMarginRule': false;
	readonly 'CSSMathClamp': false;
	readonly 'CSSMathInvert': false;
	readonly 'CSSMathMax': false;
	readonly 'CSSMathMin': false;
	readonly 'CSSMathNegate': false;
	readonly 'CSSMathProduct': false;
	readonly 'CSSMathSum': false;
	readonly 'CSSMathValue': false;
	readonly 'CSSMatrixComponent': false;
	readonly 'CSSMediaRule': false;
	readonly 'CSSNamespaceRule': false;
	readonly 'CSSNestedDeclarations': false;
	readonly 'CSSNumericArray': false;
	readonly 'CSSNumericValue': false;
	readonly 'CSSPageDescriptors': false;
	readonly 'CSSPageRule': false;
	readonly 'CSSPerspective': false;
	readonly 'CSSPositionTryDescriptors': false;
	readonly 'CSSPositionTryRule': false;
	readonly 'CSSPositionValue': false;
	readonly 'CSSPropertyRule': false;
	readonly 'CSSRotate': false;
	readonly 'CSSRule': false;
	readonly 'CSSRuleList': false;
	readonly 'CSSScale': false;
	readonly 'CSSScopeRule': false;
	readonly 'CSSSkew': false;
	readonly 'CSSSkewX': false;
	readonly 'CSSSkewY': false;
	readonly 'CSSStartingStyleRule': false;
	readonly 'CSSStyleDeclaration': false;
	readonly 'CSSStyleRule': false;
	readonly 'CSSStyleSheet': false;
	readonly 'CSSStyleValue': false;
	readonly 'CSSSupportsRule': false;
	readonly 'CSSTransformComponent': false;
	readonly 'CSSTransformValue': false;
	readonly 'CSSTransition': false;
	readonly 'CSSTranslate': false;
	readonly 'CSSUnitValue': false;
	readonly 'CSSUnparsedValue': false;
	readonly 'CSSVariableReferenceValue': false;
	readonly 'CSSViewTransitionRule': false;
	readonly 'currentFrame': false;
	readonly 'currentTime': false;
	readonly 'CustomElementRegistry': false;
	readonly 'customElements': false;
	readonly 'CustomEvent': false;
	readonly 'CustomStateSet': false;
	readonly 'DataTransfer': false;
	readonly 'DataTransferItem': false;
	readonly 'DataTransferItemList': false;
	readonly 'DecompressionStream': false;
	readonly 'DelayNode': false;
	readonly 'DelegatedInkTrailPresenter': false;
	readonly 'DeviceMotionEvent': false;
	readonly 'DeviceMotionEventAcceleration': false;
	readonly 'DeviceMotionEventRotationRate': false;
	readonly 'DeviceOrientationEvent': false;
	readonly 'devicePixelRatio': false;
	readonly 'dispatchEvent': false;
	readonly 'document': false;
	readonly 'Document': false;
	readonly 'DocumentFragment': false;
	readonly 'documentPictureInPicture': false;
	readonly 'DocumentPictureInPicture': false;
	readonly 'DocumentPictureInPictureEvent': false;
	readonly 'DocumentTimeline': false;
	readonly 'DocumentType': false;
	readonly 'DOMError': false;
	readonly 'DOMException': false;
	readonly 'DOMImplementation': false;
	readonly 'DOMMatrix': false;
	readonly 'DOMMatrixReadOnly': false;
	readonly 'DOMParser': false;
	readonly 'DOMPoint': false;
	readonly 'DOMPointReadOnly': false;
	readonly 'DOMQuad': false;
	readonly 'DOMRect': false;
	readonly 'DOMRectList': false;
	readonly 'DOMRectReadOnly': false;
	readonly 'DOMStringList': false;
	readonly 'DOMStringMap': false;
	readonly 'DOMTokenList': false;
	readonly 'DragEvent': false;
	readonly 'DynamicsCompressorNode': false;
	readonly 'EditContext': false;
	readonly 'Element': false;
	readonly 'ElementInternals': false;
	readonly 'EncodedAudioChunk': false;
	readonly 'EncodedVideoChunk': false;
	readonly 'ErrorEvent': false;
	readonly 'event': false;
	readonly 'Event': false;
	readonly 'EventCounts': false;
	readonly 'EventSource': false;
	readonly 'EventTarget': false;
	readonly 'external': false;
	readonly 'External': false;
	readonly 'EyeDropper': false;
	readonly 'FeaturePolicy': false;
	readonly 'FederatedCredential': false;
	readonly 'fence': false;
	readonly 'Fence': false;
	readonly 'FencedFrameConfig': false;
	readonly 'fetch': false;
	readonly 'fetchLater': false;
	readonly 'FetchLaterResult': false;
	readonly 'File': false;
	readonly 'FileList': false;
	readonly 'FileReader': false;
	readonly 'FileSystem': false;
	readonly 'FileSystemDirectoryEntry': false;
	readonly 'FileSystemDirectoryHandle': false;
	readonly 'FileSystemDirectoryReader': false;
	readonly 'FileSystemEntry': false;
	readonly 'FileSystemFileEntry': false;
	readonly 'FileSystemFileHandle': false;
	readonly 'FileSystemHandle': false;
	readonly 'FileSystemWritableFileStream': false;
	readonly 'find': false;
	readonly 'Float16Array': false;
	readonly 'focus': false;
	readonly 'FocusEvent': false;
	readonly 'FontData': false;
	readonly 'FontFace': false;
	readonly 'FontFaceSet': false;
	readonly 'FontFaceSetLoadEvent': false;
	readonly 'FormData': false;
	readonly 'FormDataEvent': false;
	readonly 'FragmentDirective': false;
	readonly 'frameElement': false;
	readonly 'frames': false;
	readonly 'GainNode': false;
	readonly 'Gamepad': false;
	readonly 'GamepadAxisMoveEvent': false;
	readonly 'GamepadButton': false;
	readonly 'GamepadButtonEvent': false;
	readonly 'GamepadEvent': false;
	readonly 'GamepadHapticActuator': false;
	readonly 'GamepadPose': false;
	readonly 'Geolocation': false;
	readonly 'GeolocationCoordinates': false;
	readonly 'GeolocationPosition': false;
	readonly 'GeolocationPositionError': false;
	readonly 'getComputedStyle': false;
	readonly 'getScreenDetails': false;
	readonly 'getSelection': false;
	readonly 'GPU': false;
	readonly 'GPUAdapter': false;
	readonly 'GPUAdapterInfo': false;
	readonly 'GPUBindGroup': false;
	readonly 'GPUBindGroupLayout': false;
	readonly 'GPUBuffer': false;
	readonly 'GPUBufferUsage': false;
	readonly 'GPUCanvasContext': false;
	readonly 'GPUColorWrite': false;
	readonly 'GPUCommandBuffer': false;
	readonly 'GPUCommandEncoder': false;
	readonly 'GPUCompilationInfo': false;
	readonly 'GPUCompilationMessage': false;
	readonly 'GPUComputePassEncoder': false;
	readonly 'GPUComputePipeline': false;
	readonly 'GPUDevice': false;
	readonly 'GPUDeviceLostInfo': false;
	readonly 'GPUError': false;
	readonly 'GPUExternalTexture': false;
	readonly 'GPUInternalError': false;
	readonly 'GPUMapMode': false;
	readonly 'GPUOutOfMemoryError': false;
	readonly 'GPUPipelineError': false;
	readonly 'GPUPipelineLayout': false;
	readonly 'GPUQuerySet': false;
	readonly 'GPUQueue': false;
	readonly 'GPURenderBundle': false;
	readonly 'GPURenderBundleEncoder': false;
	readonly 'GPURenderPassEncoder': false;
	readonly 'GPURenderPipeline': false;
	readonly 'GPUSampler': false;
	readonly 'GPUShaderModule': false;
	readonly 'GPUShaderStage': false;
	readonly 'GPUSupportedFeatures': false;
	readonly 'GPUSupportedLimits': false;
	readonly 'GPUTexture': false;
	readonly 'GPUTextureUsage': false;
	readonly 'GPUTextureView': false;
	readonly 'GPUUncapturedErrorEvent': false;
	readonly 'GPUValidationError': false;
	readonly 'GravitySensor': false;
	readonly 'Gyroscope': false;
	readonly 'HashChangeEvent': false;
	readonly 'Headers': false;
	readonly 'HID': false;
	readonly 'HIDConnectionEvent': false;
	readonly 'HIDDevice': false;
	readonly 'HIDInputReportEvent': false;
	readonly 'Highlight': false;
	readonly 'HighlightRegistry': false;
	readonly 'history': false;
	readonly 'History': false;
	readonly 'HTMLAllCollection': false;
	readonly 'HTMLAnchorElement': false;
	readonly 'HTMLAreaElement': false;
	readonly 'HTMLAudioElement': false;
	readonly 'HTMLBaseElement': false;
	readonly 'HTMLBodyElement': false;
	readonly 'HTMLBRElement': false;
	readonly 'HTMLButtonElement': false;
	readonly 'HTMLCanvasElement': false;
	readonly 'HTMLCollection': false;
	readonly 'HTMLDataElement': false;
	readonly 'HTMLDataListElement': false;
	readonly 'HTMLDetailsElement': false;
	readonly 'HTMLDialogElement': false;
	readonly 'HTMLDirectoryElement': false;
	readonly 'HTMLDivElement': false;
	readonly 'HTMLDListElement': false;
	readonly 'HTMLDocument': false;
	readonly 'HTMLElement': false;
	readonly 'HTMLEmbedElement': false;
	readonly 'HTMLFencedFrameElement': false;
	readonly 'HTMLFieldSetElement': false;
	readonly 'HTMLFontElement': false;
	readonly 'HTMLFormControlsCollection': false;
	readonly 'HTMLFormElement': false;
	readonly 'HTMLFrameElement': false;
	readonly 'HTMLFrameSetElement': false;
	readonly 'HTMLHeadElement': false;
	readonly 'HTMLHeadingElement': false;
	readonly 'HTMLHRElement': false;
	readonly 'HTMLHtmlElement': false;
	readonly 'HTMLIFrameElement': false;
	readonly 'HTMLImageElement': false;
	readonly 'HTMLInputElement': false;
	readonly 'HTMLLabelElement': false;
	readonly 'HTMLLegendElement': false;
	readonly 'HTMLLIElement': false;
	readonly 'HTMLLinkElement': false;
	readonly 'HTMLMapElement': false;
	readonly 'HTMLMarqueeElement': false;
	readonly 'HTMLMediaElement': false;
	readonly 'HTMLMenuElement': false;
	readonly 'HTMLMetaElement': false;
	readonly 'HTMLMeterElement': false;
	readonly 'HTMLModElement': false;
	readonly 'HTMLObjectElement': false;
	readonly 'HTMLOListElement': false;
	readonly 'HTMLOptGroupElement': false;
	readonly 'HTMLOptionElement': false;
	readonly 'HTMLOptionsCollection': false;
	readonly 'HTMLOutputElement': false;
	readonly 'HTMLParagraphElement': false;
	readonly 'HTMLParamElement': false;
	readonly 'HTMLPictureElement': false;
	readonly 'HTMLPreElement': false;
	readonly 'HTMLProgressElement': false;
	readonly 'HTMLQuoteElement': false;
	readonly 'HTMLScriptElement': false;
	readonly 'HTMLSelectElement': false;
	readonly 'HTMLSlotElement': false;
	readonly 'HTMLSourceElement': false;
	readonly 'HTMLSpanElement': false;
	readonly 'HTMLStyleElement': false;
	readonly 'HTMLTableCaptionElement': false;
	readonly 'HTMLTableCellElement': false;
	readonly 'HTMLTableColElement': false;
	readonly 'HTMLTableElement': false;
	readonly 'HTMLTableRowElement': false;
	readonly 'HTMLTableSectionElement': false;
	readonly 'HTMLTemplateElement': false;
	readonly 'HTMLTextAreaElement': false;
	readonly 'HTMLTimeElement': false;
	readonly 'HTMLTitleElement': false;
	readonly 'HTMLTrackElement': false;
	readonly 'HTMLUListElement': false;
	readonly 'HTMLUnknownElement': false;
	readonly 'HTMLVideoElement': false;
	readonly 'IDBCursor': false;
	readonly 'IDBCursorWithValue': false;
	readonly 'IDBDatabase': false;
	readonly 'IDBFactory': false;
	readonly 'IDBIndex': false;
	readonly 'IDBKeyRange': false;
	readonly 'IDBObjectStore': false;
	readonly 'IDBOpenDBRequest': false;
	readonly 'IDBRequest': false;
	readonly 'IDBTransaction': false;
	readonly 'IDBVersionChangeEvent': false;
	readonly 'IdentityCredential': false;
	readonly 'IdentityCredentialError': false;
	readonly 'IdentityProvider': false;
	readonly 'IdleDeadline': false;
	readonly 'IdleDetector': false;
	readonly 'IIRFilterNode': false;
	readonly 'Image': false;
	readonly 'ImageBitmap': false;
	readonly 'ImageBitmapRenderingContext': false;
	readonly 'ImageCapture': false;
	readonly 'ImageData': false;
	readonly 'ImageDecoder': false;
	readonly 'ImageTrack': false;
	readonly 'ImageTrackList': false;
	readonly 'indexedDB': false;
	readonly 'Ink': false;
	readonly 'innerHeight': false;
	readonly 'innerWidth': false;
	readonly 'InputDeviceCapabilities': false;
	readonly 'InputDeviceInfo': false;
	readonly 'InputEvent': false;
	readonly 'IntersectionObserver': false;
	readonly 'IntersectionObserverEntry': false;
	readonly 'isSecureContext': false;
	readonly 'Keyboard': false;
	readonly 'KeyboardEvent': false;
	readonly 'KeyboardLayoutMap': false;
	readonly 'KeyframeEffect': false;
	readonly 'LargestContentfulPaint': false;
	readonly 'LaunchParams': false;
	readonly 'launchQueue': false;
	readonly 'LaunchQueue': false;
	readonly 'LayoutShift': false;
	readonly 'LayoutShiftAttribution': false;
	readonly 'length': false;
	readonly 'LinearAccelerationSensor': false;
	readonly 'localStorage': false;
	readonly 'location': true;
	readonly 'Location': false;
	readonly 'locationbar': false;
	readonly 'Lock': false;
	readonly 'LockManager': false;
	readonly 'matchMedia': false;
	readonly 'MathMLElement': false;
	readonly 'MediaCapabilities': false;
	readonly 'MediaCapabilitiesInfo': false;
	readonly 'MediaDeviceInfo': false;
	readonly 'MediaDevices': false;
	readonly 'MediaElementAudioSourceNode': false;
	readonly 'MediaEncryptedEvent': false;
	readonly 'MediaError': false;
	readonly 'MediaKeyError': false;
	readonly 'MediaKeyMessageEvent': false;
	readonly 'MediaKeys': false;
	readonly 'MediaKeySession': false;
	readonly 'MediaKeyStatusMap': false;
	readonly 'MediaKeySystemAccess': false;
	readonly 'MediaList': false;
	readonly 'MediaMetadata': false;
	readonly 'MediaQueryList': false;
	readonly 'MediaQueryListEvent': false;
	readonly 'MediaRecorder': false;
	readonly 'MediaRecorderErrorEvent': false;
	readonly 'MediaSession': false;
	readonly 'MediaSource': false;
	readonly 'MediaSourceHandle': false;
	readonly 'MediaStream': false;
	readonly 'MediaStreamAudioDestinationNode': false;
	readonly 'MediaStreamAudioSourceNode': false;
	readonly 'MediaStreamEvent': false;
	readonly 'MediaStreamTrack': false;
	readonly 'MediaStreamTrackAudioSourceNode': false;
	readonly 'MediaStreamTrackAudioStats': false;
	readonly 'MediaStreamTrackEvent': false;
	readonly 'MediaStreamTrackGenerator': false;
	readonly 'MediaStreamTrackProcessor': false;
	readonly 'MediaStreamTrackVideoStats': false;
	readonly 'menubar': false;
	readonly 'MessageChannel': false;
	readonly 'MessageEvent': false;
	readonly 'MessagePort': false;
	readonly 'MIDIAccess': false;
	readonly 'MIDIConnectionEvent': false;
	readonly 'MIDIInput': false;
	readonly 'MIDIInputMap': false;
	readonly 'MIDIMessageEvent': false;
	readonly 'MIDIOutput': false;
	readonly 'MIDIOutputMap': false;
	readonly 'MIDIPort': false;
	readonly 'MimeType': false;
	readonly 'MimeTypeArray': false;
	readonly 'model': false;
	readonly 'ModelGenericSession': false;
	readonly 'ModelManager': false;
	readonly 'MouseEvent': false;
	readonly 'moveBy': false;
	readonly 'moveTo': false;
	readonly 'MutationEvent': false;
	readonly 'MutationObserver': false;
	readonly 'MutationRecord': false;
	readonly 'name': false;
	readonly 'NamedNodeMap': false;
	readonly 'NavigateEvent': false;
	readonly 'navigation': false;
	readonly 'Navigation': false;
	readonly 'NavigationActivation': false;
	readonly 'NavigationCurrentEntryChangeEvent': false;
	readonly 'NavigationDestination': false;
	readonly 'NavigationHistoryEntry': false;
	readonly 'NavigationPreloadManager': false;
	readonly 'NavigationTransition': false;
	readonly 'navigator': false;
	readonly 'Navigator': false;
	readonly 'NavigatorLogin': false;
	readonly 'NavigatorManagedData': false;
	readonly 'NavigatorUAData': false;
	readonly 'NetworkInformation': false;
	readonly 'Node': false;
	readonly 'NodeFilter': false;
	readonly 'NodeIterator': false;
	readonly 'NodeList': false;
	readonly 'Notification': false;
	readonly 'NotifyPaintEvent': false;
	readonly 'NotRestoredReasonDetails': false;
	readonly 'NotRestoredReasons': false;
	readonly 'OfflineAudioCompletionEvent': false;
	readonly 'OfflineAudioContext': false;
	readonly 'offscreenBuffering': false;
	readonly 'OffscreenCanvas': false;
	readonly 'OffscreenCanvasRenderingContext2D': false;
	readonly 'onabort': true;
	readonly 'onafterprint': true;
	readonly 'onanimationcancel': true;
	readonly 'onanimationend': true;
	readonly 'onanimationiteration': true;
	readonly 'onanimationstart': true;
	readonly 'onappinstalled': true;
	readonly 'onauxclick': true;
	readonly 'onbeforeinput': true;
	readonly 'onbeforeinstallprompt': true;
	readonly 'onbeforematch': true;
	readonly 'onbeforeprint': true;
	readonly 'onbeforetoggle': true;
	readonly 'onbeforeunload': true;
	readonly 'onbeforexrselect': true;
	readonly 'onblur': true;
	readonly 'oncancel': true;
	readonly 'oncanplay': true;
	readonly 'oncanplaythrough': true;
	readonly 'onchange': true;
	readonly 'onclick': true;
	readonly 'onclose': true;
	readonly 'oncontentvisibilityautostatechange': true;
	readonly 'oncontextlost': true;
	readonly 'oncontextmenu': true;
	readonly 'oncontextrestored': true;
	readonly 'oncopy': true;
	readonly 'oncuechange': true;
	readonly 'oncut': true;
	readonly 'ondblclick': true;
	readonly 'ondevicemotion': true;
	readonly 'ondeviceorientation': true;
	readonly 'ondeviceorientationabsolute': true;
	readonly 'ondrag': true;
	readonly 'ondragend': true;
	readonly 'ondragenter': true;
	readonly 'ondragleave': true;
	readonly 'ondragover': true;
	readonly 'ondragstart': true;
	readonly 'ondrop': true;
	readonly 'ondurationchange': true;
	readonly 'onemptied': true;
	readonly 'onended': true;
	readonly 'onerror': true;
	readonly 'onfocus': true;
	readonly 'onformdata': true;
	readonly 'ongamepadconnected': true;
	readonly 'ongamepaddisconnected': true;
	readonly 'ongotpointercapture': true;
	readonly 'onhashchange': true;
	readonly 'oninput': true;
	readonly 'oninvalid': true;
	readonly 'onkeydown': true;
	readonly 'onkeypress': true;
	readonly 'onkeyup': true;
	readonly 'onlanguagechange': true;
	readonly 'onload': true;
	readonly 'onloadeddata': true;
	readonly 'onloadedmetadata': true;
	readonly 'onloadstart': true;
	readonly 'onlostpointercapture': true;
	readonly 'onmessage': true;
	readonly 'onmessageerror': true;
	readonly 'onmousedown': true;
	readonly 'onmouseenter': true;
	readonly 'onmouseleave': true;
	readonly 'onmousemove': true;
	readonly 'onmouseout': true;
	readonly 'onmouseover': true;
	readonly 'onmouseup': true;
	readonly 'onmousewheel': true;
	readonly 'onoffline': true;
	readonly 'ononline': true;
	readonly 'onpagehide': true;
	readonly 'onpagereveal': true;
	readonly 'onpageshow': true;
	readonly 'onpageswap': true;
	readonly 'onpaste': true;
	readonly 'onpause': true;
	readonly 'onplay': true;
	readonly 'onplaying': true;
	readonly 'onpointercancel': true;
	readonly 'onpointerdown': true;
	readonly 'onpointerenter': true;
	readonly 'onpointerleave': true;
	readonly 'onpointermove': true;
	readonly 'onpointerout': true;
	readonly 'onpointerover': true;
	readonly 'onpointerrawupdate': true;
	readonly 'onpointerup': true;
	readonly 'onpopstate': true;
	readonly 'onprogress': true;
	readonly 'onratechange': true;
	readonly 'onrejectionhandled': true;
	readonly 'onreset': true;
	readonly 'onresize': true;
	readonly 'onscroll': true;
	readonly 'onscrollend': true;
	readonly 'onscrollsnapchange': true;
	readonly 'onscrollsnapchanging': true;
	readonly 'onsearch': true;
	readonly 'onsecuritypolicyviolation': true;
	readonly 'onseeked': true;
	readonly 'onseeking': true;
	readonly 'onselect': true;
	readonly 'onselectionchange': true;
	readonly 'onselectstart': true;
	readonly 'onslotchange': true;
	readonly 'onstalled': true;
	readonly 'onstorage': true;
	readonly 'onsubmit': true;
	readonly 'onsuspend': true;
	readonly 'ontimeupdate': true;
	readonly 'ontoggle': true;
	readonly 'ontransitioncancel': true;
	readonly 'ontransitionend': true;
	readonly 'ontransitionrun': true;
	readonly 'ontransitionstart': true;
	readonly 'onunhandledrejection': true;
	readonly 'onunload': true;
	readonly 'onvolumechange': true;
	readonly 'onwaiting': true;
	readonly 'onwheel': true;
	readonly 'open': false;
	readonly 'opener': false;
	readonly 'Option': false;
	readonly 'OrientationSensor': false;
	readonly 'origin': false;
	readonly 'originAgentCluster': false;
	readonly 'OscillatorNode': false;
	readonly 'OTPCredential': false;
	readonly 'outerHeight': false;
	readonly 'outerWidth': false;
	readonly 'OverconstrainedError': false;
	readonly 'PageRevealEvent': false;
	readonly 'PageSwapEvent': false;
	readonly 'PageTransitionEvent': false;
	readonly 'pageXOffset': false;
	readonly 'pageYOffset': false;
	readonly 'PannerNode': false;
	readonly 'parent': false;
	readonly 'PasswordCredential': false;
	readonly 'Path2D': false;
	readonly 'PaymentAddress': false;
	readonly 'PaymentManager': false;
	readonly 'PaymentMethodChangeEvent': false;
	readonly 'PaymentRequest': false;
	readonly 'PaymentRequestUpdateEvent': false;
	readonly 'PaymentResponse': false;
	readonly 'performance': false;
	readonly 'Performance': false;
	readonly 'PerformanceElementTiming': false;
	readonly 'PerformanceEntry': false;
	readonly 'PerformanceEventTiming': false;
	readonly 'PerformanceLongAnimationFrameTiming': false;
	readonly 'PerformanceLongTaskTiming': false;
	readonly 'PerformanceMark': false;
	readonly 'PerformanceMeasure': false;
	readonly 'PerformanceNavigation': false;
	readonly 'PerformanceNavigationTiming': false;
	readonly 'PerformanceObserver': false;
	readonly 'PerformanceObserverEntryList': false;
	readonly 'PerformancePaintTiming': false;
	readonly 'PerformanceResourceTiming': false;
	readonly 'PerformanceScriptTiming': false;
	readonly 'PerformanceServerTiming': false;
	readonly 'PerformanceTiming': false;
	readonly 'PeriodicSyncManager': false;
	readonly 'PeriodicWave': false;
	readonly 'Permissions': false;
	readonly 'PermissionStatus': false;
	readonly 'PERSISTENT': false;
	readonly 'personalbar': false;
	readonly 'PictureInPictureEvent': false;
	readonly 'PictureInPictureWindow': false;
	readonly 'Plugin': false;
	readonly 'PluginArray': false;
	readonly 'PointerEvent': false;
	readonly 'PopStateEvent': false;
	readonly 'postMessage': false;
	readonly 'Presentation': false;
	readonly 'PresentationAvailability': false;
	readonly 'PresentationConnection': false;
	readonly 'PresentationConnectionAvailableEvent': false;
	readonly 'PresentationConnectionCloseEvent': false;
	readonly 'PresentationConnectionList': false;
	readonly 'PresentationReceiver': false;
	readonly 'PresentationRequest': false;
	readonly 'PressureObserver': false;
	readonly 'PressureRecord': false;
	readonly 'print': false;
	readonly 'ProcessingInstruction': false;
	readonly 'Profiler': false;
	readonly 'ProgressEvent': false;
	readonly 'PromiseRejectionEvent': false;
	readonly 'prompt': false;
	readonly 'ProtectedAudience': false;
	readonly 'PublicKeyCredential': false;
	readonly 'PushManager': false;
	readonly 'PushSubscription': false;
	readonly 'PushSubscriptionOptions': false;
	readonly 'queryLocalFonts': false;
	readonly 'queueMicrotask': false;
	readonly 'RadioNodeList': false;
	readonly 'Range': false;
	readonly 'ReadableByteStreamController': false;
	readonly 'ReadableStream': false;
	readonly 'ReadableStreamBYOBReader': false;
	readonly 'ReadableStreamBYOBRequest': false;
	readonly 'ReadableStreamDefaultController': false;
	readonly 'ReadableStreamDefaultReader': false;
	readonly 'registerProcessor': false;
	readonly 'RelativeOrientationSensor': false;
	readonly 'RemotePlayback': false;
	readonly 'removeEventListener': false;
	readonly 'reportError': false;
	readonly 'ReportingObserver': false;
	readonly 'Request': false;
	readonly 'requestAnimationFrame': false;
	readonly 'requestIdleCallback': false;
	readonly 'resizeBy': false;
	readonly 'ResizeObserver': false;
	readonly 'ResizeObserverEntry': false;
	readonly 'ResizeObserverSize': false;
	readonly 'resizeTo': false;
	readonly 'Response': false;
	readonly 'RTCCertificate': false;
	readonly 'RTCDataChannel': false;
	readonly 'RTCDataChannelEvent': false;
	readonly 'RTCDtlsTransport': false;
	readonly 'RTCDTMFSender': false;
	readonly 'RTCDTMFToneChangeEvent': false;
	readonly 'RTCEncodedAudioFrame': false;
	readonly 'RTCEncodedVideoFrame': false;
	readonly 'RTCError': false;
	readonly 'RTCErrorEvent': false;
	readonly 'RTCIceCandidate': false;
	readonly 'RTCIceTransport': false;
	readonly 'RTCPeerConnection': false;
	readonly 'RTCPeerConnectionIceErrorEvent': false;
	readonly 'RTCPeerConnectionIceEvent': false;
	readonly 'RTCRtpReceiver': false;
	readonly 'RTCRtpScriptTransform': false;
	readonly 'RTCRtpSender': false;
	readonly 'RTCRtpTransceiver': false;
	readonly 'RTCSctpTransport': false;
	readonly 'RTCSessionDescription': false;
	readonly 'RTCStatsReport': false;
	readonly 'RTCTrackEvent': false;
	readonly 'sampleRate': false;
	readonly 'scheduler': false;
	readonly 'Scheduler': false;
	readonly 'Scheduling': false;
	readonly 'screen': false;
	readonly 'Screen': false;
	readonly 'ScreenDetailed': false;
	readonly 'ScreenDetails': false;
	readonly 'screenLeft': false;
	readonly 'ScreenOrientation': false;
	readonly 'screenTop': false;
	readonly 'screenX': false;
	readonly 'screenY': false;
	readonly 'ScriptProcessorNode': false;
	readonly 'scroll': false;
	readonly 'scrollbars': false;
	readonly 'scrollBy': false;
	readonly 'ScrollTimeline': false;
	readonly 'scrollTo': false;
	readonly 'scrollX': false;
	readonly 'scrollY': false;
	readonly 'SecurityPolicyViolationEvent': false;
	readonly 'Selection': false;
	readonly 'self': false;
	readonly 'Sensor': false;
	readonly 'SensorErrorEvent': false;
	readonly 'Serial': false;
	readonly 'SerialPort': false;
	readonly 'ServiceWorker': false;
	readonly 'ServiceWorkerContainer': false;
	readonly 'ServiceWorkerRegistration': false;
	readonly 'sessionStorage': false;
	readonly 'setInterval': false;
	readonly 'setTimeout': false;
	readonly 'ShadowRoot': false;
	readonly 'sharedStorage': false;
	readonly 'SharedStorage': false;
	readonly 'SharedStorageWorklet': false;
	readonly 'SharedWorker': false;
	readonly 'showDirectoryPicker': false;
	readonly 'showOpenFilePicker': false;
	readonly 'showSaveFilePicker': false;
	readonly 'SnapEvent': false;
	readonly 'SourceBuffer': false;
	readonly 'SourceBufferList': false;
	readonly 'speechSynthesis': false;
	readonly 'SpeechSynthesis': false;
	readonly 'SpeechSynthesisErrorEvent': false;
	readonly 'SpeechSynthesisEvent': false;
	readonly 'SpeechSynthesisUtterance': false;
	readonly 'SpeechSynthesisVoice': false;
	readonly 'StaticRange': false;
	readonly 'status': false;
	readonly 'statusbar': false;
	readonly 'StereoPannerNode': false;
	readonly 'stop': false;
	readonly 'Storage': false;
	readonly 'StorageBucket': false;
	readonly 'StorageBucketManager': false;
	readonly 'StorageEvent': false;
	readonly 'StorageManager': false;
	readonly 'structuredClone': false;
	readonly 'styleMedia': false;
	readonly 'StylePropertyMap': false;
	readonly 'StylePropertyMapReadOnly': false;
	readonly 'StyleSheet': false;
	readonly 'StyleSheetList': false;
	readonly 'SubmitEvent': false;
	readonly 'SubtleCrypto': false;
	readonly 'SVGAElement': false;
	readonly 'SVGAngle': false;
	readonly 'SVGAnimatedAngle': false;
	readonly 'SVGAnimatedBoolean': false;
	readonly 'SVGAnimatedEnumeration': false;
	readonly 'SVGAnimatedInteger': false;
	readonly 'SVGAnimatedLength': false;
	readonly 'SVGAnimatedLengthList': false;
	readonly 'SVGAnimatedNumber': false;
	readonly 'SVGAnimatedNumberList': false;
	readonly 'SVGAnimatedPreserveAspectRatio': false;
	readonly 'SVGAnimatedRect': false;
	readonly 'SVGAnimatedString': false;
	readonly 'SVGAnimatedTransformList': false;
	readonly 'SVGAnimateElement': false;
	readonly 'SVGAnimateMotionElement': false;
	readonly 'SVGAnimateTransformElement': false;
	readonly 'SVGAnimationElement': false;
	readonly 'SVGCircleElement': false;
	readonly 'SVGClipPathElement': false;
	readonly 'SVGComponentTransferFunctionElement': false;
	readonly 'SVGDefsElement': false;
	readonly 'SVGDescElement': false;
	readonly 'SVGElement': false;
	readonly 'SVGEllipseElement': false;
	readonly 'SVGFEBlendElement': false;
	readonly 'SVGFEColorMatrixElement': false;
	readonly 'SVGFEComponentTransferElement': false;
	readonly 'SVGFECompositeElement': false;
	readonly 'SVGFEConvolveMatrixElement': false;
	readonly 'SVGFEDiffuseLightingElement': false;
	readonly 'SVGFEDisplacementMapElement': false;
	readonly 'SVGFEDistantLightElement': false;
	readonly 'SVGFEDropShadowElement': false;
	readonly 'SVGFEFloodElement': false;
	readonly 'SVGFEFuncAElement': false;
	readonly 'SVGFEFuncBElement': false;
	readonly 'SVGFEFuncGElement': false;
	readonly 'SVGFEFuncRElement': false;
	readonly 'SVGFEGaussianBlurElement': false;
	readonly 'SVGFEImageElement': false;
	readonly 'SVGFEMergeElement': false;
	readonly 'SVGFEMergeNodeElement': false;
	readonly 'SVGFEMorphologyElement': false;
	readonly 'SVGFEOffsetElement': false;
	readonly 'SVGFEPointLightElement': false;
	readonly 'SVGFESpecularLightingElement': false;
	readonly 'SVGFESpotLightElement': false;
	readonly 'SVGFETileElement': false;
	readonly 'SVGFETurbulenceElement': false;
	readonly 'SVGFilterElement': false;
	readonly 'SVGForeignObjectElement': false;
	readonly 'SVGGElement': false;
	readonly 'SVGGeometryElement': false;
	readonly 'SVGGradientElement': false;
	readonly 'SVGGraphicsElement': false;
	readonly 'SVGImageElement': false;
	readonly 'SVGLength': false;
	readonly 'SVGLengthList': false;
	readonly 'SVGLinearGradientElement': false;
	readonly 'SVGLineElement': false;
	readonly 'SVGMarkerElement': false;
	readonly 'SVGMaskElement': false;
	readonly 'SVGMatrix': false;
	readonly 'SVGMetadataElement': false;
	readonly 'SVGMPathElement': false;
	readonly 'SVGNumber': false;
	readonly 'SVGNumberList': false;
	readonly 'SVGPathElement': false;
	readonly 'SVGPatternElement': false;
	readonly 'SVGPoint': false;
	readonly 'SVGPointList': false;
	readonly 'SVGPolygonElement': false;
	readonly 'SVGPolylineElement': false;
	readonly 'SVGPreserveAspectRatio': false;
	readonly 'SVGRadialGradientElement': false;
	readonly 'SVGRect': false;
	readonly 'SVGRectElement': false;
	readonly 'SVGScriptElement': false;
	readonly 'SVGSetElement': false;
	readonly 'SVGStopElement': false;
	readonly 'SVGStringList': false;
	readonly 'SVGStyleElement': false;
	readonly 'SVGSVGElement': false;
	readonly 'SVGSwitchElement': false;
	readonly 'SVGSymbolElement': false;
	readonly 'SVGTextContentElement': false;
	readonly 'SVGTextElement': false;
	readonly 'SVGTextPathElement': false;
	readonly 'SVGTextPositioningElement': false;
	readonly 'SVGTitleElement': false;
	readonly 'SVGTransform': false;
	readonly 'SVGTransformList': false;
	readonly 'SVGTSpanElement': false;
	readonly 'SVGUnitTypes': false;
	readonly 'SVGUseElement': false;
	readonly 'SVGViewElement': false;
	readonly 'SyncManager': false;
	readonly 'TaskAttributionTiming': false;
	readonly 'TaskController': false;
	readonly 'TaskPriorityChangeEvent': false;
	readonly 'TaskSignal': false;
	readonly 'TEMPORARY': false;
	readonly 'Text': false;
	readonly 'TextDecoder': false;
	readonly 'TextDecoderStream': false;
	readonly 'TextEncoder': false;
	readonly 'TextEncoderStream': false;
	readonly 'TextEvent': false;
	readonly 'TextFormat': false;
	readonly 'TextFormatUpdateEvent': false;
	readonly 'TextMetrics': false;
	readonly 'TextTrack': false;
	readonly 'TextTrackCue': false;
	readonly 'TextTrackCueList': false;
	readonly 'TextTrackList': false;
	readonly 'TextUpdateEvent': false;
	readonly 'TimeEvent': false;
	readonly 'TimeRanges': false;
	readonly 'ToggleEvent': false;
	readonly 'toolbar': false;
	readonly 'top': false;
	readonly 'Touch': false;
	readonly 'TouchEvent': false;
	readonly 'TouchList': false;
	readonly 'TrackEvent': false;
	readonly 'TransformStream': false;
	readonly 'TransformStreamDefaultController': false;
	readonly 'TransitionEvent': false;
	readonly 'TreeWalker': false;
	readonly 'TrustedHTML': false;
	readonly 'TrustedScript': false;
	readonly 'TrustedScriptURL': false;
	readonly 'TrustedTypePolicy': false;
	readonly 'TrustedTypePolicyFactory': false;
	readonly 'trustedTypes': false;
	readonly 'UIEvent': false;
	readonly 'URL': false;
	readonly 'URLPattern': false;
	readonly 'URLSearchParams': false;
	readonly 'USB': false;
	readonly 'USBAlternateInterface': false;
	readonly 'USBConfiguration': false;
	readonly 'USBConnectionEvent': false;
	readonly 'USBDevice': false;
	readonly 'USBEndpoint': false;
	readonly 'USBInterface': false;
	readonly 'USBInTransferResult': false;
	readonly 'USBIsochronousInTransferPacket': false;
	readonly 'USBIsochronousInTransferResult': false;
	readonly 'USBIsochronousOutTransferPacket': false;
	readonly 'USBIsochronousOutTransferResult': false;
	readonly 'USBOutTransferResult': false;
	readonly 'UserActivation': false;
	readonly 'ValidityState': false;
	readonly 'VideoColorSpace': false;
	readonly 'VideoDecoder': false;
	readonly 'VideoEncoder': false;
	readonly 'VideoFrame': false;
	readonly 'VideoPlaybackQuality': false;
	readonly 'ViewTimeline': false;
	readonly 'ViewTransition': false;
	readonly 'ViewTransitionTypeSet': false;
	readonly 'VirtualKeyboard': false;
	readonly 'VirtualKeyboardGeometryChangeEvent': false;
	readonly 'VisibilityStateEntry': false;
	readonly 'visualViewport': false;
	readonly 'VisualViewport': false;
	readonly 'VTTCue': false;
	readonly 'VTTRegion': false;
	readonly 'WakeLock': false;
	readonly 'WakeLockSentinel': false;
	readonly 'WaveShaperNode': false;
	readonly 'WebAssembly': false;
	readonly 'WebGL2RenderingContext': false;
	readonly 'WebGLActiveInfo': false;
	readonly 'WebGLBuffer': false;
	readonly 'WebGLContextEvent': false;
	readonly 'WebGLFramebuffer': false;
	readonly 'WebGLObject': false;
	readonly 'WebGLProgram': false;
	readonly 'WebGLQuery': false;
	readonly 'WebGLRenderbuffer': false;
	readonly 'WebGLRenderingContext': false;
	readonly 'WebGLSampler': false;
	readonly 'WebGLShader': false;
	readonly 'WebGLShaderPrecisionFormat': false;
	readonly 'WebGLSync': false;
	readonly 'WebGLTexture': false;
	readonly 'WebGLTransformFeedback': false;
	readonly 'WebGLUniformLocation': false;
	readonly 'WebGLVertexArrayObject': false;
	readonly 'WebSocket': false;
	readonly 'WebSocketError': false;
	readonly 'WebSocketStream': false;
	readonly 'WebTransport': false;
	readonly 'WebTransportBidirectionalStream': false;
	readonly 'WebTransportDatagramDuplexStream': false;
	readonly 'WebTransportError': false;
	readonly 'WebTransportReceiveStream': false;
	readonly 'WebTransportSendStream': false;
	readonly 'WGSLLanguageFeatures': false;
	readonly 'WheelEvent': false;
	readonly 'window': false;
	readonly 'Window': false;
	readonly 'WindowControlsOverlay': false;
	readonly 'WindowControlsOverlayGeometryChangeEvent': false;
	readonly 'Worker': false;
	readonly 'Worklet': false;
	readonly 'WorkletGlobalScope': false;
	readonly 'WritableStream': false;
	readonly 'WritableStreamDefaultController': false;
	readonly 'WritableStreamDefaultWriter': false;
	readonly 'XMLDocument': false;
	readonly 'XMLHttpRequest': false;
	readonly 'XMLHttpRequestEventTarget': false;
	readonly 'XMLHttpRequestUpload': false;
	readonly 'XMLSerializer': false;
	readonly 'XPathEvaluator': false;
	readonly 'XPathExpression': false;
	readonly 'XPathResult': false;
	readonly 'XRAnchor': false;
	readonly 'XRAnchorSet': false;
	readonly 'XRBoundedReferenceSpace': false;
	readonly 'XRCamera': false;
	readonly 'XRCPUDepthInformation': false;
	readonly 'XRDepthInformation': false;
	readonly 'XRDOMOverlayState': false;
	readonly 'XRFrame': false;
	readonly 'XRHand': false;
	readonly 'XRHitTestResult': false;
	readonly 'XRHitTestSource': false;
	readonly 'XRInputSource': false;
	readonly 'XRInputSourceArray': false;
	readonly 'XRInputSourceEvent': false;
	readonly 'XRInputSourcesChangeEvent': false;
	readonly 'XRJointPose': false;
	readonly 'XRJointSpace': false;
	readonly 'XRLayer': false;
	readonly 'XRLightEstimate': false;
	readonly 'XRLightProbe': false;
	readonly 'XRPose': false;
	readonly 'XRRay': false;
	readonly 'XRReferenceSpace': false;
	readonly 'XRReferenceSpaceEvent': false;
	readonly 'XRRenderState': false;
	readonly 'XRRigidTransform': false;
	readonly 'XRSession': false;
	readonly 'XRSessionEvent': false;
	readonly 'XRSpace': false;
	readonly 'XRSystem': false;
	readonly 'XRTransientInputHitTestResult': false;
	readonly 'XRTransientInputHitTestSource': false;
	readonly 'XRView': false;
	readonly 'XRViewerPose': false;
	readonly 'XRViewport': false;
	readonly 'XRWebGLBinding': false;
	readonly 'XRWebGLDepthInformation': false;
	readonly 'XRWebGLLayer': false;
	readonly 'XSLTProcessor': false;
}

type GlobalsBuiltin = {
	readonly 'AggregateError': false;
	readonly 'Array': false;
	readonly 'ArrayBuffer': false;
	readonly 'Atomics': false;
	readonly 'BigInt': false;
	readonly 'BigInt64Array': false;
	readonly 'BigUint64Array': false;
	readonly 'Boolean': false;
	readonly 'DataView': false;
	readonly 'Date': false;
	readonly 'decodeURI': false;
	readonly 'decodeURIComponent': false;
	readonly 'encodeURI': false;
	readonly 'encodeURIComponent': false;
	readonly 'Error': false;
	readonly 'escape': false;
	readonly 'eval': false;
	readonly 'EvalError': false;
	readonly 'FinalizationRegistry': false;
	readonly 'Float32Array': false;
	readonly 'Float64Array': false;
	readonly 'Function': false;
	readonly 'globalThis': false;
	readonly 'Infinity': false;
	readonly 'Int16Array': false;
	readonly 'Int32Array': false;
	readonly 'Int8Array': false;
	readonly 'Intl': false;
	readonly 'isFinite': false;
	readonly 'isNaN': false;
	readonly 'Iterator': false;
	readonly 'JSON': false;
	readonly 'Map': false;
	readonly 'Math': false;
	readonly 'NaN': false;
	readonly 'Number': false;
	readonly 'Object': false;
	readonly 'parseFloat': false;
	readonly 'parseInt': false;
	readonly 'Promise': false;
	readonly 'Proxy': false;
	readonly 'RangeError': false;
	readonly 'ReferenceError': false;
	readonly 'Reflect': false;
	readonly 'RegExp': false;
	readonly 'Set': false;
	readonly 'SharedArrayBuffer': false;
	readonly 'String': false;
	readonly 'Symbol': false;
	readonly 'SyntaxError': false;
	readonly 'TypeError': false;
	readonly 'Uint16Array': false;
	readonly 'Uint32Array': false;
	readonly 'Uint8Array': false;
	readonly 'Uint8ClampedArray': false;
	readonly 'undefined': false;
	readonly 'unescape': false;
	readonly 'URIError': false;
	readonly 'WeakMap': false;
	readonly 'WeakRef': false;
	readonly 'WeakSet': false;
}

type GlobalsChai = {
	readonly 'assert': true;
	readonly 'expect': true;
	readonly 'should': true;
}

type GlobalsCommonjs = {
	readonly 'exports': true;
	readonly 'global': false;
	readonly 'module': false;
	readonly 'require': false;
}

type GlobalsCouch = {
	readonly 'emit': false;
	readonly 'exports': false;
	readonly 'getRow': false;
	readonly 'log': false;
	readonly 'module': false;
	readonly 'provides': false;
	readonly 'require': false;
	readonly 'respond': false;
	readonly 'send': false;
	readonly 'start': false;
	readonly 'sum': false;
}

type GlobalsDevtools = {
	readonly '$': false;
	readonly '$_': false;
	readonly '$$': false;
	readonly '$0': false;
	readonly '$1': false;
	readonly '$2': false;
	readonly '$3': false;
	readonly '$4': false;
	readonly '$x': false;
	readonly 'chrome': false;
	readonly 'clear': false;
	readonly 'copy': false;
	readonly 'debug': false;
	readonly 'dir': false;
	readonly 'dirxml': false;
	readonly 'getEventListeners': false;
	readonly 'inspect': false;
	readonly 'keys': false;
	readonly 'monitor': false;
	readonly 'monitorEvents': false;
	readonly 'profile': false;
	readonly 'profileEnd': false;
	readonly 'queryObjects': false;
	readonly 'table': false;
	readonly 'undebug': false;
	readonly 'unmonitor': false;
	readonly 'unmonitorEvents': false;
	readonly 'values': false;
}

type GlobalsEmbertest = {
	readonly 'andThen': false;
	readonly 'click': false;
	readonly 'currentPath': false;
	readonly 'currentRouteName': false;
	readonly 'currentURL': false;
	readonly 'fillIn': false;
	readonly 'find': false;
	readonly 'findAll': false;
	readonly 'findWithAssert': false;
	readonly 'keyEvent': false;
	readonly 'pauseTest': false;
	readonly 'resumeTest': false;
	readonly 'triggerEvent': false;
	readonly 'visit': false;
	readonly 'wait': false;
}

type GlobalsEs2015 = {
	readonly 'Array': false;
	readonly 'ArrayBuffer': false;
	readonly 'Boolean': false;
	readonly 'DataView': false;
	readonly 'Date': false;
	readonly 'decodeURI': false;
	readonly 'decodeURIComponent': false;
	readonly 'encodeURI': false;
	readonly 'encodeURIComponent': false;
	readonly 'Error': false;
	readonly 'escape': false;
	readonly 'eval': false;
	readonly 'EvalError': false;
	readonly 'Float32Array': false;
	readonly 'Float64Array': false;
	readonly 'Function': false;
	readonly 'Infinity': false;
	readonly 'Int16Array': false;
	readonly 'Int32Array': false;
	readonly 'Int8Array': false;
	readonly 'Intl': false;
	readonly 'isFinite': false;
	readonly 'isNaN': false;
	readonly 'JSON': false;
	readonly 'Map': false;
	readonly 'Math': false;
	readonly 'NaN': false;
	readonly 'Number': false;
	readonly 'Object': false;
	readonly 'parseFloat': false;
	readonly 'parseInt': false;
	readonly 'Promise': false;
	readonly 'Proxy': false;
	readonly 'RangeError': false;
	readonly 'ReferenceError': false;
	readonly 'Reflect': false;
	readonly 'RegExp': false;
	readonly 'Set': false;
	readonly 'String': false;
	readonly 'Symbol': false;
	readonly 'SyntaxError': false;
	readonly 'TypeError': false;
	readonly 'Uint16Array': false;
	readonly 'Uint32Array': false;
	readonly 'Uint8Array': false;
	readonly 'Uint8ClampedArray': false;
	readonly 'undefined': false;
	readonly 'unescape': false;
	readonly 'URIError': false;
	readonly 'WeakMap': false;
	readonly 'WeakSet': false;
}

type GlobalsEs2016 = {
	readonly 'Array': false;
	readonly 'ArrayBuffer': false;
	readonly 'Boolean': false;
	readonly 'DataView': false;
	readonly 'Date': false;
	readonly 'decodeURI': false;
	readonly 'decodeURIComponent': false;
	readonly 'encodeURI': false;
	readonly 'encodeURIComponent': false;
	readonly 'Error': false;
	readonly 'escape': false;
	readonly 'eval': false;
	readonly 'EvalError': false;
	readonly 'Float32Array': false;
	readonly 'Float64Array': false;
	readonly 'Function': false;
	readonly 'Infinity': false;
	readonly 'Int16Array': false;
	readonly 'Int32Array': false;
	readonly 'Int8Array': false;
	readonly 'Intl': false;
	readonly 'isFinite': false;
	readonly 'isNaN': false;
	readonly 'JSON': false;
	readonly 'Map': false;
	readonly 'Math': false;
	readonly 'NaN': false;
	readonly 'Number': false;
	readonly 'Object': false;
	readonly 'parseFloat': false;
	readonly 'parseInt': false;
	readonly 'Promise': false;
	readonly 'Proxy': false;
	readonly 'RangeError': false;
	readonly 'ReferenceError': false;
	readonly 'Reflect': false;
	readonly 'RegExp': false;
	readonly 'Set': false;
	readonly 'String': false;
	readonly 'Symbol': false;
	readonly 'SyntaxError': false;
	readonly 'TypeError': false;
	readonly 'Uint16Array': false;
	readonly 'Uint32Array': false;
	readonly 'Uint8Array': false;
	readonly 'Uint8ClampedArray': false;
	readonly 'undefined': false;
	readonly 'unescape': false;
	readonly 'URIError': false;
	readonly 'WeakMap': false;
	readonly 'WeakSet': false;
}

type GlobalsEs2017 = {
	readonly 'Array': false;
	readonly 'ArrayBuffer': false;
	readonly 'Atomics': false;
	readonly 'Boolean': false;
	readonly 'DataView': false;
	readonly 'Date': false;
	readonly 'decodeURI': false;
	readonly 'decodeURIComponent': false;
	readonly 'encodeURI': false;
	readonly 'encodeURIComponent': false;
	readonly 'Error': false;
	readonly 'escape': false;
	readonly 'eval': false;
	readonly 'EvalError': false;
	readonly 'Float32Array': false;
	readonly 'Float64Array': false;
	readonly 'Function': false;
	readonly 'Infinity': false;
	readonly 'Int16Array': false;
	readonly 'Int32Array': false;
	readonly 'Int8Array': false;
	readonly 'Intl': false;
	readonly 'isFinite': false;
	readonly 'isNaN': false;
	readonly 'JSON': false;
	readonly 'Map': false;
	readonly 'Math': false;
	readonly 'NaN': false;
	readonly 'Number': false;
	readonly 'Object': false;
	readonly 'parseFloat': false;
	readonly 'parseInt': false;
	readonly 'Promise': false;
	readonly 'Proxy': false;
	readonly 'RangeError': false;
	readonly 'ReferenceError': false;
	readonly 'Reflect': false;
	readonly 'RegExp': false;
	readonly 'Set': false;
	readonly 'SharedArrayBuffer': false;
	readonly 'String': false;
	readonly 'Symbol': false;
	readonly 'SyntaxError': false;
	readonly 'TypeError': false;
	readonly 'Uint16Array': false;
	readonly 'Uint32Array': false;
	readonly 'Uint8Array': false;
	readonly 'Uint8ClampedArray': false;
	readonly 'undefined': false;
	readonly 'unescape': false;
	readonly 'URIError': false;
	readonly 'WeakMap': false;
	readonly 'WeakSet': false;
}

type GlobalsEs2018 = {
	readonly 'Array': false;
	readonly 'ArrayBuffer': false;
	readonly 'Atomics': false;
	readonly 'Boolean': false;
	readonly 'DataView': false;
	readonly 'Date': false;
	readonly 'decodeURI': false;
	readonly 'decodeURIComponent': false;
	readonly 'encodeURI': false;
	readonly 'encodeURIComponent': false;
	readonly 'Error': false;
	readonly 'escape': false;
	readonly 'eval': false;
	readonly 'EvalError': false;
	readonly 'Float32Array': false;
	readonly 'Float64Array': false;
	readonly 'Function': false;
	readonly 'Infinity': false;
	readonly 'Int16Array': false;
	readonly 'Int32Array': false;
	readonly 'Int8Array': false;
	readonly 'Intl': false;
	readonly 'isFinite': false;
	readonly 'isNaN': false;
	readonly 'JSON': false;
	readonly 'Map': false;
	readonly 'Math': false;
	readonly 'NaN': false;
	readonly 'Number': false;
	readonly 'Object': false;
	readonly 'parseFloat': false;
	readonly 'parseInt': false;
	readonly 'Promise': false;
	readonly 'Proxy': false;
	readonly 'RangeError': false;
	readonly 'ReferenceError': false;
	readonly 'Reflect': false;
	readonly 'RegExp': false;
	readonly 'Set': false;
	readonly 'SharedArrayBuffer': false;
	readonly 'String': false;
	readonly 'Symbol': false;
	readonly 'SyntaxError': false;
	readonly 'TypeError': false;
	readonly 'Uint16Array': false;
	readonly 'Uint32Array': false;
	readonly 'Uint8Array': false;
	readonly 'Uint8ClampedArray': false;
	readonly 'undefined': false;
	readonly 'unescape': false;
	readonly 'URIError': false;
	readonly 'WeakMap': false;
	readonly 'WeakSet': false;
}

type GlobalsEs2019 = {
	readonly 'Array': false;
	readonly 'ArrayBuffer': false;
	readonly 'Atomics': false;
	readonly 'Boolean': false;
	readonly 'DataView': false;
	readonly 'Date': false;
	readonly 'decodeURI': false;
	readonly 'decodeURIComponent': false;
	readonly 'encodeURI': false;
	readonly 'encodeURIComponent': false;
	readonly 'Error': false;
	readonly 'escape': false;
	readonly 'eval': false;
	readonly 'EvalError': false;
	readonly 'Float32Array': false;
	readonly 'Float64Array': false;
	readonly 'Function': false;
	readonly 'Infinity': false;
	readonly 'Int16Array': false;
	readonly 'Int32Array': false;
	readonly 'Int8Array': false;
	readonly 'Intl': false;
	readonly 'isFinite': false;
	readonly 'isNaN': false;
	readonly 'JSON': false;
	readonly 'Map': false;
	readonly 'Math': false;
	readonly 'NaN': false;
	readonly 'Number': false;
	readonly 'Object': false;
	readonly 'parseFloat': false;
	readonly 'parseInt': false;
	readonly 'Promise': false;
	readonly 'Proxy': false;
	readonly 'RangeError': false;
	readonly 'ReferenceError': false;
	readonly 'Reflect': false;
	readonly 'RegExp': false;
	readonly 'Set': false;
	readonly 'SharedArrayBuffer': false;
	readonly 'String': false;
	readonly 'Symbol': false;
	readonly 'SyntaxError': false;
	readonly 'TypeError': false;
	readonly 'Uint16Array': false;
	readonly 'Uint32Array': false;
	readonly 'Uint8Array': false;
	readonly 'Uint8ClampedArray': false;
	readonly 'undefined': false;
	readonly 'unescape': false;
	readonly 'URIError': false;
	readonly 'WeakMap': false;
	readonly 'WeakSet': false;
}

type GlobalsEs2020 = {
	readonly 'Array': false;
	readonly 'ArrayBuffer': false;
	readonly 'Atomics': false;
	readonly 'BigInt': false;
	readonly 'BigInt64Array': false;
	readonly 'BigUint64Array': false;
	readonly 'Boolean': false;
	readonly 'DataView': false;
	readonly 'Date': false;
	readonly 'decodeURI': false;
	readonly 'decodeURIComponent': false;
	readonly 'encodeURI': false;
	readonly 'encodeURIComponent': false;
	readonly 'Error': false;
	readonly 'escape': false;
	readonly 'eval': false;
	readonly 'EvalError': false;
	readonly 'Float32Array': false;
	readonly 'Float64Array': false;
	readonly 'Function': false;
	readonly 'globalThis': false;
	readonly 'Infinity': false;
	readonly 'Int16Array': false;
	readonly 'Int32Array': false;
	readonly 'Int8Array': false;
	readonly 'Intl': false;
	readonly 'isFinite': false;
	readonly 'isNaN': false;
	readonly 'JSON': false;
	readonly 'Map': false;
	readonly 'Math': false;
	readonly 'NaN': false;
	readonly 'Number': false;
	readonly 'Object': false;
	readonly 'parseFloat': false;
	readonly 'parseInt': false;
	readonly 'Promise': false;
	readonly 'Proxy': false;
	readonly 'RangeError': false;
	readonly 'ReferenceError': false;
	readonly 'Reflect': false;
	readonly 'RegExp': false;
	readonly 'Set': false;
	readonly 'SharedArrayBuffer': false;
	readonly 'String': false;
	readonly 'Symbol': false;
	readonly 'SyntaxError': false;
	readonly 'TypeError': false;
	readonly 'Uint16Array': false;
	readonly 'Uint32Array': false;
	readonly 'Uint8Array': false;
	readonly 'Uint8ClampedArray': false;
	readonly 'undefined': false;
	readonly 'unescape': false;
	readonly 'URIError': false;
	readonly 'WeakMap': false;
	readonly 'WeakSet': false;
}

type GlobalsEs2021 = {
	readonly 'AggregateError': false;
	readonly 'Array': false;
	readonly 'ArrayBuffer': false;
	readonly 'Atomics': false;
	readonly 'BigInt': false;
	readonly 'BigInt64Array': false;
	readonly 'BigUint64Array': false;
	readonly 'Boolean': false;
	readonly 'DataView': false;
	readonly 'Date': false;
	readonly 'decodeURI': false;
	readonly 'decodeURIComponent': false;
	readonly 'encodeURI': false;
	readonly 'encodeURIComponent': false;
	readonly 'Error': false;
	readonly 'escape': false;
	readonly 'eval': false;
	readonly 'EvalError': false;
	readonly 'FinalizationRegistry': false;
	readonly 'Float32Array': false;
	readonly 'Float64Array': false;
	readonly 'Function': false;
	readonly 'globalThis': false;
	readonly 'Infinity': false;
	readonly 'Int16Array': false;
	readonly 'Int32Array': false;
	readonly 'Int8Array': false;
	readonly 'Intl': false;
	readonly 'isFinite': false;
	readonly 'isNaN': false;
	readonly 'JSON': false;
	readonly 'Map': false;
	readonly 'Math': false;
	readonly 'NaN': false;
	readonly 'Number': false;
	readonly 'Object': false;
	readonly 'parseFloat': false;
	readonly 'parseInt': false;
	readonly 'Promise': false;
	readonly 'Proxy': false;
	readonly 'RangeError': false;
	readonly 'ReferenceError': false;
	readonly 'Reflect': false;
	readonly 'RegExp': false;
	readonly 'Set': false;
	readonly 'SharedArrayBuffer': false;
	readonly 'String': false;
	readonly 'Symbol': false;
	readonly 'SyntaxError': false;
	readonly 'TypeError': false;
	readonly 'Uint16Array': false;
	readonly 'Uint32Array': false;
	readonly 'Uint8Array': false;
	readonly 'Uint8ClampedArray': false;
	readonly 'undefined': false;
	readonly 'unescape': false;
	readonly 'URIError': false;
	readonly 'WeakMap': false;
	readonly 'WeakRef': false;
	readonly 'WeakSet': false;
}

type GlobalsEs2022 = {
	readonly 'AggregateError': false;
	readonly 'Array': false;
	readonly 'ArrayBuffer': false;
	readonly 'Atomics': false;
	readonly 'BigInt': false;
	readonly 'BigInt64Array': false;
	readonly 'BigUint64Array': false;
	readonly 'Boolean': false;
	readonly 'DataView': false;
	readonly 'Date': false;
	readonly 'decodeURI': false;
	readonly 'decodeURIComponent': false;
	readonly 'encodeURI': false;
	readonly 'encodeURIComponent': false;
	readonly 'Error': false;
	readonly 'escape': false;
	readonly 'eval': false;
	readonly 'EvalError': false;
	readonly 'FinalizationRegistry': false;
	readonly 'Float32Array': false;
	readonly 'Float64Array': false;
	readonly 'Function': false;
	readonly 'globalThis': false;
	readonly 'Infinity': false;
	readonly 'Int16Array': false;
	readonly 'Int32Array': false;
	readonly 'Int8Array': false;
	readonly 'Intl': false;
	readonly 'isFinite': false;
	readonly 'isNaN': false;
	readonly 'JSON': false;
	readonly 'Map': false;
	readonly 'Math': false;
	readonly 'NaN': false;
	readonly 'Number': false;
	readonly 'Object': false;
	readonly 'parseFloat': false;
	readonly 'parseInt': false;
	readonly 'Promise': false;
	readonly 'Proxy': false;
	readonly 'RangeError': false;
	readonly 'ReferenceError': false;
	readonly 'Reflect': false;
	readonly 'RegExp': false;
	readonly 'Set': false;
	readonly 'SharedArrayBuffer': false;
	readonly 'String': false;
	readonly 'Symbol': false;
	readonly 'SyntaxError': false;
	readonly 'TypeError': false;
	readonly 'Uint16Array': false;
	readonly 'Uint32Array': false;
	readonly 'Uint8Array': false;
	readonly 'Uint8ClampedArray': false;
	readonly 'undefined': false;
	readonly 'unescape': false;
	readonly 'URIError': false;
	readonly 'WeakMap': false;
	readonly 'WeakRef': false;
	readonly 'WeakSet': false;
}

type GlobalsEs2023 = {
	readonly 'AggregateError': false;
	readonly 'Array': false;
	readonly 'ArrayBuffer': false;
	readonly 'Atomics': false;
	readonly 'BigInt': false;
	readonly 'BigInt64Array': false;
	readonly 'BigUint64Array': false;
	readonly 'Boolean': false;
	readonly 'DataView': false;
	readonly 'Date': false;
	readonly 'decodeURI': false;
	readonly 'decodeURIComponent': false;
	readonly 'encodeURI': false;
	readonly 'encodeURIComponent': false;
	readonly 'Error': false;
	readonly 'escape': false;
	readonly 'eval': false;
	readonly 'EvalError': false;
	readonly 'FinalizationRegistry': false;
	readonly 'Float32Array': false;
	readonly 'Float64Array': false;
	readonly 'Function': false;
	readonly 'globalThis': false;
	readonly 'Infinity': false;
	readonly 'Int16Array': false;
	readonly 'Int32Array': false;
	readonly 'Int8Array': false;
	readonly 'Intl': false;
	readonly 'isFinite': false;
	readonly 'isNaN': false;
	readonly 'JSON': false;
	readonly 'Map': false;
	readonly 'Math': false;
	readonly 'NaN': false;
	readonly 'Number': false;
	readonly 'Object': false;
	readonly 'parseFloat': false;
	readonly 'parseInt': false;
	readonly 'Promise': false;
	readonly 'Proxy': false;
	readonly 'RangeError': false;
	readonly 'ReferenceError': false;
	readonly 'Reflect': false;
	readonly 'RegExp': false;
	readonly 'Set': false;
	readonly 'SharedArrayBuffer': false;
	readonly 'String': false;
	readonly 'Symbol': false;
	readonly 'SyntaxError': false;
	readonly 'TypeError': false;
	readonly 'Uint16Array': false;
	readonly 'Uint32Array': false;
	readonly 'Uint8Array': false;
	readonly 'Uint8ClampedArray': false;
	readonly 'undefined': false;
	readonly 'unescape': false;
	readonly 'URIError': false;
	readonly 'WeakMap': false;
	readonly 'WeakRef': false;
	readonly 'WeakSet': false;
}

type GlobalsEs2024 = {
	readonly 'AggregateError': false;
	readonly 'Array': false;
	readonly 'ArrayBuffer': false;
	readonly 'Atomics': false;
	readonly 'BigInt': false;
	readonly 'BigInt64Array': false;
	readonly 'BigUint64Array': false;
	readonly 'Boolean': false;
	readonly 'DataView': false;
	readonly 'Date': false;
	readonly 'decodeURI': false;
	readonly 'decodeURIComponent': false;
	readonly 'encodeURI': false;
	readonly 'encodeURIComponent': false;
	readonly 'Error': false;
	readonly 'escape': false;
	readonly 'eval': false;
	readonly 'EvalError': false;
	readonly 'FinalizationRegistry': false;
	readonly 'Float32Array': false;
	readonly 'Float64Array': false;
	readonly 'Function': false;
	readonly 'globalThis': false;
	readonly 'Infinity': false;
	readonly 'Int16Array': false;
	readonly 'Int32Array': false;
	readonly 'Int8Array': false;
	readonly 'Intl': false;
	readonly 'isFinite': false;
	readonly 'isNaN': false;
	readonly 'JSON': false;
	readonly 'Map': false;
	readonly 'Math': false;
	readonly 'NaN': false;
	readonly 'Number': false;
	readonly 'Object': false;
	readonly 'parseFloat': false;
	readonly 'parseInt': false;
	readonly 'Promise': false;
	readonly 'Proxy': false;
	readonly 'RangeError': false;
	readonly 'ReferenceError': false;
	readonly 'Reflect': false;
	readonly 'RegExp': false;
	readonly 'Set': false;
	readonly 'SharedArrayBuffer': false;
	readonly 'String': false;
	readonly 'Symbol': false;
	readonly 'SyntaxError': false;
	readonly 'TypeError': false;
	readonly 'Uint16Array': false;
	readonly 'Uint32Array': false;
	readonly 'Uint8Array': false;
	readonly 'Uint8ClampedArray': false;
	readonly 'undefined': false;
	readonly 'unescape': false;
	readonly 'URIError': false;
	readonly 'WeakMap': false;
	readonly 'WeakRef': false;
	readonly 'WeakSet': false;
}

type GlobalsEs2025 = {
	readonly 'AggregateError': false;
	readonly 'Array': false;
	readonly 'ArrayBuffer': false;
	readonly 'Atomics': false;
	readonly 'BigInt': false;
	readonly 'BigInt64Array': false;
	readonly 'BigUint64Array': false;
	readonly 'Boolean': false;
	readonly 'DataView': false;
	readonly 'Date': false;
	readonly 'decodeURI': false;
	readonly 'decodeURIComponent': false;
	readonly 'encodeURI': false;
	readonly 'encodeURIComponent': false;
	readonly 'Error': false;
	readonly 'escape': false;
	readonly 'eval': false;
	readonly 'EvalError': false;
	readonly 'FinalizationRegistry': false;
	readonly 'Float32Array': false;
	readonly 'Float64Array': false;
	readonly 'Function': false;
	readonly 'globalThis': false;
	readonly 'Infinity': false;
	readonly 'Int16Array': false;
	readonly 'Int32Array': false;
	readonly 'Int8Array': false;
	readonly 'Intl': false;
	readonly 'isFinite': false;
	readonly 'isNaN': false;
	readonly 'Iterator': false;
	readonly 'JSON': false;
	readonly 'Map': false;
	readonly 'Math': false;
	readonly 'NaN': false;
	readonly 'Number': false;
	readonly 'Object': false;
	readonly 'parseFloat': false;
	readonly 'parseInt': false;
	readonly 'Promise': false;
	readonly 'Proxy': false;
	readonly 'RangeError': false;
	readonly 'ReferenceError': false;
	readonly 'Reflect': false;
	readonly 'RegExp': false;
	readonly 'Set': false;
	readonly 'SharedArrayBuffer': false;
	readonly 'String': false;
	readonly 'Symbol': false;
	readonly 'SyntaxError': false;
	readonly 'TypeError': false;
	readonly 'Uint16Array': false;
	readonly 'Uint32Array': false;
	readonly 'Uint8Array': false;
	readonly 'Uint8ClampedArray': false;
	readonly 'undefined': false;
	readonly 'unescape': false;
	readonly 'URIError': false;
	readonly 'WeakMap': false;
	readonly 'WeakRef': false;
	readonly 'WeakSet': false;
}

type GlobalsEs3 = {
	readonly 'Array': false;
	readonly 'Boolean': false;
	readonly 'Date': false;
	readonly 'decodeURI': false;
	readonly 'decodeURIComponent': false;
	readonly 'encodeURI': false;
	readonly 'encodeURIComponent': false;
	readonly 'Error': false;
	readonly 'escape': false;
	readonly 'eval': false;
	readonly 'EvalError': false;
	readonly 'Function': false;
	readonly 'Infinity': false;
	readonly 'isFinite': false;
	readonly 'isNaN': false;
	readonly 'Math': false;
	readonly 'NaN': false;
	readonly 'Number': false;
	readonly 'Object': false;
	readonly 'parseFloat': false;
	readonly 'parseInt': false;
	readonly 'RangeError': false;
	readonly 'ReferenceError': false;
	readonly 'RegExp': false;
	readonly 'String': false;
	readonly 'SyntaxError': false;
	readonly 'TypeError': false;
	readonly 'undefined': false;
	readonly 'unescape': false;
	readonly 'URIError': false;
}

type GlobalsEs5 = {
	readonly 'Array': false;
	readonly 'Boolean': false;
	readonly 'Date': false;
	readonly 'decodeURI': false;
	readonly 'decodeURIComponent': false;
	readonly 'encodeURI': false;
	readonly 'encodeURIComponent': false;
	readonly 'Error': false;
	readonly 'escape': false;
	readonly 'eval': false;
	readonly 'EvalError': false;
	readonly 'Function': false;
	readonly 'Infinity': false;
	readonly 'isFinite': false;
	readonly 'isNaN': false;
	readonly 'JSON': false;
	readonly 'Math': false;
	readonly 'NaN': false;
	readonly 'Number': false;
	readonly 'Object': false;
	readonly 'parseFloat': false;
	readonly 'parseInt': false;
	readonly 'RangeError': false;
	readonly 'ReferenceError': false;
	readonly 'RegExp': false;
	readonly 'String': false;
	readonly 'SyntaxError': false;
	readonly 'TypeError': false;
	readonly 'undefined': false;
	readonly 'unescape': false;
	readonly 'URIError': false;
}

type GlobalsGreasemonkey = {
	readonly 'cloneInto': false;
	readonly 'createObjectIn': false;
	readonly 'exportFunction': false;
	readonly 'GM': false;
	readonly 'GM_addElement': false;
	readonly 'GM_addStyle': false;
	readonly 'GM_addValueChangeListener': false;
	readonly 'GM_deleteValue': false;
	readonly 'GM_download': false;
	readonly 'GM_getResourceText': false;
	readonly 'GM_getResourceURL': false;
	readonly 'GM_getTab': false;
	readonly 'GM_getTabs': false;
	readonly 'GM_getValue': false;
	readonly 'GM_info': false;
	readonly 'GM_listValues': false;
	readonly 'GM_log': false;
	readonly 'GM_notification': false;
	readonly 'GM_openInTab': false;
	readonly 'GM_registerMenuCommand': false;
	readonly 'GM_removeValueChangeListener': false;
	readonly 'GM_saveTab': false;
	readonly 'GM_setClipboard': false;
	readonly 'GM_setValue': false;
	readonly 'GM_unregisterMenuCommand': false;
	readonly 'GM_xmlhttpRequest': false;
	readonly 'unsafeWindow': false;
}

type GlobalsJasmine = {
	readonly 'afterAll': false;
	readonly 'afterEach': false;
	readonly 'beforeAll': false;
	readonly 'beforeEach': false;
	readonly 'describe': false;
	readonly 'expect': false;
	readonly 'expectAsync': false;
	readonly 'fail': false;
	readonly 'fdescribe': false;
	readonly 'fit': false;
	readonly 'it': false;
	readonly 'jasmine': false;
	readonly 'pending': false;
	readonly 'runs': false;
	readonly 'spyOn': false;
	readonly 'spyOnAllFunctions': false;
	readonly 'spyOnProperty': false;
	readonly 'waits': false;
	readonly 'waitsFor': false;
	readonly 'xdescribe': false;
	readonly 'xit': false;
}

type GlobalsJest = {
	readonly 'afterAll': false;
	readonly 'afterEach': false;
	readonly 'beforeAll': false;
	readonly 'beforeEach': false;
	readonly 'describe': false;
	readonly 'expect': false;
	readonly 'fit': false;
	readonly 'it': false;
	readonly 'jest': false;
	readonly 'test': false;
	readonly 'xdescribe': false;
	readonly 'xit': false;
	readonly 'xtest': false;
}

type GlobalsJquery = {
	readonly '$': false;
	readonly 'jQuery': false;
}

type GlobalsMeteor = {
	readonly '$': false;
	readonly 'Accounts': false;
	readonly 'AccountsClient': false;
	readonly 'AccountsCommon': false;
	readonly 'AccountsServer': false;
	readonly 'App': false;
	readonly 'Assets': false;
	readonly 'Blaze': false;
	readonly 'check': false;
	readonly 'Cordova': false;
	readonly 'DDP': false;
	readonly 'DDPRateLimiter': false;
	readonly 'DDPServer': false;
	readonly 'Deps': false;
	readonly 'EJSON': false;
	readonly 'Email': false;
	readonly 'HTTP': false;
	readonly 'Log': false;
	readonly 'Match': false;
	readonly 'Meteor': false;
	readonly 'Mongo': false;
	readonly 'MongoInternals': false;
	readonly 'Npm': false;
	readonly 'Package': false;
	readonly 'Plugin': false;
	readonly 'process': false;
	readonly 'Random': false;
	readonly 'ReactiveDict': false;
	readonly 'ReactiveVar': false;
	readonly 'Router': false;
	readonly 'ServiceConfiguration': false;
	readonly 'Session': false;
	readonly 'share': false;
	readonly 'Spacebars': false;
	readonly 'Template': false;
	readonly 'Tinytest': false;
	readonly 'Tracker': false;
	readonly 'UI': false;
	readonly 'Utils': false;
	readonly 'WebApp': false;
	readonly 'WebAppInternals': false;
}

type GlobalsMocha = {
	readonly 'after': false;
	readonly 'afterEach': false;
	readonly 'before': false;
	readonly 'beforeEach': false;
	readonly 'context': false;
	readonly 'describe': false;
	readonly 'it': false;
	readonly 'mocha': false;
	readonly 'run': false;
	readonly 'setup': false;
	readonly 'specify': false;
	readonly 'suite': false;
	readonly 'suiteSetup': false;
	readonly 'suiteTeardown': false;
	readonly 'teardown': false;
	readonly 'test': false;
	readonly 'xcontext': false;
	readonly 'xdescribe': false;
	readonly 'xit': false;
	readonly 'xspecify': false;
}

type GlobalsMongo = {
	readonly '_isWindows': false;
	readonly '_rand': false;
	readonly 'BulkWriteResult': false;
	readonly 'cat': false;
	readonly 'cd': false;
	readonly 'connect': false;
	readonly 'db': false;
	readonly 'getHostName': false;
	readonly 'getMemInfo': false;
	readonly 'hostname': false;
	readonly 'ISODate': false;
	readonly 'listFiles': false;
	readonly 'load': false;
	readonly 'ls': false;
	readonly 'md5sumFile': false;
	readonly 'mkdir': false;
	readonly 'Mongo': false;
	readonly 'NumberInt': false;
	readonly 'NumberLong': false;
	readonly 'ObjectId': false;
	readonly 'PlanCache': false;
	readonly 'print': false;
	readonly 'printjson': false;
	readonly 'pwd': false;
	readonly 'quit': false;
	readonly 'removeFile': false;
	readonly 'rs': false;
	readonly 'sh': false;
	readonly 'UUID': false;
	readonly 'version': false;
	readonly 'WriteResult': false;
}

type GlobalsNashorn = {
	readonly '__DIR__': false;
	readonly '__FILE__': false;
	readonly '__LINE__': false;
	readonly 'com': false;
	readonly 'edu': false;
	readonly 'exit': false;
	readonly 'java': false;
	readonly 'Java': false;
	readonly 'javafx': false;
	readonly 'JavaImporter': false;
	readonly 'javax': false;
	readonly 'JSAdapter': false;
	readonly 'load': false;
	readonly 'loadWithNewGlobal': false;
	readonly 'org': false;
	readonly 'Packages': false;
	readonly 'print': false;
	readonly 'quit': false;
}

type GlobalsNode = {
	readonly '__dirname': false;
	readonly '__filename': false;
	readonly 'AbortController': false;
	readonly 'AbortSignal': false;
	readonly 'atob': false;
	readonly 'Blob': false;
	readonly 'BroadcastChannel': false;
	readonly 'btoa': false;
	readonly 'Buffer': false;
	readonly 'ByteLengthQueuingStrategy': false;
	readonly 'clearImmediate': false;
	readonly 'clearInterval': false;
	readonly 'clearTimeout': false;
	readonly 'CloseEvent': false;
	readonly 'CompressionStream': false;
	readonly 'console': false;
	readonly 'CountQueuingStrategy': false;
	readonly 'crypto': false;
	readonly 'Crypto': false;
	readonly 'CryptoKey': false;
	readonly 'CustomEvent': false;
	readonly 'DecompressionStream': false;
	readonly 'DOMException': false;
	readonly 'Event': false;
	readonly 'EventTarget': false;
	readonly 'exports': true;
	readonly 'fetch': false;
	readonly 'File': false;
	readonly 'FormData': false;
	readonly 'global': false;
	readonly 'Headers': false;
	readonly 'MessageChannel': false;
	readonly 'MessageEvent': false;
	readonly 'MessagePort': false;
	readonly 'module': false;
	readonly 'navigator': false;
	readonly 'Navigator': false;
	readonly 'performance': false;
	readonly 'Performance': false;
	readonly 'PerformanceEntry': false;
	readonly 'PerformanceMark': false;
	readonly 'PerformanceMeasure': false;
	readonly 'PerformanceObserver': false;
	readonly 'PerformanceObserverEntryList': false;
	readonly 'PerformanceResourceTiming': false;
	readonly 'process': false;
	readonly 'queueMicrotask': false;
	readonly 'ReadableByteStreamController': false;
	readonly 'ReadableStream': false;
	readonly 'ReadableStreamBYOBReader': false;
	readonly 'ReadableStreamBYOBRequest': false;
	readonly 'ReadableStreamDefaultController': false;
	readonly 'ReadableStreamDefaultReader': false;
	readonly 'Request': false;
	readonly 'require': false;
	readonly 'Response': false;
	readonly 'setImmediate': false;
	readonly 'setInterval': false;
	readonly 'setTimeout': false;
	readonly 'structuredClone': false;
	readonly 'SubtleCrypto': false;
	readonly 'TextDecoder': false;
	readonly 'TextDecoderStream': false;
	readonly 'TextEncoder': false;
	readonly 'TextEncoderStream': false;
	readonly 'TransformStream': false;
	readonly 'TransformStreamDefaultController': false;
	readonly 'URL': false;
	readonly 'URLSearchParams': false;
	readonly 'WebAssembly': false;
	readonly 'WebSocket': false;
	readonly 'WritableStream': false;
	readonly 'WritableStreamDefaultController': false;
	readonly 'WritableStreamDefaultWriter': false;
}

type GlobalsNodeBuiltin = {
	readonly 'AbortController': false;
	readonly 'AbortSignal': false;
	readonly 'atob': false;
	readonly 'Blob': false;
	readonly 'BroadcastChannel': false;
	readonly 'btoa': false;
	readonly 'Buffer': false;
	readonly 'ByteLengthQueuingStrategy': false;
	readonly 'clearImmediate': false;
	readonly 'clearInterval': false;
	readonly 'clearTimeout': false;
	readonly 'CloseEvent': false;
	readonly 'CompressionStream': false;
	readonly 'console': false;
	readonly 'CountQueuingStrategy': false;
	readonly 'crypto': false;
	readonly 'Crypto': false;
	readonly 'CryptoKey': false;
	readonly 'CustomEvent': false;
	readonly 'DecompressionStream': false;
	readonly 'DOMException': false;
	readonly 'Event': false;
	readonly 'EventTarget': false;
	readonly 'fetch': false;
	readonly 'File': false;
	readonly 'FormData': false;
	readonly 'global': false;
	readonly 'Headers': false;
	readonly 'MessageChannel': false;
	readonly 'MessageEvent': false;
	readonly 'MessagePort': false;
	readonly 'navigator': false;
	readonly 'Navigator': false;
	readonly 'performance': false;
	readonly 'Performance': false;
	readonly 'PerformanceEntry': false;
	readonly 'PerformanceMark': false;
	readonly 'PerformanceMeasure': false;
	readonly 'PerformanceObserver': false;
	readonly 'PerformanceObserverEntryList': false;
	readonly 'PerformanceResourceTiming': false;
	readonly 'process': false;
	readonly 'queueMicrotask': false;
	readonly 'ReadableByteStreamController': false;
	readonly 'ReadableStream': false;
	readonly 'ReadableStreamBYOBReader': false;
	readonly 'ReadableStreamBYOBRequest': false;
	readonly 'ReadableStreamDefaultController': false;
	readonly 'ReadableStreamDefaultReader': false;
	readonly 'Request': false;
	readonly 'Response': false;
	readonly 'setImmediate': false;
	readonly 'setInterval': false;
	readonly 'setTimeout': false;
	readonly 'structuredClone': false;
	readonly 'SubtleCrypto': false;
	readonly 'TextDecoder': false;
	readonly 'TextDecoderStream': false;
	readonly 'TextEncoder': false;
	readonly 'TextEncoderStream': false;
	readonly 'TransformStream': false;
	readonly 'TransformStreamDefaultController': false;
	readonly 'URL': false;
	readonly 'URLSearchParams': false;
	readonly 'WebAssembly': false;
	readonly 'WebSocket': false;
	readonly 'WritableStream': false;
	readonly 'WritableStreamDefaultController': false;
	readonly 'WritableStreamDefaultWriter': false;
}

type GlobalsPhantomjs = {
	readonly 'console': true;
	readonly 'exports': true;
	readonly 'phantom': true;
	readonly 'require': true;
	readonly 'WebPage': true;
}

type GlobalsPrototypejs = {
	readonly '$': false;
	readonly '$$': false;
	readonly '$A': false;
	readonly '$break': false;
	readonly '$continue': false;
	readonly '$F': false;
	readonly '$H': false;
	readonly '$R': false;
	readonly '$w': false;
	readonly 'Abstract': false;
	readonly 'Ajax': false;
	readonly 'Autocompleter': false;
	readonly 'Builder': false;
	readonly 'Class': false;
	readonly 'Control': false;
	readonly 'Draggable': false;
	readonly 'Draggables': false;
	readonly 'Droppables': false;
	readonly 'Effect': false;
	readonly 'Element': false;
	readonly 'Enumerable': false;
	readonly 'Event': false;
	readonly 'Field': false;
	readonly 'Form': false;
	readonly 'Hash': false;
	readonly 'Insertion': false;
	readonly 'ObjectRange': false;
	readonly 'PeriodicalExecuter': false;
	readonly 'Position': false;
	readonly 'Prototype': false;
	readonly 'Scriptaculous': false;
	readonly 'Selector': false;
	readonly 'Sortable': false;
	readonly 'SortableObserver': false;
	readonly 'Sound': false;
	readonly 'Template': false;
	readonly 'Toggle': false;
	readonly 'Try': false;
}

type GlobalsProtractor = {
	readonly '$': false;
	readonly '$$': false;
	readonly 'browser': false;
	readonly 'by': false;
	readonly 'By': false;
	readonly 'DartObject': false;
	readonly 'element': false;
	readonly 'protractor': false;
}

type GlobalsQunit = {
	readonly 'asyncTest': false;
	readonly 'deepEqual': false;
	readonly 'equal': false;
	readonly 'expect': false;
	readonly 'module': false;
	readonly 'notDeepEqual': false;
	readonly 'notEqual': false;
	readonly 'notOk': false;
	readonly 'notPropEqual': false;
	readonly 'notStrictEqual': false;
	readonly 'ok': false;
	readonly 'propEqual': false;
	readonly 'QUnit': false;
	readonly 'raises': false;
	readonly 'start': false;
	readonly 'stop': false;
	readonly 'strictEqual': false;
	readonly 'test': false;
	readonly 'throws': false;
}

type GlobalsRhino = {
	readonly 'defineClass': false;
	readonly 'deserialize': false;
	readonly 'gc': false;
	readonly 'help': false;
	readonly 'importClass': false;
	readonly 'importPackage': false;
	readonly 'java': false;
	readonly 'load': false;
	readonly 'loadClass': false;
	readonly 'Packages': false;
	readonly 'print': false;
	readonly 'quit': false;
	readonly 'readFile': false;
	readonly 'readUrl': false;
	readonly 'runCommand': false;
	readonly 'seal': false;
	readonly 'serialize': false;
	readonly 'spawn': false;
	readonly 'sync': false;
	readonly 'toint32': false;
	readonly 'version': false;
}

type GlobalsServiceworker = {
	readonly 'addEventListener': false;
	readonly 'applicationCache': false;
	readonly 'atob': false;
	readonly 'Blob': false;
	readonly 'BroadcastChannel': false;
	readonly 'btoa': false;
	readonly 'ByteLengthQueuingStrategy': false;
	readonly 'Cache': false;
	readonly 'caches': false;
	readonly 'CacheStorage': false;
	readonly 'clearInterval': false;
	readonly 'clearTimeout': false;
	readonly 'Client': false;
	readonly 'clients': false;
	readonly 'Clients': false;
	readonly 'close': true;
	readonly 'CompressionStream': false;
	readonly 'console': false;
	readonly 'CountQueuingStrategy': false;
	readonly 'crypto': false;
	readonly 'Crypto': false;
	readonly 'CryptoKey': false;
	readonly 'CustomEvent': false;
	readonly 'DecompressionStream': false;
	readonly 'ErrorEvent': false;
	readonly 'Event': false;
	readonly 'ExtendableEvent': false;
	readonly 'ExtendableMessageEvent': false;
	readonly 'fetch': false;
	readonly 'FetchEvent': false;
	readonly 'File': false;
	readonly 'FileReaderSync': false;
	readonly 'FormData': false;
	readonly 'Headers': false;
	readonly 'IDBCursor': false;
	readonly 'IDBCursorWithValue': false;
	readonly 'IDBDatabase': false;
	readonly 'IDBFactory': false;
	readonly 'IDBIndex': false;
	readonly 'IDBKeyRange': false;
	readonly 'IDBObjectStore': false;
	readonly 'IDBOpenDBRequest': false;
	readonly 'IDBRequest': false;
	readonly 'IDBTransaction': false;
	readonly 'IDBVersionChangeEvent': false;
	readonly 'ImageData': false;
	readonly 'importScripts': false;
	readonly 'indexedDB': false;
	readonly 'location': false;
	readonly 'MessageChannel': false;
	readonly 'MessageEvent': false;
	readonly 'MessagePort': false;
	readonly 'name': false;
	readonly 'navigator': false;
	readonly 'Notification': false;
	readonly 'onclose': true;
	readonly 'onconnect': true;
	readonly 'onerror': true;
	readonly 'onfetch': true;
	readonly 'oninstall': true;
	readonly 'onlanguagechange': true;
	readonly 'onmessage': true;
	readonly 'onmessageerror': true;
	readonly 'onnotificationclick': true;
	readonly 'onnotificationclose': true;
	readonly 'onoffline': true;
	readonly 'ononline': true;
	readonly 'onpush': true;
	readonly 'onpushsubscriptionchange': true;
	readonly 'onrejectionhandled': true;
	readonly 'onsync': true;
	readonly 'onunhandledrejection': true;
	readonly 'performance': false;
	readonly 'Performance': false;
	readonly 'PerformanceEntry': false;
	readonly 'PerformanceMark': false;
	readonly 'PerformanceMeasure': false;
	readonly 'PerformanceNavigation': false;
	readonly 'PerformanceObserver': false;
	readonly 'PerformanceObserverEntryList': false;
	readonly 'PerformanceResourceTiming': false;
	readonly 'PerformanceTiming': false;
	readonly 'postMessage': true;
	readonly 'queueMicrotask': false;
	readonly 'ReadableByteStreamController': false;
	readonly 'ReadableStream': false;
	readonly 'ReadableStreamBYOBReader': false;
	readonly 'ReadableStreamBYOBRequest': false;
	readonly 'ReadableStreamDefaultController': false;
	readonly 'ReadableStreamDefaultReader': false;
	readonly 'registration': false;
	readonly 'removeEventListener': false;
	readonly 'Request': false;
	readonly 'Response': false;
	readonly 'self': false;
	readonly 'ServiceWorker': false;
	readonly 'ServiceWorkerContainer': false;
	readonly 'ServiceWorkerGlobalScope': false;
	readonly 'ServiceWorkerMessageEvent': false;
	readonly 'ServiceWorkerRegistration': false;
	readonly 'setInterval': false;
	readonly 'setTimeout': false;
	readonly 'skipWaiting': false;
	readonly 'SubtleCrypto': false;
	readonly 'TextDecoder': false;
	readonly 'TextDecoderStream': false;
	readonly 'TextEncoder': false;
	readonly 'TextEncoderStream': false;
	readonly 'TransformStream': false;
	readonly 'TransformStreamDefaultController': false;
	readonly 'URL': false;
	readonly 'URLSearchParams': false;
	readonly 'WebAssembly': false;
	readonly 'WebSocket': false;
	readonly 'WindowClient': false;
	readonly 'Worker': false;
	readonly 'WorkerGlobalScope': false;
	readonly 'WritableStream': false;
	readonly 'WritableStreamDefaultController': false;
	readonly 'WritableStreamDefaultWriter': false;
	readonly 'XMLHttpRequest': false;
}

type GlobalsSharednodebrowser = {
	readonly 'AbortController': false;
	readonly 'AbortSignal': false;
	readonly 'atob': false;
	readonly 'Blob': false;
	readonly 'BroadcastChannel': false;
	readonly 'btoa': false;
	readonly 'ByteLengthQueuingStrategy': false;
	readonly 'clearInterval': false;
	readonly 'clearTimeout': false;
	readonly 'CloseEvent': false;
	readonly 'CompressionStream': false;
	readonly 'console': false;
	readonly 'CountQueuingStrategy': false;
	readonly 'crypto': false;
	readonly 'Crypto': false;
	readonly 'CryptoKey': false;
	readonly 'CustomEvent': false;
	readonly 'DecompressionStream': false;
	readonly 'DOMException': false;
	readonly 'Event': false;
	readonly 'EventTarget': false;
	readonly 'fetch': false;
	readonly 'File': false;
	readonly 'FormData': false;
	readonly 'Headers': false;
	readonly 'MessageChannel': false;
	readonly 'MessageEvent': false;
	readonly 'MessagePort': false;
	readonly 'navigator': false;
	readonly 'Navigator': false;
	readonly 'performance': false;
	readonly 'Performance': false;
	readonly 'PerformanceEntry': false;
	readonly 'PerformanceMark': false;
	readonly 'PerformanceMeasure': false;
	readonly 'PerformanceObserver': false;
	readonly 'PerformanceObserverEntryList': false;
	readonly 'PerformanceResourceTiming': false;
	readonly 'queueMicrotask': false;
	readonly 'ReadableByteStreamController': false;
	readonly 'ReadableStream': false;
	readonly 'ReadableStreamBYOBReader': false;
	readonly 'ReadableStreamBYOBRequest': false;
	readonly 'ReadableStreamDefaultController': false;
	readonly 'ReadableStreamDefaultReader': false;
	readonly 'Request': false;
	readonly 'Response': false;
	readonly 'setInterval': false;
	readonly 'setTimeout': false;
	readonly 'structuredClone': false;
	readonly 'SubtleCrypto': false;
	readonly 'TextDecoder': false;
	readonly 'TextDecoderStream': false;
	readonly 'TextEncoder': false;
	readonly 'TextEncoderStream': false;
	readonly 'TransformStream': false;
	readonly 'TransformStreamDefaultController': false;
	readonly 'URL': false;
	readonly 'URLSearchParams': false;
	readonly 'WebAssembly': false;
	readonly 'WebSocket': false;
	readonly 'WritableStream': false;
	readonly 'WritableStreamDefaultController': false;
	readonly 'WritableStreamDefaultWriter': false;
}

type GlobalsShelljs = {
	readonly 'cat': false;
	readonly 'cd': false;
	readonly 'chmod': false;
	readonly 'config': false;
	readonly 'cp': false;
	readonly 'dirs': false;
	readonly 'echo': false;
	readonly 'env': false;
	readonly 'error': false;
	readonly 'exec': false;
	readonly 'exit': false;
	readonly 'find': false;
	readonly 'grep': false;
	readonly 'head': false;
	readonly 'ln': false;
	readonly 'ls': false;
	readonly 'mkdir': false;
	readonly 'mv': false;
	readonly 'popd': false;
	readonly 'pushd': false;
	readonly 'pwd': false;
	readonly 'rm': false;
	readonly 'sed': false;
	readonly 'set': false;
	readonly 'ShellString': false;
	readonly 'sort': false;
	readonly 'tail': false;
	readonly 'tempdir': false;
	readonly 'test': false;
	readonly 'touch': false;
	readonly 'uniq': false;
	readonly 'which': false;
}

type GlobalsVitest = {
	readonly 'afterAll': false;
	readonly 'afterEach': false;
	readonly 'assert': false;
	readonly 'assertType': false;
	readonly 'beforeAll': false;
	readonly 'beforeEach': false;
	readonly 'describe': false;
	readonly 'expect': false;
	readonly 'expectTypeOf': false;
	readonly 'it': false;
	readonly 'onTestFailed': false;
	readonly 'onTestFinished': false;
	readonly 'suite': false;
	readonly 'test': false;
	readonly 'vi': false;
	readonly 'vitest': false;
}

type GlobalsWebextensions = {
	readonly 'browser': false;
	readonly 'chrome': false;
	readonly 'opr': false;
}

type GlobalsWorker = {
	readonly 'AbortController': false;
	readonly 'AbortSignal': false;
	readonly 'addEventListener': false;
	readonly 'ai': false;
	readonly 'atob': false;
	readonly 'AudioData': false;
	readonly 'AudioDecoder': false;
	readonly 'AudioEncoder': false;
	readonly 'BackgroundFetchManager': false;
	readonly 'BackgroundFetchRecord': false;
	readonly 'BackgroundFetchRegistration': false;
	readonly 'BarcodeDetector': false;
	readonly 'Blob': false;
	readonly 'BroadcastChannel': false;
	readonly 'btoa': false;
	readonly 'ByteLengthQueuingStrategy': false;
	readonly 'Cache': false;
	readonly 'caches': false;
	readonly 'CacheStorage': false;
	readonly 'cancelAnimationFrame': false;
	readonly 'CanvasGradient': false;
	readonly 'CanvasPattern': false;
	readonly 'clearInterval': false;
	readonly 'clearTimeout': false;
	readonly 'close': false;
	readonly 'CloseEvent': false;
	readonly 'CompressionStream': false;
	readonly 'console': false;
	readonly 'CountQueuingStrategy': false;
	readonly 'createImageBitmap': false;
	readonly 'CropTarget': false;
	readonly 'crossOriginIsolated': false;
	readonly 'crypto': false;
	readonly 'Crypto': false;
	readonly 'CryptoKey': false;
	readonly 'CSSSkewX': false;
	readonly 'CSSSkewY': false;
	readonly 'CustomEvent': false;
	readonly 'DecompressionStream': false;
	readonly 'DedicatedWorkerGlobalScope': false;
	readonly 'dispatchEvent': false;
	readonly 'DOMException': false;
	readonly 'DOMMatrix': false;
	readonly 'DOMMatrixReadOnly': false;
	readonly 'DOMPoint': false;
	readonly 'DOMPointReadOnly': false;
	readonly 'DOMQuad': false;
	readonly 'DOMRect': false;
	readonly 'DOMRectReadOnly': false;
	readonly 'DOMStringList': false;
	readonly 'EncodedAudioChunk': false;
	readonly 'EncodedVideoChunk': false;
	readonly 'ErrorEvent': false;
	readonly 'Event': false;
	readonly 'EventSource': false;
	readonly 'EventTarget': false;
	readonly 'fetch': false;
	readonly 'File': false;
	readonly 'FileList': false;
	readonly 'FileReader': false;
	readonly 'FileReaderSync': false;
	readonly 'FileSystemDirectoryHandle': false;
	readonly 'FileSystemFileHandle': false;
	readonly 'FileSystemHandle': false;
	readonly 'FileSystemSyncAccessHandle': false;
	readonly 'FileSystemWritableFileStream': false;
	readonly 'FontFace': false;
	readonly 'fonts': false;
	readonly 'FormData': false;
	readonly 'GPU': false;
	readonly 'GPUAdapter': false;
	readonly 'GPUAdapterInfo': false;
	readonly 'GPUBindGroup': false;
	readonly 'GPUBindGroupLayout': false;
	readonly 'GPUBuffer': false;
	readonly 'GPUBufferUsage': false;
	readonly 'GPUCanvasContext': false;
	readonly 'GPUColorWrite': false;
	readonly 'GPUCommandBuffer': false;
	readonly 'GPUCommandEncoder': false;
	readonly 'GPUCompilationInfo': false;
	readonly 'GPUCompilationMessage': false;
	readonly 'GPUComputePassEncoder': false;
	readonly 'GPUComputePipeline': false;
	readonly 'GPUDevice': false;
	readonly 'GPUDeviceLostInfo': false;
	readonly 'GPUError': false;
	readonly 'GPUExternalTexture': false;
	readonly 'GPUInternalError': false;
	readonly 'GPUMapMode': false;
	readonly 'GPUOutOfMemoryError': false;
	readonly 'GPUPipelineError': false;
	readonly 'GPUPipelineLayout': false;
	readonly 'GPUQuerySet': false;
	readonly 'GPUQueue': false;
	readonly 'GPURenderBundle': false;
	readonly 'GPURenderBundleEncoder': false;
	readonly 'GPURenderPassEncoder': false;
	readonly 'GPURenderPipeline': false;
	readonly 'GPUSampler': false;
	readonly 'GPUShaderModule': false;
	readonly 'GPUShaderStage': false;
	readonly 'GPUSupportedFeatures': false;
	readonly 'GPUSupportedLimits': false;
	readonly 'GPUTexture': false;
	readonly 'GPUTextureUsage': false;
	readonly 'GPUTextureView': false;
	readonly 'GPUUncapturedErrorEvent': false;
	readonly 'GPUValidationError': false;
	readonly 'Headers': false;
	readonly 'HID': false;
	readonly 'HIDConnectionEvent': false;
	readonly 'HIDDevice': false;
	readonly 'HIDInputReportEvent': false;
	readonly 'IDBCursor': false;
	readonly 'IDBCursorWithValue': false;
	readonly 'IDBDatabase': false;
	readonly 'IDBFactory': false;
	readonly 'IDBIndex': false;
	readonly 'IDBKeyRange': false;
	readonly 'IDBObjectStore': false;
	readonly 'IDBOpenDBRequest': false;
	readonly 'IDBRequest': false;
	readonly 'IDBTransaction': false;
	readonly 'IDBVersionChangeEvent': false;
	readonly 'IdleDetector': false;
	readonly 'ImageBitmap': false;
	readonly 'ImageBitmapRenderingContext': false;
	readonly 'ImageData': false;
	readonly 'ImageDecoder': false;
	readonly 'ImageTrack': false;
	readonly 'ImageTrackList': false;
	readonly 'importScripts': false;
	readonly 'indexedDB': false;
	readonly 'isSecureContext': false;
	readonly 'location': false;
	readonly 'Lock': false;
	readonly 'LockManager': false;
	readonly 'MediaCapabilities': false;
	readonly 'MediaSource': false;
	readonly 'MediaSourceHandle': false;
	readonly 'MessageChannel': false;
	readonly 'MessageEvent': false;
	readonly 'MessagePort': false;
	readonly 'name': false;
	readonly 'NavigationPreloadManager': false;
	readonly 'navigator': false;
	readonly 'NavigatorUAData': false;
	readonly 'NetworkInformation': false;
	readonly 'Notification': false;
	readonly 'OffscreenCanvas': false;
	readonly 'OffscreenCanvasRenderingContext2D': false;
	readonly 'onerror': true;
	readonly 'onlanguagechange': true;
	readonly 'onmessage': true;
	readonly 'onmessageerror': true;
	readonly 'onrejectionhandled': true;
	readonly 'onunhandledrejection': true;
	readonly 'origin': false;
	readonly 'Path2D': false;
	readonly 'performance': false;
	readonly 'Performance': false;
	readonly 'PerformanceEntry': false;
	readonly 'PerformanceMark': false;
	readonly 'PerformanceMeasure': false;
	readonly 'PerformanceObserver': false;
	readonly 'PerformanceObserverEntryList': false;
	readonly 'PerformanceResourceTiming': false;
	readonly 'PerformanceServerTiming': false;
	readonly 'PeriodicSyncManager': false;
	readonly 'Permissions': false;
	readonly 'PermissionStatus': false;
	readonly 'PERSISTENT': false;
	readonly 'postMessage': false;
	readonly 'PressureObserver': false;
	readonly 'PressureRecord': false;
	readonly 'ProgressEvent': false;
	readonly 'PromiseRejectionEvent': false;
	readonly 'PushManager': false;
	readonly 'PushSubscription': false;
	readonly 'PushSubscriptionOptions': false;
	readonly 'queueMicrotask': false;
	readonly 'ReadableByteStreamController': false;
	readonly 'ReadableStream': false;
	readonly 'ReadableStreamBYOBReader': false;
	readonly 'ReadableStreamBYOBRequest': false;
	readonly 'ReadableStreamDefaultController': false;
	readonly 'ReadableStreamDefaultReader': false;
	readonly 'removeEventListener': false;
	readonly 'reportError': false;
	readonly 'ReportingObserver': false;
	readonly 'Request': false;
	readonly 'requestAnimationFrame': false;
	readonly 'Response': false;
	readonly 'RTCDataChannel': false;
	readonly 'RTCEncodedAudioFrame': false;
	readonly 'RTCEncodedVideoFrame': false;
	readonly 'scheduler': false;
	readonly 'Scheduler': false;
	readonly 'SecurityPolicyViolationEvent': false;
	readonly 'self': false;
	readonly 'Serial': false;
	readonly 'SerialPort': false;
	readonly 'ServiceWorkerRegistration': false;
	readonly 'setInterval': false;
	readonly 'setTimeout': false;
	readonly 'SourceBuffer': false;
	readonly 'SourceBufferList': false;
	readonly 'StorageBucket': false;
	readonly 'StorageBucketManager': false;
	readonly 'StorageManager': false;
	readonly 'structuredClone': false;
	readonly 'SubtleCrypto': false;
	readonly 'SyncManager': false;
	readonly 'TaskController': false;
	readonly 'TaskPriorityChangeEvent': false;
	readonly 'TaskSignal': false;
	readonly 'TEMPORARY': false;
	readonly 'TextDecoder': false;
	readonly 'TextDecoderStream': false;
	readonly 'TextEncoder': false;
	readonly 'TextEncoderStream': false;
	readonly 'TextMetrics': false;
	readonly 'TransformStream': false;
	readonly 'TransformStreamDefaultController': false;
	readonly 'TrustedHTML': false;
	readonly 'TrustedScript': false;
	readonly 'TrustedScriptURL': false;
	readonly 'TrustedTypePolicy': false;
	readonly 'TrustedTypePolicyFactory': false;
	readonly 'trustedTypes': false;
	readonly 'URL': false;
	readonly 'URLPattern': false;
	readonly 'URLSearchParams': false;
	readonly 'USB': false;
	readonly 'USBAlternateInterface': false;
	readonly 'USBConfiguration': false;
	readonly 'USBConnectionEvent': false;
	readonly 'USBDevice': false;
	readonly 'USBEndpoint': false;
	readonly 'USBInterface': false;
	readonly 'USBInTransferResult': false;
	readonly 'USBIsochronousInTransferPacket': false;
	readonly 'USBIsochronousInTransferResult': false;
	readonly 'USBIsochronousOutTransferPacket': false;
	readonly 'USBIsochronousOutTransferResult': false;
	readonly 'USBOutTransferResult': false;
	readonly 'UserActivation': false;
	readonly 'VideoColorSpace': false;
	readonly 'VideoDecoder': false;
	readonly 'VideoEncoder': false;
	readonly 'VideoFrame': false;
	readonly 'WebAssembly': false;
	readonly 'WebGL2RenderingContext': false;
	readonly 'WebGLActiveInfo': false;
	readonly 'WebGLBuffer': false;
	readonly 'WebGLContextEvent': false;
	readonly 'WebGLFramebuffer': false;
	readonly 'WebGLObject': false;
	readonly 'WebGLProgram': false;
	readonly 'WebGLQuery': false;
	readonly 'WebGLRenderbuffer': false;
	readonly 'WebGLRenderingContext': false;
	readonly 'WebGLSampler': false;
	readonly 'WebGLShader': false;
	readonly 'WebGLShaderPrecisionFormat': false;
	readonly 'WebGLSync': false;
	readonly 'WebGLTexture': false;
	readonly 'WebGLTransformFeedback': false;
	readonly 'WebGLUniformLocation': false;
	readonly 'WebGLVertexArrayObject': false;
	readonly 'webkitRequestFileSystem': false;
	readonly 'webkitRequestFileSystemSync': false;
	readonly 'webkitResolveLocalFileSystemSyncURL': false;
	readonly 'webkitResolveLocalFileSystemURL': false;
	readonly 'WebSocket': false;
	readonly 'WebSocketError': false;
	readonly 'WebSocketStream': false;
	readonly 'WebTransport': false;
	readonly 'WebTransportBidirectionalStream': false;
	readonly 'WebTransportDatagramDuplexStream': false;
	readonly 'WebTransportError': false;
	readonly 'WGSLLanguageFeatures': false;
	readonly 'Worker': false;
	readonly 'WorkerGlobalScope': false;
	readonly 'WorkerLocation': false;
	readonly 'WorkerNavigator': false;
	readonly 'WritableStream': false;
	readonly 'WritableStreamDefaultController': false;
	readonly 'WritableStreamDefaultWriter': false;
	readonly 'XMLHttpRequest': false;
	readonly 'XMLHttpRequestEventTarget': false;
	readonly 'XMLHttpRequestUpload': false;
}

type GlobalsWsh = {
	readonly 'ActiveXObject': false;
	readonly 'CollectGarbage': false;
	readonly 'Debug': false;
	readonly 'Enumerator': false;
	readonly 'GetObject': false;
	readonly 'RuntimeObject': false;
	readonly 'ScriptEngine': false;
	readonly 'ScriptEngineBuildVersion': false;
	readonly 'ScriptEngineMajorVersion': false;
	readonly 'ScriptEngineMinorVersion': false;
	readonly 'VBArray': false;
	readonly 'WScript': false;
	readonly 'WSH': false;
}

type GlobalsYui = {
	readonly 'YAHOO': false;
	readonly 'YAHOO_config': false;
	readonly 'YUI': false;
	readonly 'YUI_config': false;
}

type Globals = {
	readonly 'amd': GlobalsAmd;
	readonly 'applescript': GlobalsApplescript;
	readonly 'atomtest': GlobalsAtomtest;
	readonly 'browser': GlobalsBrowser;
	readonly 'builtin': GlobalsBuiltin;
	readonly 'chai': GlobalsChai;
	readonly 'commonjs': GlobalsCommonjs;
	readonly 'couch': GlobalsCouch;
	readonly 'devtools': GlobalsDevtools;
	readonly 'embertest': GlobalsEmbertest;
	readonly 'es2015': GlobalsEs2015;
	readonly 'es2016': GlobalsEs2016;
	readonly 'es2017': GlobalsEs2017;
	readonly 'es2018': GlobalsEs2018;
	readonly 'es2019': GlobalsEs2019;
	readonly 'es2020': GlobalsEs2020;
	readonly 'es2021': GlobalsEs2021;
	readonly 'es2022': GlobalsEs2022;
	readonly 'es2023': GlobalsEs2023;
	readonly 'es2024': GlobalsEs2024;
	readonly 'es2025': GlobalsEs2025;
	readonly 'es3': GlobalsEs3;
	readonly 'es5': GlobalsEs5;
	readonly 'greasemonkey': GlobalsGreasemonkey;
	readonly 'jasmine': GlobalsJasmine;
	readonly 'jest': GlobalsJest;
	readonly 'jquery': GlobalsJquery;
	readonly 'meteor': GlobalsMeteor;
	readonly 'mocha': GlobalsMocha;
	readonly 'mongo': GlobalsMongo;
	readonly 'nashorn': GlobalsNashorn;
	readonly 'node': GlobalsNode;
	readonly 'nodeBuiltin': GlobalsNodeBuiltin;
	readonly 'phantomjs': GlobalsPhantomjs;
	readonly 'prototypejs': GlobalsPrototypejs;
	readonly 'protractor': GlobalsProtractor;
	readonly 'qunit': GlobalsQunit;
	readonly 'rhino': GlobalsRhino;
	readonly 'serviceworker': GlobalsServiceworker;
	readonly 'shared-node-browser': GlobalsSharednodebrowser;
	readonly 'shelljs': GlobalsShelljs;
	readonly 'vitest': GlobalsVitest;
	readonly 'webextensions': GlobalsWebextensions;
	readonly 'worker': GlobalsWorker;
	readonly 'wsh': GlobalsWsh;
	readonly 'yui': GlobalsYui;
}

declare const globals: Globals;

export = globals;
----------------------------------------
File: ./animations/node_modules/d3-shape/dist/d3-shape.min.js
----------------------------------------
// https://d3js.org/d3-shape/ v3.2.0 Copyright 2010-2022 Mike Bostock
!function(t,n){"object"==typeof exports&&"undefined"!=typeof module?n(exports,require("d3-path")):"function"==typeof define&&define.amd?define(["exports","d3-path"],n):n((t="undefined"!=typeof globalThis?globalThis:t||self).d3=t.d3||{},t.d3)}(this,(function(t,n){"use strict";function i(t){return function(){return t}}const e=Math.abs,s=Math.atan2,o=Math.cos,h=Math.max,_=Math.min,r=Math.sin,a=Math.sqrt,l=1e-12,c=Math.PI,u=c/2,f=2*c;function y(t){return t>1?0:t<-1?c:Math.acos(t)}function x(t){return t>=1?u:t<=-1?-u:Math.asin(t)}function p(t){let i=3;return t.digits=function(n){if(!arguments.length)return i;if(null==n)i=null;else{const t=Math.floor(n);if(!(t>=0))throw new RangeError(`invalid digits: ${n}`);i=t}return t},()=>new n.Path(i)}function v(t){return t.innerRadius}function d(t){return t.outerRadius}function T(t){return t.startAngle}function g(t){return t.endAngle}function m(t){return t&&t.padAngle}function b(t,n,i,e,s,o,h,_){var r=i-t,a=e-n,c=h-s,u=_-o,f=u*r-c*a;if(!(f*f<l))return[t+(f=(c*(n-o)-u*(t-s))/f)*r,n+f*a]}function w(t,n,i,e,s,o,_){var r=t-i,l=n-e,c=(_?o:-o)/a(r*r+l*l),u=c*l,f=-c*r,y=t+u,x=n+f,p=i+u,v=e+f,d=(y+p)/2,T=(x+v)/2,g=p-y,m=v-x,b=g*g+m*m,w=s-o,k=y*v-p*x,N=(m<0?-1:1)*a(h(0,w*w*b-k*k)),S=(k*m-g*N)/b,E=(-k*g-m*N)/b,A=(k*m+g*N)/b,P=(-k*g+m*N)/b,M=S-d,C=E-T,R=A-d,O=P-T;return M*M+C*C>R*R+O*O&&(S=A,E=P),{cx:S,cy:E,x01:-u,y01:-f,x11:S*(s/w-1),y11:E*(s/w-1)}}var k=Array.prototype.slice;function N(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}function S(t){this._context=t}function E(t){return new S(t)}function A(t){return t[0]}function P(t){return t[1]}function M(t,n){var e=i(!0),s=null,o=E,h=null,_=p(r);function r(i){var r,a,l,c=(i=N(i)).length,u=!1;for(null==s&&(h=o(l=_())),r=0;r<=c;++r)!(r<c&&e(a=i[r],r,i))===u&&((u=!u)?h.lineStart():h.lineEnd()),u&&h.point(+t(a,r,i),+n(a,r,i));if(l)return h=null,l+""||null}return t="function"==typeof t?t:void 0===t?A:i(t),n="function"==typeof n?n:void 0===n?P:i(n),r.x=function(n){return arguments.length?(t="function"==typeof n?n:i(+n),r):t},r.y=function(t){return arguments.length?(n="function"==typeof t?t:i(+t),r):n},r.defined=function(t){return arguments.length?(e="function"==typeof t?t:i(!!t),r):e},r.curve=function(t){return arguments.length?(o=t,null!=s&&(h=o(s)),r):o},r.context=function(t){return arguments.length?(null==t?s=h=null:h=o(s=t),r):s},r}function C(t,n,e){var s=null,o=i(!0),h=null,_=E,r=null,a=p(l);function l(i){var l,c,u,f,y,x=(i=N(i)).length,p=!1,v=new Array(x),d=new Array(x);for(null==h&&(r=_(y=a())),l=0;l<=x;++l){if(!(l<x&&o(f=i[l],l,i))===p)if(p=!p)c=l,r.areaStart(),r.lineStart();else{for(r.lineEnd(),r.lineStart(),u=l-1;u>=c;--u)r.point(v[u],d[u]);r.lineEnd(),r.areaEnd()}p&&(v[l]=+t(f,l,i),d[l]=+n(f,l,i),r.point(s?+s(f,l,i):v[l],e?+e(f,l,i):d[l]))}if(y)return r=null,y+""||null}function c(){return M().defined(o).curve(_).context(h)}return t="function"==typeof t?t:void 0===t?A:i(+t),n="function"==typeof n?n:i(void 0===n?0:+n),e="function"==typeof e?e:void 0===e?P:i(+e),l.x=function(n){return arguments.length?(t="function"==typeof n?n:i(+n),s=null,l):t},l.x0=function(n){return arguments.length?(t="function"==typeof n?n:i(+n),l):t},l.x1=function(t){return arguments.length?(s=null==t?null:"function"==typeof t?t:i(+t),l):s},l.y=function(t){return arguments.length?(n="function"==typeof t?t:i(+t),e=null,l):n},l.y0=function(t){return arguments.length?(n="function"==typeof t?t:i(+t),l):n},l.y1=function(t){return arguments.length?(e=null==t?null:"function"==typeof t?t:i(+t),l):e},l.lineX0=l.lineY0=function(){return c().x(t).y(n)},l.lineY1=function(){return c().x(t).y(e)},l.lineX1=function(){return c().x(s).y(n)},l.defined=function(t){return arguments.length?(o="function"==typeof t?t:i(!!t),l):o},l.curve=function(t){return arguments.length?(_=t,null!=h&&(r=_(h)),l):_},l.context=function(t){return arguments.length?(null==t?h=r=null:r=_(h=t),l):h},l}function R(t,n){return n<t?-1:n>t?1:n>=t?0:NaN}function O(t){return t}S.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:this._context.lineTo(t,n)}}};var z=Y(E);function X(t){this._curve=t}function Y(t){function n(n){return new X(t(n))}return n._curve=t,n}function q(t){var n=t.curve;return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t.curve=function(t){return arguments.length?n(Y(t)):n()._curve},t}function B(){return q(M().curve(z))}function D(){var t=C().curve(z),n=t.curve,i=t.lineX0,e=t.lineX1,s=t.lineY0,o=t.lineY1;return t.angle=t.x,delete t.x,t.startAngle=t.x0,delete t.x0,t.endAngle=t.x1,delete t.x1,t.radius=t.y,delete t.y,t.innerRadius=t.y0,delete t.y0,t.outerRadius=t.y1,delete t.y1,t.lineStartAngle=function(){return q(i())},delete t.lineX0,t.lineEndAngle=function(){return q(e())},delete t.lineX1,t.lineInnerRadius=function(){return q(s())},delete t.lineY0,t.lineOuterRadius=function(){return q(o())},delete t.lineY1,t.curve=function(t){return arguments.length?n(Y(t)):n()._curve},t}function I(t,n){return[(n=+n)*Math.cos(t-=Math.PI/2),n*Math.sin(t)]}X.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,n){this._curve.point(n*Math.sin(t),n*-Math.cos(t))}};class j{constructor(t,n){this._context=t,this._x=n}areaStart(){this._line=0}areaEnd(){this._line=NaN}lineStart(){this._point=0}lineEnd(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line}point(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:this._x?this._context.bezierCurveTo(this._x0=(this._x0+t)/2,this._y0,this._x0,n,t,n):this._context.bezierCurveTo(this._x0,this._y0=(this._y0+n)/2,t,this._y0,t,n)}this._x0=t,this._y0=n}}class L{constructor(t){this._context=t}lineStart(){this._point=0}lineEnd(){}point(t,n){if(t=+t,n=+n,0===this._point)this._point=1;else{const i=I(this._x0,this._y0),e=I(this._x0,this._y0=(this._y0+n)/2),s=I(t,this._y0),o=I(t,n);this._context.moveTo(...i),this._context.bezierCurveTo(...e,...s,...o)}this._x0=t,this._y0=n}}function V(t){return new j(t,!0)}function W(t){return new j(t,!1)}function F(t){return new L(t)}function H(t){return t.source}function $(t){return t.target}function G(t){let n=H,e=$,s=A,o=P,h=null,_=null,r=p(a);function a(){let i;const a=k.call(arguments),l=n.apply(this,a),c=e.apply(this,a);if(null==h&&(_=t(i=r())),_.lineStart(),a[0]=l,_.point(+s.apply(this,a),+o.apply(this,a)),a[0]=c,_.point(+s.apply(this,a),+o.apply(this,a)),_.lineEnd(),i)return _=null,i+""||null}return a.source=function(t){return arguments.length?(n=t,a):n},a.target=function(t){return arguments.length?(e=t,a):e},a.x=function(t){return arguments.length?(s="function"==typeof t?t:i(+t),a):s},a.y=function(t){return arguments.length?(o="function"==typeof t?t:i(+t),a):o},a.context=function(n){return arguments.length?(null==n?h=_=null:_=t(h=n),a):h},a}const J=a(3);var K={draw(t,n){const i=.59436*a(n+_(n/28,.75)),e=i/2,s=e*J;t.moveTo(0,i),t.lineTo(0,-i),t.moveTo(-s,-e),t.lineTo(s,e),t.moveTo(-s,e),t.lineTo(s,-e)}},Q={draw(t,n){const i=a(n/c);t.moveTo(i,0),t.arc(0,0,i,0,f)}},U={draw(t,n){const i=a(n/5)/2;t.moveTo(-3*i,-i),t.lineTo(-i,-i),t.lineTo(-i,-3*i),t.lineTo(i,-3*i),t.lineTo(i,-i),t.lineTo(3*i,-i),t.lineTo(3*i,i),t.lineTo(i,i),t.lineTo(i,3*i),t.lineTo(-i,3*i),t.lineTo(-i,i),t.lineTo(-3*i,i),t.closePath()}};const Z=a(1/3),tt=2*Z;var nt={draw(t,n){const i=a(n/tt),e=i*Z;t.moveTo(0,-i),t.lineTo(e,0),t.lineTo(0,i),t.lineTo(-e,0),t.closePath()}},it={draw(t,n){const i=.62625*a(n);t.moveTo(0,-i),t.lineTo(i,0),t.lineTo(0,i),t.lineTo(-i,0),t.closePath()}},et={draw(t,n){const i=.87559*a(n-_(n/7,2));t.moveTo(-i,0),t.lineTo(i,0),t.moveTo(0,i),t.lineTo(0,-i)}},st={draw(t,n){const i=a(n),e=-i/2;t.rect(e,e,i,i)}},ot={draw(t,n){const i=.4431*a(n);t.moveTo(i,i),t.lineTo(i,-i),t.lineTo(-i,-i),t.lineTo(-i,i),t.closePath()}};const ht=r(c/10)/r(7*c/10),_t=r(f/10)*ht,rt=-o(f/10)*ht;var at={draw(t,n){const i=a(.8908130915292852*n),e=_t*i,s=rt*i;t.moveTo(0,-i),t.lineTo(e,s);for(let n=1;n<5;++n){const h=f*n/5,_=o(h),a=r(h);t.lineTo(a*i,-_*i),t.lineTo(_*e-a*s,a*e+_*s)}t.closePath()}};const lt=a(3);var ct={draw(t,n){const i=-a(n/(3*lt));t.moveTo(0,2*i),t.lineTo(-lt*i,-i),t.lineTo(lt*i,-i),t.closePath()}};const ut=a(3);var ft={draw(t,n){const i=.6824*a(n),e=i/2,s=i*ut/2;t.moveTo(0,-i),t.lineTo(s,e),t.lineTo(-s,e),t.closePath()}};const yt=-.5,xt=a(3)/2,pt=1/a(12),vt=3*(pt/2+1);var dt={draw(t,n){const i=a(n/vt),e=i/2,s=i*pt,o=e,h=i*pt+i,_=-o,r=h;t.moveTo(e,s),t.lineTo(o,h),t.lineTo(_,r),t.lineTo(yt*e-xt*s,xt*e+yt*s),t.lineTo(yt*o-xt*h,xt*o+yt*h),t.lineTo(yt*_-xt*r,xt*_+yt*r),t.lineTo(yt*e+xt*s,yt*s-xt*e),t.lineTo(yt*o+xt*h,yt*h-xt*o),t.lineTo(yt*_+xt*r,yt*r-xt*_),t.closePath()}},Tt={draw(t,n){const i=.6189*a(n-_(n/6,1.7));t.moveTo(-i,-i),t.lineTo(i,i),t.moveTo(-i,i),t.lineTo(i,-i)}};const gt=[Q,U,nt,st,at,ct,dt],mt=[Q,et,Tt,ft,K,ot,it];function bt(){}function wt(t,n,i){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+n)/6,(t._y0+4*t._y1+i)/6)}function kt(t){this._context=t}function Nt(t){this._context=t}function St(t){this._context=t}function Et(t,n){this._basis=new kt(t),this._beta=n}kt.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:wt(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:wt(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}},Nt.prototype={areaStart:bt,areaEnd:bt,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x2=t,this._y2=n;break;case 1:this._point=2,this._x3=t,this._y3=n;break;case 2:this._point=3,this._x4=t,this._y4=n,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+n)/6);break;default:wt(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}},St.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var i=(this._x0+4*this._x1+t)/6,e=(this._y0+4*this._y1+n)/6;this._line?this._context.lineTo(i,e):this._context.moveTo(i,e);break;case 3:this._point=4;default:wt(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}},Et.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,n=this._y,i=t.length-1;if(i>0)for(var e,s=t[0],o=n[0],h=t[i]-s,_=n[i]-o,r=-1;++r<=i;)e=r/i,this._basis.point(this._beta*t[r]+(1-this._beta)*(s+e*h),this._beta*n[r]+(1-this._beta)*(o+e*_));this._x=this._y=null,this._basis.lineEnd()},point:function(t,n){this._x.push(+t),this._y.push(+n)}};var At=function t(n){function i(t){return 1===n?new kt(t):new Et(t,n)}return i.beta=function(n){return t(+n)},i}(.85);function Pt(t,n,i){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-n),t._y2+t._k*(t._y1-i),t._x2,t._y2)}function Mt(t,n){this._context=t,this._k=(1-n)/6}Mt.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:Pt(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2,this._x1=t,this._y1=n;break;case 2:this._point=3;default:Pt(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var Ct=function t(n){function i(t){return new Mt(t,n)}return i.tension=function(n){return t(+n)},i}(0);function Rt(t,n){this._context=t,this._k=(1-n)/6}Rt.prototype={areaStart:bt,areaEnd:bt,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:Pt(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var Ot=function t(n){function i(t){return new Rt(t,n)}return i.tension=function(n){return t(+n)},i}(0);function zt(t,n){this._context=t,this._k=(1-n)/6}zt.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Pt(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var Xt=function t(n){function i(t){return new zt(t,n)}return i.tension=function(n){return t(+n)},i}(0);function Yt(t,n,i){var e=t._x1,s=t._y1,o=t._x2,h=t._y2;if(t._l01_a>l){var _=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,r=3*t._l01_a*(t._l01_a+t._l12_a);e=(e*_-t._x0*t._l12_2a+t._x2*t._l01_2a)/r,s=(s*_-t._y0*t._l12_2a+t._y2*t._l01_2a)/r}if(t._l23_a>l){var a=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,c=3*t._l23_a*(t._l23_a+t._l12_a);o=(o*a+t._x1*t._l23_2a-n*t._l12_2a)/c,h=(h*a+t._y1*t._l23_2a-i*t._l12_2a)/c}t._context.bezierCurveTo(e,s,o,h,t._x2,t._y2)}function qt(t,n){this._context=t,this._alpha=n}qt.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var i=this._x2-t,e=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(i*i+e*e,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3;default:Yt(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var Bt=function t(n){function i(t){return n?new qt(t,n):new Mt(t,0)}return i.alpha=function(n){return t(+n)},i}(.5);function Dt(t,n){this._context=t,this._alpha=n}Dt.prototype={areaStart:bt,areaEnd:bt,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){if(t=+t,n=+n,this._point){var i=this._x2-t,e=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(i*i+e*e,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:Yt(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var It=function t(n){function i(t){return n?new Dt(t,n):new Rt(t,0)}return i.alpha=function(n){return t(+n)},i}(.5);function jt(t,n){this._context=t,this._alpha=n}jt.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var i=this._x2-t,e=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(i*i+e*e,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Yt(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var Lt=function t(n){function i(t){return n?new jt(t,n):new zt(t,0)}return i.alpha=function(n){return t(+n)},i}(.5);function Vt(t){this._context=t}function Wt(t){return t<0?-1:1}function Ft(t,n,i){var e=t._x1-t._x0,s=n-t._x1,o=(t._y1-t._y0)/(e||s<0&&-0),h=(i-t._y1)/(s||e<0&&-0),_=(o*s+h*e)/(e+s);return(Wt(o)+Wt(h))*Math.min(Math.abs(o),Math.abs(h),.5*Math.abs(_))||0}function Ht(t,n){var i=t._x1-t._x0;return i?(3*(t._y1-t._y0)/i-n)/2:n}function $t(t,n,i){var e=t._x0,s=t._y0,o=t._x1,h=t._y1,_=(o-e)/3;t._context.bezierCurveTo(e+_,s+_*n,o-_,h-_*i,o,h)}function Gt(t){this._context=t}function Jt(t){this._context=new Kt(t)}function Kt(t){this._context=t}function Qt(t){this._context=t}function Ut(t){var n,i,e=t.length-1,s=new Array(e),o=new Array(e),h=new Array(e);for(s[0]=0,o[0]=2,h[0]=t[0]+2*t[1],n=1;n<e-1;++n)s[n]=1,o[n]=4,h[n]=4*t[n]+2*t[n+1];for(s[e-1]=2,o[e-1]=7,h[e-1]=8*t[e-1]+t[e],n=1;n<e;++n)i=s[n]/o[n-1],o[n]-=i,h[n]-=i*h[n-1];for(s[e-1]=h[e-1]/o[e-1],n=e-2;n>=0;--n)s[n]=(h[n]-s[n+1])/o[n];for(o[e-1]=(t[e]+s[e-1])/2,n=0;n<e-1;++n)o[n]=2*t[n+1]-s[n+1];return[s,o]}function Zt(t,n){this._context=t,this._t=n}function tn(t,n){if((s=t.length)>1)for(var i,e,s,o=1,h=t[n[0]],_=h.length;o<s;++o)for(e=h,h=t[n[o]],i=0;i<_;++i)h[i][1]+=h[i][0]=isNaN(e[i][1])?e[i][0]:e[i][1]}function nn(t){for(var n=t.length,i=new Array(n);--n>=0;)i[n]=n;return i}function en(t,n){return t[n]}function sn(t){const n=[];return n.key=t,n}function on(t){var n=t.map(hn);return nn(t).sort((function(t,i){return n[t]-n[i]}))}function hn(t){for(var n,i=-1,e=0,s=t.length,o=-1/0;++i<s;)(n=+t[i][1])>o&&(o=n,e=i);return e}function _n(t){var n=t.map(rn);return nn(t).sort((function(t,i){return n[t]-n[i]}))}function rn(t){for(var n,i=0,e=-1,s=t.length;++e<s;)(n=+t[e][1])&&(i+=n);return i}Vt.prototype={areaStart:bt,areaEnd:bt,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,n){t=+t,n=+n,this._point?this._context.lineTo(t,n):(this._point=1,this._context.moveTo(t,n))}},Gt.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:$t(this,this._t0,Ht(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){var i=NaN;if(n=+n,(t=+t)!==this._x1||n!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,$t(this,Ht(this,i=Ft(this,t,n)),i);break;default:$t(this,this._t0,i=Ft(this,t,n))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n,this._t0=i}}},(Jt.prototype=Object.create(Gt.prototype)).point=function(t,n){Gt.prototype.point.call(this,n,t)},Kt.prototype={moveTo:function(t,n){this._context.moveTo(n,t)},closePath:function(){this._context.closePath()},lineTo:function(t,n){this._context.lineTo(n,t)},bezierCurveTo:function(t,n,i,e,s,o){this._context.bezierCurveTo(n,t,e,i,o,s)}},Qt.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,n=this._y,i=t.length;if(i)if(this._line?this._context.lineTo(t[0],n[0]):this._context.moveTo(t[0],n[0]),2===i)this._context.lineTo(t[1],n[1]);else for(var e=Ut(t),s=Ut(n),o=0,h=1;h<i;++o,++h)this._context.bezierCurveTo(e[0][o],s[0][o],e[1][o],s[1][o],t[h],n[h]);(this._line||0!==this._line&&1===i)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,n){this._x.push(+t),this._y.push(+n)}},Zt.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,n),this._context.lineTo(t,n);else{var i=this._x*(1-this._t)+t*this._t;this._context.lineTo(i,this._y),this._context.lineTo(i,n)}}this._x=t,this._y=n}},t.arc=function(){var t=v,n=d,h=i(0),k=null,N=T,S=g,E=m,A=null,P=p(M);function M(){var i,p,v=+t.apply(this,arguments),d=+n.apply(this,arguments),T=N.apply(this,arguments)-u,g=S.apply(this,arguments)-u,m=e(g-T),M=g>T;if(A||(A=i=P()),d<v&&(p=d,d=v,v=p),d>l)if(m>f-l)A.moveTo(d*o(T),d*r(T)),A.arc(0,0,d,T,g,!M),v>l&&(A.moveTo(v*o(g),v*r(g)),A.arc(0,0,v,g,T,M));else{var C,R,O=T,z=g,X=T,Y=g,q=m,B=m,D=E.apply(this,arguments)/2,I=D>l&&(k?+k.apply(this,arguments):a(v*v+d*d)),j=_(e(d-v)/2,+h.apply(this,arguments)),L=j,V=j;if(I>l){var W=x(I/v*r(D)),F=x(I/d*r(D));(q-=2*W)>l?(X+=W*=M?1:-1,Y-=W):(q=0,X=Y=(T+g)/2),(B-=2*F)>l?(O+=F*=M?1:-1,z-=F):(B=0,O=z=(T+g)/2)}var H=d*o(O),$=d*r(O),G=v*o(Y),J=v*r(Y);if(j>l){var K,Q=d*o(z),U=d*r(z),Z=v*o(X),tt=v*r(X);if(m<c)if(K=b(H,$,Z,tt,Q,U,G,J)){var nt=H-K[0],it=$-K[1],et=Q-K[0],st=U-K[1],ot=1/r(y((nt*et+it*st)/(a(nt*nt+it*it)*a(et*et+st*st)))/2),ht=a(K[0]*K[0]+K[1]*K[1]);L=_(j,(v-ht)/(ot-1)),V=_(j,(d-ht)/(ot+1))}else L=V=0}B>l?V>l?(C=w(Z,tt,H,$,d,V,M),R=w(Q,U,G,J,d,V,M),A.moveTo(C.cx+C.x01,C.cy+C.y01),V<j?A.arc(C.cx,C.cy,V,s(C.y01,C.x01),s(R.y01,R.x01),!M):(A.arc(C.cx,C.cy,V,s(C.y01,C.x01),s(C.y11,C.x11),!M),A.arc(0,0,d,s(C.cy+C.y11,C.cx+C.x11),s(R.cy+R.y11,R.cx+R.x11),!M),A.arc(R.cx,R.cy,V,s(R.y11,R.x11),s(R.y01,R.x01),!M))):(A.moveTo(H,$),A.arc(0,0,d,O,z,!M)):A.moveTo(H,$),v>l&&q>l?L>l?(C=w(G,J,Q,U,v,-L,M),R=w(H,$,Z,tt,v,-L,M),A.lineTo(C.cx+C.x01,C.cy+C.y01),L<j?A.arc(C.cx,C.cy,L,s(C.y01,C.x01),s(R.y01,R.x01),!M):(A.arc(C.cx,C.cy,L,s(C.y01,C.x01),s(C.y11,C.x11),!M),A.arc(0,0,v,s(C.cy+C.y11,C.cx+C.x11),s(R.cy+R.y11,R.cx+R.x11),M),A.arc(R.cx,R.cy,L,s(R.y11,R.x11),s(R.y01,R.x01),!M))):A.arc(0,0,v,Y,X,M):A.lineTo(G,J)}else A.moveTo(0,0);if(A.closePath(),i)return A=null,i+""||null}return M.centroid=function(){var i=(+t.apply(this,arguments)+ +n.apply(this,arguments))/2,e=(+N.apply(this,arguments)+ +S.apply(this,arguments))/2-c/2;return[o(e)*i,r(e)*i]},M.innerRadius=function(n){return arguments.length?(t="function"==typeof n?n:i(+n),M):t},M.outerRadius=function(t){return arguments.length?(n="function"==typeof t?t:i(+t),M):n},M.cornerRadius=function(t){return arguments.length?(h="function"==typeof t?t:i(+t),M):h},M.padRadius=function(t){return arguments.length?(k=null==t?null:"function"==typeof t?t:i(+t),M):k},M.startAngle=function(t){return arguments.length?(N="function"==typeof t?t:i(+t),M):N},M.endAngle=function(t){return arguments.length?(S="function"==typeof t?t:i(+t),M):S},M.padAngle=function(t){return arguments.length?(E="function"==typeof t?t:i(+t),M):E},M.context=function(t){return arguments.length?(A=null==t?null:t,M):A},M},t.area=C,t.areaRadial=D,t.curveBasis=function(t){return new kt(t)},t.curveBasisClosed=function(t){return new Nt(t)},t.curveBasisOpen=function(t){return new St(t)},t.curveBumpX=V,t.curveBumpY=W,t.curveBundle=At,t.curveCardinal=Ct,t.curveCardinalClosed=Ot,t.curveCardinalOpen=Xt,t.curveCatmullRom=Bt,t.curveCatmullRomClosed=It,t.curveCatmullRomOpen=Lt,t.curveLinear=E,t.curveLinearClosed=function(t){return new Vt(t)},t.curveMonotoneX=function(t){return new Gt(t)},t.curveMonotoneY=function(t){return new Jt(t)},t.curveNatural=function(t){return new Qt(t)},t.curveStep=function(t){return new Zt(t,.5)},t.curveStepAfter=function(t){return new Zt(t,1)},t.curveStepBefore=function(t){return new Zt(t,0)},t.line=M,t.lineRadial=B,t.link=G,t.linkHorizontal=function(){return G(V)},t.linkRadial=function(){const t=G(F);return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t},t.linkVertical=function(){return G(W)},t.pie=function(){var t=O,n=R,e=null,s=i(0),o=i(f),h=i(0);function _(i){var _,r,a,l,c,u=(i=N(i)).length,y=0,x=new Array(u),p=new Array(u),v=+s.apply(this,arguments),d=Math.min(f,Math.max(-f,o.apply(this,arguments)-v)),T=Math.min(Math.abs(d)/u,h.apply(this,arguments)),g=T*(d<0?-1:1);for(_=0;_<u;++_)(c=p[x[_]=_]=+t(i[_],_,i))>0&&(y+=c);for(null!=n?x.sort((function(t,i){return n(p[t],p[i])})):null!=e&&x.sort((function(t,n){return e(i[t],i[n])})),_=0,a=y?(d-u*g)/y:0;_<u;++_,v=l)r=x[_],l=v+((c=p[r])>0?c*a:0)+g,p[r]={data:i[r],index:_,value:c,startAngle:v,endAngle:l,padAngle:T};return p}return _.value=function(n){return arguments.length?(t="function"==typeof n?n:i(+n),_):t},_.sortValues=function(t){return arguments.length?(n=t,e=null,_):n},_.sort=function(t){return arguments.length?(e=t,n=null,_):e},_.startAngle=function(t){return arguments.length?(s="function"==typeof t?t:i(+t),_):s},_.endAngle=function(t){return arguments.length?(o="function"==typeof t?t:i(+t),_):o},_.padAngle=function(t){return arguments.length?(h="function"==typeof t?t:i(+t),_):h},_},t.pointRadial=I,t.radialArea=D,t.radialLine=B,t.stack=function(){var t=i([]),n=nn,e=tn,s=en;function o(i){var o,h,_=Array.from(t.apply(this,arguments),sn),r=_.length,a=-1;for(const t of i)for(o=0,++a;o<r;++o)(_[o][a]=[0,+s(t,_[o].key,a,i)]).data=t;for(o=0,h=N(n(_));o<r;++o)_[h[o]].index=o;return e(_,h),_}return o.keys=function(n){return arguments.length?(t="function"==typeof n?n:i(Array.from(n)),o):t},o.value=function(t){return arguments.length?(s="function"==typeof t?t:i(+t),o):s},o.order=function(t){return arguments.length?(n=null==t?nn:"function"==typeof t?t:i(Array.from(t)),o):n},o.offset=function(t){return arguments.length?(e=null==t?tn:t,o):e},o},t.stackOffsetDiverging=function(t,n){if((_=t.length)>0)for(var i,e,s,o,h,_,r=0,a=t[n[0]].length;r<a;++r)for(o=h=0,i=0;i<_;++i)(s=(e=t[n[i]][r])[1]-e[0])>0?(e[0]=o,e[1]=o+=s):s<0?(e[1]=h,e[0]=h+=s):(e[0]=0,e[1]=s)},t.stackOffsetExpand=function(t,n){if((e=t.length)>0){for(var i,e,s,o=0,h=t[0].length;o<h;++o){for(s=i=0;i<e;++i)s+=t[i][o][1]||0;if(s)for(i=0;i<e;++i)t[i][o][1]/=s}tn(t,n)}},t.stackOffsetNone=tn,t.stackOffsetSilhouette=function(t,n){if((i=t.length)>0){for(var i,e=0,s=t[n[0]],o=s.length;e<o;++e){for(var h=0,_=0;h<i;++h)_+=t[h][e][1]||0;s[e][1]+=s[e][0]=-_/2}tn(t,n)}},t.stackOffsetWiggle=function(t,n){if((s=t.length)>0&&(e=(i=t[n[0]]).length)>0){for(var i,e,s,o=0,h=1;h<e;++h){for(var _=0,r=0,a=0;_<s;++_){for(var l=t[n[_]],c=l[h][1]||0,u=(c-(l[h-1][1]||0))/2,f=0;f<_;++f){var y=t[n[f]];u+=(y[h][1]||0)-(y[h-1][1]||0)}r+=c,a+=u*c}i[h-1][1]+=i[h-1][0]=o,r&&(o-=a/r)}i[h-1][1]+=i[h-1][0]=o,tn(t,n)}},t.stackOrderAppearance=on,t.stackOrderAscending=_n,t.stackOrderDescending=function(t){return _n(t).reverse()},t.stackOrderInsideOut=function(t){var n,i,e=t.length,s=t.map(rn),o=on(t),h=0,_=0,r=[],a=[];for(n=0;n<e;++n)i=o[n],h<_?(h+=s[i],r.push(i)):(_+=s[i],a.push(i));return a.reverse().concat(r)},t.stackOrderNone=nn,t.stackOrderReverse=function(t){return nn(t).reverse()},t.symbol=function(t,n){let e=null,s=p(o);function o(){let i;if(e||(e=i=s()),t.apply(this,arguments).draw(e,+n.apply(this,arguments)),i)return e=null,i+""||null}return t="function"==typeof t?t:i(t||Q),n="function"==typeof n?n:i(void 0===n?64:+n),o.type=function(n){return arguments.length?(t="function"==typeof n?n:i(n),o):t},o.size=function(t){return arguments.length?(n="function"==typeof t?t:i(+t),o):n},o.context=function(t){return arguments.length?(e=null==t?null:t,o):e},o},t.symbolAsterisk=K,t.symbolCircle=Q,t.symbolCross=U,t.symbolDiamond=nt,t.symbolDiamond2=it,t.symbolPlus=et,t.symbolSquare=st,t.symbolSquare2=ot,t.symbolStar=at,t.symbolTimes=Tt,t.symbolTriangle=ct,t.symbolTriangle2=ft,t.symbolWye=dt,t.symbolX=Tt,t.symbols=gt,t.symbolsFill=gt,t.symbolsStroke=mt}));

----------------------------------------
File: ./animations/node_modules/d3-shape/dist/d3-shape.js
----------------------------------------
// https://d3js.org/d3-shape/ v3.2.0 Copyright 2010-2022 Mike Bostock
(function (global, factory) {
typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-path')) :
typeof define === 'function' && define.amd ? define(['exports', 'd3-path'], factory) :
(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.d3 = global.d3 || {}, global.d3));
})(this, (function (exports, d3Path) { 'use strict';

function constant(x) {
  return function constant() {
    return x;
  };
}

const abs = Math.abs;
const atan2 = Math.atan2;
const cos = Math.cos;
const max = Math.max;
const min = Math.min;
const sin = Math.sin;
const sqrt = Math.sqrt;

const epsilon = 1e-12;
const pi = Math.PI;
const halfPi = pi / 2;
const tau = 2 * pi;

function acos(x) {
  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);
}

function asin(x) {
  return x >= 1 ? halfPi : x <= -1 ? -halfPi : Math.asin(x);
}

function withPath(shape) {
  let digits = 3;

  shape.digits = function(_) {
    if (!arguments.length) return digits;
    if (_ == null) {
      digits = null;
    } else {
      const d = Math.floor(_);
      if (!(d >= 0)) throw new RangeError(`invalid digits: ${_}`);
      digits = d;
    }
    return shape;
  };

  return () => new d3Path.Path(digits);
}

function arcInnerRadius(d) {
  return d.innerRadius;
}

function arcOuterRadius(d) {
  return d.outerRadius;
}

function arcStartAngle(d) {
  return d.startAngle;
}

function arcEndAngle(d) {
  return d.endAngle;
}

function arcPadAngle(d) {
  return d && d.padAngle; // Note: optional!
}

function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {
  var x10 = x1 - x0, y10 = y1 - y0,
      x32 = x3 - x2, y32 = y3 - y2,
      t = y32 * x10 - x32 * y10;
  if (t * t < epsilon) return;
  t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / t;
  return [x0 + t * x10, y0 + t * y10];
}

// Compute perpendicular offset line of length rc.
// http://mathworld.wolfram.com/Circle-LineIntersection.html
function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
  var x01 = x0 - x1,
      y01 = y0 - y1,
      lo = (cw ? rc : -rc) / sqrt(x01 * x01 + y01 * y01),
      ox = lo * y01,
      oy = -lo * x01,
      x11 = x0 + ox,
      y11 = y0 + oy,
      x10 = x1 + ox,
      y10 = y1 + oy,
      x00 = (x11 + x10) / 2,
      y00 = (y11 + y10) / 2,
      dx = x10 - x11,
      dy = y10 - y11,
      d2 = dx * dx + dy * dy,
      r = r1 - rc,
      D = x11 * y10 - x10 * y11,
      d = (dy < 0 ? -1 : 1) * sqrt(max(0, r * r * d2 - D * D)),
      cx0 = (D * dy - dx * d) / d2,
      cy0 = (-D * dx - dy * d) / d2,
      cx1 = (D * dy + dx * d) / d2,
      cy1 = (-D * dx + dy * d) / d2,
      dx0 = cx0 - x00,
      dy0 = cy0 - y00,
      dx1 = cx1 - x00,
      dy1 = cy1 - y00;

  // Pick the closer of the two intersection points.
  // TODO Is there a faster way to determine which intersection to use?
  if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;

  return {
    cx: cx0,
    cy: cy0,
    x01: -ox,
    y01: -oy,
    x11: cx0 * (r1 / r - 1),
    y11: cy0 * (r1 / r - 1)
  };
}

function arc() {
  var innerRadius = arcInnerRadius,
      outerRadius = arcOuterRadius,
      cornerRadius = constant(0),
      padRadius = null,
      startAngle = arcStartAngle,
      endAngle = arcEndAngle,
      padAngle = arcPadAngle,
      context = null,
      path = withPath(arc);

  function arc() {
    var buffer,
        r,
        r0 = +innerRadius.apply(this, arguments),
        r1 = +outerRadius.apply(this, arguments),
        a0 = startAngle.apply(this, arguments) - halfPi,
        a1 = endAngle.apply(this, arguments) - halfPi,
        da = abs(a1 - a0),
        cw = a1 > a0;

    if (!context) context = buffer = path();

    // Ensure that the outer radius is always larger than the inner radius.
    if (r1 < r0) r = r1, r1 = r0, r0 = r;

    // Is it a point?
    if (!(r1 > epsilon)) context.moveTo(0, 0);

    // Or is it a circle or annulus?
    else if (da > tau - epsilon) {
      context.moveTo(r1 * cos(a0), r1 * sin(a0));
      context.arc(0, 0, r1, a0, a1, !cw);
      if (r0 > epsilon) {
        context.moveTo(r0 * cos(a1), r0 * sin(a1));
        context.arc(0, 0, r0, a1, a0, cw);
      }
    }

    // Or is it a circular or annular sector?
    else {
      var a01 = a0,
          a11 = a1,
          a00 = a0,
          a10 = a1,
          da0 = da,
          da1 = da,
          ap = padAngle.apply(this, arguments) / 2,
          rp = (ap > epsilon) && (padRadius ? +padRadius.apply(this, arguments) : sqrt(r0 * r0 + r1 * r1)),
          rc = min(abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),
          rc0 = rc,
          rc1 = rc,
          t0,
          t1;

      // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.
      if (rp > epsilon) {
        var p0 = asin(rp / r0 * sin(ap)),
            p1 = asin(rp / r1 * sin(ap));
        if ((da0 -= p0 * 2) > epsilon) p0 *= (cw ? 1 : -1), a00 += p0, a10 -= p0;
        else da0 = 0, a00 = a10 = (a0 + a1) / 2;
        if ((da1 -= p1 * 2) > epsilon) p1 *= (cw ? 1 : -1), a01 += p1, a11 -= p1;
        else da1 = 0, a01 = a11 = (a0 + a1) / 2;
      }

      var x01 = r1 * cos(a01),
          y01 = r1 * sin(a01),
          x10 = r0 * cos(a10),
          y10 = r0 * sin(a10);

      // Apply rounded corners?
      if (rc > epsilon) {
        var x11 = r1 * cos(a11),
            y11 = r1 * sin(a11),
            x00 = r0 * cos(a00),
            y00 = r0 * sin(a00),
            oc;

        // Restrict the corner radius according to the sector angle. If this
        // intersection fails, it’s probably because the arc is too small, so
        // disable the corner radius entirely.
        if (da < pi) {
          if (oc = intersect(x01, y01, x00, y00, x11, y11, x10, y10)) {
            var ax = x01 - oc[0],
                ay = y01 - oc[1],
                bx = x11 - oc[0],
                by = y11 - oc[1],
                kc = 1 / sin(acos((ax * bx + ay * by) / (sqrt(ax * ax + ay * ay) * sqrt(bx * bx + by * by))) / 2),
                lc = sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
            rc0 = min(rc, (r0 - lc) / (kc - 1));
            rc1 = min(rc, (r1 - lc) / (kc + 1));
          } else {
            rc0 = rc1 = 0;
          }
        }
      }

      // Is the sector collapsed to a line?
      if (!(da1 > epsilon)) context.moveTo(x01, y01);

      // Does the sector’s outer ring have rounded corners?
      else if (rc1 > epsilon) {
        t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
        t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);

        context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);

        // Have the corners merged?
        if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);

        // Otherwise, draw the two corners and the ring.
        else {
          context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);
          context.arc(0, 0, r1, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), !cw);
          context.arc(t1.cx, t1.cy, rc1, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);
        }
      }

      // Or is the outer ring just a circular arc?
      else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);

      // Is there no inner ring, and it’s a circular sector?
      // Or perhaps it’s an annular sector collapsed due to padding?
      if (!(r0 > epsilon) || !(da0 > epsilon)) context.lineTo(x10, y10);

      // Does the sector’s inner ring (or point) have rounded corners?
      else if (rc0 > epsilon) {
        t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
        t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);

        context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);

        // Have the corners merged?
        if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);

        // Otherwise, draw the two corners and the ring.
        else {
          context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);
          context.arc(0, 0, r0, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), cw);
          context.arc(t1.cx, t1.cy, rc0, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);
        }
      }

      // Or is the inner ring just a circular arc?
      else context.arc(0, 0, r0, a10, a00, cw);
    }

    context.closePath();

    if (buffer) return context = null, buffer + "" || null;
  }

  arc.centroid = function() {
    var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,
        a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi / 2;
    return [cos(a) * r, sin(a) * r];
  };

  arc.innerRadius = function(_) {
    return arguments.length ? (innerRadius = typeof _ === "function" ? _ : constant(+_), arc) : innerRadius;
  };

  arc.outerRadius = function(_) {
    return arguments.length ? (outerRadius = typeof _ === "function" ? _ : constant(+_), arc) : outerRadius;
  };

  arc.cornerRadius = function(_) {
    return arguments.length ? (cornerRadius = typeof _ === "function" ? _ : constant(+_), arc) : cornerRadius;
  };

  arc.padRadius = function(_) {
    return arguments.length ? (padRadius = _ == null ? null : typeof _ === "function" ? _ : constant(+_), arc) : padRadius;
  };

  arc.startAngle = function(_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant(+_), arc) : startAngle;
  };

  arc.endAngle = function(_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant(+_), arc) : endAngle;
  };

  arc.padAngle = function(_) {
    return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant(+_), arc) : padAngle;
  };

  arc.context = function(_) {
    return arguments.length ? ((context = _ == null ? null : _), arc) : context;
  };

  return arc;
}

var slice = Array.prototype.slice;

function array(x) {
  return typeof x === "object" && "length" in x
    ? x // Array, TypedArray, NodeList, array-like
    : Array.from(x); // Map, Set, iterable, string, or anything else
}

function Linear(context) {
  this._context = context;
}

Linear.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
      case 1: this._point = 2; // falls through
      default: this._context.lineTo(x, y); break;
    }
  }
};

function curveLinear(context) {
  return new Linear(context);
}

function x(p) {
  return p[0];
}

function y(p) {
  return p[1];
}

function line(x$1, y$1) {
  var defined = constant(true),
      context = null,
      curve = curveLinear,
      output = null,
      path = withPath(line);

  x$1 = typeof x$1 === "function" ? x$1 : (x$1 === undefined) ? x : constant(x$1);
  y$1 = typeof y$1 === "function" ? y$1 : (y$1 === undefined) ? y : constant(y$1);

  function line(data) {
    var i,
        n = (data = array(data)).length,
        d,
        defined0 = false,
        buffer;

    if (context == null) output = curve(buffer = path());

    for (i = 0; i <= n; ++i) {
      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
        if (defined0 = !defined0) output.lineStart();
        else output.lineEnd();
      }
      if (defined0) output.point(+x$1(d, i, data), +y$1(d, i, data));
    }

    if (buffer) return output = null, buffer + "" || null;
  }

  line.x = function(_) {
    return arguments.length ? (x$1 = typeof _ === "function" ? _ : constant(+_), line) : x$1;
  };

  line.y = function(_) {
    return arguments.length ? (y$1 = typeof _ === "function" ? _ : constant(+_), line) : y$1;
  };

  line.defined = function(_) {
    return arguments.length ? (defined = typeof _ === "function" ? _ : constant(!!_), line) : defined;
  };

  line.curve = function(_) {
    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
  };

  line.context = function(_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
  };

  return line;
}

function area(x0, y0, y1) {
  var x1 = null,
      defined = constant(true),
      context = null,
      curve = curveLinear,
      output = null,
      path = withPath(area);

  x0 = typeof x0 === "function" ? x0 : (x0 === undefined) ? x : constant(+x0);
  y0 = typeof y0 === "function" ? y0 : (y0 === undefined) ? constant(0) : constant(+y0);
  y1 = typeof y1 === "function" ? y1 : (y1 === undefined) ? y : constant(+y1);

  function area(data) {
    var i,
        j,
        k,
        n = (data = array(data)).length,
        d,
        defined0 = false,
        buffer,
        x0z = new Array(n),
        y0z = new Array(n);

    if (context == null) output = curve(buffer = path());

    for (i = 0; i <= n; ++i) {
      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
        if (defined0 = !defined0) {
          j = i;
          output.areaStart();
          output.lineStart();
        } else {
          output.lineEnd();
          output.lineStart();
          for (k = i - 1; k >= j; --k) {
            output.point(x0z[k], y0z[k]);
          }
          output.lineEnd();
          output.areaEnd();
        }
      }
      if (defined0) {
        x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);
        output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);
      }
    }

    if (buffer) return output = null, buffer + "" || null;
  }

  function arealine() {
    return line().defined(defined).curve(curve).context(context);
  }

  area.x = function(_) {
    return arguments.length ? (x0 = typeof _ === "function" ? _ : constant(+_), x1 = null, area) : x0;
  };

  area.x0 = function(_) {
    return arguments.length ? (x0 = typeof _ === "function" ? _ : constant(+_), area) : x0;
  };

  area.x1 = function(_) {
    return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : constant(+_), area) : x1;
  };

  area.y = function(_) {
    return arguments.length ? (y0 = typeof _ === "function" ? _ : constant(+_), y1 = null, area) : y0;
  };

  area.y0 = function(_) {
    return arguments.length ? (y0 = typeof _ === "function" ? _ : constant(+_), area) : y0;
  };

  area.y1 = function(_) {
    return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : constant(+_), area) : y1;
  };

  area.lineX0 =
  area.lineY0 = function() {
    return arealine().x(x0).y(y0);
  };

  area.lineY1 = function() {
    return arealine().x(x0).y(y1);
  };

  area.lineX1 = function() {
    return arealine().x(x1).y(y0);
  };

  area.defined = function(_) {
    return arguments.length ? (defined = typeof _ === "function" ? _ : constant(!!_), area) : defined;
  };

  area.curve = function(_) {
    return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;
  };

  area.context = function(_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;
  };

  return area;
}

function descending$1(a, b) {
  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
}

function identity(d) {
  return d;
}

function pie() {
  var value = identity,
      sortValues = descending$1,
      sort = null,
      startAngle = constant(0),
      endAngle = constant(tau),
      padAngle = constant(0);

  function pie(data) {
    var i,
        n = (data = array(data)).length,
        j,
        k,
        sum = 0,
        index = new Array(n),
        arcs = new Array(n),
        a0 = +startAngle.apply(this, arguments),
        da = Math.min(tau, Math.max(-tau, endAngle.apply(this, arguments) - a0)),
        a1,
        p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)),
        pa = p * (da < 0 ? -1 : 1),
        v;

    for (i = 0; i < n; ++i) {
      if ((v = arcs[index[i] = i] = +value(data[i], i, data)) > 0) {
        sum += v;
      }
    }

    // Optionally sort the arcs by previously-computed values or by data.
    if (sortValues != null) index.sort(function(i, j) { return sortValues(arcs[i], arcs[j]); });
    else if (sort != null) index.sort(function(i, j) { return sort(data[i], data[j]); });

    // Compute the arcs! They are stored in the original data's order.
    for (i = 0, k = sum ? (da - n * pa) / sum : 0; i < n; ++i, a0 = a1) {
      j = index[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k : 0) + pa, arcs[j] = {
        data: data[j],
        index: i,
        value: v,
        startAngle: a0,
        endAngle: a1,
        padAngle: p
      };
    }

    return arcs;
  }

  pie.value = function(_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : constant(+_), pie) : value;
  };

  pie.sortValues = function(_) {
    return arguments.length ? (sortValues = _, sort = null, pie) : sortValues;
  };

  pie.sort = function(_) {
    return arguments.length ? (sort = _, sortValues = null, pie) : sort;
  };

  pie.startAngle = function(_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant(+_), pie) : startAngle;
  };

  pie.endAngle = function(_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant(+_), pie) : endAngle;
  };

  pie.padAngle = function(_) {
    return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant(+_), pie) : padAngle;
  };

  return pie;
}

var curveRadialLinear = curveRadial(curveLinear);

function Radial(curve) {
  this._curve = curve;
}

Radial.prototype = {
  areaStart: function() {
    this._curve.areaStart();
  },
  areaEnd: function() {
    this._curve.areaEnd();
  },
  lineStart: function() {
    this._curve.lineStart();
  },
  lineEnd: function() {
    this._curve.lineEnd();
  },
  point: function(a, r) {
    this._curve.point(r * Math.sin(a), r * -Math.cos(a));
  }
};

function curveRadial(curve) {

  function radial(context) {
    return new Radial(curve(context));
  }

  radial._curve = curve;

  return radial;
}

function lineRadial(l) {
  var c = l.curve;

  l.angle = l.x, delete l.x;
  l.radius = l.y, delete l.y;

  l.curve = function(_) {
    return arguments.length ? c(curveRadial(_)) : c()._curve;
  };

  return l;
}

function lineRadial$1() {
  return lineRadial(line().curve(curveRadialLinear));
}

function areaRadial() {
  var a = area().curve(curveRadialLinear),
      c = a.curve,
      x0 = a.lineX0,
      x1 = a.lineX1,
      y0 = a.lineY0,
      y1 = a.lineY1;

  a.angle = a.x, delete a.x;
  a.startAngle = a.x0, delete a.x0;
  a.endAngle = a.x1, delete a.x1;
  a.radius = a.y, delete a.y;
  a.innerRadius = a.y0, delete a.y0;
  a.outerRadius = a.y1, delete a.y1;
  a.lineStartAngle = function() { return lineRadial(x0()); }, delete a.lineX0;
  a.lineEndAngle = function() { return lineRadial(x1()); }, delete a.lineX1;
  a.lineInnerRadius = function() { return lineRadial(y0()); }, delete a.lineY0;
  a.lineOuterRadius = function() { return lineRadial(y1()); }, delete a.lineY1;

  a.curve = function(_) {
    return arguments.length ? c(curveRadial(_)) : c()._curve;
  };

  return a;
}

function pointRadial(x, y) {
  return [(y = +y) * Math.cos(x -= Math.PI / 2), y * Math.sin(x)];
}

class Bump {
  constructor(context, x) {
    this._context = context;
    this._x = x;
  }
  areaStart() {
    this._line = 0;
  }
  areaEnd() {
    this._line = NaN;
  }
  lineStart() {
    this._point = 0;
  }
  lineEnd() {
    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
    this._line = 1 - this._line;
  }
  point(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: {
        this._point = 1;
        if (this._line) this._context.lineTo(x, y);
        else this._context.moveTo(x, y);
        break;
      }
      case 1: this._point = 2; // falls through
      default: {
        if (this._x) this._context.bezierCurveTo(this._x0 = (this._x0 + x) / 2, this._y0, this._x0, y, x, y);
        else this._context.bezierCurveTo(this._x0, this._y0 = (this._y0 + y) / 2, x, this._y0, x, y);
        break;
      }
    }
    this._x0 = x, this._y0 = y;
  }
}

class BumpRadial {
  constructor(context) {
    this._context = context;
  }
  lineStart() {
    this._point = 0;
  }
  lineEnd() {}
  point(x, y) {
    x = +x, y = +y;
    if (this._point === 0) {
      this._point = 1;
    } else {
      const p0 = pointRadial(this._x0, this._y0);
      const p1 = pointRadial(this._x0, this._y0 = (this._y0 + y) / 2);
      const p2 = pointRadial(x, this._y0);
      const p3 = pointRadial(x, y);
      this._context.moveTo(...p0);
      this._context.bezierCurveTo(...p1, ...p2, ...p3);
    }
    this._x0 = x, this._y0 = y;
  }
}

function bumpX(context) {
  return new Bump(context, true);
}

function bumpY(context) {
  return new Bump(context, false);
}

function bumpRadial(context) {
  return new BumpRadial(context);
}

function linkSource(d) {
  return d.source;
}

function linkTarget(d) {
  return d.target;
}

function link(curve) {
  let source = linkSource,
      target = linkTarget,
      x$1 = x,
      y$1 = y,
      context = null,
      output = null,
      path = withPath(link);

  function link() {
    let buffer;
    const argv = slice.call(arguments);
    const s = source.apply(this, argv);
    const t = target.apply(this, argv);
    if (context == null) output = curve(buffer = path());
    output.lineStart();
    argv[0] = s, output.point(+x$1.apply(this, argv), +y$1.apply(this, argv));
    argv[0] = t, output.point(+x$1.apply(this, argv), +y$1.apply(this, argv));
    output.lineEnd();
    if (buffer) return output = null, buffer + "" || null;
  }

  link.source = function(_) {
    return arguments.length ? (source = _, link) : source;
  };

  link.target = function(_) {
    return arguments.length ? (target = _, link) : target;
  };

  link.x = function(_) {
    return arguments.length ? (x$1 = typeof _ === "function" ? _ : constant(+_), link) : x$1;
  };

  link.y = function(_) {
    return arguments.length ? (y$1 = typeof _ === "function" ? _ : constant(+_), link) : y$1;
  };

  link.context = function(_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), link) : context;
  };

  return link;
}

function linkHorizontal() {
  return link(bumpX);
}

function linkVertical() {
  return link(bumpY);
}

function linkRadial() {
  const l = link(bumpRadial);
  l.angle = l.x, delete l.x;
  l.radius = l.y, delete l.y;
  return l;
}

const sqrt3$2 = sqrt(3);

var asterisk = {
  draw(context, size) {
    const r = sqrt(size + min(size / 28, 0.75)) * 0.59436;
    const t = r / 2;
    const u = t * sqrt3$2;
    context.moveTo(0, r);
    context.lineTo(0, -r);
    context.moveTo(-u, -t);
    context.lineTo(u, t);
    context.moveTo(-u, t);
    context.lineTo(u, -t);
  }
};

var circle = {
  draw(context, size) {
    const r = sqrt(size / pi);
    context.moveTo(r, 0);
    context.arc(0, 0, r, 0, tau);
  }
};

var cross = {
  draw(context, size) {
    const r = sqrt(size / 5) / 2;
    context.moveTo(-3 * r, -r);
    context.lineTo(-r, -r);
    context.lineTo(-r, -3 * r);
    context.lineTo(r, -3 * r);
    context.lineTo(r, -r);
    context.lineTo(3 * r, -r);
    context.lineTo(3 * r, r);
    context.lineTo(r, r);
    context.lineTo(r, 3 * r);
    context.lineTo(-r, 3 * r);
    context.lineTo(-r, r);
    context.lineTo(-3 * r, r);
    context.closePath();
  }
};

const tan30 = sqrt(1 / 3);
const tan30_2 = tan30 * 2;

var diamond = {
  draw(context, size) {
    const y = sqrt(size / tan30_2);
    const x = y * tan30;
    context.moveTo(0, -y);
    context.lineTo(x, 0);
    context.lineTo(0, y);
    context.lineTo(-x, 0);
    context.closePath();
  }
};

var diamond2 = {
  draw(context, size) {
    const r = sqrt(size) * 0.62625;
    context.moveTo(0, -r);
    context.lineTo(r, 0);
    context.lineTo(0, r);
    context.lineTo(-r, 0);
    context.closePath();
  }
};

var plus = {
  draw(context, size) {
    const r = sqrt(size - min(size / 7, 2)) * 0.87559;
    context.moveTo(-r, 0);
    context.lineTo(r, 0);
    context.moveTo(0, r);
    context.lineTo(0, -r);
  }
};

var square = {
  draw(context, size) {
    const w = sqrt(size);
    const x = -w / 2;
    context.rect(x, x, w, w);
  }
};

var square2 = {
  draw(context, size) {
    const r = sqrt(size) * 0.4431;
    context.moveTo(r, r);
    context.lineTo(r, -r);
    context.lineTo(-r, -r);
    context.lineTo(-r, r);
    context.closePath();
  }
};

const ka = 0.89081309152928522810;
const kr = sin(pi / 10) / sin(7 * pi / 10);
const kx = sin(tau / 10) * kr;
const ky = -cos(tau / 10) * kr;

var star = {
  draw(context, size) {
    const r = sqrt(size * ka);
    const x = kx * r;
    const y = ky * r;
    context.moveTo(0, -r);
    context.lineTo(x, y);
    for (let i = 1; i < 5; ++i) {
      const a = tau * i / 5;
      const c = cos(a);
      const s = sin(a);
      context.lineTo(s * r, -c * r);
      context.lineTo(c * x - s * y, s * x + c * y);
    }
    context.closePath();
  }
};

const sqrt3$1 = sqrt(3);

var triangle = {
  draw(context, size) {
    const y = -sqrt(size / (sqrt3$1 * 3));
    context.moveTo(0, y * 2);
    context.lineTo(-sqrt3$1 * y, -y);
    context.lineTo(sqrt3$1 * y, -y);
    context.closePath();
  }
};

const sqrt3 = sqrt(3);

var triangle2 = {
  draw(context, size) {
    const s = sqrt(size) * 0.6824;
    const t = s  / 2;
    const u = (s * sqrt3) / 2; // cos(Math.PI / 6)
    context.moveTo(0, -s);
    context.lineTo(u, t);
    context.lineTo(-u, t);
    context.closePath();
  }
};

const c = -0.5;
const s = sqrt(3) / 2;
const k = 1 / sqrt(12);
const a = (k / 2 + 1) * 3;

var wye = {
  draw(context, size) {
    const r = sqrt(size / a);
    const x0 = r / 2, y0 = r * k;
    const x1 = x0, y1 = r * k + r;
    const x2 = -x1, y2 = y1;
    context.moveTo(x0, y0);
    context.lineTo(x1, y1);
    context.lineTo(x2, y2);
    context.lineTo(c * x0 - s * y0, s * x0 + c * y0);
    context.lineTo(c * x1 - s * y1, s * x1 + c * y1);
    context.lineTo(c * x2 - s * y2, s * x2 + c * y2);
    context.lineTo(c * x0 + s * y0, c * y0 - s * x0);
    context.lineTo(c * x1 + s * y1, c * y1 - s * x1);
    context.lineTo(c * x2 + s * y2, c * y2 - s * x2);
    context.closePath();
  }
};

var times = {
  draw(context, size) {
    const r = sqrt(size - min(size / 6, 1.7)) * 0.6189;
    context.moveTo(-r, -r);
    context.lineTo(r, r);
    context.moveTo(-r, r);
    context.lineTo(r, -r);
  }
};

// These symbols are designed to be filled.
const symbolsFill = [
  circle,
  cross,
  diamond,
  square,
  star,
  triangle,
  wye
];

// These symbols are designed to be stroked (with a width of 1.5px and round caps).
const symbolsStroke = [
  circle,
  plus,
  times,
  triangle2,
  asterisk,
  square2,
  diamond2
];

function Symbol(type, size) {
  let context = null,
      path = withPath(symbol);

  type = typeof type === "function" ? type : constant(type || circle);
  size = typeof size === "function" ? size : constant(size === undefined ? 64 : +size);

  function symbol() {
    let buffer;
    if (!context) context = buffer = path();
    type.apply(this, arguments).draw(context, +size.apply(this, arguments));
    if (buffer) return context = null, buffer + "" || null;
  }

  symbol.type = function(_) {
    return arguments.length ? (type = typeof _ === "function" ? _ : constant(_), symbol) : type;
  };

  symbol.size = function(_) {
    return arguments.length ? (size = typeof _ === "function" ? _ : constant(+_), symbol) : size;
  };

  symbol.context = function(_) {
    return arguments.length ? (context = _ == null ? null : _, symbol) : context;
  };

  return symbol;
}

function noop() {}

function point$3(that, x, y) {
  that._context.bezierCurveTo(
    (2 * that._x0 + that._x1) / 3,
    (2 * that._y0 + that._y1) / 3,
    (that._x0 + 2 * that._x1) / 3,
    (that._y0 + 2 * that._y1) / 3,
    (that._x0 + 4 * that._x1 + x) / 6,
    (that._y0 + 4 * that._y1 + y) / 6
  );
}

function Basis(context) {
  this._context = context;
}

Basis.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 =
    this._y0 = this._y1 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 3: point$3(this, this._x1, this._y1); // falls through
      case 2: this._context.lineTo(this._x1, this._y1); break;
    }
    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
      case 1: this._point = 2; break;
      case 2: this._point = 3; this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6); // falls through
      default: point$3(this, x, y); break;
    }
    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
  }
};

function basis(context) {
  return new Basis(context);
}

function BasisClosed(context) {
  this._context = context;
}

BasisClosed.prototype = {
  areaStart: noop,
  areaEnd: noop,
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 =
    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 1: {
        this._context.moveTo(this._x2, this._y2);
        this._context.closePath();
        break;
      }
      case 2: {
        this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
        this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
        this._context.closePath();
        break;
      }
      case 3: {
        this.point(this._x2, this._y2);
        this.point(this._x3, this._y3);
        this.point(this._x4, this._y4);
        break;
      }
    }
  },
  point: function(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: this._point = 1; this._x2 = x, this._y2 = y; break;
      case 1: this._point = 2; this._x3 = x, this._y3 = y; break;
      case 2: this._point = 3; this._x4 = x, this._y4 = y; this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6); break;
      default: point$3(this, x, y); break;
    }
    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
  }
};

function basisClosed(context) {
  return new BasisClosed(context);
}

function BasisOpen(context) {
  this._context = context;
}

BasisOpen.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 =
    this._y0 = this._y1 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: this._point = 1; break;
      case 1: this._point = 2; break;
      case 2: this._point = 3; var x0 = (this._x0 + 4 * this._x1 + x) / 6, y0 = (this._y0 + 4 * this._y1 + y) / 6; this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0); break;
      case 3: this._point = 4; // falls through
      default: point$3(this, x, y); break;
    }
    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
  }
};

function basisOpen(context) {
  return new BasisOpen(context);
}

function Bundle(context, beta) {
  this._basis = new Basis(context);
  this._beta = beta;
}

Bundle.prototype = {
  lineStart: function() {
    this._x = [];
    this._y = [];
    this._basis.lineStart();
  },
  lineEnd: function() {
    var x = this._x,
        y = this._y,
        j = x.length - 1;

    if (j > 0) {
      var x0 = x[0],
          y0 = y[0],
          dx = x[j] - x0,
          dy = y[j] - y0,
          i = -1,
          t;

      while (++i <= j) {
        t = i / j;
        this._basis.point(
          this._beta * x[i] + (1 - this._beta) * (x0 + t * dx),
          this._beta * y[i] + (1 - this._beta) * (y0 + t * dy)
        );
      }
    }

    this._x = this._y = null;
    this._basis.lineEnd();
  },
  point: function(x, y) {
    this._x.push(+x);
    this._y.push(+y);
  }
};

var bundle = (function custom(beta) {

  function bundle(context) {
    return beta === 1 ? new Basis(context) : new Bundle(context, beta);
  }

  bundle.beta = function(beta) {
    return custom(+beta);
  };

  return bundle;
})(0.85);

function point$2(that, x, y) {
  that._context.bezierCurveTo(
    that._x1 + that._k * (that._x2 - that._x0),
    that._y1 + that._k * (that._y2 - that._y0),
    that._x2 + that._k * (that._x1 - x),
    that._y2 + that._k * (that._y1 - y),
    that._x2,
    that._y2
  );
}

function Cardinal(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}

Cardinal.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 =
    this._y0 = this._y1 = this._y2 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 2: this._context.lineTo(this._x2, this._y2); break;
      case 3: point$2(this, this._x1, this._y1); break;
    }
    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
      case 1: this._point = 2; this._x1 = x, this._y1 = y; break;
      case 2: this._point = 3; // falls through
      default: point$2(this, x, y); break;
    }
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var cardinal = (function custom(tension) {

  function cardinal(context) {
    return new Cardinal(context, tension);
  }

  cardinal.tension = function(tension) {
    return custom(+tension);
  };

  return cardinal;
})(0);

function CardinalClosed(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}

CardinalClosed.prototype = {
  areaStart: noop,
  areaEnd: noop,
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =
    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 1: {
        this._context.moveTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 2: {
        this._context.lineTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 3: {
        this.point(this._x3, this._y3);
        this.point(this._x4, this._y4);
        this.point(this._x5, this._y5);
        break;
      }
    }
  },
  point: function(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: this._point = 1; this._x3 = x, this._y3 = y; break;
      case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;
      case 2: this._point = 3; this._x5 = x, this._y5 = y; break;
      default: point$2(this, x, y); break;
    }
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var cardinalClosed = (function custom(tension) {

  function cardinal(context) {
    return new CardinalClosed(context, tension);
  }

  cardinal.tension = function(tension) {
    return custom(+tension);
  };

  return cardinal;
})(0);

function CardinalOpen(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}

CardinalOpen.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 =
    this._y0 = this._y1 = this._y2 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: this._point = 1; break;
      case 1: this._point = 2; break;
      case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;
      case 3: this._point = 4; // falls through
      default: point$2(this, x, y); break;
    }
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var cardinalOpen = (function custom(tension) {

  function cardinal(context) {
    return new CardinalOpen(context, tension);
  }

  cardinal.tension = function(tension) {
    return custom(+tension);
  };

  return cardinal;
})(0);

function point$1(that, x, y) {
  var x1 = that._x1,
      y1 = that._y1,
      x2 = that._x2,
      y2 = that._y2;

  if (that._l01_a > epsilon) {
    var a = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a,
        n = 3 * that._l01_a * (that._l01_a + that._l12_a);
    x1 = (x1 * a - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;
    y1 = (y1 * a - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;
  }

  if (that._l23_a > epsilon) {
    var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a,
        m = 3 * that._l23_a * (that._l23_a + that._l12_a);
    x2 = (x2 * b + that._x1 * that._l23_2a - x * that._l12_2a) / m;
    y2 = (y2 * b + that._y1 * that._l23_2a - y * that._l12_2a) / m;
  }

  that._context.bezierCurveTo(x1, y1, x2, y2, that._x2, that._y2);
}

function CatmullRom(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}

CatmullRom.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 =
    this._y0 = this._y1 = this._y2 = NaN;
    this._l01_a = this._l12_a = this._l23_a =
    this._l01_2a = this._l12_2a = this._l23_2a =
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 2: this._context.lineTo(this._x2, this._y2); break;
      case 3: this.point(this._x2, this._y2); break;
    }
    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x, y) {
    x = +x, y = +y;

    if (this._point) {
      var x23 = this._x2 - x,
          y23 = this._y2 - y;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }

    switch (this._point) {
      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
      case 1: this._point = 2; break;
      case 2: this._point = 3; // falls through
      default: point$1(this, x, y); break;
    }

    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var catmullRom = (function custom(alpha) {

  function catmullRom(context) {
    return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);
  }

  catmullRom.alpha = function(alpha) {
    return custom(+alpha);
  };

  return catmullRom;
})(0.5);

function CatmullRomClosed(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}

CatmullRomClosed.prototype = {
  areaStart: noop,
  areaEnd: noop,
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =
    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
    this._l01_a = this._l12_a = this._l23_a =
    this._l01_2a = this._l12_2a = this._l23_2a =
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 1: {
        this._context.moveTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 2: {
        this._context.lineTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 3: {
        this.point(this._x3, this._y3);
        this.point(this._x4, this._y4);
        this.point(this._x5, this._y5);
        break;
      }
    }
  },
  point: function(x, y) {
    x = +x, y = +y;

    if (this._point) {
      var x23 = this._x2 - x,
          y23 = this._y2 - y;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }

    switch (this._point) {
      case 0: this._point = 1; this._x3 = x, this._y3 = y; break;
      case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;
      case 2: this._point = 3; this._x5 = x, this._y5 = y; break;
      default: point$1(this, x, y); break;
    }

    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var catmullRomClosed = (function custom(alpha) {

  function catmullRom(context) {
    return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);
  }

  catmullRom.alpha = function(alpha) {
    return custom(+alpha);
  };

  return catmullRom;
})(0.5);

function CatmullRomOpen(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}

CatmullRomOpen.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 =
    this._y0 = this._y1 = this._y2 = NaN;
    this._l01_a = this._l12_a = this._l23_a =
    this._l01_2a = this._l12_2a = this._l23_2a =
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x, y) {
    x = +x, y = +y;

    if (this._point) {
      var x23 = this._x2 - x,
          y23 = this._y2 - y;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }

    switch (this._point) {
      case 0: this._point = 1; break;
      case 1: this._point = 2; break;
      case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;
      case 3: this._point = 4; // falls through
      default: point$1(this, x, y); break;
    }

    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

var catmullRomOpen = (function custom(alpha) {

  function catmullRom(context) {
    return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);
  }

  catmullRom.alpha = function(alpha) {
    return custom(+alpha);
  };

  return catmullRom;
})(0.5);

function LinearClosed(context) {
  this._context = context;
}

LinearClosed.prototype = {
  areaStart: noop,
  areaEnd: noop,
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._point) this._context.closePath();
  },
  point: function(x, y) {
    x = +x, y = +y;
    if (this._point) this._context.lineTo(x, y);
    else this._point = 1, this._context.moveTo(x, y);
  }
};

function linearClosed(context) {
  return new LinearClosed(context);
}

function sign(x) {
  return x < 0 ? -1 : 1;
}

// Calculate the slopes of the tangents (Hermite-type interpolation) based on
// the following paper: Steffen, M. 1990. A Simple Method for Monotonic
// Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.
// NOV(II), P. 443, 1990.
function slope3(that, x2, y2) {
  var h0 = that._x1 - that._x0,
      h1 = x2 - that._x1,
      s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0),
      s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0),
      p = (s0 * h1 + s1 * h0) / (h0 + h1);
  return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
}

// Calculate a one-sided slope.
function slope2(that, t) {
  var h = that._x1 - that._x0;
  return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
}

// According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations
// "you can express cubic Hermite interpolation in terms of cubic Bézier curves
// with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1".
function point(that, t0, t1) {
  var x0 = that._x0,
      y0 = that._y0,
      x1 = that._x1,
      y1 = that._y1,
      dx = (x1 - x0) / 3;
  that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);
}

function MonotoneX(context) {
  this._context = context;
}

MonotoneX.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 =
    this._y0 = this._y1 =
    this._t0 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 2: this._context.lineTo(this._x1, this._y1); break;
      case 3: point(this, this._t0, slope2(this, this._t0)); break;
    }
    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x, y) {
    var t1 = NaN;

    x = +x, y = +y;
    if (x === this._x1 && y === this._y1) return; // Ignore coincident points.
    switch (this._point) {
      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
      case 1: this._point = 2; break;
      case 2: this._point = 3; point(this, slope2(this, t1 = slope3(this, x, y)), t1); break;
      default: point(this, this._t0, t1 = slope3(this, x, y)); break;
    }

    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
    this._t0 = t1;
  }
};

function MonotoneY(context) {
  this._context = new ReflectContext(context);
}

(MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x, y) {
  MonotoneX.prototype.point.call(this, y, x);
};

function ReflectContext(context) {
  this._context = context;
}

ReflectContext.prototype = {
  moveTo: function(x, y) { this._context.moveTo(y, x); },
  closePath: function() { this._context.closePath(); },
  lineTo: function(x, y) { this._context.lineTo(y, x); },
  bezierCurveTo: function(x1, y1, x2, y2, x, y) { this._context.bezierCurveTo(y1, x1, y2, x2, y, x); }
};

function monotoneX(context) {
  return new MonotoneX(context);
}

function monotoneY(context) {
  return new MonotoneY(context);
}

function Natural(context) {
  this._context = context;
}

Natural.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x = [];
    this._y = [];
  },
  lineEnd: function() {
    var x = this._x,
        y = this._y,
        n = x.length;

    if (n) {
      this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);
      if (n === 2) {
        this._context.lineTo(x[1], y[1]);
      } else {
        var px = controlPoints(x),
            py = controlPoints(y);
        for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {
          this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);
        }
      }
    }

    if (this._line || (this._line !== 0 && n === 1)) this._context.closePath();
    this._line = 1 - this._line;
    this._x = this._y = null;
  },
  point: function(x, y) {
    this._x.push(+x);
    this._y.push(+y);
  }
};

// See https://www.particleincell.com/2012/bezier-splines/ for derivation.
function controlPoints(x) {
  var i,
      n = x.length - 1,
      m,
      a = new Array(n),
      b = new Array(n),
      r = new Array(n);
  a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];
  for (i = 1; i < n - 1; ++i) a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];
  a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];
  for (i = 1; i < n; ++i) m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];
  a[n - 1] = r[n - 1] / b[n - 1];
  for (i = n - 2; i >= 0; --i) a[i] = (r[i] - a[i + 1]) / b[i];
  b[n - 1] = (x[n] + a[n - 1]) / 2;
  for (i = 0; i < n - 1; ++i) b[i] = 2 * x[i + 1] - a[i + 1];
  return [a, b];
}

function natural(context) {
  return new Natural(context);
}

function Step(context, t) {
  this._context = context;
  this._t = t;
}

Step.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x = this._y = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);
    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
    if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;
  },
  point: function(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
      case 1: this._point = 2; // falls through
      default: {
        if (this._t <= 0) {
          this._context.lineTo(this._x, y);
          this._context.lineTo(x, y);
        } else {
          var x1 = this._x * (1 - this._t) + x * this._t;
          this._context.lineTo(x1, this._y);
          this._context.lineTo(x1, y);
        }
        break;
      }
    }
    this._x = x, this._y = y;
  }
};

function step(context) {
  return new Step(context, 0.5);
}

function stepBefore(context) {
  return new Step(context, 0);
}

function stepAfter(context) {
  return new Step(context, 1);
}

function none$1(series, order) {
  if (!((n = series.length) > 1)) return;
  for (var i = 1, j, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i) {
    s0 = s1, s1 = series[order[i]];
    for (j = 0; j < m; ++j) {
      s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];
    }
  }
}

function none(series) {
  var n = series.length, o = new Array(n);
  while (--n >= 0) o[n] = n;
  return o;
}

function stackValue(d, key) {
  return d[key];
}

function stackSeries(key) {
  const series = [];
  series.key = key;
  return series;
}

function stack() {
  var keys = constant([]),
      order = none,
      offset = none$1,
      value = stackValue;

  function stack(data) {
    var sz = Array.from(keys.apply(this, arguments), stackSeries),
        i, n = sz.length, j = -1,
        oz;

    for (const d of data) {
      for (i = 0, ++j; i < n; ++i) {
        (sz[i][j] = [0, +value(d, sz[i].key, j, data)]).data = d;
      }
    }

    for (i = 0, oz = array(order(sz)); i < n; ++i) {
      sz[oz[i]].index = i;
    }

    offset(sz, oz);
    return sz;
  }

  stack.keys = function(_) {
    return arguments.length ? (keys = typeof _ === "function" ? _ : constant(Array.from(_)), stack) : keys;
  };

  stack.value = function(_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : constant(+_), stack) : value;
  };

  stack.order = function(_) {
    return arguments.length ? (order = _ == null ? none : typeof _ === "function" ? _ : constant(Array.from(_)), stack) : order;
  };

  stack.offset = function(_) {
    return arguments.length ? (offset = _ == null ? none$1 : _, stack) : offset;
  };

  return stack;
}

function expand(series, order) {
  if (!((n = series.length) > 0)) return;
  for (var i, n, j = 0, m = series[0].length, y; j < m; ++j) {
    for (y = i = 0; i < n; ++i) y += series[i][j][1] || 0;
    if (y) for (i = 0; i < n; ++i) series[i][j][1] /= y;
  }
  none$1(series, order);
}

function diverging(series, order) {
  if (!((n = series.length) > 0)) return;
  for (var i, j = 0, d, dy, yp, yn, n, m = series[order[0]].length; j < m; ++j) {
    for (yp = yn = 0, i = 0; i < n; ++i) {
      if ((dy = (d = series[order[i]][j])[1] - d[0]) > 0) {
        d[0] = yp, d[1] = yp += dy;
      } else if (dy < 0) {
        d[1] = yn, d[0] = yn += dy;
      } else {
        d[0] = 0, d[1] = dy;
      }
    }
  }
}

function silhouette(series, order) {
  if (!((n = series.length) > 0)) return;
  for (var j = 0, s0 = series[order[0]], n, m = s0.length; j < m; ++j) {
    for (var i = 0, y = 0; i < n; ++i) y += series[i][j][1] || 0;
    s0[j][1] += s0[j][0] = -y / 2;
  }
  none$1(series, order);
}

function wiggle(series, order) {
  if (!((n = series.length) > 0) || !((m = (s0 = series[order[0]]).length) > 0)) return;
  for (var y = 0, j = 1, s0, m, n; j < m; ++j) {
    for (var i = 0, s1 = 0, s2 = 0; i < n; ++i) {
      var si = series[order[i]],
          sij0 = si[j][1] || 0,
          sij1 = si[j - 1][1] || 0,
          s3 = (sij0 - sij1) / 2;
      for (var k = 0; k < i; ++k) {
        var sk = series[order[k]],
            skj0 = sk[j][1] || 0,
            skj1 = sk[j - 1][1] || 0;
        s3 += skj0 - skj1;
      }
      s1 += sij0, s2 += s3 * sij0;
    }
    s0[j - 1][1] += s0[j - 1][0] = y;
    if (s1) y -= s2 / s1;
  }
  s0[j - 1][1] += s0[j - 1][0] = y;
  none$1(series, order);
}

function appearance(series) {
  var peaks = series.map(peak);
  return none(series).sort(function(a, b) { return peaks[a] - peaks[b]; });
}

function peak(series) {
  var i = -1, j = 0, n = series.length, vi, vj = -Infinity;
  while (++i < n) if ((vi = +series[i][1]) > vj) vj = vi, j = i;
  return j;
}

function ascending(series) {
  var sums = series.map(sum);
  return none(series).sort(function(a, b) { return sums[a] - sums[b]; });
}

function sum(series) {
  var s = 0, i = -1, n = series.length, v;
  while (++i < n) if (v = +series[i][1]) s += v;
  return s;
}

function descending(series) {
  return ascending(series).reverse();
}

function insideOut(series) {
  var n = series.length,
      i,
      j,
      sums = series.map(sum),
      order = appearance(series),
      top = 0,
      bottom = 0,
      tops = [],
      bottoms = [];

  for (i = 0; i < n; ++i) {
    j = order[i];
    if (top < bottom) {
      top += sums[j];
      tops.push(j);
    } else {
      bottom += sums[j];
      bottoms.push(j);
    }
  }

  return bottoms.reverse().concat(tops);
}

function reverse(series) {
  return none(series).reverse();
}

exports.arc = arc;
exports.area = area;
exports.areaRadial = areaRadial;
exports.curveBasis = basis;
exports.curveBasisClosed = basisClosed;
exports.curveBasisOpen = basisOpen;
exports.curveBumpX = bumpX;
exports.curveBumpY = bumpY;
exports.curveBundle = bundle;
exports.curveCardinal = cardinal;
exports.curveCardinalClosed = cardinalClosed;
exports.curveCardinalOpen = cardinalOpen;
exports.curveCatmullRom = catmullRom;
exports.curveCatmullRomClosed = catmullRomClosed;
exports.curveCatmullRomOpen = catmullRomOpen;
exports.curveLinear = curveLinear;
exports.curveLinearClosed = linearClosed;
exports.curveMonotoneX = monotoneX;
exports.curveMonotoneY = monotoneY;
exports.curveNatural = natural;
exports.curveStep = step;
exports.curveStepAfter = stepAfter;
exports.curveStepBefore = stepBefore;
exports.line = line;
exports.lineRadial = lineRadial$1;
exports.link = link;
exports.linkHorizontal = linkHorizontal;
exports.linkRadial = linkRadial;
exports.linkVertical = linkVertical;
exports.pie = pie;
exports.pointRadial = pointRadial;
exports.radialArea = areaRadial;
exports.radialLine = lineRadial$1;
exports.stack = stack;
exports.stackOffsetDiverging = diverging;
exports.stackOffsetExpand = expand;
exports.stackOffsetNone = none$1;
exports.stackOffsetSilhouette = silhouette;
exports.stackOffsetWiggle = wiggle;
exports.stackOrderAppearance = appearance;
exports.stackOrderAscending = ascending;
exports.stackOrderDescending = descending;
exports.stackOrderInsideOut = insideOut;
exports.stackOrderNone = none;
exports.stackOrderReverse = reverse;
exports.symbol = Symbol;
exports.symbolAsterisk = asterisk;
exports.symbolCircle = circle;
exports.symbolCross = cross;
exports.symbolDiamond = diamond;
exports.symbolDiamond2 = diamond2;
exports.symbolPlus = plus;
exports.symbolSquare = square;
exports.symbolSquare2 = square2;
exports.symbolStar = star;
exports.symbolTimes = times;
exports.symbolTriangle = triangle;
exports.symbolTriangle2 = triangle2;
exports.symbolWye = wye;
exports.symbolX = times;
exports.symbols = symbolsFill;
exports.symbolsFill = symbolsFill;
exports.symbolsStroke = symbolsStroke;

}));

----------------------------------------
File: ./animations/node_modules/d3-shape/README.md
----------------------------------------
# d3-shape

Visualizations typically consist of discrete graphical marks, such as [symbols](#symbols), [arcs](#arcs), [lines](#lines) and [areas](#areas). While the rectangles of a bar chart may be easy enough to generate directly using [SVG](http://www.w3.org/TR/SVG/paths.html#PathData) or [Canvas](http://www.w3.org/TR/2dcontext/#canvaspathmethods), other shapes are complex, such as rounded annular sectors and centripetal Catmull–Rom splines. This module provides a variety of shape generators for your convenience.

As with other aspects of D3, these shapes are driven by data: each shape generator exposes accessors that control how the input data are mapped to a visual representation. For example, you might define a line generator for a time series by [scaling](https://github.com/d3/d3-scale) fields of your data to fit the chart:

```js
const line = d3.line()
    .x(d => x(d.date))
    .y(d => y(d.value));
```

This line generator can then be used to compute the `d` attribute of an SVG path element:

```js
path.datum(data).attr("d", line);
```

Or you can use it to render to a Canvas 2D context:

```js
line.context(context)(data);
```

For more, read [Introducing d3-shape](https://medium.com/@mbostock/introducing-d3-shape-73f8367e6d12).

## Installing

If you use npm, `npm install d3-shape`. You can also download the [latest release on GitHub](https://github.com/d3/d3-shape/releases/latest). For vanilla HTML in modern browsers, import d3-shape from jsDelivr:

```html
<script type="module">

import {line} from "https://cdn.jsdelivr.net/npm/d3-shape@3/+esm";

const l = line();

</script>
```

For legacy environments, you can load d3-shape’s UMD bundle; a `d3` global is exported:

```html
<script src="https://cdn.jsdelivr.net/npm/d3-path@3"></script>
<script src="https://cdn.jsdelivr.net/npm/d3-shape@3"></script>
<script>

const l = d3.line();

</script>
```

## API Reference

* [Arcs](#arcs)
* [Pies](#pies)
* [Lines](#lines)
* [Areas](#areas)
* [Curves](#curves)
* [Custom Curves](#custom-curves)
* [Links](#links)
* [Symbols](#symbols)
* [Custom Symbol Types](#custom-symbol-types)
* [Stacks](#stacks)

Note: all the methods that accept arrays also accept iterables and convert them to arrays internally.

### Arcs

[<img alt="Pie Chart" src="./img/pie.png" width="295" height="295">](https://observablehq.com/@d3/pie-chart)[<img alt="Donut Chart" src="./img/donut.png" width="295" height="295">](https://observablehq.com/@d3/donut-chart)

The arc generator produces a [circular](https://en.wikipedia.org/wiki/Circular_sector) or [annular](https://en.wikipedia.org/wiki/Annulus_\(mathematics\)) sector, as in a pie or donut chart. If the absolute difference between the [start](#arc_startAngle) and [end](#arc_endAngle) angles (the *angular span*) is greater than [τ](https://en.wikipedia.org/wiki/Turn_\(geometry\)#Tau_proposal), the arc generator will produce a complete circle or annulus. If it is less than τ, the arc’s angular length will be equal to the absolute difference between the two angles (going clockwise if the signed difference is positive and anticlockwise if it is negative). If the absolute difference is less than τ, the arc may have [rounded corners](#arc_cornerRadius) and [angular padding](#arc_padAngle). Arcs are always centered at ⟨0,0⟩; use a transform (see: [SVG](http://www.w3.org/TR/SVG/coords.html#TransformAttribute), [Canvas](http://www.w3.org/TR/2dcontext/#transformations)) to move the arc to a different position.

See also the [pie generator](#pies), which computes the necessary angles to represent an array of data as a pie or donut chart; these angles can then be passed to an arc generator.

<a name="arc" href="#arc">#</a> d3.<b>arc</b>() · [Source](https://github.com/d3/d3-shape/blob/main/src/arc.js)

Constructs a new arc generator with the default settings.

<a name="_arc" href="#_arc">#</a> <i>arc</i>(<i>arguments…</i>) · [Source](https://github.com/d3/d3-shape/blob/main/src/arc.js)

Generates an arc for the given *arguments*. The *arguments* are arbitrary; they are simply propagated to the arc generator’s accessor functions along with the `this` object. For example, with the default settings, an object with radii and angles is expected:

```js
const arc = d3.arc();

arc({
  innerRadius: 0,
  outerRadius: 100,
  startAngle: 0,
  endAngle: Math.PI / 2
}); // "M0,-100A100,100,0,0,1,100,0L0,0Z"
```

If the radii and angles are instead defined as constants, you can generate an arc without any arguments:

```js
const arc = d3.arc()
    .innerRadius(0)
    .outerRadius(100)
    .startAngle(0)
    .endAngle(Math.PI / 2);

arc(); // "M0,-100A100,100,0,0,1,100,0L0,0Z"
```

If the arc generator has a [context](#arc_context), then the arc is rendered to this context as a sequence of [path method](http://www.w3.org/TR/2dcontext/#canvaspathmethods) calls and this function returns void. Otherwise, a [path data](http://www.w3.org/TR/SVG/paths.html#PathData) string is returned.

<a name="arc_centroid" href="#arc_centroid">#</a> <i>arc</i>.<b>centroid</b>(<i>arguments…</i>) · [Source](https://github.com/d3/d3-shape/blob/main/src/arc.js)

Computes the midpoint [*x*, *y*] of the center line of the arc that would be [generated](#_arc) by the given *arguments*. The *arguments* are arbitrary; they are simply propagated to the arc generator’s accessor functions along with the `this` object. To be consistent with the generated arc, the accessors must be deterministic, *i.e.*, return the same value given the same arguments. The midpoint is defined as ([startAngle](#arc_startAngle) + [endAngle](#arc_endAngle)) / 2 and ([innerRadius](#arc_innerRadius) + [outerRadius](#arc_outerRadius)) / 2. For example:

[<img alt="Circular Sector Centroids" src="./img/centroid-circular-sector.png" width="250" height="250">](https://observablehq.com/@d3/pie-settings)[<img alt="Annular Sector Centroids" src="./img/centroid-annular-sector.png" width="250" height="250">](https://observablehq.com/@d3/pie-settings)

Note that this is **not the geometric center** of the arc, which may be outside the arc; this method is merely a convenience for positioning labels.

<a name="arc_innerRadius" href="#arc_innerRadius">#</a> <i>arc</i>.<b>innerRadius</b>([<i>radius</i>]) · [Source](https://github.com/d3/d3-shape/blob/main/src/arc.js)

If *radius* is specified, sets the inner radius to the specified function or number and returns this arc generator. If *radius* is not specified, returns the current inner radius accessor, which defaults to:

```js
function innerRadius(d) {
  return d.innerRadius;
}
```

Specifying the inner radius as a function is useful for constructing a stacked polar bar chart, often in conjunction with a [sqrt scale](https://github.com/d3/d3-scale#sqrt). More commonly, a constant inner radius is used for a donut or pie chart. If the outer radius is smaller than the inner radius, the inner and outer radii are swapped. A negative value is treated as zero.

<a name="arc_outerRadius" href="#arc_outerRadius">#</a> <i>arc</i>.<b>outerRadius</b>([<i>radius</i>]) · [Source](https://github.com/d3/d3-shape/blob/main/src/arc.js)

If *radius* is specified, sets the outer radius to the specified function or number and returns this arc generator. If *radius* is not specified, returns the current outer radius accessor, which defaults to:

```js
function outerRadius(d) {
  return d.outerRadius;
}
```

Specifying the outer radius as a function is useful for constructing a coxcomb or polar bar chart, often in conjunction with a [sqrt scale](https://github.com/d3/d3-scale#sqrt). More commonly, a constant outer radius is used for a pie or donut chart. If the outer radius is smaller than the inner radius, the inner and outer radii are swapped. A negative value is treated as zero.

<a name="arc_cornerRadius" href="#arc_cornerRadius">#</a> <i>arc</i>.<b>cornerRadius</b>([<i>radius</i>]) · [Source](https://github.com/d3/d3-shape/blob/main/src/arc.js)

If *radius* is specified, sets the corner radius to the specified function or number and returns this arc generator. If *radius* is not specified, returns the current corner radius accessor, which defaults to:

```js
function cornerRadius() {
  return 0;
}
```

If the corner radius is greater than zero, the corners of the arc are rounded using circles of the given radius. For a circular sector, the two outer corners are rounded; for an annular sector, all four corners are rounded. The corner circles are shown in this diagram:

[<img alt="Rounded Circular Sectors" src="./img/rounded-circular-sector.png" width="250" height="250">](https://observablehq.com/@d3/pie-settings)[<img alt="Rounded Annular Sectors" src="./img/rounded-annular-sector.png" width="250" height="250">](https://observablehq.com/@d3/pie-settings)

The corner radius may not be larger than ([outerRadius](#arc_outerRadius) - [innerRadius](#arc_innerRadius)) / 2. In addition, for arcs whose angular span is less than π, the corner radius may be reduced as two adjacent rounded corners intersect. This is occurs more often with the inner corners. See the [arc corners animation](https://observablehq.com/@d3/arc-corners) for illustration.

<a name="arc_startAngle" href="#arc_startAngle">#</a> <i>arc</i>.<b>startAngle</b>([<i>angle</i>]) · [Source](https://github.com/d3/d3-shape/blob/main/src/arc.js)

If *angle* is specified, sets the start angle to the specified function or number and returns this arc generator. If *angle* is not specified, returns the current start angle accessor, which defaults to:

```js
function startAngle(d) {
  return d.startAngle;
}
```

The *angle* is specified in radians, with 0 at -*y* (12 o’clock) and positive angles proceeding clockwise. If |endAngle - startAngle| ≥ τ, a complete circle or annulus is generated rather than a sector.

<a name="arc_endAngle" href="#arc_endAngle">#</a> <i>arc</i>.<b>endAngle</b>([<i>angle</i>]) · [Source](https://github.com/d3/d3-shape/blob/main/src/arc.js)

If *angle* is specified, sets the end angle to the specified function or number and returns this arc generator. If *angle* is not specified, returns the current end angle accessor, which defaults to:

```js
function endAngle(d) {
  return d.endAngle;
}
```

The *angle* is specified in radians, with 0 at -*y* (12 o’clock) and positive angles proceeding clockwise. If |endAngle - startAngle| ≥ τ, a complete circle or annulus is generated rather than a sector.

<a name="arc_padAngle" href="#arc_padAngle">#</a> <i>arc</i>.<b>padAngle</b>([<i>angle</i>]) · [Source](https://github.com/d3/d3-shape/blob/main/src/arc.js)

If *angle* is specified, sets the pad angle to the specified function or number and returns this arc generator. If *angle* is not specified, returns the current pad angle accessor, which defaults to:

```js
function padAngle() {
  return d && d.padAngle;
}
```

The pad angle is converted to a fixed linear distance separating adjacent arcs, defined as [padRadius](#arc_padRadius) * padAngle. This distance is subtracted equally from the [start](#arc_startAngle) and [end](#arc_endAngle) of the arc. If the arc forms a complete circle or annulus, as when |endAngle - startAngle| ≥ τ, the pad angle is ignored.

If the [inner radius](#arc_innerRadius) or angular span is small relative to the pad angle, it may not be possible to maintain parallel edges between adjacent arcs. In this case, the inner edge of the arc may collapse to a point, similar to a circular sector. For this reason, padding is typically only applied to annular sectors (*i.e.*, when innerRadius is positive), as shown in this diagram:

[<img alt="Padded Circular Sectors" src="./img/padded-circular-sector.png" width="250" height="250">](https://observablehq.com/@d3/pie-settings)[<img alt="Padded Annular Sectors" src="./img/padded-annular-sector.png" width="250" height="250">](https://observablehq.com/@d3/pie-settings)

The recommended minimum inner radius when using padding is outerRadius \* padAngle / sin(θ), where θ is the angular span of the smallest arc before padding. For example, if the outer radius is 200 pixels and the pad angle is 0.02 radians, a reasonable θ is 0.04 radians, and a reasonable inner radius is 100 pixels. See the [arc padding animation](https://observablehq.com/@d3/arc-pad-angle) for illustration.

Often, the pad angle is not set directly on the arc generator, but is instead computed by the [pie generator](#pies) so as to ensure that the area of padded arcs is proportional to their value; see [*pie*.padAngle](#pie_padAngle). See the [pie padding animation](https://observablehq.com/@d3/arc-pad-angle) for illustration. If you apply a constant pad angle to the arc generator directly, it tends to subtract disproportionately from smaller arcs, introducing distortion.

<a name="arc_padRadius" href="#arc_padRadius">#</a> <i>arc</i>.<b>padRadius</b>([<i>radius</i>]) · [Source](https://github.com/d3/d3-shape/blob/main/src/arc.js)

If *radius* is specified, sets the pad radius to the specified function or number and returns this arc generator. If *radius* is not specified, returns the current pad radius accessor, which defaults to null, indicating that the pad radius should be automatically computed as sqrt([innerRadius](#arc_innerRadius) * innerRadius + [outerRadius](#arc_outerRadius) * outerRadius). The pad radius determines the fixed linear distance separating adjacent arcs, defined as padRadius * [padAngle](#arc_padAngle).

<a name="arc_context" href="#arc_context">#</a> <i>arc</i>.<b>context</b>([<i>context</i>]) · [Source](https://github.com/d3/d3-shape/blob/main/src/arc.js)

If *context* is specified, sets the context and returns this arc generator. If *context* is not specified, returns the current context, which defaults to null. If the context is not null, then the [generated arc](#_arc) is rendered to this context as a sequence of [path method](http://www.w3.org/TR/2dcontext/#canvaspathmethods) calls. Otherwise, a [path data](http://www.w3.org/TR/SVG/paths.html#PathData) string representing the generated arc is returned.

<a name="arc_digits" href="#arc_digits">#</a> <i>arc</i>.<b>digits</b>([<i>digits</i>]) · [Source](https://github.com/d3/d3-shape/blob/main/src/arc.js)

If *digits* is specified, sets the maximum number of digits after the decimal separator and returns this arc generator. If *digits* is not specified, returns the current maximum fraction digits, which defaults to 3. This option only applies when the associated [*context*](#arc_context) is null, as when this arc generator is used to produce [path data](http://www.w3.org/TR/SVG/paths.html#PathData).

### Pies

The pie generator does not produce a shape directly, but instead computes the necessary angles to represent a tabular dataset as a pie or donut chart; these angles can then be passed to an [arc generator](#arcs).

<a name="pie" href="#pie">#</a> d3.<b>pie</b>() · [Source](https://github.com/d3/d3-shape/blob/main/src/pie.js)

Constructs a new pie generator with the default settings.

<a name="_pie" href="#_pie">#</a> <i>pie</i>(<i>data</i>[, <i>arguments…</i>]) · [Source](https://github.com/d3/d3-shape/blob/main/src/pie.js)

Generates a pie for the given array of *data*, returning an array of objects representing each datum’s arc angles. Any additional *arguments* are arbitrary; they are simply propagated to the pie generator’s accessor functions along with the `this` object. The length of the returned array is the same as *data*, and each element *i* in the returned array corresponds to the element *i* in the input data. Each object in the returned array has the following properties:

* `data` - the input datum; the corresponding element in the input data array.
* `value` - the numeric [value](#pie_value) of the arc.
* `index` - the zero-based [sorted index](#pie_sort) of the arc.
* `startAngle` - the [start angle](#pie_startAngle) of the arc.
* `endAngle` - the [end angle](#pie_endAngle) of the arc.
* `padAngle` - the [pad angle](#pie_padAngle) of the arc.

This representation is designed to work with the arc generator’s default [startAngle](#arc_startAngle), [endAngle](#arc_endAngle) and [padAngle](#arc_padAngle) accessors. The angular units are arbitrary, but if you plan to use the pie generator in conjunction with an [arc generator](#arcs), you should specify angles in radians, with 0 at -*y* (12 o’clock) and positive angles proceeding clockwise.

Given a small dataset of numbers, here is how to compute the arc angles to render this data as a pie chart:

```js
const data = [1, 1, 2, 3, 5, 8, 13, 21];
const arcs = d3.pie()(data);
```

The first pair of parens, `pie()`, [constructs](#pie) a default pie generator. The second, `pie()(data)`, [invokes](#_pie) this generator on the dataset, returning an array of objects:

```json
[
  {"data":  1, "value":  1, "index": 6, "startAngle": 6.050474740247008, "endAngle": 6.166830023713296, "padAngle": 0},
  {"data":  1, "value":  1, "index": 7, "startAngle": 6.166830023713296, "endAngle": 6.283185307179584, "padAngle": 0},
  {"data":  2, "value":  2, "index": 5, "startAngle": 5.817764173314431, "endAngle": 6.050474740247008, "padAngle": 0},
  {"data":  3, "value":  3, "index": 4, "startAngle": 5.468698322915565, "endAngle": 5.817764173314431, "padAngle": 0},
  {"data":  5, "value":  5, "index": 3, "startAngle": 4.886921905584122, "endAngle": 5.468698322915565, "padAngle": 0},
  {"data":  8, "value":  8, "index": 2, "startAngle": 3.956079637853813, "endAngle": 4.886921905584122, "padAngle": 0},
  {"data": 13, "value": 13, "index": 1, "startAngle": 2.443460952792061, "endAngle": 3.956079637853813, "padAngle": 0},
  {"data": 21, "value": 21, "index": 0, "startAngle": 0.000000000000000, "endAngle": 2.443460952792061, "padAngle": 0}
]
```

Note that the returned array is in the same order as the data, even though this pie chart is [sorted](#pie_sortValues) by descending value, starting with the arc for the last datum (value 21) at 12 o’clock.

<a name="pie_value" href="#pie_value">#</a> <i>pie</i>.<b>value</b>([<i>value</i>]) · [Source](https://github.com/d3/d3-shape/blob/main/src/pie.js)

If *value* is specified, sets the value accessor to the specified function or number and returns this pie generator. If *value* is not specified, returns the current value accessor, which defaults to:

```js
function value(d) {
  return d;
}
```

When a pie is [generated](#_pie), the value accessor will be invoked for each element in the input data array, being passed the element `d`, the index `i`, and the array `data` as three arguments. The default value accessor assumes that the input data are numbers, or that they are coercible to numbers using [valueOf](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf). If your data are not simply numbers, then you should specify an accessor that returns the corresponding numeric value for a given datum. For example:

```js
const data = [
  {"number":  4, "name": "Locke"},
  {"number":  8, "name": "Reyes"},
  {"number": 15, "name": "Ford"},
  {"number": 16, "name": "Jarrah"},
  {"number": 23, "name": "Shephard"},
  {"number": 42, "name": "Kwon"}
];

const arcs = d3.pie()
    .value(d => d.number)
    (data);
```

This is similar to [mapping](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) your data to values before invoking the pie generator:

```js
const arcs = d3.pie()(data.map(d => d.number));
```

The benefit of an accessor is that the input data remains associated with the returned objects, thereby making it easier to access other fields of the data, for example to set the color or to add text labels.

<a name="pie_sort" href="#pie_sort">#</a> <i>pie</i>.<b>sort</b>([<i>compare</i>]) · [Source](https://github.com/d3/d3-shape/blob/main/src/pie.js)

If *compare* is specified, sets the data comparator to the specified function and returns this pie generator. If *compare* is not specified, returns the current data comparator, which defaults to null. If both the data comparator and the value comparator are null, then arcs are positioned in the original input order. Otherwise, the data is sorted according to the data comparator, and the resulting order is used. Setting the data comparator implicitly sets the [value comparator](#pie_sortValues) to null.

The *compare* function takes two arguments *a* and *b*, each elements from the input data array. If the arc for *a* should be before the arc for *b*, then the comparator must return a number less than zero; if the arc for *a* should be after the arc for *b*, then the comparator must return a number greater than zero; returning zero means that the relative order of *a* and *b* is unspecified. For example, to sort arcs by their associated name:

```js
pie.sort((a, b) => a.name.localeCompare(b.name));
```

Sorting does not affect the order of the [generated arc array](#_pie) which is always in the same order as the input data array; it merely affects the computed angles of each arc. The first arc starts at the [start angle](#pie_startAngle) and the last arc ends at the [end angle](#pie_endAngle).

<a name="pie_sortValues" href="#pie_sortValues">#</a> <i>pie</i>.<b>sortValues</b>([<i>compare</i>]) · [Source](https://github.com/d3/d3-shape/blob/main/src/pie.js)

If *compare* is specified, sets the value comparator to the specified function and returns this pie generator. If *compare* is not specified, returns the current value comparator, which defaults to descending value. The default value comparator is implemented as:

```js
function compare(a, b) {
  return b - a;
}
```

If both the data comparator and the value comparator are null, then arcs are positioned in the original input order. Otherwise, the data is sorted according to the data comparator, and the resulting order is used. Setting the value comparator implicitly sets the [data comparator](#pie_sort) to null.

The value comparator is similar to the [data comparator](#pie_sort), except the two arguments *a* and *b* are values derived from the input data array using the [value accessor](#pie_value), not the data elements. If the arc for *a* should be before the arc for *b*, then the comparator must return a number less than zero; if the arc for *a* should be after the arc for *b*, then the comparator must return a number greater than zero; returning zero means that the relative order of *a* and *b* is unspecified. For example, to sort arcs by ascending value:

```js
pie.sortValues((a, b) => a - b);
```

Sorting does not affect the order of the [generated arc array](#_pie) which is always in the same order as the input data array; it merely affects the computed angles of each arc. The first arc starts at the [start angle](#pie_startAngle) and the last arc ends at the [end angle](#pie_endAngle).

<a name="pie_startAngle" href="#pie_startAngle">#</a> <i>pie</i>.<b>startAngle</b>([<i>angle</i>]) · [Source](https://github.com/d3/d3-shape/blob/main/src/pie.js)

If *angle* is specified, sets the overall start angle of the pie to the specified function or number and returns this pie generator. If *angle* is not specified, returns the current start angle accessor, which defaults to:

```js
function startAngle() {
  return 0;
}
```

The start angle here means the *overall* start angle of the pie, *i.e.*, the start angle of the first arc. The start angle accessor is invoked once, being passed the same arguments and `this` context as the [pie generator](#_pie). The units of *angle* are arbitrary, but if you plan to use the pie generator in conjunction with an [arc generator](#arcs), you should specify an angle in radians, with 0 at -*y* (12 o’clock) and positive angles proceeding clockwise.

<a name="pie_endAngle" href="#pie_endAngle">#</a> <i>pie</i>.<b>endAngle</b>([<i>angle</i>]) · [Source](https://github.com/d3/d3-shape/blob/main/src/pie.js)

If *angle* is specified, sets the overall end angle of the pie to the specified function or number and returns this pie generator. If *angle* is not specified, returns the current end angle accessor, which defaults to:

```js
function endAngle() {
  return 2 * Math.PI;
}
```

The end angle here means the *overall* end angle of the pie, *i.e.*, the end angle of the last arc. The end angle accessor is invoked once, being passed the same arguments and `this` context as the [pie generator](#_pie). The units of *angle* are arbitrary, but if you plan to use the pie generator in conjunction with an [arc generator](#arcs), you should specify an angle in radians, with 0 at -*y* (12 o’clock) and positive angles proceeding clockwise.

The value of the end angle is constrained to [startAngle](#pie_startAngle) ± τ, such that |endAngle - startAngle| ≤ τ.

<a name="pie_padAngle" href="#pie_padAngle">#</a> <i>pie</i>.<b>padAngle</b>([<i>angle</i>]) · [Source](https://github.com/d3/d3-shape/blob/main/src/pie.js)

If *angle* is specified, sets the pad angle to the specified function or number and returns this pie generator. If *angle* is not specified, returns the current pad angle accessor, which defaults to:

```js
function padAngle() {
  return 0;
}
```

The pad angle here means the angular separation between each adjacent arc. The total amount of padding reserved is the specified *angle* times the number of elements in the input data array, and at most |endAngle - startAngle|; the remaining space is then divided proportionally by [value](#pie_value) such that the relative area of each arc is preserved. See the [pie padding animation](https://observablehq.com/@d3/arc-pad-angle) for illustration. The pad angle accessor is invoked once, being passed the same arguments and `this` context as the [pie generator](#_pie). The units of *angle* are arbitrary, but if you plan to use the pie generator in conjunction with an [arc generator](#arcs), you should specify an angle in radians.

### Lines

[<img width="295" height="154" alt="Line Chart" src="./img/line.png">](https://observablehq.com/@d3/line-chart)

The line generator produces a [spline](https://en.wikipedia.org/wiki/Spline_\(mathematics\)) or [polyline](https://en.wikipedia.org/wiki/Polygonal_chain), as in a line chart. Lines also appear in many other visualization types, such as the links in [hierarchical edge bundling](https://observablehq.com/@d3/hierarchical-edge-bundling).

<a name="line" href="#line">#</a> d3.<b>line</b>([<i>x</i>][, <i>y</i>]) · [Source](https://github.com/d3/d3-shape/blob/main/src/line.js), [Examples](https://observablehq.com/@d3/d3-line)

Constructs a new line generator with the default settings. If *x* or *y* are specified, sets the corresponding accessors to the specified function or number and returns this line generator.

<a name="_line" href="#_line">#</a> <i>line</i>(<i>data</i>) · [Source](https://github.com/d3/d3-shape/blob/main/src/line.js), [Examples](https://observablehq.com/@d3/d3-line)

Generates a line for the given array of *data*. Depending on this line generator’s associated [curve](#line_curve), the given input *data* may need to be sorted by *x*-value before being passed to the line generator. If the line generator has a [context](#line_context), then the line is rendered to this context as a sequence of [path method](http://www.w3.org/TR/2dcontext/#canvaspathmethods) calls and this function returns void. Otherwise, a [path data](http://www.w3.org/TR/SVG/paths.html#PathData) string is returned.

<a name="line_x" href="#line_x">#</a> <i>line</i>.<b>x</b>([<i>x</i>]) · [Source](https://github.com/d3/d3-shape/blob/main/src/line.js), [Examples](https://observablehq.com/@d3/d3-line)

If *x* is specified, sets the x accessor to the specified function or number and returns this line generator. If *x* is not specified, returns the current x accessor, which defaults to:

```js
function x(d) {
  return d[0];
}
```

When a line is [generated](#_line), the x accessor will be invoked for each [defined](#line_defined) element in the input data array, being passed the element `d`, the index `i`, and the array `data` as three arguments. The default x accessor assumes that the input data are two-element arrays of numbers. If your data are in a different format, or if you wish to transform the data before rendering, then you should specify a custom accessor. For example, if `x` is a [time scale](https://github.com/d3/d3-scale#time-scales) and `y` is a [linear scale](https://github.com/d3/d3-scale#linear-scales):

```js
const data = [
  {date: new Date(2007, 3, 24), value: 93.24},
  {date: new Date(2007, 3, 25), value: 95.35},
  {date: new Date(2007, 3, 26), value: 98.84},
  {date: new Date(2007, 3, 27), value: 99.92},
  {date: new Date(2007, 3, 30), value: 99.80},
  {date: new Date(2007, 4,  1), value: 99.47},
  …
];

const line = d3.line()
    .x(d => x(d.date))
    .y(d => y(d.value));
```

<a name="line_y" href="#line_y">#</a> <i>line</i>.<b>y</b>([<i>y</i>]) · [Source](https://github.com/d3/d3-shape/blob/main/src/line.js), [Examples](https://observablehq.com/@d3/d3-line)

If *y* is specified, sets the y accessor to the specified function or number and returns this line generator. If *y* is not specified, returns the current y accessor, which defaults to:

```js
function y(d) {
  return d[1];
}
```

When a line is [generated](#_line), the y accessor will be invoked for each [defined](#line_defined) element in the input data array, being passed the element `d`, the index `i`, and the array `data` as three arguments. The default y accessor assumes that the input data are two-element arrays of numbers. See [*line*.x](#line_x) for more information.

<a name="line_defined" href="#line_defined">#</a> <i>line</i>.<b>defined</b>([<i>defined</i>]) · [Source](https://github.com/d3/d3-shape/blob/main/src/line.js), [Examples](https://observablehq.com/@d3/d3-line)

If *defined* is specified, sets the defined accessor to the specified function or boolean and returns this line generator. If *defined* is not specified, returns the current defined accessor, which defaults to:

```js
function defined() {
  return true;
}
```

The default accessor thus assumes that the input data is always defined. When a line is [generated](#_line), the defined accessor will be invoked for each element in the input data array, being passed the element `d`, the index `i`, and the array `data` as three arguments. If the given element is defined (*i.e.*, if the defined accessor returns a truthy value for this element), the [x](#line_x) and [y](#line_y) accessors will subsequently be evaluated and the point will be added to the current line segment. Otherwise, the element will be skipped, the current line segment will be ended, and a new line segment will be generated for the next defined point. As a result, the generated line may have several discrete segments. For example:

[<img src="./img/line-defined.png" width="480" height="250" alt="Line with Missing Data">](https://observablehq.com/@d3/line-with-missing-data)

Note that if a line segment consists of only a single point, it may appear invisible unless rendered with rounded or square [line caps](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-linecap). In addition, some curves such as [curveCardinalOpen](#curveCardinalOpen) only render a visible segment if it contains multiple points.

<a name="line_curve" href="#line_curve">#</a> <i>line</i>.<b>curve</b>([<i>curve</i>]) · [Source](https://github.com/d3/d3-shape/blob/main/src/line.js), [Examples](https://observablehq.com/@d3/d3-line)

If *curve* is specified, sets the [curve factory](#curves) and returns this line generator. If *curve* is not specified, returns the current curve factory, which defaults to [curveLinear](#curveLinear).

<a name="line_context" href="#line_context">#</a> <i>line</i>.<b>context</b>([<i>context</i>]) · [Source](https://github.com/d3/d3-shape/blob/main/src/line.js), [Examples](https://observablehq.com/@d3/d3-line)

If *context* is specified, sets the context and returns this line generator. If *context* is not specified, returns the current context, which defaults to null. If the context is not null, then the [generated line](#_line) is rendered to this context as a sequence of [path method](http://www.w3.org/TR/2dcontext/#canvaspathmethods) calls. Otherwise, a [path data](http://www.w3.org/TR/SVG/paths.html#PathData) string representing the generated line is returned.

<a name="line_digits" href="#line_digits">#</a> <i>line</i>.<b>digits</b>([<i>digits</i>]) · [Source](https://github.com/d3/d3-shape/blob/main/src/line.js)

If *digits* is specified, sets the maximum number of digits after the decimal separator and returns this line generator. If *digits* is not specified, returns the current maximum fraction digits, which defaults to 3. This option only applies when the associated [*context*](#line_context) is null, as when this line generator is used to produce [path data](http://www.w3.org/TR/SVG/paths.html#PathData).

<a name="lineRadial" href="#lineRadial">#</a> d3.<b>lineRadial</b>() · [Source](https://github.com/d3/d3-shape/blob/main/src/lineRadial.js), [Examples](https://observablehq.com/@d3/d3-lineradial)

<img alt="Radial Line" width="250" height="250" src="./img/line-radial.png">

Constructs a new radial line generator with the default settings. A radial line generator is equivalent to the standard Cartesian [line generator](#line), except the [x](#line_x) and [y](#line_y) accessors are replaced with [angle](#lineRadial_angle) and [radius](#lineRadial_radius) accessors. Radial lines are always positioned relative to ⟨0,0⟩; use a transform (see: [SVG](http://www.w3.org/TR/SVG/coords.html#TransformAttribute), [Canvas](http://www.w3.org/TR/2dcontext/#transformations)) to change the origin.

<a name="_lineRadial" href="#_lineRadial">#</a> <i>lineRadial</i>(<i>data</i>) · [Source](https://github.com/d3/d3-shape/blob/main/src/lineRadial.js#L4), [Examples](https://observablehq.com/@d3/d3-lineradial)

Equivalent to [*line*](#_line).

<a name="lineRadial_angle" href="#lineRadial_angle">#</a> <i>lineRadial</i>.<b>angle</b>([<i>angle</i>]) · [Source](https://github.com/d3/d3-shape/blob/main/src/lineRadial.js#L7), [Examples](https://observablehq.com/@d3/d3-lineradial)

Equivalent to [*line*.x](#line_x), except the accessor returns the angle in radians, with 0 at -*y* (12 o’clock).

<a name="lineRadial_radius" href="#lineRadial_radius">#</a> <i>lineRadial</i>.<b>radius</b>([<i>radius</i>]) · [Source](https://github.com/d3/d3-shape/blob/main/src/lineRadial.js#L8), [Examples](https://observablehq.com/@d3/d3-lineradial)

Equivalent to [*line*.y](#line_y), except the accessor returns the radius: the distance from the origin ⟨0,0⟩.

<a name="lineRadial_defined" href="#lineRadial_defined">#</a> <i>lineRadial</i>.<b>defined</b>([<i>defined</i>])

Equivalent to [*line*.defined](#line_defined).

<a name="lineRadial_curve" href="#lineRadial_curve">#</a> <i>lineRadial</i>.<b>curve</b>([<i>curve</i>]) · [Source](https://github.com/d3/d3-shape/blob/main/src/lineRadial.js), [Examples](https://observablehq.com/@d3/d3-lineradial)

Equivalent to [*line*.curve](#line_curve). Note that [curveMonotoneX](#curveMonotoneX) or [curveMonotoneY](#curveMonotoneY) are not recommended for radial lines because they assume that the data is monotonic in *x* or *y*, which is typically untrue of radial lines.

<a name="lineRadial_context" href="#lineRadial_context">#</a> <i>lineRadial</i>.<b>context</b>([<i>context</i>])

Equivalent to [*line*.context](#line_context).

### Areas

[<img alt="Area Chart" width="295" height="154" src="./img/area.png">](https://observablehq.com/@d3/area-chart)[<img alt="Stacked Area Chart" width="295" height="154" src="./img/area-stacked.png">](https://observablehq.com/@d3/stacked-area-chart)[<img alt="Difference Chart" width="295" height="154" src="./img/area-difference.png">](https://observablehq.com/@d3/difference-chart)

The area generator produces an area, as in an area chart. An area is defined by two bounding [lines](#lines), either splines or polylines. Typically, the two lines share the same [*x*-values](#area_x) ([x0](#area_x0) = [x1](#area_x1)), differing only in *y*-value ([y0](#area_y0) and [y1](#area_y1)); most commonly, y0 is defined as a constant representing [zero](http://www.vox.com/2015/11/19/9758062/y-axis-zero-chart). The first line (the <i>topline</i>) is defined by x1 and y1 and is rendered first; the second line (the <i>baseline</i>) is defined by x0 and y0 and is rendered second, with the points in reverse order. With a [curveLinear](#curveLinear) [curve](#area_curve), this produces a clockwise polygon.

<a name="area" href="#area">#</a> d3.<b>area</b>([<i>x</i>][, <i>y0</i>][, <i>y1</i>]) · [Source](https://github.com/d3/d3-shape/blob/main/src/area.js)

Constructs a new area generator with the default settings. If *x*, *y0* or *y1* are specified, sets the corresponding accessors to the specified function or number and returns this area generator.

<a name="_area" href="#_area">#</a> <i>area</i>(<i>data</i>) · [Source](https://github.com/d3/d3-shape/blob/main/src/area.js)

Generates an area for the given array of *data*. Depending on this area generator’s associated [curve](#area_curve), the given input *data* may need to be sorted by *x*-value before being passed to the area generator. If the area generator has a [context](#line_context), then the area is rendered to this context as a sequence of [path method](http://www.w3.org/TR/2dcontext/#canvaspathmethods) calls and this function returns void. Otherwise, a [path data](http://www.w3.org/TR/SVG/paths.html#PathData) string is returned.

<a name="area_x" href="#area_x">#</a> <i>area</i>.<b>x</b>([<i>x</i>]) · [Source](https://github.com/d3/d3-shape/blob/main/src/area.js)

If *x* is specified, sets [x0](#area_x0) to *x* and [x1](#area_x1) to null and returns this area generator. If *x* is not specified, returns the current x0 accessor.

<a name="area_x0" href="#area_x0">#</a> <i>area</i>.<b>x0</b>([<i>x</i>]) · [Source](https://github.com/d3/d3-shape/blob/main/src/area.js)

If *x* is specified, sets the x0 accessor to the specified function or number and returns this area generator. If *x* is not specified, returns the current x0 accessor, which defaults to:

```js
function x(d) {
  return d[0];
}
```

When an area is [generated](#_area), the x0 accessor will be invoked for each [defined](#area_defined) element in the input data array, being passed the element `d`, the index `i`, and the array `data` as three arguments. The default x0 accessor assumes that the input data are two-element arrays of numbers. If your data are in a different format, or if you wish to transform the data before rendering, then you should specify a custom accessor. For example, if `x` is a [time scale](https://github.com/d3/d3-scale#time-scales) and `y` is a [linear scale](https://github.com/d3/d3-scale#linear-scales):

```js
const data = [
  {date: new Date(2007, 3, 24), value: 93.24},
  {date: new Date(2007, 3, 25), value: 95.35},
  {date: new Date(2007, 3, 26), value: 98.84},
  {date: new Date(2007, 3, 27), value: 99.92},
  {date: new Date(2007, 3, 30), value: 99.80},
  {date: new Date(2007, 4,  1), value: 99.47},
  …
];

const area = d3.area()
    .x(d => x(d.date))
    .y1(d => y(d.value))
    .y0(y(0));
```

<a name="area_x1" href="#area_x1">#</a> <i>area</i>.<b>x1</b>([<i>x</i>]) · [Source](https://github.com/d3/d3-shape/blob/main/src/area.js)

If *x* is specified, sets the x1 accessor to the specified function or number and returns this area generator. If *x* is not specified, returns the current x1 accessor, which defaults to null, indicating that the previously-computed [x0](#area_x0) value should be reused for the x1 value.

When an area is [generated](#_area), the x1 accessor will be invoked for each [defined](#area_defined) element in the input data array, being passed the element `d`, the index `i`, and the array `data` as three arguments. See [*area*.x0](#area_x0) for more information.

<a name="area_y" href="#area_y">#</a> <i>area</i>.<b>y</b>([<i>y</i>]) · [Source](https://github.com/d3/d3-shape/blob/main/src/area.js)

If *y* is specified, sets [y0](#area_y0) to *y* and [y1](#area_y1) to null and returns this area generator. If *y* is not specified, returns the current y0 accessor.

<a name="area_y0" href="#area_y0">#</a> <i>area</i>.<b>y0</b>([<i>y</i>]) · [Source](https://github.com/d3/d3-shape/blob/main/src/area.js)

If *y* is specified, sets the y0 accessor to the specified function or number and returns this area generator. If *y* is not specified, returns the current y0 accessor, which defaults to:

```js
function y() {
  return 0;
}
```

When an area is [generated](#_area), the y0 accessor will be invoked for each [defined](#area_defined) element in the input data array, being passed the element `d`, the index `i`, and the array `data` as three arguments. See [*area*.x0](#area_x0) for more information.

<a name="area_y1" href="#area_y1">#</a> <i>area</i>.<b>y1</b>([<i>y</i>]) · [Source](https://github.com/d3/d3-shape/blob/main/src/area.js)

If *y* is specified, sets the y1 accessor to the specified function or number and returns this area generator. If *y* is not specified, returns the current y1 accessor, which defaults to:

```js
function y(d) {
  return d[1];
}
```

A null accessor is also allowed, indicating that the previously-computed [y0](#area_y0) value should be reused for the y1 value. When an area is [generated](#_area), the y1 accessor will be invoked for each [defined](#area_defined) element in the input data array, being passed the element `d`, the index `i`, and the array `data` as three arguments. See [*area*.x0](#area_x0) for more information.

<a name="area_defined" href="#area_defined">#</a> <i>area</i>.<b>defined</b>([<i>defined</i>]) · [Source](https://github.com/d3/d3-shape/blob/main/src/area.js)

If *defined* is specified, sets the defined accessor to the specified function or boolean and returns this area generator. If *defined* is not specified, returns the current defined accessor, which defaults to:

```js
function defined() {
  return true;
}
```

The default accessor thus assumes that the input data is always defined. When an area is [generated](#_area), the defined accessor will be invoked for each element in the input data array, being passed the element `d`, the index `i`, and the array `data` as three arguments. If the given element is defined (*i.e.*, if the defined accessor returns a truthy value for this element), the [x0](#area_x0), [x1](#area_x1), [y0](#area_y0) and [y1](#area_y1) accessors will subsequently be evaluated and the point will be added to the current area segment. Otherwise, the element will be skipped, the current area segment will be ended, and a new area segment will be generated for the next defined point. As a result, the generated area may have several discrete segments. For example:

[<img src="./img/area-defined.png" width="480" height="250" alt="Area with Missing Data">](https://observablehq.com/@d3/area-with-missing-data)

Note that if an area segment consists of only a single point, it may appear invisible unless rendered with rounded or square [line caps](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-linecap). In addition, some curves such as [curveCardinalOpen](#curveCardinalOpen) only render a visible segment if it contains multiple points.

<a name="area_curve" href="#area_curve">#</a> <i>area</i>.<b>curve</b>([<i>curve</i>]) · [Source](https://github.com/d3/d3-shape/blob/main/src/area.js)

If *curve* is specified, sets the [curve factory](#curves) and returns this area generator. If *curve* is not specified, returns the current curve factory, which defaults to [curveLinear](#curveLinear).

<a name="area_context" href="#area_context">#</a> <i>area</i>.<b>context</b>([<i>context</i>]) · [Source](https://github.com/d3/d3-shape/blob/main/src/area.js)

If *context* is specified, sets the context and returns this area generator. If *context* is not specified, returns the current context, which defaults to null. If the context is not null, then the [generated area](#_area) is rendered to this context as a sequence of [path method](http://www.w3.org/TR/2dcontext/#canvaspathmethods) calls. Otherwise, a [path data](http://www.w3.org/TR/SVG/paths.html#PathData) string representing the generated area is returned.

<a name="area_digits" href="#area_digits">#</a> <i>area</i>.<b>digits</b>([<i>digits</i>]) · [Source](https://github.com/d3/d3-shape/blob/main/src/area.js)

If *digits* is specified, sets the maximum number of digits after the decimal separator and returns this area generator. If *digits* is not specified, returns the current maximum fraction digits, which defaults to 3. This option only applies when the associated [*context*](#area_context) is null, as when this area generator is used to produce [path data](http://www.w3.org/TR/SVG/paths.html#PathData).

<a name="area_lineX0" href="#area_lineX0">#</a> <i>area</i>.<b>lineX0</b>() · [Source](https://github.com/d3/d3-shape/blob/main/src/area.js)
<br><a name="area_lineY0" href="#area_lineY0">#</a> <i>area</i>.<b>lineY0</b>() · [Source](https://github.com/d3/d3-shape/blob/main/src/area.js)

Returns a new [line generator](#lines) that has this area generator’s current [defined accessor](#area_defined), [curve](#area_curve) and [context](#area_context). The line’s [*x*-accessor](#line_x) is this area’s [*x0*-accessor](#area_x0), and the line’s [*y*-accessor](#line_y) is this area’s [*y0*-accessor](#area_y0).

<a name="area_lineX1" href="#area_lineX1">#</a> <i>area</i>.<b>lineX1</b>() · [Source](https://github.com/d3/d3-shape/blob/main/src/area.js)

Returns a new [line generator](#lines) that has this area generator’s current [defined accessor](#area_defined), [curve](#area_curve) and [context](#area_context). The line’s [*x*-accessor](#line_x) is this area’s [*x1*-accessor](#area_x1), and the line’s [*y*-accessor](#line_y) is this area’s [*y0*-accessor](#area_y0).

<a name="area_lineY1" href="#area_lineY1">#</a> <i>area</i>.<b>lineY1</b>() · [Source](https://github.com/d3/d3-shape/blob/main/src/area.js)

Returns a new [line generator](#lines) that has this area generator’s current [defined accessor](#area_defined), [curve](#area_curve) and [context](#area_context). The line’s [*x*-accessor](#line_x) is this area’s [*x0*-accessor](#area_x0), and the line’s [*y*-accessor](#line_y) is this area’s [*y1*-accessor](#area_y1).

<a name="areaRadial" href="#areaRadial">#</a> d3.<b>areaRadial</b>() · [Source](https://github.com/d3/d3-shape/blob/main/src/areaRadial.js)

<img alt="Radial Area" width="250" height="250" src="./img/area-radial.png">

Constructs a new radial area generator with the default settings. A radial area generator is equivalent to the standard Cartesian [area generator](#area), except the [x](#area_x) and [y](#area_y) accessors are replaced with [angle](#areaRadial_angle) and [radius](#areaRadial_radius) accessors. Radial areas are always positioned relative to ⟨0,0⟩; use a transform (see: [SVG](http://www.w3.org/TR/SVG/coords.html#TransformAttribute), [Canvas](http://www.w3.org/TR/2dcontext/#transformations)) to change the origin.

<a name="_areaRadial" href="#_areaRadial">#</a> <i>areaRadial</i>(<i>data</i>)

Equivalent to [*area*](#_area).

<a name="areaRadial_angle" href="#areaRadial_angle">#</a> <i>areaRadial</i>.<b>angle</b>([<i>angle</i>]) · [Source](https://github.com/d3/d3-shape/blob/main/src/areaRadial.js)

Equivalent to [*area*.x](#area_x), except the accessor returns the angle in radians, with 0 at -*y* (12 o’clock).

<a name="areaRadial_startAngle" href="#areaRadial_startAngle">#</a> <i>areaRadial</i>.<b>startAngle</b>([<i>angle</i>]) · [Source](https://github.com/d3/d3-shape/blob/main/src/areaRadial.js)

Equivalent to [*area*.x0](#area_x0), except the accessor returns the angle in radians, with 0 at -*y* (12 o’clock). Note: typically [angle](#areaRadial_angle) is used instead of setting separate start and end angles.

<a name="areaRadial_endAngle" href="#areaRadial_endAngle">#</a> <i>areaRadial</i>.<b>endAngle</b>([<i>angle</i>]) · [Source](https://github.com/d3/d3-shape/blob/main/src/areaRadial.js)

Equivalent to [*area*.x1](#area_x1), except the accessor returns the angle in radians, with 0 at -*y* (12 o’clock). Note: typically [angle](#areaRadial_angle) is used instead of setting separate start and end angles.

<a name="areaRadial_radius" href="#areaRadial_radius">#</a> <i>areaRadial</i>.<b>radius</b>([<i>radius</i>]) · [Source](https://github.com/d3/d3-shape/blob/main/src/areaRadial.js)

Equivalent to [*area*.y](#area_y), except the accessor returns the radius: the distance from the origin ⟨0,0⟩.

<a name="areaRadial_innerRadius" href="#areaRadial_innerRadius">#</a> <i>areaRadial</i>.<b>innerRadius</b>([<i>radius</i>]) · [Source](https://github.com/d3/d3-shape/blob/main/src/areaRadial.js)

Equivalent to [*area*.y0](#area_y0), except the accessor returns the radius: the distance from the origin ⟨0,0⟩.

<a name="areaRadial_outerRadius" href="#areaRadial_outerRadius">#</a> <i>areaRadial</i>.<b>outerRadius</b>([<i>radius</i>]) · [Source](https://github.com/d3/d3-shape/blob/main/src/areaRadial.js)

Equivalent to [*area*.y1](#area_y1), except the accessor returns the radius: the distance from the origin ⟨0,0⟩.

<a name="areaRadial_defined" href="#areaRadial_defined">#</a> <i>areaRadial</i>.<b>defined</b>([<i>defined</i>])

Equivalent to [*area*.defined](#area_defined).

<a name="areaRadial_curve" href="#areaRadial_curve">#</a> <i>areaRadial</i>.<b>curve</b>([<i>curve</i>]) · [Source](https://github.com/d3/d3-shape/blob/main/src/areaRadial.js)

Equivalent to [*area*.curve](#area_curve). Note that [curveMonotoneX](#curveMonotoneX) or [curveMonotoneY](#curveMonotoneY) are not recommended for radial areas because they assume that the data is monotonic in *x* or *y*, which is typically untrue of radial areas.

<a name="areaRadial_context" href="#areaRadial_context">#</a> <i>areaRadial</i>.<b>context</b>([<i>context</i>])

Equivalent to [*line*.context](#line_context).

<a name="areaRadial_lineStartAngle" href="#areaRadial_lineStartAngle">#</a> <i>areaRadial</i>.<b>lineStartAngle</b>() · [Source](https://github.com/d3/d3-shape/blob/main/src/areaRadial.js)
<br><a name="areaRadial_lineInnerRadius" href="#areaRadial_lineInnerRadius">#</a> <i>areaRadial</i>.<b>lineInnerRadius</b>() · [Source](https://github.com/d3/d3-shape/blob/main/src/areaRadial.js)

Returns a new [radial line generator](#lineRadial) that has this radial area generator’s current [defined accessor](#areaRadial_defined), [curve](#areaRadial_curve) and [context](#areaRadial_context). The line’s [angle accessor](#lineRadial_angle) is this area’s [start angle accessor](#areaRadial_startAngle), and the line’s [radius accessor](#lineRadial_radius) is this area’s [inner radius accessor](#areaRadial_innerRadius).

<a name="areaRadial_lineEndAngle" href="#areaRadial_lineEndAngle">#</a> <i>areaRadial</i>.<b>lineEndAngle</b>() · [Source](https://github.com/d3/d3-shape/blob/main/src/areaRadial.js)

Returns a new [radial line generator](#lineRadial) that has this radial area generator’s current [defined accessor](#areaRadial_defined), [curve](#areaRadial_curve) and [context](#areaRadial_context). The line’s [angle accessor](#lineRadial_angle) is this area’s [end angle accessor](#areaRadial_endAngle), and the line’s [radius accessor](#lineRadial_radius) is this area’s [inner radius accessor](#areaRadial_innerRadius).

<a name="areaRadial_lineOuterRadius" href="#areaRadial_lineOuterRadius">#</a> <i>areaRadial</i>.<b>lineOuterRadius</b>() · [Source](https://github.com/d3/d3-shape/blob/main/src/areaRadial.js)

Returns a new [radial line generator](#lineRadial) that has this radial area generator’s current [defined accessor](#areaRadial_defined), [curve](#areaRadial_curve) and [context](#areaRadial_context). The line’s [angle accessor](#lineRadial_angle) is this area’s [start angle accessor](#areaRadial_startAngle), and the line’s [radius accessor](#lineRadial_radius) is this area’s [outer radius accessor](#areaRadial_outerRadius).

### Curves

While [lines](#lines) are defined as a sequence of two-dimensional [*x*, *y*] points, and [areas](#areas) are similarly defined by a topline and a baseline, there remains the task of transforming this discrete representation into a continuous shape: *i.e.*, how to interpolate between the points. A variety of curves are provided for this purpose.

Curves are typically not constructed or used directly, instead being passed to [*line*.curve](#line_curve) and [*area*.curve](#area_curve). For example:

```js
const line = d3.line(d => d.date, d => d.value)
    .curve(d3.curveCatmullRom.alpha(0.5));
```

<a name="curveBasis" href="#curveBasis">#</a> d3.<b>curveBasis</b>(<i>context</i>) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/basis.js)

<img src="./img/basis.png" width="888" height="240" alt="basis">

Produces a cubic [basis spline](https://en.wikipedia.org/wiki/B-spline) using the specified control points. The first and last points are triplicated such that the spline starts at the first point and ends at the last point, and is tangent to the line between the first and second points, and to the line between the penultimate and last points.

<a name="curveBasisClosed" href="#curveBasisClosed">#</a> d3.<b>curveBasisClosed</b>(<i>context</i>) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/basisClosed.js)

<img src="./img/basisClosed.png" width="888" height="240" alt="basisClosed">

Produces a closed cubic [basis spline](https://en.wikipedia.org/wiki/B-spline) using the specified control points. When a line segment ends, the first three control points are repeated, producing a closed loop with C2 continuity.

<a name="curveBasisOpen" href="#curveBasisOpen">#</a> d3.<b>curveBasisOpen</b>(<i>context</i>) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/basisOpen.js)

<img src="./img/basisOpen.png" width="888" height="240" alt="basisOpen">

Produces a cubic [basis spline](https://en.wikipedia.org/wiki/B-spline) using the specified control points. Unlike [basis](#basis), the first and last points are not repeated, and thus the curve typically does not intersect these points.

<a name="curveBumpX" href="#curveBumpX">#</a> d3.<b>curveBumpX</b>(<i>context</i>) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/bump.js)

<img src="./img/bumpX.png" width="888" height="240" alt="bumpX">

Produces a Bézier curve between each pair of points, with horizontal tangents at each point.

<a name="curveBumpY" href="#curveBumpY">#</a> d3.<b>curveBumpY</b>(<i>context</i>) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/bump.js)

<img src="./img/bumpY.png" width="888" height="240" alt="bumpY">

Produces a Bézier curve between each pair of points, with vertical tangents at each point.

<a name="curveBundle" href="#curveBundle">#</a> d3.<b>curveBundle</b>(<i>context</i>) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/bundle.js)

<img src="./img/bundle.png" width="888" height="240" alt="bundle">

Produces a straightened cubic [basis spline](https://en.wikipedia.org/wiki/B-spline) using the specified control points, with the spline straightened according to the curve’s [*beta*](#curveBundle_beta), which defaults to 0.85. This curve is typically used in [hierarchical edge bundling](https://observablehq.com/@d3/hierarchical-edge-bundling) to disambiguate connections, as proposed by [Danny Holten](https://www.win.tue.nl/vis1/home/dholten/) in [Hierarchical Edge Bundles: Visualization of Adjacency Relations in Hierarchical Data](https://www.win.tue.nl/vis1/home/dholten/papers/bundles_infovis.pdf). This curve does not implement [*curve*.areaStart](#curve_areaStart) and [*curve*.areaEnd](#curve_areaEnd); it is intended to work with [d3.line](#lines), not [d3.area](#areas).

<a name="curveBundle_beta" href="#curveBundle_beta">#</a> <i>bundle</i>.<b>beta</b>(<i>beta</i>) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/bundle.js)

Returns a bundle curve with the specified *beta* in the range [0, 1], representing the bundle strength. If *beta* equals zero, a straight line between the first and last point is produced; if *beta* equals one, a standard [basis](#basis) spline is produced. For example:

```js
const line = d3.line().curve(d3.curveBundle.beta(0.5));
```

<a name="curveCardinal" href="#curveCardinal">#</a> d3.<b>curveCardinal</b>(<i>context</i>) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/cardinal.js)

<img src="./img/cardinal.png" width="888" height="240" alt="cardinal">

Produces a cubic [cardinal spline](https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Cardinal_spline) using the specified control points, with one-sided differences used for the first and last piece. The default [tension](#curveCardinal_tension) is 0.

<a name="curveCardinalClosed" href="#curveCardinalClosed">#</a> d3.<b>curveCardinalClosed</b>(<i>context</i>) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/cardinalClosed.js)

<img src="./img/cardinalClosed.png" width="888" height="240" alt="cardinalClosed">

Produces a closed cubic [cardinal spline](https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Cardinal_spline) using the specified control points. When a line segment ends, the first three control points are repeated, producing a closed loop. The default [tension](#curveCardinal_tension) is 0.

<a name="curveCardinalOpen" href="#curveCardinalOpen">#</a> d3.<b>curveCardinalOpen</b>(<i>context</i>) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/cardinalOpen.js)

<img src="./img/cardinalOpen.png" width="888" height="240" alt="cardinalOpen">

Produces a cubic [cardinal spline](https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Cardinal_spline) using the specified control points. Unlike [curveCardinal](#curveCardinal), one-sided differences are not used for the first and last piece, and thus the curve starts at the second point and ends at the penultimate point. The default [tension](#curveCardinal_tension) is 0.

<a name="curveCardinal_tension" href="#curveCardinal_tension">#</a> <i>cardinal</i>.<b>tension</b>(<i>tension</i>) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/cardinalOpen.js)

Returns a cardinal curve with the specified *tension* in the range [0, 1]. The *tension* determines the length of the tangents: a *tension* of one yields all zero tangents, equivalent to [curveLinear](#curveLinear); a *tension* of zero produces a uniform [Catmull–Rom](#curveCatmullRom) spline. For example:

```js
const line = d3.line().curve(d3.curveCardinal.tension(0.5));
```

<a name="curveCatmullRom" href="#curveCatmullRom">#</a> d3.<b>curveCatmullRom</b>(<i>context</i>) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/catmullRom.js)

<img src="./img/catmullRom.png" width="888" height="240" alt="catmullRom">

Produces a cubic Catmull–Rom spline using the specified control points and the parameter [*alpha*](#curveCatmullRom_alpha), which defaults to 0.5, as proposed by Yuksel et al. in [On the Parameterization of Catmull–Rom Curves](http://www.cemyuksel.com/research/catmullrom_param/), with one-sided differences used for the first and last piece.

<a name="curveCatmullRomClosed" href="#curveCatmullRomClosed">#</a> d3.<b>curveCatmullRomClosed</b>(<i>context</i>) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/catmullRomClosed.js)

<img src="./img/catmullRomClosed.png" width="888" height="330" alt="catmullRomClosed">

Produces a closed cubic Catmull–Rom spline using the specified control points and the parameter [*alpha*](#curveCatmullRom_alpha), which defaults to 0.5, as proposed by Yuksel et al. When a line segment ends, the first three control points are repeated, producing a closed loop.

<a name="curveCatmullRomOpen" href="#curveCatmullRomOpen">#</a> d3.<b>curveCatmullRomOpen</b>(<i>context</i>) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/catmullRomOpen.js)

<img src="./img/catmullRomOpen.png" width="888" height="240" alt="catmullRomOpen">

Produces a cubic Catmull–Rom spline using the specified control points and the parameter [*alpha*](#curveCatmullRom_alpha), which defaults to 0.5, as proposed by Yuksel et al. Unlike [curveCatmullRom](#curveCatmullRom), one-sided differences are not used for the first and last piece, and thus the curve starts at the second point and ends at the penultimate point.

<a name="curveCatmullRom_alpha" href="#curveCatmullRom_alpha">#</a> <i>catmullRom</i>.<b>alpha</b>(<i>alpha</i>) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/catmullRom.js)

Returns a cubic Catmull–Rom curve with the specified *alpha* in the range [0, 1]. If *alpha* is zero, produces a uniform spline, equivalent to [curveCardinal](#curveCardinal) with a tension of zero; if *alpha* is one, produces a chordal spline; if *alpha* is 0.5, produces a [centripetal spline](https://en.wikipedia.org/wiki/Centripetal_Catmull–Rom_spline). Centripetal splines are recommended to avoid self-intersections and overshoot. For example:

```js
const line = d3.line().curve(d3.curveCatmullRom.alpha(0.5));
```

<a name="curveLinear" href="#curveLinear">#</a> d3.<b>curveLinear</b>(<i>context</i>) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/linear.js)

<img src="./img/linear.png" width="888" height="240" alt="linear">

Produces a polyline through the specified points.

<a name="curveLinearClosed" href="#curveLinearClosed">#</a> d3.<b>curveLinearClosed</b>(<i>context</i>) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/linearClosed.js)

<img src="./img/linearClosed.png" width="888" height="240" alt="linearClosed">

Produces a closed polyline through the specified points by repeating the first point when the line segment ends.

<a name="curveMonotoneX" href="#curveMonotoneX">#</a> d3.<b>curveMonotoneX</b>(<i>context</i>) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/monotone.js)

<img src="./img/monotoneX.png" width="888" height="240" alt="monotoneX">

Produces a cubic spline that [preserves monotonicity](https://en.wikipedia.org/wiki/Monotone_cubic_interpolation) in *y*, assuming monotonicity in *x*, as proposed by Steffen in [A simple method for monotonic interpolation in one dimension](http://adsabs.harvard.edu/full/1990A%26A...239..443S): “a smooth curve with continuous first-order derivatives that passes through any given set of data points without spurious oscillations. Local extrema can occur only at grid points where they are given by the data, but not in between two adjacent grid points.”

<a name="curveMonotoneY" href="#curveMonotoneY">#</a> d3.<b>curveMonotoneY</b>(<i>context</i>) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/monotone.js)

<img src="./img/monotoneY.png" width="888" height="240" alt="monotoneY">

Produces a cubic spline that [preserves monotonicity](https://en.wikipedia.org/wiki/Monotone_cubic_interpolation) in *x*, assuming monotonicity in *y*, as proposed by Steffen in [A simple method for monotonic interpolation in one dimension](http://adsabs.harvard.edu/full/1990A%26A...239..443S): “a smooth curve with continuous first-order derivatives that passes through any given set of data points without spurious oscillations. Local extrema can occur only at grid points where they are given by the data, but not in between two adjacent grid points.”

<a name="curveNatural" href="#curveNatural">#</a> d3.<b>curveNatural</b>(<i>context</i>) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/natural.js)

<img src="./img/natural.png" width="888" height="240" alt="natural">

Produces a [natural](https://en.wikipedia.org/wiki/Spline_interpolation) [cubic spline](http://mathworld.wolfram.com/CubicSpline.html) with the second derivative of the spline set to zero at the endpoints.

<a name="curveStep" href="#curveStep">#</a> d3.<b>curveStep</b>(<i>context</i>) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/step.js)

<img src="./img/step.png" width="888" height="240" alt="step">

Produces a piecewise constant function (a [step function](https://en.wikipedia.org/wiki/Step_function)) consisting of alternating horizontal and vertical lines. The *y*-value changes at the midpoint of each pair of adjacent *x*-values.

<a name="curveStepAfter" href="#curveStepAfter">#</a> d3.<b>curveStepAfter</b>(<i>context</i>) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/step.js)

<img src="./img/stepAfter.png" width="888" height="240" alt="stepAfter">

Produces a piecewise constant function (a [step function](https://en.wikipedia.org/wiki/Step_function)) consisting of alternating horizontal and vertical lines. The *y*-value changes after the *x*-value.

<a name="curveStepBefore" href="#curveStepBefore">#</a> d3.<b>curveStepBefore</b>(<i>context</i>) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/step.js)

<img src="./img/stepBefore.png" width="888" height="240" alt="stepBefore">

Produces a piecewise constant function (a [step function](https://en.wikipedia.org/wiki/Step_function)) consisting of alternating horizontal and vertical lines. The *y*-value changes before the *x*-value.

### Custom Curves

Curves are typically not used directly, instead being passed to [*line*.curve](#line_curve) and [*area*.curve](#area_curve). However, you can define your own curve implementation should none of the built-in curves satisfy your needs using the following interface. You can also use this low-level interface with a built-in curve type as an alternative to the line and area generators.

<a name="curve_areaStart" href="#curve_areaStart">#</a> <i>curve</i>.<b>areaStart</b>() · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/step.js#L7)

Indicates the start of a new area segment. Each area segment consists of exactly two [line segments](#curve_lineStart): the topline, followed by the baseline, with the baseline points in reverse order.

<a name="curve_areaEnd" href="#curve_areaEnd">#</a> <i>curve</i>.<b>areaEnd</b>() · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/step.js)

Indicates the end of the current area segment.

<a name="curve_lineStart" href="#curve_lineStart">#</a> <i>curve</i>.<b>lineStart</b>() · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/step.js)

Indicates the start of a new line segment. Zero or more [points](#curve_point) will follow.

<a name="curve_lineEnd" href="#curve_lineEnd">#</a> <i>curve</i>.<b>lineEnd</b>() · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/step.js)

Indicates the end of the current line segment.

<a name="curve_point" href="#curve_point">#</a> <i>curve</i>.<b>point</b>(<i>x</i>, <i>y</i>) · [Source](https://github.com/d3/d3-shape/blob/main/src/curve/step.js)

Indicates a new point in the current line segment with the given *x*- and *y*-values.

### Links

[<img alt="Tidy Tree" src="https://raw.githubusercontent.com/d3/d3-hierarchy/master/img/tree.png">](https://observablehq.com/@d3/tidy-tree)

The **link** shape generates a smooth cubic Bézier curve from a source point to a target point. The tangents of the curve at the start and end are either [vertical](#linkVertical), [horizontal](#linkHorizontal) or [radial](#linkRadial).

<a name="link" href="#link">#</a> d3.<b>link</b>(<i>curve</i>) · [Source](https://github.com/d3/d3-shape/blob/main/src/link.js)

Returns a new [link generator](#_link) using the specified <i>curve</i>. For example, to visualize [links](https://github.com/d3/d3-hierarchy/blob/master/README.md#node_links) in a [tree diagram](https://github.com/d3/d3-hierarchy/blob/master/README.md#tree) rooted on the top edge of the display, you might say:

```js
const link = d3.link(d3.curveBumpY)
    .x(d => d.x)
    .y(d => d.y);
```

<a name="linkVertical" href="#linkVertical">#</a> d3.<b>linkVertical</b>() · [Source](https://github.com/d3/d3-shape/blob/main/src/link.js)

Shorthand for [d3.link](#link) with [d3.curveBumpY](#curveBumpY); suitable for visualizing [links](https://github.com/d3/d3-hierarchy/blob/master/README.md#node_links) in a [tree diagram](https://github.com/d3/d3-hierarchy/blob/master/README.md#tree) rooted on the top edge of the display. Equivalent to:

```js
const link = d3.link(d3.curveBumpY);
```

<a name="linkHorizontal" href="#linkHorizontal">#</a> d3.<b>linkHorizontal</b>() · [Source](https://github.com/d3/d3-shape/blob/main/src/link.js)

Shorthand for [d3.link](#link) with [d3.curveBumpX](#curveBumpX); suitable for visualizing [links](https://github.com/d3/d3-hierarchy/blob/master/README.md#node_links) in a [tree diagram](https://github.com/d3/d3-hierarchy/blob/master/README.md#tree) rooted on the left edge of the display. Equivalent to:

```js
const link = d3.link(d3.curveBumpX);
```

<a href="#_link" name="_link">#</a> <i>link</i>(<i>arguments…</i>) · [Source](https://github.com/d3/d3-shape/blob/main/src/link.js)

Generates a link for the given *arguments*. The *arguments* are arbitrary; they are simply propagated to the link generator’s accessor functions along with the `this` object. For example, with the default settings, an object expected:

```js
link({
  source: [100, 100],
  target: [300, 300]
});
```

<a name="link_source" href="#link_source">#</a> <i>link</i>.<b>source</b>([<i>source</i>]) · [Source](https://github.com/d3/d3-shape/blob/main/src/link.js)

If *source* is specified, sets the source accessor to the specified function and returns this link generator. If *source* is not specified, returns the current source accessor, which defaults to:

```js
function source(d) {
  return d.source;
}
```

<a name="link_target" href="#link_target">#</a> <i>link</i>.<b>target</b>([<i>target</i>]) · [Source](https://github.com/d3/d3-shape/blob/main/src/link.js)

If *target* is specified, sets the target accessor to the specified function and returns this link generator. If *target* is not specified, returns the current target accessor, which defaults to:

```js
function target(d) {
  return d.target;
}
```

<a name="link_x" href="#link_x">#</a> <i>link</i>.<b>x</b>([<i>x</i>]) · [Source](https://github.com/d3/d3-shape/blob/main/src/link.js)

If *x* is specified, sets the *x*-accessor to the specified function or number and returns this link generator. If *x* is not specified, returns the current *x*-accessor, which defaults to:

```js
function x(d) {
  return d[0];
}
```

<a name="link_y" href="#link_y">#</a> <i>link</i>.<b>y</b>([<i>y</i>]) · [Source](https://github.com/d3/d3-shape/blob/main/src/link.js)

If *y* is specified, sets the *y*-accessor to the specified function or number and returns this link generator. If *y* is not specified, returns the current *y*-accessor, which defaults to:

```js
function y(d) {
  return d[1];
}
```

<a name="link_context" href="#link_context">#</a> <i>link</i>.<b>context</b>([<i>context</i>]) · [Source](https://github.com/d3/d3-shape/blob/main/src/link.js)

If *context* is specified, sets the context and returns this link generator. If *context* is not specified, returns the current context, which defaults to null. If the context is not null, then the [generated link](#_link) is rendered to this context as a sequence of [path method](http://www.w3.org/TR/2dcontext/#canvaspathmethods) calls. Otherwise, a [path data](http://www.w3.org/TR/SVG/paths.html#PathData) string representing the generated link is returned. See also [d3-path](https://github.com/d3/d3-path).

<a name="link_digits" href="#link_digits">#</a> <i>link</i>.<b>digits</b>([<i>digits</i>]) · [Source](https://github.com/d3/d3-shape/blob/main/src/link.js)

If *digits* is specified, sets the maximum number of digits after the decimal separator and returns this link generator. If *digits* is not specified, returns the current maximum fraction digits, which defaults to 3. This option only applies when the associated [*context*](#link_context) is null, as when this link generator is used to produce [path data](http://www.w3.org/TR/SVG/paths.html#PathData).

<a name="linkRadial" href="#linkRadial">#</a> d3.<b>linkRadial</b>() · [Source](https://github.com/d3/d3-shape/blob/main/src/link.js)

Returns a new [link generator](#_link) with radial tangents. For example, to visualize [links](https://github.com/d3/d3-hierarchy/blob/master/README.md#node_links) in a [tree diagram](https://github.com/d3/d3-hierarchy/blob/master/README.md#tree) rooted in the center of the display, you might say:

```js
const link = d3.linkRadial()
    .angle(d => d.x)
    .radius(d => d.y);
```

<a name="linkRadial_angle" href="#linkRadial_angle">#</a> <i>linkRadial</i>.<b>angle</b>([<i>angle</i>]) · [Source](https://github.com/d3/d3-shape/blob/main/src/link.js)

Equivalent to [*link*.x](#link_x), except the accessor returns the angle in radians, with 0 at -*y* (12 o’clock).

<a name="linkRadial_radius" href="#linkRadial_radius">#</a> <i>linkRadial</i>.<b>radius</b>([<i>radius</i>]) · [Source](https://github.com/d3/d3-shape/blob/main/src/link.js)

Equivalent to [*link*.y](#link_y), except the accessor returns the radius: the distance from the origin ⟨0,0⟩.

### Symbols

Symbols provide a categorical shape encoding as is commonly used in scatterplots. Symbols are always centered at ⟨0,0⟩; use a transform (see: [SVG](http://www.w3.org/TR/SVG/coords.html#TransformAttribute), [Canvas](http://www.w3.org/TR/2dcontext/#transformations)) to move the symbol to a different position.

<a name="symbol" href="#symbol">#</a> d3.<b>symbol</b>([<i>type</i>][, <i>size</i>]) · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol.js), [Examples](https://observablehq.com/@d3/fitted-symbols)

Constructs a new symbol generator of the specified [type](#symbol_type) and [size](#symbol_size). If not specified, *type* defaults to a circle, and *size* defaults to 64.

<a name="_symbol" href="#_symbol">#</a> <i>symbol</i>(<i>arguments</i>…) · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol.js)

Generates a symbol for the given *arguments*. The *arguments* are arbitrary; they are simply propagated to the symbol generator’s accessor functions along with the `this` object. For example, with the default settings, no arguments are needed to produce a circle with area 64 square pixels. If the symbol generator has a [context](#symbol_context), then the symbol is rendered to this context as a sequence of [path method](http://www.w3.org/TR/2dcontext/#canvaspathmethods) calls and this function returns void. Otherwise, a [path data](http://www.w3.org/TR/SVG/paths.html#PathData) string is returned.

<a name="symbol_type" href="#symbol_type">#</a> <i>symbol</i>.<b>type</b>([<i>type</i>]) · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol.js)

If *type* is specified, sets the symbol type to the specified function or symbol type and returns this symbol generator. If *type* is a function, the symbol generator’s arguments and *this* are passed through. (See [*selection*.attr](https://github.com/d3/d3-selection/blob/master/README.md#selection_attr) if you are using d3-selection.) If *type* is not specified, returns the current symbol type accessor, which defaults to:

```js
function type() {
  return circle;
}
```

See [symbolsFill](#symbolsFill) and [symbolsStroke](#symbolsStroke) for built-in symbol types. To implement a custom symbol type, pass an object that implements [*symbolType*.draw](#symbolType_draw).

<a name="symbol_size" href="#symbol_size">#</a> <i>symbol</i>.<b>size</b>([<i>size</i>]) · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol.js)

If *size* is specified, sets the size to the specified function or number and returns this symbol generator. If *size* is a function, the symbol generator’s arguments and *this* are passed through. (See [*selection*.attr](https://github.com/d3/d3-selection/blob/master/README.md#selection_attr) if you are using d3-selection.) If *size* is not specified, returns the current size accessor, which defaults to:

```js
function size() {
  return 64;
}
```

Specifying the size as a function is useful for constructing a scatterplot with a size encoding. If you wish to scale the symbol to fit a given bounding box, rather than by area, try [SVG’s getBBox](https://observablehq.com/d/1fac2626b9e1b65f).

<a name="symbol_context" href="#symbol_context">#</a> <i>symbol</i>.<b>context</b>([<i>context</i>]) · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol.js)

If *context* is specified, sets the context and returns this symbol generator. If *context* is not specified, returns the current context, which defaults to null. If the context is not null, then the [generated symbol](#_symbol) is rendered to this context as a sequence of [path method](http://www.w3.org/TR/2dcontext/#canvaspathmethods) calls. Otherwise, a [path data](http://www.w3.org/TR/SVG/paths.html#PathData) string representing the generated symbol is returned.

<a name="symbol_digits" href="#symbol_digits">#</a> <i>symbol</i>.<b>digits</b>([<i>digits</i>]) · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol.js)

If *digits* is specified, sets the maximum number of digits after the decimal separator and returns this symbol generator. If *digits* is not specified, returns the current maximum fraction digits, which defaults to 3. This option only applies when the associated [*context*](#symbol_context) is null, as when this symbol generator is used to produce [path data](http://www.w3.org/TR/SVG/paths.html#PathData).

<a name="symbolsFill" href="#symbolsFill">#</a> d3.<b>symbolsFill</b> · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol.js)

<a href="#symbolCircle"><img src="./img/circle.png" width="100" height="100"></a><a href="#symbolCross"><img src="./img/cross.png" width="100" height="100"></a><a href="#symbolDiamond"><img src="./img/diamond.png" width="100" height="100"></a><a href="#symbolSquare"><img src="./img/square.png" width="100" height="100"></a><a href="#symbolStar"><img src="./img/star.png" width="100" height="100"></a><a href="#symbolTriangle"><img src="./img/triangle.png" width="100" height="100"><a href="#symbolWye"><img src="./img/wye.png" width="100" height="100"></a>

An array containing a set of symbol types designed for filling: [circle](#symbolCircle), [cross](#symbolCross), [diamond](#symbolDiamond), [square](#symbolSquare), [star](#symbolStar), [triangle](#symbolTriangle), and [wye](#symbolWye). Useful for constructing the range of an [ordinal scale](https://github.com/d3/d3-scale#ordinal-scales) should you wish to use a shape encoding for categorical data.

<a name="symbolsStroke" href="#symbolsStroke">#</a> d3.<b>symbolsStroke</b> · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol.js)

An array containing a set of symbol types designed for stroking: [circle](#symbolCircle), [plus](#symbolPlus), [times](#symbolTimes), [triangle2](#symbolTriangle2), [asterisk](#symbolAsterisk), [square2](#symbolSquare2), and [diamond2](#symbolDiamond2). Useful for constructing the range of an [ordinal scale](https://github.com/d3/d3-scale#ordinal-scales) should you wish to use a shape encoding for categorical data.

<a name="symbolAsterisk" href="#symbolAsterisk">#</a> d3.<b>symbolAsterisk</b> · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol/asterisk.js)

The asterisk symbol type; intended for stroking.

<a name="symbolCircle" href="#symbolCircle">#</a> d3.<b>symbolCircle</b> · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol/circle.js)

The circle symbol type; intended for either filling or stroking.

<a name="symbolCross" href="#symbolCross">#</a> d3.<b>symbolCross</b> · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol/cross.js)

The Greek cross symbol type, with arms of equal length; intended for filling.

<a name="symbolDiamond" href="#symbolDiamond">#</a> d3.<b>symbolDiamond</b> · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol/diamond.js)

The rhombus symbol type; intended for filling.

<a name="symbolDiamond2" href="#symbolDiamond2">#</a> d3.<b>symbolDiamond2</b> · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol/diamond.js)

The rotated square symbol type; intended for stroking.

<a name="symbolPlus" href="#symbolPlus">#</a> d3.<b>symbolPlus</b> · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol/plus.js)

The plus symbol type; intended for stroking.

<a name="symbolSquare" href="#symbolSquare">#</a> d3.<b>symbolSquare</b> · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol/square.js)

The square symbol type; intended for filling.

<a name="symbolSquare2" href="#symbolSquare2">#</a> d3.<b>symbolSquare2</b> · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol/square2.js)

The square2 symbol type; intended for stroking.

<a name="symbolStar" href="#symbolStar">#</a> d3.<b>symbolStar</b> · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol/star.js)

The pentagonal star (pentagram) symbol type; intended for filling.

<a name="symbolTriangle" href="#symbolTriangle">#</a> d3.<b>symbolTriangle</b> · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol/triangle.js)

The up-pointing triangle symbol type; intended for filling.

<a name="symbolTriangle2" href="#symbolTriangle2">#</a> d3.<b>symbolTriangle2</b> · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol/triangle2.js)

The up-pointing triangle symbol type; intended for stroking.

<a name="symbolWye" href="#symbolWye">#</a> d3.<b>symbolWye</b> · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol/wye.js)

The Y-shape symbol type; intended for filling.

<a name="symbolTimes" href="#symbolTimes">#</a> d3.<b>symbolTimes</b> · [Source](https://github.com/d3/d3-shape/blob/main/src/symbol/times.js)

The X-shape symbol type; intended for stroking.

<a name="pointRadial" href="#pointRadial">#</a> d3.<b>pointRadial</b>(<i>angle</i>, <i>radius</i>) · [Source](https://github.com/d3/d3-shape/blob/main/src/pointRadial.js), [Examples](https://observablehq.com/@d3/radial-area-chart)

Returns the point [<i>x</i>, <i>y</i>] for the given *angle* in radians, with 0 at -*y* (12 o’clock) and positive angles proceeding clockwise, and the given *radius*.

### Custom Symbol Types

Symbol types are typically not used directly, instead being passed to [*symbol*.type](#symbol_type). However, you can define your own symbol type implementation should none of the built-in types satisfy your needs using the following interface. You can also use this low-level interface with a built-in symbol type as an alternative to the symbol generator.

<a name="symbolType_draw" href="#symbolType_draw">#</a> <i>symbolType</i>.<b>draw</b>(<i>context</i>, <i>size</i>)

Renders this symbol type to the specified *context* with the specified *size* in square pixels. The *context* implements the [CanvasPathMethods](http://www.w3.org/TR/2dcontext/#canvaspathmethods) interface. (Note that this is a subset of the CanvasRenderingContext2D interface!)

### Stacks

[<img alt="Stacked Bar Chart" src="./img/stacked-bar.png" width="295" height="154">](https://observablehq.com/@d3/stacked-bar-chart)[<img alt="Streamgraph" src="./img/stacked-stream.png" width="295" height="154">](https://observablehq.com/@mbostock/streamgraph-transitions)

Some shape types can be stacked, placing one shape adjacent to another. For example, a bar chart of monthly sales might be broken down into a multi-series bar chart by product category, stacking bars vertically. This is equivalent to subdividing a bar chart by an ordinal dimension (such as product category) and applying a color encoding.

Stacked charts can show overall value and per-category value simultaneously; however, it is typically harder to compare across categories, as only the bottom layer of the stack is aligned. So, chose the [stack order](#stack_order) carefully, and consider a [streamgraph](#stackOffsetWiggle). (See also [grouped charts](https://observablehq.com/@d3/grouped-bar-chart).)

Like the [pie generator](#pies), the stack generator does not produce a shape directly. Instead it computes positions which you can then pass to an [area generator](#areas) or use directly, say to position bars.

<a name="stack" href="#stack">#</a> d3.<b>stack</b>() · [Source](https://github.com/d3/d3-shape/blob/main/src/stack.js)

Constructs a new stack generator with the default settings.

<a name="_stack" href="#_stack">#</a> <i>stack</i>(<i>data</i>[, <i>arguments…</i>]) · [Source](https://github.com/d3/d3-shape/blob/main/src/stack.js)

Generates a stack for the given array of *data*, returning an array representing each series. Any additional *arguments* are arbitrary; they are simply propagated to accessors along with the `this` object.

The series are determined by the [keys accessor](#stack_keys); each series *i* in the returned array corresponds to the *i*th key. Each series is an array of points, where each point *j* corresponds to the *j*th element in the input *data*. Lastly, each point is represented as an array [*y0*, *y1*] where *y0* is the lower value (baseline) and *y1* is the upper value (topline); the difference between *y0* and *y1* corresponds to the computed [value](#stack_value) for this point. The key for each series is available as *series*.key, and the [index](#stack_order) as *series*.index. The input data element for each point is available as *point*.data.

For example, consider the following table representing monthly sales of fruits:

Month   | Apples | Bananas | Cherries | Durians
--------|--------|---------|----------|---------
 1/2015 |   3840 |    1920 |      960 |     400
 2/2015 |   1600 |    1440 |      960 |     400
 3/2015 |    640 |     960 |      640 |     400
 4/2015 |    320 |     480 |      640 |     400

This might be represented in JavaScript as an array of objects:

```js
const data = [
  {month: new Date(2015, 0, 1), apples: 3840, bananas: 1920, cherries: 960, durians: 400},
  {month: new Date(2015, 1, 1), apples: 1600, bananas: 1440, cherries: 960, durians: 400},
  {month: new Date(2015, 2, 1), apples:  640, bananas:  960, cherries: 640, durians: 400},
  {month: new Date(2015, 3, 1), apples:  320, bananas:  480, cherries: 640, durians: 400}
];
```

To produce a stack for this data:

```js
const stack = d3.stack()
    .keys(["apples", "bananas", "cherries", "durians"])
    .order(d3.stackOrderNone)
    .offset(d3.stackOffsetNone);

const series = stack(data);
```

The resulting array has one element per *series*. Each series has one point per month, and each point has a lower and upper value defining the baseline and topline:

```js
[
  [[   0, 3840], [   0, 1600], [   0,  640], [   0,  320]], // apples
  [[3840, 5760], [1600, 3040], [ 640, 1600], [ 320,  800]], // bananas
  [[5760, 6720], [3040, 4000], [1600, 2240], [ 800, 1440]], // cherries
  [[6720, 7120], [4000, 4400], [2240, 2640], [1440, 1840]], // durians
]
```

Each series in then typically passed to an [area generator](#areas) to render an area chart, or used to construct rectangles for a bar chart.

<a name="stack_keys" href="#stack_keys">#</a> <i>stack</i>.<b>keys</b>([<i>keys</i>]) · [Source](https://github.com/d3/d3-shape/blob/main/src/stack.js)

If *keys* is specified, sets the keys accessor to the specified function or array and returns this stack generator. If *keys* is not specified, returns the current keys accessor, which defaults to the empty array. A series (layer) is [generated](#_stack) for each key. Keys are typically strings, but they may be arbitrary values. The series’ key is passed to the [value accessor](#stack_value), along with each data point, to compute the point’s value.

<a name="stack_value" href="#stack_value">#</a> <i>stack</i>.<b>value</b>([<i>value</i>]) · [Source](https://github.com/d3/d3-shape/blob/main/src/stack.js)

If *value* is specified, sets the value accessor to the specified function or number and returns this stack generator. If *value* is not specified, returns the current value accessor, which defaults to:

```js
function value(d, key) {
  return d[key];
}
```

Thus, by default the stack generator assumes that the input data is an array of objects, with each object exposing named properties with numeric values; see [*stack*](#_stack) for an example.

<a name="stack_order" href="#stack_order">#</a> <i>stack</i>.<b>order</b>([<i>order</i>]) · [Source](https://github.com/d3/d3-shape/blob/main/src/stack.js)

If *order* is specified, sets the order accessor to the specified function or array and returns this stack generator. If *order* is not specified, returns the current order accessor, which defaults to [stackOrderNone](#stackOrderNone); this uses the order given by the [key accessor](#stack_key). See [stack orders](#stack-orders) for the built-in orders.

If *order* is a function, it is passed the generated series array and must return an array of numeric indexes representing the stack order. For example, the default order is defined as:

```js
function orderNone(series) {
  let n = series.length;
  const o = new Array(n);
  while (--n >= 0) o[n] = n;
  return o;
}
```

The stack order is computed prior to the [offset](#stack_offset); thus, the lower value for all points is zero at the time the order is computed. The index attribute for each series is also not set until after the order is computed.

<a name="stack_offset" href="#stack_offset">#</a> <i>stack</i>.<b>offset</b>([<i>offset</i>]) · [Source](https://github.com/d3/d3-shape/blob/main/src/stack.js)

If *offset* is specified, sets the offset accessor to the specified function and returns this stack generator. If *offset* is not specified, returns the current offset acccesor, which defaults to [stackOffsetNone](#stackOffsetNone); this uses a zero baseline. See [stack offsets](#stack-offsets) for the built-in offsets.

The offset function is passed the generated series array and the order index array; it is then responsible for updating the lower and upper values in the series array. For example, the default offset is defined as:

```js
function offsetNone(series, order) {
  if (!((n = series.length) > 1)) return;
  for (let i = 1, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i) {
    s0 = s1, s1 = series[order[i]];
    for (let j = 0; j < m; ++j) {
      s1[j][1] += s1[j][0] = s0[j][1];
    }
  }
}
```

### Stack Orders

Stack orders are typically not used directly, but are instead passed to [*stack*.order](#stack_order).

<a name="stackOrderAppearance" href="#stackOrderAppearance">#</a> d3.<b>stackOrderAppearance</b>(<i>series</i>) · [Source](https://github.com/d3/d3-shape/blob/main/src/order/appearance.js)

Returns a series order such that the earliest series (according to the maximum value) is at the bottom.

<a name="stackOrderAscending" href="#stackOrderAscending">#</a> d3.<b>stackOrderAscending</b>(<i>series</i>) · [Source](https://github.com/d3/d3-shape/blob/main/src/order/ascending.js)

Returns a series order such that the smallest series (according to the sum of values) is at the bottom.

<a name="stackOrderDescending" href="#stackOrderDescending">#</a> d3.<b>stackOrderDescending</b>(<i>series</i>) · [Source](https://github.com/d3/d3-shape/blob/main/src/order/descending.js)

Returns a series order such that the largest series (according to the sum of values) is at the bottom.

<a name="stackOrderInsideOut" href="#stackOrderInsideOut">#</a> d3.<b>stackOrderInsideOut</b>(<i>series</i>) · [Source](https://github.com/d3/d3-shape/blob/main/src/order/insideOut.js)

Returns a series order such that the earliest series (according to the maximum value) are on the inside and the later series are on the outside. This order is recommended for streamgraphs in conjunction with the [wiggle offset](#stackOffsetWiggle). See [Stacked Graphs—Geometry & Aesthetics](http://leebyron.com/streamgraph/) by Byron & Wattenberg for more information.

<a name="stackOrderNone" href="#stackOrderNone">#</a> d3.<b>stackOrderNone</b>(<i>series</i>) · [Source](https://github.com/d3/d3-shape/blob/main/src/order/none.js)

Returns the given series order [0, 1, … *n* - 1] where *n* is the number of elements in *series*. Thus, the stack order is given by the [key accessor](#stack_keys).

<a name="stackOrderReverse" href="#stackOrderReverse">#</a> d3.<b>stackOrderReverse</b>(<i>series</i>) · [Source](https://github.com/d3/d3-shape/blob/main/src/order/reverse.js)

Returns the reverse of the given series order [*n* - 1, *n* - 2, … 0] where *n* is the number of elements in *series*. Thus, the stack order is given by the reverse of the [key accessor](#stack_keys).

### Stack Offsets

Stack offsets are typically not used directly, but are instead passed to [*stack*.offset](#stack_offset).

<a name="stackOffsetExpand" href="#stackOffsetExpand">#</a> d3.<b>stackOffsetExpand</b>(<i>series</i>, <i>order</i>) · [Source](https://github.com/d3/d3-shape/blob/main/src/offset/expand.js)

Applies a zero baseline and normalizes the values for each point such that the topline is always one.

<a name="stackOffsetDiverging" href="#stackOffsetDiverging">#</a> d3.<b>stackOffsetDiverging</b>(<i>series</i>, <i>order</i>) · [Source](https://github.com/d3/d3-shape/blob/main/src/offset/diverging.js)

Positive values are stacked above zero, negative values are [stacked below zero](https://observablehq.com/@d3/diverging-stacked-bar-chart), and zero values are stacked at zero.

<a name="stackOffsetNone" href="#stackOffsetNone">#</a> d3.<b>stackOffsetNone</b>(<i>series</i>, <i>order</i>) · [Source](https://github.com/d3/d3-shape/blob/main/src/offset/none.js)

Applies a zero baseline.

<a name="stackOffsetSilhouette" href="#stackOffsetSilhouette">#</a> d3.<b>stackOffsetSilhouette</b>(<i>series</i>, <i>order</i>) · [Source](https://github.com/d3/d3-shape/blob/main/src/offset/silhouette.js)

Shifts the baseline down such that the center of the streamgraph is always at zero.

<a name="stackOffsetWiggle" href="#stackOffsetWiggle">#</a> d3.<b>stackOffsetWiggle</b>(<i>series</i>, <i>order</i>) · [Source](https://github.com/d3/d3-shape/blob/main/src/offset/wiggle.js)

Shifts the baseline so as to minimize the weighted wiggle of layers. This offset is recommended for streamgraphs in conjunction with the [inside-out order](#stackOrderInsideOut). See [Stacked Graphs—Geometry & Aesthetics](http://leebyron.com/streamgraph/) by Bryon & Wattenberg for more information.

----------------------------------------
File: ./animations/node_modules/d3-shape/src/order/reverse.js
----------------------------------------
import none from "./none.js";

export default function(series) {
  return none(series).reverse();
}

----------------------------------------
File: ./animations/node_modules/d3-shape/src/order/none.js
----------------------------------------
export default function(series) {
  var n = series.length, o = new Array(n);
  while (--n >= 0) o[n] = n;
  return o;
}

----------------------------------------
File: ./animations/node_modules/d3-shape/src/order/descending.js
----------------------------------------
import ascending from "./ascending.js";

export default function(series) {
  return ascending(series).reverse();
}

----------------------------------------
File: ./animations/node_modules/d3-shape/src/order/insideOut.js
----------------------------------------
import appearance from "./appearance.js";
import {sum} from "./ascending.js";

export default function(series) {
  var n = series.length,
      i,
      j,
      sums = series.map(sum),
      order = appearance(series),
      top = 0,
      bottom = 0,
      tops = [],
      bottoms = [];

  for (i = 0; i < n; ++i) {
    j = order[i];
    if (top < bottom) {
      top += sums[j];
      tops.push(j);
    } else {
      bottom += sums[j];
      bottoms.push(j);
    }
  }

  return bottoms.reverse().concat(tops);
}

----------------------------------------
File: ./animations/node_modules/d3-shape/src/order/ascending.js
----------------------------------------
import none from "./none.js";

export default function(series) {
  var sums = series.map(sum);
  return none(series).sort(function(a, b) { return sums[a] - sums[b]; });
}

export function sum(series) {
  var s = 0, i = -1, n = series.length, v;
  while (++i < n) if (v = +series[i][1]) s += v;
  return s;
}

----------------------------------------
File: ./animations/node_modules/d3-shape/src/order/appearance.js
----------------------------------------
import none from "./none.js";

export default function(series) {
  var peaks = series.map(peak);
  return none(series).sort(function(a, b) { return peaks[a] - peaks[b]; });
}

function peak(series) {
  var i = -1, j = 0, n = series.length, vi, vj = -Infinity;
  while (++i < n) if ((vi = +series[i][1]) > vj) vj = vi, j = i;
  return j;
}

----------------------------------------
File: ./animations/node_modules/d3-shape/src/line.js
----------------------------------------
import array from "./array.js";
import constant from "./constant.js";
import curveLinear from "./curve/linear.js";
import {withPath} from "./path.js";
import {x as pointX, y as pointY} from "./point.js";

export default function(x, y) {
  var defined = constant(true),
      context = null,
      curve = curveLinear,
      output = null,
      path = withPath(line);

  x = typeof x === "function" ? x : (x === undefined) ? pointX : constant(x);
  y = typeof y === "function" ? y : (y === undefined) ? pointY : constant(y);

  function line(data) {
    var i,
        n = (data = array(data)).length,
        d,
        defined0 = false,
        buffer;

    if (context == null) output = curve(buffer = path());

    for (i = 0; i <= n; ++i) {
      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
        if (defined0 = !defined0) output.lineStart();
        else output.lineEnd();
      }
      if (defined0) output.point(+x(d, i, data), +y(d, i, data));
    }

    if (buffer) return output = null, buffer + "" || null;
  }

  line.x = function(_) {
    return arguments.length ? (x = typeof _ === "function" ? _ : constant(+_), line) : x;
  };

  line.y = function(_) {
    return arguments.length ? (y = typeof _ === "function" ? _ : constant(+_), line) : y;
  };

  line.defined = function(_) {
    return arguments.length ? (defined = typeof _ === "function" ? _ : constant(!!_), line) : defined;
  };

  line.curve = function(_) {
    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
  };

  line.context = function(_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
  };

  return line;
}

----------------------------------------
File: ./animations/node_modules/d3-shape/src/pie.js
----------------------------------------
import array from "./array.js";
import constant from "./constant.js";
import descending from "./descending.js";
import identity from "./identity.js";
import {tau} from "./math.js";

export default function() {
  var value = identity,
      sortValues = descending,
      sort = null,
      startAngle = constant(0),
      endAngle = constant(tau),
      padAngle = constant(0);

  function pie(data) {
    var i,
        n = (data = array(data)).length,
        j,
        k,
        sum = 0,
        index = new Array(n),
        arcs = new Array(n),
        a0 = +startAngle.apply(this, arguments),
        da = Math.min(tau, Math.max(-tau, endAngle.apply(this, arguments) - a0)),
        a1,
        p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)),
        pa = p * (da < 0 ? -1 : 1),
        v;

    for (i = 0; i < n; ++i) {
      if ((v = arcs[index[i] = i] = +value(data[i], i, data)) > 0) {
        sum += v;
      }
    }

    // Optionally sort the arcs by previously-computed values or by data.
    if (sortValues != null) index.sort(function(i, j) { return sortValues(arcs[i], arcs[j]); });
    else if (sort != null) index.sort(function(i, j) { return sort(data[i], data[j]); });

    // Compute the arcs! They are stored in the original data's order.
    for (i = 0, k = sum ? (da - n * pa) / sum : 0; i < n; ++i, a0 = a1) {
      j = index[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k : 0) + pa, arcs[j] = {
        data: data[j],
        index: i,
        value: v,
        startAngle: a0,
        endAngle: a1,
        padAngle: p
      };
    }

    return arcs;
  }

  pie.value = function(_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : constant(+_), pie) : value;
  };

  pie.sortValues = function(_) {
    return arguments.length ? (sortValues = _, sort = null, pie) : sortValues;
  };

  pie.sort = function(_) {
    return arguments.length ? (sort = _, sortValues = null, pie) : sort;
  };

  pie.startAngle = function(_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant(+_), pie) : startAngle;
  };

  pie.endAngle = function(_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant(+_), pie) : endAngle;
  };

  pie.padAngle = function(_) {
    return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant(+_), pie) : padAngle;
  };

  return pie;
}

----------------------------------------
File: ./animations/node_modules/d3-shape/src/symbol.js
----------------------------------------
import constant from "./constant.js";
import {withPath} from "./path.js";
import asterisk from "./symbol/asterisk.js";
import circle from "./symbol/circle.js";
import cross from "./symbol/cross.js";
import diamond from "./symbol/diamond.js";
import diamond2 from "./symbol/diamond2.js";
import plus from "./symbol/plus.js";
import square from "./symbol/square.js";
import square2 from "./symbol/square2.js";
import star from "./symbol/star.js";
import triangle from "./symbol/triangle.js";
import triangle2 from "./symbol/triangle2.js";
import wye from "./symbol/wye.js";
import times from "./symbol/times.js";

// These symbols are designed to be filled.
export const symbolsFill = [
  circle,
  cross,
  diamond,
  square,
  star,
  triangle,
  wye
];

// These symbols are designed to be stroked (with a width of 1.5px and round caps).
export const symbolsStroke = [
  circle,
  plus,
  times,
  triangle2,
  asterisk,
  square2,
  diamond2
];

export default function Symbol(type, size) {
  let context = null,
      path = withPath(symbol);

  type = typeof type === "function" ? type : constant(type || circle);
  size = typeof size === "function" ? size : constant(size === undefined ? 64 : +size);

  function symbol() {
    let buffer;
    if (!context) context = buffer = path();
    type.apply(this, arguments).draw(context, +size.apply(this, arguments));
    if (buffer) return context = null, buffer + "" || null;
  }

  symbol.type = function(_) {
    return arguments.length ? (type = typeof _ === "function" ? _ : constant(_), symbol) : type;
  };

  symbol.size = function(_) {
    return arguments.length ? (size = typeof _ === "function" ? _ : constant(+_), symbol) : size;
  };

  symbol.context = function(_) {
    return arguments.length ? (context = _ == null ? null : _, symbol) : context;
  };

  return symbol;
}

----------------------------------------
File: ./animations/node_modules/d3-shape/src/link.js
----------------------------------------
import {slice} from "./array.js";
import constant from "./constant.js";
import {bumpX, bumpY, bumpRadial} from "./curve/bump.js";
import {withPath} from "./path.js";
import {x as pointX, y as pointY} from "./point.js";

function linkSource(d) {
  return d.source;
}

function linkTarget(d) {
  return d.target;
}

export function link(curve) {
  let source = linkSource,
      target = linkTarget,
      x = pointX,
      y = pointY,
      context = null,
      output = null,
      path = withPath(link);

  function link() {
    let buffer;
    const argv = slice.call(arguments);
    const s = source.apply(this, argv);
    const t = target.apply(this, argv);
    if (context == null) output = curve(buffer = path());
    output.lineStart();
    argv[0] = s, output.point(+x.apply(this, argv), +y.apply(this, argv));
    argv[0] = t, output.point(+x.apply(this, argv), +y.apply(this, argv));
    output.lineEnd();
    if (buffer) return output = null, buffer + "" || null;
  }

  link.source = function(_) {
    return arguments.length ? (source = _, link) : source;
  };

  link.target = function(_) {
    return arguments.length ? (target = _, link) : target;
  };

  link.x = function(_) {
    return arguments.length ? (x = typeof _ === "function" ? _ : constant(+_), link) : x;
  };

  link.y = function(_) {
    return arguments.length ? (y = typeof _ === "function" ? _ : constant(+_), link) : y;
  };

  link.context = function(_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), link) : context;
  };

  return link;
}

export function linkHorizontal() {
  return link(bumpX);
}

export function linkVertical() {
  return link(bumpY);
}

export function linkRadial() {
  const l = link(bumpRadial);
  l.angle = l.x, delete l.x;
  l.radius = l.y, delete l.y;
  return l;
}

----------------------------------------
File: ./animations/node_modules/d3-shape/src/curve/linearClosed.js
----------------------------------------
import noop from "../noop.js";

function LinearClosed(context) {
  this._context = context;
}

LinearClosed.prototype = {
  areaStart: noop,
  areaEnd: noop,
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._point) this._context.closePath();
  },
  point: function(x, y) {
    x = +x, y = +y;
    if (this._point) this._context.lineTo(x, y);
    else this._point = 1, this._context.moveTo(x, y);
  }
};

export default function(context) {
  return new LinearClosed(context);
}

----------------------------------------
File: ./animations/node_modules/d3-shape/src/curve/radial.js
----------------------------------------
import curveLinear from "./linear.js";

export var curveRadialLinear = curveRadial(curveLinear);

function Radial(curve) {
  this._curve = curve;
}

Radial.prototype = {
  areaStart: function() {
    this._curve.areaStart();
  },
  areaEnd: function() {
    this._curve.areaEnd();
  },
  lineStart: function() {
    this._curve.lineStart();
  },
  lineEnd: function() {
    this._curve.lineEnd();
  },
  point: function(a, r) {
    this._curve.point(r * Math.sin(a), r * -Math.cos(a));
  }
};

export default function curveRadial(curve) {

  function radial(context) {
    return new Radial(curve(context));
  }

  radial._curve = curve;

  return radial;
}

----------------------------------------
File: ./animations/node_modules/d3-shape/src/curve/basisOpen.js
----------------------------------------
import {point} from "./basis.js";

function BasisOpen(context) {
  this._context = context;
}

BasisOpen.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 =
    this._y0 = this._y1 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: this._point = 1; break;
      case 1: this._point = 2; break;
      case 2: this._point = 3; var x0 = (this._x0 + 4 * this._x1 + x) / 6, y0 = (this._y0 + 4 * this._y1 + y) / 6; this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0); break;
      case 3: this._point = 4; // falls through
      default: point(this, x, y); break;
    }
    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
  }
};

export default function(context) {
  return new BasisOpen(context);
}

----------------------------------------
File: ./animations/node_modules/d3-shape/src/curve/linear.js
----------------------------------------
function Linear(context) {
  this._context = context;
}

Linear.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
      case 1: this._point = 2; // falls through
      default: this._context.lineTo(x, y); break;
    }
  }
};

export default function(context) {
  return new Linear(context);
}

----------------------------------------
File: ./animations/node_modules/d3-shape/src/curve/catmullRom.js
----------------------------------------
import {epsilon} from "../math.js";
import {Cardinal} from "./cardinal.js";

export function point(that, x, y) {
  var x1 = that._x1,
      y1 = that._y1,
      x2 = that._x2,
      y2 = that._y2;

  if (that._l01_a > epsilon) {
    var a = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a,
        n = 3 * that._l01_a * (that._l01_a + that._l12_a);
    x1 = (x1 * a - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;
    y1 = (y1 * a - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;
  }

  if (that._l23_a > epsilon) {
    var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a,
        m = 3 * that._l23_a * (that._l23_a + that._l12_a);
    x2 = (x2 * b + that._x1 * that._l23_2a - x * that._l12_2a) / m;
    y2 = (y2 * b + that._y1 * that._l23_2a - y * that._l12_2a) / m;
  }

  that._context.bezierCurveTo(x1, y1, x2, y2, that._x2, that._y2);
}

function CatmullRom(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}

CatmullRom.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 =
    this._y0 = this._y1 = this._y2 = NaN;
    this._l01_a = this._l12_a = this._l23_a =
    this._l01_2a = this._l12_2a = this._l23_2a =
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 2: this._context.lineTo(this._x2, this._y2); break;
      case 3: this.point(this._x2, this._y2); break;
    }
    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x, y) {
    x = +x, y = +y;

    if (this._point) {
      var x23 = this._x2 - x,
          y23 = this._y2 - y;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }

    switch (this._point) {
      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
      case 1: this._point = 2; break;
      case 2: this._point = 3; // falls through
      default: point(this, x, y); break;
    }

    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

export default (function custom(alpha) {

  function catmullRom(context) {
    return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);
  }

  catmullRom.alpha = function(alpha) {
    return custom(+alpha);
  };

  return catmullRom;
})(0.5);

----------------------------------------
File: ./animations/node_modules/d3-shape/src/curve/cardinalClosed.js
----------------------------------------
import noop from "../noop.js";
import {point} from "./cardinal.js";

export function CardinalClosed(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}

CardinalClosed.prototype = {
  areaStart: noop,
  areaEnd: noop,
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =
    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 1: {
        this._context.moveTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 2: {
        this._context.lineTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 3: {
        this.point(this._x3, this._y3);
        this.point(this._x4, this._y4);
        this.point(this._x5, this._y5);
        break;
      }
    }
  },
  point: function(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: this._point = 1; this._x3 = x, this._y3 = y; break;
      case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;
      case 2: this._point = 3; this._x5 = x, this._y5 = y; break;
      default: point(this, x, y); break;
    }
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

export default (function custom(tension) {

  function cardinal(context) {
    return new CardinalClosed(context, tension);
  }

  cardinal.tension = function(tension) {
    return custom(+tension);
  };

  return cardinal;
})(0);

----------------------------------------
File: ./animations/node_modules/d3-shape/src/curve/bundle.js
----------------------------------------
import {Basis} from "./basis.js";

function Bundle(context, beta) {
  this._basis = new Basis(context);
  this._beta = beta;
}

Bundle.prototype = {
  lineStart: function() {
    this._x = [];
    this._y = [];
    this._basis.lineStart();
  },
  lineEnd: function() {
    var x = this._x,
        y = this._y,
        j = x.length - 1;

    if (j > 0) {
      var x0 = x[0],
          y0 = y[0],
          dx = x[j] - x0,
          dy = y[j] - y0,
          i = -1,
          t;

      while (++i <= j) {
        t = i / j;
        this._basis.point(
          this._beta * x[i] + (1 - this._beta) * (x0 + t * dx),
          this._beta * y[i] + (1 - this._beta) * (y0 + t * dy)
        );
      }
    }

    this._x = this._y = null;
    this._basis.lineEnd();
  },
  point: function(x, y) {
    this._x.push(+x);
    this._y.push(+y);
  }
};

export default (function custom(beta) {

  function bundle(context) {
    return beta === 1 ? new Basis(context) : new Bundle(context, beta);
  }

  bundle.beta = function(beta) {
    return custom(+beta);
  };

  return bundle;
})(0.85);

----------------------------------------
File: ./animations/node_modules/d3-shape/src/curve/monotone.js
----------------------------------------
function sign(x) {
  return x < 0 ? -1 : 1;
}

// Calculate the slopes of the tangents (Hermite-type interpolation) based on
// the following paper: Steffen, M. 1990. A Simple Method for Monotonic
// Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.
// NOV(II), P. 443, 1990.
function slope3(that, x2, y2) {
  var h0 = that._x1 - that._x0,
      h1 = x2 - that._x1,
      s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0),
      s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0),
      p = (s0 * h1 + s1 * h0) / (h0 + h1);
  return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
}

// Calculate a one-sided slope.
function slope2(that, t) {
  var h = that._x1 - that._x0;
  return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
}

// According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations
// "you can express cubic Hermite interpolation in terms of cubic Bézier curves
// with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1".
function point(that, t0, t1) {
  var x0 = that._x0,
      y0 = that._y0,
      x1 = that._x1,
      y1 = that._y1,
      dx = (x1 - x0) / 3;
  that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);
}

function MonotoneX(context) {
  this._context = context;
}

MonotoneX.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 =
    this._y0 = this._y1 =
    this._t0 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 2: this._context.lineTo(this._x1, this._y1); break;
      case 3: point(this, this._t0, slope2(this, this._t0)); break;
    }
    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x, y) {
    var t1 = NaN;

    x = +x, y = +y;
    if (x === this._x1 && y === this._y1) return; // Ignore coincident points.
    switch (this._point) {
      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
      case 1: this._point = 2; break;
      case 2: this._point = 3; point(this, slope2(this, t1 = slope3(this, x, y)), t1); break;
      default: point(this, this._t0, t1 = slope3(this, x, y)); break;
    }

    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
    this._t0 = t1;
  }
}

function MonotoneY(context) {
  this._context = new ReflectContext(context);
}

(MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x, y) {
  MonotoneX.prototype.point.call(this, y, x);
};

function ReflectContext(context) {
  this._context = context;
}

ReflectContext.prototype = {
  moveTo: function(x, y) { this._context.moveTo(y, x); },
  closePath: function() { this._context.closePath(); },
  lineTo: function(x, y) { this._context.lineTo(y, x); },
  bezierCurveTo: function(x1, y1, x2, y2, x, y) { this._context.bezierCurveTo(y1, x1, y2, x2, y, x); }
};

export function monotoneX(context) {
  return new MonotoneX(context);
}

export function monotoneY(context) {
  return new MonotoneY(context);
}

----------------------------------------
File: ./animations/node_modules/d3-shape/src/curve/basis.js
----------------------------------------
export function point(that, x, y) {
  that._context.bezierCurveTo(
    (2 * that._x0 + that._x1) / 3,
    (2 * that._y0 + that._y1) / 3,
    (that._x0 + 2 * that._x1) / 3,
    (that._y0 + 2 * that._y1) / 3,
    (that._x0 + 4 * that._x1 + x) / 6,
    (that._y0 + 4 * that._y1 + y) / 6
  );
}

export function Basis(context) {
  this._context = context;
}

Basis.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 =
    this._y0 = this._y1 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 3: point(this, this._x1, this._y1); // falls through
      case 2: this._context.lineTo(this._x1, this._y1); break;
    }
    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
      case 1: this._point = 2; break;
      case 2: this._point = 3; this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6); // falls through
      default: point(this, x, y); break;
    }
    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
  }
};

export default function(context) {
  return new Basis(context);
}

----------------------------------------
File: ./animations/node_modules/d3-shape/src/curve/natural.js
----------------------------------------
function Natural(context) {
  this._context = context;
}

Natural.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x = [];
    this._y = [];
  },
  lineEnd: function() {
    var x = this._x,
        y = this._y,
        n = x.length;

    if (n) {
      this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);
      if (n === 2) {
        this._context.lineTo(x[1], y[1]);
      } else {
        var px = controlPoints(x),
            py = controlPoints(y);
        for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {
          this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);
        }
      }
    }

    if (this._line || (this._line !== 0 && n === 1)) this._context.closePath();
    this._line = 1 - this._line;
    this._x = this._y = null;
  },
  point: function(x, y) {
    this._x.push(+x);
    this._y.push(+y);
  }
};

// See https://www.particleincell.com/2012/bezier-splines/ for derivation.
function controlPoints(x) {
  var i,
      n = x.length - 1,
      m,
      a = new Array(n),
      b = new Array(n),
      r = new Array(n);
  a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];
  for (i = 1; i < n - 1; ++i) a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];
  a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];
  for (i = 1; i < n; ++i) m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];
  a[n - 1] = r[n - 1] / b[n - 1];
  for (i = n - 2; i >= 0; --i) a[i] = (r[i] - a[i + 1]) / b[i];
  b[n - 1] = (x[n] + a[n - 1]) / 2;
  for (i = 0; i < n - 1; ++i) b[i] = 2 * x[i + 1] - a[i + 1];
  return [a, b];
}

export default function(context) {
  return new Natural(context);
}

----------------------------------------
File: ./animations/node_modules/d3-shape/src/curve/cardinalOpen.js
----------------------------------------
import {point} from "./cardinal.js";

export function CardinalOpen(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}

CardinalOpen.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 =
    this._y0 = this._y1 = this._y2 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: this._point = 1; break;
      case 1: this._point = 2; break;
      case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;
      case 3: this._point = 4; // falls through
      default: point(this, x, y); break;
    }
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

export default (function custom(tension) {

  function cardinal(context) {
    return new CardinalOpen(context, tension);
  }

  cardinal.tension = function(tension) {
    return custom(+tension);
  };

  return cardinal;
})(0);

----------------------------------------
File: ./animations/node_modules/d3-shape/src/curve/catmullRomClosed.js
----------------------------------------
import {CardinalClosed} from "./cardinalClosed.js";
import noop from "../noop.js";
import {point} from "./catmullRom.js";

function CatmullRomClosed(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}

CatmullRomClosed.prototype = {
  areaStart: noop,
  areaEnd: noop,
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =
    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
    this._l01_a = this._l12_a = this._l23_a =
    this._l01_2a = this._l12_2a = this._l23_2a =
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 1: {
        this._context.moveTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 2: {
        this._context.lineTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 3: {
        this.point(this._x3, this._y3);
        this.point(this._x4, this._y4);
        this.point(this._x5, this._y5);
        break;
      }
    }
  },
  point: function(x, y) {
    x = +x, y = +y;

    if (this._point) {
      var x23 = this._x2 - x,
          y23 = this._y2 - y;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }

    switch (this._point) {
      case 0: this._point = 1; this._x3 = x, this._y3 = y; break;
      case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;
      case 2: this._point = 3; this._x5 = x, this._y5 = y; break;
      default: point(this, x, y); break;
    }

    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

export default (function custom(alpha) {

  function catmullRom(context) {
    return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);
  }

  catmullRom.alpha = function(alpha) {
    return custom(+alpha);
  };

  return catmullRom;
})(0.5);

----------------------------------------
File: ./animations/node_modules/d3-shape/src/curve/cardinal.js
----------------------------------------
export function point(that, x, y) {
  that._context.bezierCurveTo(
    that._x1 + that._k * (that._x2 - that._x0),
    that._y1 + that._k * (that._y2 - that._y0),
    that._x2 + that._k * (that._x1 - x),
    that._y2 + that._k * (that._y1 - y),
    that._x2,
    that._y2
  );
}

export function Cardinal(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}

Cardinal.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 =
    this._y0 = this._y1 = this._y2 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 2: this._context.lineTo(this._x2, this._y2); break;
      case 3: point(this, this._x1, this._y1); break;
    }
    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
      case 1: this._point = 2; this._x1 = x, this._y1 = y; break;
      case 2: this._point = 3; // falls through
      default: point(this, x, y); break;
    }
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

export default (function custom(tension) {

  function cardinal(context) {
    return new Cardinal(context, tension);
  }

  cardinal.tension = function(tension) {
    return custom(+tension);
  };

  return cardinal;
})(0);

----------------------------------------
File: ./animations/node_modules/d3-shape/src/curve/step.js
----------------------------------------
function Step(context, t) {
  this._context = context;
  this._t = t;
}

Step.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x = this._y = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);
    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
    if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;
  },
  point: function(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
      case 1: this._point = 2; // falls through
      default: {
        if (this._t <= 0) {
          this._context.lineTo(this._x, y);
          this._context.lineTo(x, y);
        } else {
          var x1 = this._x * (1 - this._t) + x * this._t;
          this._context.lineTo(x1, this._y);
          this._context.lineTo(x1, y);
        }
        break;
      }
    }
    this._x = x, this._y = y;
  }
};

export default function(context) {
  return new Step(context, 0.5);
}

export function stepBefore(context) {
  return new Step(context, 0);
}

export function stepAfter(context) {
  return new Step(context, 1);
}

----------------------------------------
File: ./animations/node_modules/d3-shape/src/curve/catmullRomOpen.js
----------------------------------------
import {CardinalOpen} from "./cardinalOpen.js";
import {point} from "./catmullRom.js";

function CatmullRomOpen(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}

CatmullRomOpen.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 =
    this._y0 = this._y1 = this._y2 = NaN;
    this._l01_a = this._l12_a = this._l23_a =
    this._l01_2a = this._l12_2a = this._l23_2a =
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x, y) {
    x = +x, y = +y;

    if (this._point) {
      var x23 = this._x2 - x,
          y23 = this._y2 - y;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }

    switch (this._point) {
      case 0: this._point = 1; break;
      case 1: this._point = 2; break;
      case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;
      case 3: this._point = 4; // falls through
      default: point(this, x, y); break;
    }

    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
  }
};

export default (function custom(alpha) {

  function catmullRom(context) {
    return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);
  }

  catmullRom.alpha = function(alpha) {
    return custom(+alpha);
  };

  return catmullRom;
})(0.5);

----------------------------------------
File: ./animations/node_modules/d3-shape/src/curve/bump.js
----------------------------------------
import pointRadial from "../pointRadial.js";

class Bump {
  constructor(context, x) {
    this._context = context;
    this._x = x;
  }
  areaStart() {
    this._line = 0;
  }
  areaEnd() {
    this._line = NaN;
  }
  lineStart() {
    this._point = 0;
  }
  lineEnd() {
    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
    this._line = 1 - this._line;
  }
  point(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: {
        this._point = 1;
        if (this._line) this._context.lineTo(x, y);
        else this._context.moveTo(x, y);
        break;
      }
      case 1: this._point = 2; // falls through
      default: {
        if (this._x) this._context.bezierCurveTo(this._x0 = (this._x0 + x) / 2, this._y0, this._x0, y, x, y);
        else this._context.bezierCurveTo(this._x0, this._y0 = (this._y0 + y) / 2, x, this._y0, x, y);
        break;
      }
    }
    this._x0 = x, this._y0 = y;
  }
}

class BumpRadial {
  constructor(context) {
    this._context = context;
  }
  lineStart() {
    this._point = 0;
  }
  lineEnd() {}
  point(x, y) {
    x = +x, y = +y;
    if (this._point === 0) {
      this._point = 1;
    } else {
      const p0 = pointRadial(this._x0, this._y0);
      const p1 = pointRadial(this._x0, this._y0 = (this._y0 + y) / 2);
      const p2 = pointRadial(x, this._y0);
      const p3 = pointRadial(x, y);
      this._context.moveTo(...p0);
      this._context.bezierCurveTo(...p1, ...p2, ...p3);
    }
    this._x0 = x, this._y0 = y;
  }
}

export function bumpX(context) {
  return new Bump(context, true);
}

export function bumpY(context) {
  return new Bump(context, false);
}

export function bumpRadial(context) {
  return new BumpRadial(context);
}

----------------------------------------
File: ./animations/node_modules/d3-shape/src/curve/basisClosed.js
----------------------------------------
import noop from "../noop.js";
import {point} from "./basis.js";

function BasisClosed(context) {
  this._context = context;
}

BasisClosed.prototype = {
  areaStart: noop,
  areaEnd: noop,
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 =
    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 1: {
        this._context.moveTo(this._x2, this._y2);
        this._context.closePath();
        break;
      }
      case 2: {
        this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
        this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
        this._context.closePath();
        break;
      }
      case 3: {
        this.point(this._x2, this._y2);
        this.point(this._x3, this._y3);
        this.point(this._x4, this._y4);
        break;
      }
    }
  },
  point: function(x, y) {
    x = +x, y = +y;
    switch (this._point) {
      case 0: this._point = 1; this._x2 = x, this._y2 = y; break;
      case 1: this._point = 2; this._x3 = x, this._y3 = y; break;
      case 2: this._point = 3; this._x4 = x, this._y4 = y; this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6); break;
      default: point(this, x, y); break;
    }
    this._x0 = this._x1, this._x1 = x;
    this._y0 = this._y1, this._y1 = y;
  }
};

export default function(context) {
  return new BasisClosed(context);
}

----------------------------------------
File: ./animations/node_modules/d3-shape/src/index.js
----------------------------------------
export {default as arc} from "./arc.js";
export {default as area} from "./area.js";
export {default as line} from "./line.js";
export {default as pie} from "./pie.js";
export {default as areaRadial, default as radialArea} from "./areaRadial.js"; // Note: radialArea is deprecated!
export {default as lineRadial, default as radialLine} from "./lineRadial.js"; // Note: radialLine is deprecated!
export {default as pointRadial} from "./pointRadial.js";
export {link, linkHorizontal, linkVertical, linkRadial} from "./link.js";

export {default as symbol, symbolsStroke, symbolsFill, symbolsFill as symbols} from "./symbol.js";
export {default as symbolAsterisk} from "./symbol/asterisk.js";
export {default as symbolCircle} from "./symbol/circle.js";
export {default as symbolCross} from "./symbol/cross.js";
export {default as symbolDiamond} from "./symbol/diamond.js";
export {default as symbolDiamond2} from "./symbol/diamond2.js";
export {default as symbolPlus} from "./symbol/plus.js";
export {default as symbolSquare} from "./symbol/square.js";
export {default as symbolSquare2} from "./symbol/square2.js";
export {default as symbolStar} from "./symbol/star.js";
export {default as symbolTriangle} from "./symbol/triangle.js";
export {default as symbolTriangle2} from "./symbol/triangle2.js";
export {default as symbolWye} from "./symbol/wye.js";
export {default as symbolTimes, default as symbolX} from "./symbol/times.js";

export {default as curveBasisClosed} from "./curve/basisClosed.js";
export {default as curveBasisOpen} from "./curve/basisOpen.js";
export {default as curveBasis} from "./curve/basis.js";
export {bumpX as curveBumpX, bumpY as curveBumpY} from "./curve/bump.js";
export {default as curveBundle} from "./curve/bundle.js";
export {default as curveCardinalClosed} from "./curve/cardinalClosed.js";
export {default as curveCardinalOpen} from "./curve/cardinalOpen.js";
export {default as curveCardinal} from "./curve/cardinal.js";
export {default as curveCatmullRomClosed} from "./curve/catmullRomClosed.js";
export {default as curveCatmullRomOpen} from "./curve/catmullRomOpen.js";
export {default as curveCatmullRom} from "./curve/catmullRom.js";
export {default as curveLinearClosed} from "./curve/linearClosed.js";
export {default as curveLinear} from "./curve/linear.js";
export {monotoneX as curveMonotoneX, monotoneY as curveMonotoneY} from "./curve/monotone.js";
export {default as curveNatural} from "./curve/natural.js";
export {default as curveStep, stepAfter as curveStepAfter, stepBefore as curveStepBefore} from "./curve/step.js";

export {default as stack} from "./stack.js";
export {default as stackOffsetExpand} from "./offset/expand.js";
export {default as stackOffsetDiverging} from "./offset/diverging.js";
export {default as stackOffsetNone} from "./offset/none.js";
export {default as stackOffsetSilhouette} from "./offset/silhouette.js";
export {default as stackOffsetWiggle} from "./offset/wiggle.js";
export {default as stackOrderAppearance} from "./order/appearance.js";
export {default as stackOrderAscending} from "./order/ascending.js";
export {default as stackOrderDescending} from "./order/descending.js";
export {default as stackOrderInsideOut} from "./order/insideOut.js";
export {default as stackOrderNone} from "./order/none.js";
export {default as stackOrderReverse} from "./order/reverse.js";

----------------------------------------
File: ./animations/node_modules/d3-shape/src/symbol/circle.js
----------------------------------------
import {pi, sqrt, tau} from "../math.js";

export default {
  draw(context, size) {
    const r = sqrt(size / pi);
    context.moveTo(r, 0);
    context.arc(0, 0, r, 0, tau);
  }
};

----------------------------------------
File: ./animations/node_modules/d3-shape/src/symbol/times.js
----------------------------------------
import {min, sqrt} from "../math.js";

export default {
  draw(context, size) {
    const r = sqrt(size - min(size / 6, 1.7)) * 0.6189;
    context.moveTo(-r, -r);
    context.lineTo(r, r);
    context.moveTo(-r, r);
    context.lineTo(r, -r);
  }
};

----------------------------------------
File: ./animations/node_modules/d3-shape/src/symbol/triangle2.js
----------------------------------------
import {sqrt} from "../math.js";

const sqrt3 = sqrt(3);

export default {
  draw(context, size) {
    const s = sqrt(size) * 0.6824;
    const t = s  / 2;
    const u = (s * sqrt3) / 2; // cos(Math.PI / 6)
    context.moveTo(0, -s);
    context.lineTo(u, t);
    context.lineTo(-u, t);
    context.closePath();
  }
};

----------------------------------------
File: ./animations/node_modules/d3-shape/src/symbol/star.js
----------------------------------------
import {sin, cos, sqrt, pi, tau} from "../math.js";

const ka = 0.89081309152928522810;
const kr = sin(pi / 10) / sin(7 * pi / 10);
const kx = sin(tau / 10) * kr;
const ky = -cos(tau / 10) * kr;

export default {
  draw(context, size) {
    const r = sqrt(size * ka);
    const x = kx * r;
    const y = ky * r;
    context.moveTo(0, -r);
    context.lineTo(x, y);
    for (let i = 1; i < 5; ++i) {
      const a = tau * i / 5;
      const c = cos(a);
      const s = sin(a);
      context.lineTo(s * r, -c * r);
      context.lineTo(c * x - s * y, s * x + c * y);
    }
    context.closePath();
  }
};

----------------------------------------
File: ./animations/node_modules/d3-shape/src/symbol/cross.js
----------------------------------------
import {sqrt} from "../math.js";

export default {
  draw(context, size) {
    const r = sqrt(size / 5) / 2;
    context.moveTo(-3 * r, -r);
    context.lineTo(-r, -r);
    context.lineTo(-r, -3 * r);
    context.lineTo(r, -3 * r);
    context.lineTo(r, -r);
    context.lineTo(3 * r, -r);
    context.lineTo(3 * r, r);
    context.lineTo(r, r);
    context.lineTo(r, 3 * r);
    context.lineTo(-r, 3 * r);
    context.lineTo(-r, r);
    context.lineTo(-3 * r, r);
    context.closePath();
  }
};

----------------------------------------
File: ./animations/node_modules/d3-shape/src/symbol/wye.js
----------------------------------------
import {sqrt} from "../math.js";

const c = -0.5;
const s = sqrt(3) / 2;
const k = 1 / sqrt(12);
const a = (k / 2 + 1) * 3;

export default {
  draw(context, size) {
    const r = sqrt(size / a);
    const x0 = r / 2, y0 = r * k;
    const x1 = x0, y1 = r * k + r;
    const x2 = -x1, y2 = y1;
    context.moveTo(x0, y0);
    context.lineTo(x1, y1);
    context.lineTo(x2, y2);
    context.lineTo(c * x0 - s * y0, s * x0 + c * y0);
    context.lineTo(c * x1 - s * y1, s * x1 + c * y1);
    context.lineTo(c * x2 - s * y2, s * x2 + c * y2);
    context.lineTo(c * x0 + s * y0, c * y0 - s * x0);
    context.lineTo(c * x1 + s * y1, c * y1 - s * x1);
    context.lineTo(c * x2 + s * y2, c * y2 - s * x2);
    context.closePath();
  }
};

----------------------------------------
File: ./animations/node_modules/d3-shape/src/symbol/diamond.js
----------------------------------------
import {sqrt} from "../math.js";

const tan30 = sqrt(1 / 3);
const tan30_2 = tan30 * 2;

export default {
  draw(context, size) {
    const y = sqrt(size / tan30_2);
    const x = y * tan30;
    context.moveTo(0, -y);
    context.lineTo(x, 0);
    context.lineTo(0, y);
    context.lineTo(-x, 0);
    context.closePath();
  }
};

----------------------------------------
File: ./animations/node_modules/d3-shape/src/symbol/plus.js
----------------------------------------
import {min, sqrt} from "../math.js";

export default {
  draw(context, size) {
    const r = sqrt(size - min(size / 7, 2)) * 0.87559;
    context.moveTo(-r, 0);
    context.lineTo(r, 0);
    context.moveTo(0, r);
    context.lineTo(0, -r);
  }
};

----------------------------------------
File: ./animations/node_modules/d3-shape/src/symbol/square.js
----------------------------------------
import {sqrt} from "../math.js";

export default {
  draw(context, size) {
    const w = sqrt(size);
    const x = -w / 2;
    context.rect(x, x, w, w);
  }
};

----------------------------------------
File: ./animations/node_modules/d3-shape/src/symbol/asterisk.js
----------------------------------------
import {min, sqrt} from "../math.js";

const sqrt3 = sqrt(3);

export default {
  draw(context, size) {
    const r = sqrt(size + min(size / 28, 0.75)) * 0.59436;
    const t = r / 2;
    const u = t * sqrt3;
    context.moveTo(0, r);
    context.lineTo(0, -r);
    context.moveTo(-u, -t);
    context.lineTo(u, t);
    context.moveTo(-u, t);
    context.lineTo(u, -t);
  }
};

----------------------------------------
File: ./animations/node_modules/d3-shape/src/symbol/square2.js
----------------------------------------
import {sqrt} from "../math.js";

export default {
  draw(context, size) {
    const r = sqrt(size) * 0.4431;
    context.moveTo(r, r);
    context.lineTo(r, -r);
    context.lineTo(-r, -r);
    context.lineTo(-r, r);
    context.closePath();
  }
};

----------------------------------------
File: ./animations/node_modules/d3-shape/src/symbol/triangle.js
----------------------------------------
import {sqrt} from "../math.js";

const sqrt3 = sqrt(3);

export default {
  draw(context, size) {
    const y = -sqrt(size / (sqrt3 * 3));
    context.moveTo(0, y * 2);
    context.lineTo(-sqrt3 * y, -y);
    context.lineTo(sqrt3 * y, -y);
    context.closePath();
  }
};

----------------------------------------
File: ./animations/node_modules/d3-shape/src/symbol/diamond2.js
----------------------------------------
import {sqrt} from "../math.js";

export default {
  draw(context, size) {
    const r = sqrt(size) * 0.62625;
    context.moveTo(0, -r);
    context.lineTo(r, 0);
    context.lineTo(0, r);
    context.lineTo(-r, 0);
    context.closePath();
  }
};

----------------------------------------
File: ./animations/node_modules/d3-shape/src/pointRadial.js
----------------------------------------
export default function(x, y) {
  return [(y = +y) * Math.cos(x -= Math.PI / 2), y * Math.sin(x)];
}

----------------------------------------
File: ./animations/node_modules/d3-shape/src/descending.js
----------------------------------------
export default function(a, b) {
  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
}

----------------------------------------
File: ./animations/node_modules/d3-shape/src/array.js
----------------------------------------
export var slice = Array.prototype.slice;

export default function(x) {
  return typeof x === "object" && "length" in x
    ? x // Array, TypedArray, NodeList, array-like
    : Array.from(x); // Map, Set, iterable, string, or anything else
}

----------------------------------------
File: ./animations/node_modules/d3-shape/src/offset/silhouette.js
----------------------------------------
import none from "./none.js";

export default function(series, order) {
  if (!((n = series.length) > 0)) return;
  for (var j = 0, s0 = series[order[0]], n, m = s0.length; j < m; ++j) {
    for (var i = 0, y = 0; i < n; ++i) y += series[i][j][1] || 0;
    s0[j][1] += s0[j][0] = -y / 2;
  }
  none(series, order);
}

----------------------------------------
File: ./animations/node_modules/d3-shape/src/offset/diverging.js
----------------------------------------
export default function(series, order) {
  if (!((n = series.length) > 0)) return;
  for (var i, j = 0, d, dy, yp, yn, n, m = series[order[0]].length; j < m; ++j) {
    for (yp = yn = 0, i = 0; i < n; ++i) {
      if ((dy = (d = series[order[i]][j])[1] - d[0]) > 0) {
        d[0] = yp, d[1] = yp += dy;
      } else if (dy < 0) {
        d[1] = yn, d[0] = yn += dy;
      } else {
        d[0] = 0, d[1] = dy;
      }
    }
  }
}

----------------------------------------
File: ./animations/node_modules/d3-shape/src/offset/none.js
----------------------------------------
export default function(series, order) {
  if (!((n = series.length) > 1)) return;
  for (var i = 1, j, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i) {
    s0 = s1, s1 = series[order[i]];
    for (j = 0; j < m; ++j) {
      s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];
    }
  }
}

----------------------------------------
File: ./animations/node_modules/d3-shape/src/offset/wiggle.js
----------------------------------------
import none from "./none.js";

export default function(series, order) {
  if (!((n = series.length) > 0) || !((m = (s0 = series[order[0]]).length) > 0)) return;
  for (var y = 0, j = 1, s0, m, n; j < m; ++j) {
    for (var i = 0, s1 = 0, s2 = 0; i < n; ++i) {
      var si = series[order[i]],
          sij0 = si[j][1] || 0,
          sij1 = si[j - 1][1] || 0,
          s3 = (sij0 - sij1) / 2;
      for (var k = 0; k < i; ++k) {
        var sk = series[order[k]],
            skj0 = sk[j][1] || 0,
            skj1 = sk[j - 1][1] || 0;
        s3 += skj0 - skj1;
      }
      s1 += sij0, s2 += s3 * sij0;
    }
    s0[j - 1][1] += s0[j - 1][0] = y;
    if (s1) y -= s2 / s1;
  }
  s0[j - 1][1] += s0[j - 1][0] = y;
  none(series, order);
}

----------------------------------------
File: ./animations/node_modules/d3-shape/src/offset/expand.js
----------------------------------------
import none from "./none.js";

export default function(series, order) {
  if (!((n = series.length) > 0)) return;
  for (var i, n, j = 0, m = series[0].length, y; j < m; ++j) {
    for (y = i = 0; i < n; ++i) y += series[i][j][1] || 0;
    if (y) for (i = 0; i < n; ++i) series[i][j][1] /= y;
  }
  none(series, order);
}

----------------------------------------
File: ./animations/node_modules/d3-shape/src/arc.js
----------------------------------------
import constant from "./constant.js";
import {abs, acos, asin, atan2, cos, epsilon, halfPi, max, min, pi, sin, sqrt, tau} from "./math.js";
import {withPath} from "./path.js";

function arcInnerRadius(d) {
  return d.innerRadius;
}

function arcOuterRadius(d) {
  return d.outerRadius;
}

function arcStartAngle(d) {
  return d.startAngle;
}

function arcEndAngle(d) {
  return d.endAngle;
}

function arcPadAngle(d) {
  return d && d.padAngle; // Note: optional!
}

function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {
  var x10 = x1 - x0, y10 = y1 - y0,
      x32 = x3 - x2, y32 = y3 - y2,
      t = y32 * x10 - x32 * y10;
  if (t * t < epsilon) return;
  t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / t;
  return [x0 + t * x10, y0 + t * y10];
}

// Compute perpendicular offset line of length rc.
// http://mathworld.wolfram.com/Circle-LineIntersection.html
function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
  var x01 = x0 - x1,
      y01 = y0 - y1,
      lo = (cw ? rc : -rc) / sqrt(x01 * x01 + y01 * y01),
      ox = lo * y01,
      oy = -lo * x01,
      x11 = x0 + ox,
      y11 = y0 + oy,
      x10 = x1 + ox,
      y10 = y1 + oy,
      x00 = (x11 + x10) / 2,
      y00 = (y11 + y10) / 2,
      dx = x10 - x11,
      dy = y10 - y11,
      d2 = dx * dx + dy * dy,
      r = r1 - rc,
      D = x11 * y10 - x10 * y11,
      d = (dy < 0 ? -1 : 1) * sqrt(max(0, r * r * d2 - D * D)),
      cx0 = (D * dy - dx * d) / d2,
      cy0 = (-D * dx - dy * d) / d2,
      cx1 = (D * dy + dx * d) / d2,
      cy1 = (-D * dx + dy * d) / d2,
      dx0 = cx0 - x00,
      dy0 = cy0 - y00,
      dx1 = cx1 - x00,
      dy1 = cy1 - y00;

  // Pick the closer of the two intersection points.
  // TODO Is there a faster way to determine which intersection to use?
  if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;

  return {
    cx: cx0,
    cy: cy0,
    x01: -ox,
    y01: -oy,
    x11: cx0 * (r1 / r - 1),
    y11: cy0 * (r1 / r - 1)
  };
}

export default function() {
  var innerRadius = arcInnerRadius,
      outerRadius = arcOuterRadius,
      cornerRadius = constant(0),
      padRadius = null,
      startAngle = arcStartAngle,
      endAngle = arcEndAngle,
      padAngle = arcPadAngle,
      context = null,
      path = withPath(arc);

  function arc() {
    var buffer,
        r,
        r0 = +innerRadius.apply(this, arguments),
        r1 = +outerRadius.apply(this, arguments),
        a0 = startAngle.apply(this, arguments) - halfPi,
        a1 = endAngle.apply(this, arguments) - halfPi,
        da = abs(a1 - a0),
        cw = a1 > a0;

    if (!context) context = buffer = path();

    // Ensure that the outer radius is always larger than the inner radius.
    if (r1 < r0) r = r1, r1 = r0, r0 = r;

    // Is it a point?
    if (!(r1 > epsilon)) context.moveTo(0, 0);

    // Or is it a circle or annulus?
    else if (da > tau - epsilon) {
      context.moveTo(r1 * cos(a0), r1 * sin(a0));
      context.arc(0, 0, r1, a0, a1, !cw);
      if (r0 > epsilon) {
        context.moveTo(r0 * cos(a1), r0 * sin(a1));
        context.arc(0, 0, r0, a1, a0, cw);
      }
    }

    // Or is it a circular or annular sector?
    else {
      var a01 = a0,
          a11 = a1,
          a00 = a0,
          a10 = a1,
          da0 = da,
          da1 = da,
          ap = padAngle.apply(this, arguments) / 2,
          rp = (ap > epsilon) && (padRadius ? +padRadius.apply(this, arguments) : sqrt(r0 * r0 + r1 * r1)),
          rc = min(abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),
          rc0 = rc,
          rc1 = rc,
          t0,
          t1;

      // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.
      if (rp > epsilon) {
        var p0 = asin(rp / r0 * sin(ap)),
            p1 = asin(rp / r1 * sin(ap));
        if ((da0 -= p0 * 2) > epsilon) p0 *= (cw ? 1 : -1), a00 += p0, a10 -= p0;
        else da0 = 0, a00 = a10 = (a0 + a1) / 2;
        if ((da1 -= p1 * 2) > epsilon) p1 *= (cw ? 1 : -1), a01 += p1, a11 -= p1;
        else da1 = 0, a01 = a11 = (a0 + a1) / 2;
      }

      var x01 = r1 * cos(a01),
          y01 = r1 * sin(a01),
          x10 = r0 * cos(a10),
          y10 = r0 * sin(a10);

      // Apply rounded corners?
      if (rc > epsilon) {
        var x11 = r1 * cos(a11),
            y11 = r1 * sin(a11),
            x00 = r0 * cos(a00),
            y00 = r0 * sin(a00),
            oc;

        // Restrict the corner radius according to the sector angle. If this
        // intersection fails, it’s probably because the arc is too small, so
        // disable the corner radius entirely.
        if (da < pi) {
          if (oc = intersect(x01, y01, x00, y00, x11, y11, x10, y10)) {
            var ax = x01 - oc[0],
                ay = y01 - oc[1],
                bx = x11 - oc[0],
                by = y11 - oc[1],
                kc = 1 / sin(acos((ax * bx + ay * by) / (sqrt(ax * ax + ay * ay) * sqrt(bx * bx + by * by))) / 2),
                lc = sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
            rc0 = min(rc, (r0 - lc) / (kc - 1));
            rc1 = min(rc, (r1 - lc) / (kc + 1));
          } else {
            rc0 = rc1 = 0;
          }
        }
      }

      // Is the sector collapsed to a line?
      if (!(da1 > epsilon)) context.moveTo(x01, y01);

      // Does the sector’s outer ring have rounded corners?
      else if (rc1 > epsilon) {
        t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
        t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);

        context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);

        // Have the corners merged?
        if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);

        // Otherwise, draw the two corners and the ring.
        else {
          context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);
          context.arc(0, 0, r1, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), !cw);
          context.arc(t1.cx, t1.cy, rc1, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);
        }
      }

      // Or is the outer ring just a circular arc?
      else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);

      // Is there no inner ring, and it’s a circular sector?
      // Or perhaps it’s an annular sector collapsed due to padding?
      if (!(r0 > epsilon) || !(da0 > epsilon)) context.lineTo(x10, y10);

      // Does the sector’s inner ring (or point) have rounded corners?
      else if (rc0 > epsilon) {
        t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
        t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);

        context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);

        // Have the corners merged?
        if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);

        // Otherwise, draw the two corners and the ring.
        else {
          context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);
          context.arc(0, 0, r0, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), cw);
          context.arc(t1.cx, t1.cy, rc0, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);
        }
      }

      // Or is the inner ring just a circular arc?
      else context.arc(0, 0, r0, a10, a00, cw);
    }

    context.closePath();

    if (buffer) return context = null, buffer + "" || null;
  }

  arc.centroid = function() {
    var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,
        a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi / 2;
    return [cos(a) * r, sin(a) * r];
  };

  arc.innerRadius = function(_) {
    return arguments.length ? (innerRadius = typeof _ === "function" ? _ : constant(+_), arc) : innerRadius;
  };

  arc.outerRadius = function(_) {
    return arguments.length ? (outerRadius = typeof _ === "function" ? _ : constant(+_), arc) : outerRadius;
  };

  arc.cornerRadius = function(_) {
    return arguments.length ? (cornerRadius = typeof _ === "function" ? _ : constant(+_), arc) : cornerRadius;
  };

  arc.padRadius = function(_) {
    return arguments.length ? (padRadius = _ == null ? null : typeof _ === "function" ? _ : constant(+_), arc) : padRadius;
  };

  arc.startAngle = function(_) {
    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant(+_), arc) : startAngle;
  };

  arc.endAngle = function(_) {
    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant(+_), arc) : endAngle;
  };

  arc.padAngle = function(_) {
    return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant(+_), arc) : padAngle;
  };

  arc.context = function(_) {
    return arguments.length ? ((context = _ == null ? null : _), arc) : context;
  };

  return arc;
}

----------------------------------------
File: ./animations/node_modules/d3-shape/src/constant.js
----------------------------------------
export default function(x) {
  return function constant() {
    return x;
  };
}

----------------------------------------
File: ./animations/node_modules/d3-shape/src/math.js
----------------------------------------
export const abs = Math.abs;
export const atan2 = Math.atan2;
export const cos = Math.cos;
export const max = Math.max;
export const min = Math.min;
export const sin = Math.sin;
export const sqrt = Math.sqrt;

export const epsilon = 1e-12;
export const pi = Math.PI;
export const halfPi = pi / 2;
export const tau = 2 * pi;

export function acos(x) {
  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);
}

export function asin(x) {
  return x >= 1 ? halfPi : x <= -1 ? -halfPi : Math.asin(x);
}

----------------------------------------
File: ./animations/node_modules/d3-shape/src/lineRadial.js
----------------------------------------
import curveRadial, {curveRadialLinear} from "./curve/radial.js";
import line from "./line.js";

export function lineRadial(l) {
  var c = l.curve;

  l.angle = l.x, delete l.x;
  l.radius = l.y, delete l.y;

  l.curve = function(_) {
    return arguments.length ? c(curveRadial(_)) : c()._curve;
  };

  return l;
}

export default function() {
  return lineRadial(line().curve(curveRadialLinear));
}

----------------------------------------
File: ./animations/node_modules/d3-shape/src/identity.js
----------------------------------------
export default function(d) {
  return d;
}

----------------------------------------
File: ./animations/node_modules/d3-shape/src/path.js
----------------------------------------
import {Path} from "d3-path";

export function withPath(shape) {
  let digits = 3;

  shape.digits = function(_) {
    if (!arguments.length) return digits;
    if (_ == null) {
      digits = null;
    } else {
      const d = Math.floor(_);
      if (!(d >= 0)) throw new RangeError(`invalid digits: ${_}`);
      digits = d;
    }
    return shape;
  };

  return () => new Path(digits);
}

----------------------------------------
File: ./animations/node_modules/d3-shape/src/area.js
----------------------------------------
import array from "./array.js";
import constant from "./constant.js";
import curveLinear from "./curve/linear.js";
import line from "./line.js";
import {withPath} from "./path.js";
import {x as pointX, y as pointY} from "./point.js";

export default function(x0, y0, y1) {
  var x1 = null,
      defined = constant(true),
      context = null,
      curve = curveLinear,
      output = null,
      path = withPath(area);

  x0 = typeof x0 === "function" ? x0 : (x0 === undefined) ? pointX : constant(+x0);
  y0 = typeof y0 === "function" ? y0 : (y0 === undefined) ? constant(0) : constant(+y0);
  y1 = typeof y1 === "function" ? y1 : (y1 === undefined) ? pointY : constant(+y1);

  function area(data) {
    var i,
        j,
        k,
        n = (data = array(data)).length,
        d,
        defined0 = false,
        buffer,
        x0z = new Array(n),
        y0z = new Array(n);

    if (context == null) output = curve(buffer = path());

    for (i = 0; i <= n; ++i) {
      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
        if (defined0 = !defined0) {
          j = i;
          output.areaStart();
          output.lineStart();
        } else {
          output.lineEnd();
          output.lineStart();
          for (k = i - 1; k >= j; --k) {
            output.point(x0z[k], y0z[k]);
          }
          output.lineEnd();
          output.areaEnd();
        }
      }
      if (defined0) {
        x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);
        output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);
      }
    }

    if (buffer) return output = null, buffer + "" || null;
  }

  function arealine() {
    return line().defined(defined).curve(curve).context(context);
  }

  area.x = function(_) {
    return arguments.length ? (x0 = typeof _ === "function" ? _ : constant(+_), x1 = null, area) : x0;
  };

  area.x0 = function(_) {
    return arguments.length ? (x0 = typeof _ === "function" ? _ : constant(+_), area) : x0;
  };

  area.x1 = function(_) {
    return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : constant(+_), area) : x1;
  };

  area.y = function(_) {
    return arguments.length ? (y0 = typeof _ === "function" ? _ : constant(+_), y1 = null, area) : y0;
  };

  area.y0 = function(_) {
    return arguments.length ? (y0 = typeof _ === "function" ? _ : constant(+_), area) : y0;
  };

  area.y1 = function(_) {
    return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : constant(+_), area) : y1;
  };

  area.lineX0 =
  area.lineY0 = function() {
    return arealine().x(x0).y(y0);
  };

  area.lineY1 = function() {
    return arealine().x(x0).y(y1);
  };

  area.lineX1 = function() {
    return arealine().x(x1).y(y0);
  };

  area.defined = function(_) {
    return arguments.length ? (defined = typeof _ === "function" ? _ : constant(!!_), area) : defined;
  };

  area.curve = function(_) {
    return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;
  };

  area.context = function(_) {
    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;
  };

  return area;
}

----------------------------------------
File: ./animations/node_modules/d3-shape/src/point.js
----------------------------------------
export function x(p) {
  return p[0];
}

export function y(p) {
  return p[1];
}

----------------------------------------
File: ./animations/node_modules/d3-shape/src/areaRadial.js
----------------------------------------
import curveRadial, {curveRadialLinear} from "./curve/radial.js";
import area from "./area.js";
import {lineRadial} from "./lineRadial.js";

export default function() {
  var a = area().curve(curveRadialLinear),
      c = a.curve,
      x0 = a.lineX0,
      x1 = a.lineX1,
      y0 = a.lineY0,
      y1 = a.lineY1;

  a.angle = a.x, delete a.x;
  a.startAngle = a.x0, delete a.x0;
  a.endAngle = a.x1, delete a.x1;
  a.radius = a.y, delete a.y;
  a.innerRadius = a.y0, delete a.y0;
  a.outerRadius = a.y1, delete a.y1;
  a.lineStartAngle = function() { return lineRadial(x0()); }, delete a.lineX0;
  a.lineEndAngle = function() { return lineRadial(x1()); }, delete a.lineX1;
  a.lineInnerRadius = function() { return lineRadial(y0()); }, delete a.lineY0;
  a.lineOuterRadius = function() { return lineRadial(y1()); }, delete a.lineY1;

  a.curve = function(_) {
    return arguments.length ? c(curveRadial(_)) : c()._curve;
  };

  return a;
}

----------------------------------------
File: ./animations/node_modules/d3-shape/src/noop.js
----------------------------------------
export default function() {}

----------------------------------------
File: ./animations/node_modules/d3-shape/src/stack.js
----------------------------------------
import array from "./array.js";
import constant from "./constant.js";
import offsetNone from "./offset/none.js";
import orderNone from "./order/none.js";

function stackValue(d, key) {
  return d[key];
}

function stackSeries(key) {
  const series = [];
  series.key = key;
  return series;
}

export default function() {
  var keys = constant([]),
      order = orderNone,
      offset = offsetNone,
      value = stackValue;

  function stack(data) {
    var sz = Array.from(keys.apply(this, arguments), stackSeries),
        i, n = sz.length, j = -1,
        oz;

    for (const d of data) {
      for (i = 0, ++j; i < n; ++i) {
        (sz[i][j] = [0, +value(d, sz[i].key, j, data)]).data = d;
      }
    }

    for (i = 0, oz = array(order(sz)); i < n; ++i) {
      sz[oz[i]].index = i;
    }

    offset(sz, oz);
    return sz;
  }

  stack.keys = function(_) {
    return arguments.length ? (keys = typeof _ === "function" ? _ : constant(Array.from(_)), stack) : keys;
  };

  stack.value = function(_) {
    return arguments.length ? (value = typeof _ === "function" ? _ : constant(+_), stack) : value;
  };

  stack.order = function(_) {
    return arguments.length ? (order = _ == null ? orderNone : typeof _ === "function" ? _ : constant(Array.from(_)), stack) : order;
  };

  stack.offset = function(_) {
    return arguments.length ? (offset = _ == null ? offsetNone : _, stack) : offset;
  };

  return stack;
}

----------------------------------------
File: ./animations/node_modules/lodash/isRegExp.js
----------------------------------------
var baseIsRegExp = require('./_baseIsRegExp'),
    baseUnary = require('./_baseUnary'),
    nodeUtil = require('./_nodeUtil');

/* Node.js helper references. */
var nodeIsRegExp = nodeUtil && nodeUtil.isRegExp;

/**
 * Checks if `value` is classified as a `RegExp` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
 * @example
 *
 * _.isRegExp(/abc/);
 * // => true
 *
 * _.isRegExp('/abc/');
 * // => false
 */
var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

module.exports = isRegExp;

----------------------------------------
File: ./animations/node_modules/lodash/_matchesStrictComparable.js
----------------------------------------
/**
 * A specialized version of `matchesProperty` for source values suitable
 * for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function matchesStrictComparable(key, srcValue) {
  return function(object) {
    if (object == null) {
      return false;
    }
    return object[key] === srcValue &&
      (srcValue !== undefined || (key in Object(object)));
  };
}

module.exports = matchesStrictComparable;

----------------------------------------
File: ./animations/node_modules/lodash/gt.js
----------------------------------------
var baseGt = require('./_baseGt'),
    createRelationalOperation = require('./_createRelationalOperation');

/**
 * Checks if `value` is greater than `other`.
 *
 * @static
 * @memberOf _
 * @since 3.9.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if `value` is greater than `other`,
 *  else `false`.
 * @see _.lt
 * @example
 *
 * _.gt(3, 1);
 * // => true
 *
 * _.gt(3, 3);
 * // => false
 *
 * _.gt(1, 3);
 * // => false
 */
var gt = createRelationalOperation(baseGt);

module.exports = gt;

----------------------------------------
File: ./animations/node_modules/lodash/_stringSize.js
----------------------------------------
var asciiSize = require('./_asciiSize'),
    hasUnicode = require('./_hasUnicode'),
    unicodeSize = require('./_unicodeSize');

/**
 * Gets the number of symbols in `string`.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {number} Returns the string size.
 */
function stringSize(string) {
  return hasUnicode(string)
    ? unicodeSize(string)
    : asciiSize(string);
}

module.exports = stringSize;

----------------------------------------
File: ./animations/node_modules/lodash/_baseIsArguments.js
----------------------------------------
var baseGetTag = require('./_baseGetTag'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var argsTag = '[object Arguments]';

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag;
}

module.exports = baseIsArguments;

----------------------------------------
File: ./animations/node_modules/lodash/_baseInverter.js
----------------------------------------
var baseForOwn = require('./_baseForOwn');

/**
 * The base implementation of `_.invert` and `_.invertBy` which inverts
 * `object` with values transformed by `iteratee` and set by `setter`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} setter The function to set `accumulator` values.
 * @param {Function} iteratee The iteratee to transform values.
 * @param {Object} accumulator The initial inverted object.
 * @returns {Function} Returns `accumulator`.
 */
function baseInverter(object, setter, iteratee, accumulator) {
  baseForOwn(object, function(value, key, object) {
    setter(accumulator, iteratee(value), key, object);
  });
  return accumulator;
}

module.exports = baseInverter;

----------------------------------------
File: ./animations/node_modules/lodash/remove.js
----------------------------------------
var baseIteratee = require('./_baseIteratee'),
    basePullAt = require('./_basePullAt');

/**
 * Removes all elements from `array` that `predicate` returns truthy for
 * and returns an array of the removed elements. The predicate is invoked
 * with three arguments: (value, index, array).
 *
 * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
 * to pull elements from an array by value.
 *
 * @static
 * @memberOf _
 * @since 2.0.0
 * @category Array
 * @param {Array} array The array to modify.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new array of removed elements.
 * @example
 *
 * var array = [1, 2, 3, 4];
 * var evens = _.remove(array, function(n) {
 *   return n % 2 == 0;
 * });
 *
 * console.log(array);
 * // => [1, 3]
 *
 * console.log(evens);
 * // => [2, 4]
 */
function remove(array, predicate) {
  var result = [];
  if (!(array && array.length)) {
    return result;
  }
  var index = -1,
      indexes = [],
      length = array.length;

  predicate = baseIteratee(predicate, 3);
  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result.push(value);
      indexes.push(index);
    }
  }
  basePullAt(array, indexes);
  return result;
}

module.exports = remove;

----------------------------------------
File: ./animations/node_modules/lodash/kebabCase.js
----------------------------------------
var createCompounder = require('./_createCompounder');

/**
 * Converts `string` to
 * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the kebab cased string.
 * @example
 *
 * _.kebabCase('Foo Bar');
 * // => 'foo-bar'
 *
 * _.kebabCase('fooBar');
 * // => 'foo-bar'
 *
 * _.kebabCase('__FOO_BAR__');
 * // => 'foo-bar'
 */
var kebabCase = createCompounder(function(result, word, index) {
  return result + (index ? '-' : '') + word.toLowerCase();
});

module.exports = kebabCase;

----------------------------------------
File: ./animations/node_modules/lodash/_createInverter.js
----------------------------------------
var baseInverter = require('./_baseInverter');

/**
 * Creates a function like `_.invertBy`.
 *
 * @private
 * @param {Function} setter The function to set accumulator values.
 * @param {Function} toIteratee The function to resolve iteratees.
 * @returns {Function} Returns the new inverter function.
 */
function createInverter(setter, toIteratee) {
  return function(object, iteratee) {
    return baseInverter(object, setter, toIteratee(iteratee), {});
  };
}

module.exports = createInverter;

----------------------------------------
File: ./animations/node_modules/lodash/_initCloneArray.js
----------------------------------------
/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Initializes an array clone.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the initialized clone.
 */
function initCloneArray(array) {
  var length = array.length,
      result = new array.constructor(length);

  // Add properties assigned by `RegExp#exec`.
  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
    result.index = array.index;
    result.input = array.input;
  }
  return result;
}

module.exports = initCloneArray;

----------------------------------------
File: ./animations/node_modules/lodash/_baseEach.js
----------------------------------------
var baseForOwn = require('./_baseForOwn'),
    createBaseEach = require('./_createBaseEach');

/**
 * The base implementation of `_.forEach` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 */
var baseEach = createBaseEach(baseForOwn);

module.exports = baseEach;

----------------------------------------
File: ./animations/node_modules/lodash/_Uint8Array.js
----------------------------------------
var root = require('./_root');

/** Built-in value references. */
var Uint8Array = root.Uint8Array;

module.exports = Uint8Array;

----------------------------------------
File: ./animations/node_modules/lodash/number.js
----------------------------------------
module.exports = {
  'clamp': require('./clamp'),
  'inRange': require('./inRange'),
  'random': require('./random')
};

----------------------------------------
File: ./animations/node_modules/lodash/unionWith.js
----------------------------------------
var baseFlatten = require('./_baseFlatten'),
    baseRest = require('./_baseRest'),
    baseUniq = require('./_baseUniq'),
    isArrayLikeObject = require('./isArrayLikeObject'),
    last = require('./last');

/**
 * This method is like `_.union` except that it accepts `comparator` which
 * is invoked to compare elements of `arrays`. Result values are chosen from
 * the first array in which the value occurs. The comparator is invoked
 * with two arguments: (arrVal, othVal).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {...Array} [arrays] The arrays to inspect.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new array of combined values.
 * @example
 *
 * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
 * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
 *
 * _.unionWith(objects, others, _.isEqual);
 * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
 */
var unionWith = baseRest(function(arrays) {
  var comparator = last(arrays);
  comparator = typeof comparator == 'function' ? comparator : undefined;
  return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
});

module.exports = unionWith;

----------------------------------------
File: ./animations/node_modules/lodash/pullAt.js
----------------------------------------
var arrayMap = require('./_arrayMap'),
    baseAt = require('./_baseAt'),
    basePullAt = require('./_basePullAt'),
    compareAscending = require('./_compareAscending'),
    flatRest = require('./_flatRest'),
    isIndex = require('./_isIndex');

/**
 * Removes elements from `array` corresponding to `indexes` and returns an
 * array of removed elements.
 *
 * **Note:** Unlike `_.at`, this method mutates `array`.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Array
 * @param {Array} array The array to modify.
 * @param {...(number|number[])} [indexes] The indexes of elements to remove.
 * @returns {Array} Returns the new array of removed elements.
 * @example
 *
 * var array = ['a', 'b', 'c', 'd'];
 * var pulled = _.pullAt(array, [1, 3]);
 *
 * console.log(array);
 * // => ['a', 'c']
 *
 * console.log(pulled);
 * // => ['b', 'd']
 */
var pullAt = flatRest(function(array, indexes) {
  var length = array == null ? 0 : array.length,
      result = baseAt(array, indexes);

  basePullAt(array, arrayMap(indexes, function(index) {
    return isIndex(index, length) ? +index : index;
  }).sort(compareAscending));

  return result;
});

module.exports = pullAt;

----------------------------------------
File: ./animations/node_modules/lodash/isInteger.js
----------------------------------------
var toInteger = require('./toInteger');

/**
 * Checks if `value` is an integer.
 *
 * **Note:** This method is based on
 * [`Number.isInteger`](https://mdn.io/Number/isInteger).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
 * @example
 *
 * _.isInteger(3);
 * // => true
 *
 * _.isInteger(Number.MIN_VALUE);
 * // => false
 *
 * _.isInteger(Infinity);
 * // => false
 *
 * _.isInteger('3');
 * // => false
 */
function isInteger(value) {
  return typeof value == 'number' && value == toInteger(value);
}

module.exports = isInteger;

----------------------------------------
File: ./animations/node_modules/lodash/isSet.js
----------------------------------------
var baseIsSet = require('./_baseIsSet'),
    baseUnary = require('./_baseUnary'),
    nodeUtil = require('./_nodeUtil');

/* Node.js helper references. */
var nodeIsSet = nodeUtil && nodeUtil.isSet;

/**
 * Checks if `value` is classified as a `Set` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 * @example
 *
 * _.isSet(new Set);
 * // => true
 *
 * _.isSet(new WeakSet);
 * // => false
 */
var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

module.exports = isSet;

----------------------------------------
File: ./animations/node_modules/lodash/rest.js
----------------------------------------
var baseRest = require('./_baseRest'),
    toInteger = require('./toInteger');

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a function that invokes `func` with the `this` binding of the
 * created function and arguments from `start` and beyond provided as
 * an array.
 *
 * **Note:** This method is based on the
 * [rest parameter](https://mdn.io/rest_parameters).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Function
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 * @example
 *
 * var say = _.rest(function(what, names) {
 *   return what + ' ' + _.initial(names).join(', ') +
 *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
 * });
 *
 * say('hello', 'fred', 'barney', 'pebbles');
 * // => 'hello fred, barney, & pebbles'
 */
function rest(func, start) {
  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  start = start === undefined ? start : toInteger(start);
  return baseRest(func, start);
}

module.exports = rest;

----------------------------------------
File: ./animations/node_modules/lodash/isEqualWith.js
----------------------------------------
var baseIsEqual = require('./_baseIsEqual');

/**
 * This method is like `_.isEqual` except that it accepts `customizer` which
 * is invoked to compare values. If `customizer` returns `undefined`, comparisons
 * are handled by the method instead. The `customizer` is invoked with up to
 * six arguments: (objValue, othValue [, index|key, object, other, stack]).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * function isGreeting(value) {
 *   return /^h(?:i|ello)$/.test(value);
 * }
 *
 * function customizer(objValue, othValue) {
 *   if (isGreeting(objValue) && isGreeting(othValue)) {
 *     return true;
 *   }
 * }
 *
 * var array = ['hello', 'goodbye'];
 * var other = ['hi', 'goodbye'];
 *
 * _.isEqualWith(array, other, customizer);
 * // => true
 */
function isEqualWith(value, other, customizer) {
  customizer = typeof customizer == 'function' ? customizer : undefined;
  var result = customizer ? customizer(value, other) : undefined;
  return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
}

module.exports = isEqualWith;

----------------------------------------
File: ./animations/node_modules/lodash/_safeGet.js
----------------------------------------
/**
 * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function safeGet(object, key) {
  if (key === 'constructor' && typeof object[key] === 'function') {
    return;
  }

  if (key == '__proto__') {
    return;
  }

  return object[key];
}

module.exports = safeGet;

----------------------------------------
File: ./animations/node_modules/lodash/_baseMap.js
----------------------------------------
var baseEach = require('./_baseEach'),
    isArrayLike = require('./isArrayLike');

/**
 * The base implementation of `_.map` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function baseMap(collection, iteratee) {
  var index = -1,
      result = isArrayLike(collection) ? Array(collection.length) : [];

  baseEach(collection, function(value, key, collection) {
    result[++index] = iteratee(value, key, collection);
  });
  return result;
}

module.exports = baseMap;

----------------------------------------
File: ./animations/node_modules/lodash/isObjectLike.js
----------------------------------------
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

module.exports = isObjectLike;

----------------------------------------
File: ./animations/node_modules/lodash/_createAggregator.js
----------------------------------------
var arrayAggregator = require('./_arrayAggregator'),
    baseAggregator = require('./_baseAggregator'),
    baseIteratee = require('./_baseIteratee'),
    isArray = require('./isArray');

/**
 * Creates a function like `_.groupBy`.
 *
 * @private
 * @param {Function} setter The function to set accumulator values.
 * @param {Function} [initializer] The accumulator object initializer.
 * @returns {Function} Returns the new aggregator function.
 */
function createAggregator(setter, initializer) {
  return function(collection, iteratee) {
    var func = isArray(collection) ? arrayAggregator : baseAggregator,
        accumulator = initializer ? initializer() : {};

    return func(collection, setter, baseIteratee(iteratee, 2), accumulator);
  };
}

module.exports = createAggregator;

----------------------------------------
File: ./animations/node_modules/lodash/padEnd.js
----------------------------------------
var createPadding = require('./_createPadding'),
    stringSize = require('./_stringSize'),
    toInteger = require('./toInteger'),
    toString = require('./toString');

/**
 * Pads `string` on the right side if it's shorter than `length`. Padding
 * characters are truncated if they exceed `length`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to pad.
 * @param {number} [length=0] The padding length.
 * @param {string} [chars=' '] The string used as padding.
 * @returns {string} Returns the padded string.
 * @example
 *
 * _.padEnd('abc', 6);
 * // => 'abc   '
 *
 * _.padEnd('abc', 6, '_-');
 * // => 'abc_-_'
 *
 * _.padEnd('abc', 3);
 * // => 'abc'
 */
function padEnd(string, length, chars) {
  string = toString(string);
  length = toInteger(length);

  var strLength = length ? stringSize(string) : 0;
  return (length && strLength < length)
    ? (string + createPadding(length - strLength, chars))
    : string;
}

module.exports = padEnd;

----------------------------------------
File: ./animations/node_modules/lodash/_createBaseEach.js
----------------------------------------
var isArrayLike = require('./isArrayLike');

/**
 * Creates a `baseEach` or `baseEachRight` function.
 *
 * @private
 * @param {Function} eachFunc The function to iterate over a collection.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseEach(eachFunc, fromRight) {
  return function(collection, iteratee) {
    if (collection == null) {
      return collection;
    }
    if (!isArrayLike(collection)) {
      return eachFunc(collection, iteratee);
    }
    var length = collection.length,
        index = fromRight ? length : -1,
        iterable = Object(collection);

    while ((fromRight ? index-- : ++index < length)) {
      if (iteratee(iterable[index], index, iterable) === false) {
        break;
      }
    }
    return collection;
  };
}

module.exports = createBaseEach;

----------------------------------------
File: ./animations/node_modules/lodash/_setData.js
----------------------------------------
var baseSetData = require('./_baseSetData'),
    shortOut = require('./_shortOut');

/**
 * Sets metadata for `func`.
 *
 * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
 * period of time, it will trip its breaker and transition to an identity
 * function to avoid garbage collection pauses in V8. See
 * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
 * for more details.
 *
 * @private
 * @param {Function} func The function to associate metadata with.
 * @param {*} data The metadata.
 * @returns {Function} Returns `func`.
 */
var setData = shortOut(baseSetData);

module.exports = setData;

----------------------------------------
File: ./animations/node_modules/lodash/_MapCache.js
----------------------------------------
var mapCacheClear = require('./_mapCacheClear'),
    mapCacheDelete = require('./_mapCacheDelete'),
    mapCacheGet = require('./_mapCacheGet'),
    mapCacheHas = require('./_mapCacheHas'),
    mapCacheSet = require('./_mapCacheSet');

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

module.exports = MapCache;

----------------------------------------
File: ./animations/node_modules/lodash/_equalByTag.js
----------------------------------------
var Symbol = require('./_Symbol'),
    Uint8Array = require('./_Uint8Array'),
    eq = require('./eq'),
    equalArrays = require('./_equalArrays'),
    mapToArray = require('./_mapToArray'),
    setToArray = require('./_setToArray');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/** `Object#toString` result references. */
var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]';

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag:
      if ((object.byteLength != other.byteLength) ||
          (object.byteOffset != other.byteOffset)) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag:
      if ((object.byteLength != other.byteLength) ||
          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
        return false;
      }
      return true;

    case boolTag:
    case dateTag:
    case numberTag:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return eq(+object, +other);

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == (other + '');

    case mapTag:
      var convert = mapToArray;

    case setTag:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
      convert || (convert = setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= COMPARE_UNORDERED_FLAG;

      // Recursively compare objects (susceptible to call stack limits).
      stack.set(object, other);
      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
      stack['delete'](object);
      return result;

    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }
  }
  return false;
}

module.exports = equalByTag;

----------------------------------------
File: ./animations/node_modules/lodash/_baseAssign.js
----------------------------------------
var copyObject = require('./_copyObject'),
    keys = require('./keys');

/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssign(object, source) {
  return object && copyObject(source, keys(source), object);
}

module.exports = baseAssign;

----------------------------------------
File: ./animations/node_modules/lodash/range.js
----------------------------------------
var createRange = require('./_createRange');

/**
 * Creates an array of numbers (positive and/or negative) progressing from
 * `start` up to, but not including, `end`. A step of `-1` is used if a negative
 * `start` is specified without an `end` or `step`. If `end` is not specified,
 * it's set to `start` with `start` then set to `0`.
 *
 * **Note:** JavaScript follows the IEEE-754 standard for resolving
 * floating-point values which can produce unexpected results.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {number} [start=0] The start of the range.
 * @param {number} end The end of the range.
 * @param {number} [step=1] The value to increment or decrement by.
 * @returns {Array} Returns the range of numbers.
 * @see _.inRange, _.rangeRight
 * @example
 *
 * _.range(4);
 * // => [0, 1, 2, 3]
 *
 * _.range(-4);
 * // => [0, -1, -2, -3]
 *
 * _.range(1, 5);
 * // => [1, 2, 3, 4]
 *
 * _.range(0, 20, 5);
 * // => [0, 5, 10, 15]
 *
 * _.range(0, -4, -1);
 * // => [0, -1, -2, -3]
 *
 * _.range(1, 4, 0);
 * // => [1, 1, 1]
 *
 * _.range(0);
 * // => []
 */
var range = createRange();

module.exports = range;

----------------------------------------
File: ./animations/node_modules/lodash/sortedLastIndex.js
----------------------------------------
var baseSortedIndex = require('./_baseSortedIndex');

/**
 * This method is like `_.sortedIndex` except that it returns the highest
 * index at which `value` should be inserted into `array` in order to
 * maintain its sort order.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Array
 * @param {Array} array The sorted array to inspect.
 * @param {*} value The value to evaluate.
 * @returns {number} Returns the index at which `value` should be inserted
 *  into `array`.
 * @example
 *
 * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
 * // => 4
 */
function sortedLastIndex(array, value) {
  return baseSortedIndex(array, value, true);
}

module.exports = sortedLastIndex;

----------------------------------------
File: ./animations/node_modules/lodash/negate.js
----------------------------------------
/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a function that negates the result of the predicate `func`. The
 * `func` predicate is invoked with the `this` binding and arguments of the
 * created function.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Function
 * @param {Function} predicate The predicate to negate.
 * @returns {Function} Returns the new negated function.
 * @example
 *
 * function isEven(n) {
 *   return n % 2 == 0;
 * }
 *
 * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
 * // => [1, 3, 5]
 */
function negate(predicate) {
  if (typeof predicate != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  return function() {
    var args = arguments;
    switch (args.length) {
      case 0: return !predicate.call(this);
      case 1: return !predicate.call(this, args[0]);
      case 2: return !predicate.call(this, args[0], args[1]);
      case 3: return !predicate.call(this, args[0], args[1], args[2]);
    }
    return !predicate.apply(this, args);
  };
}

module.exports = negate;

----------------------------------------
File: ./animations/node_modules/lodash/wrapperAt.js
----------------------------------------
var LazyWrapper = require('./_LazyWrapper'),
    LodashWrapper = require('./_LodashWrapper'),
    baseAt = require('./_baseAt'),
    flatRest = require('./_flatRest'),
    isIndex = require('./_isIndex'),
    thru = require('./thru');

/**
 * This method is the wrapper version of `_.at`.
 *
 * @name at
 * @memberOf _
 * @since 1.0.0
 * @category Seq
 * @param {...(string|string[])} [paths] The property paths to pick.
 * @returns {Object} Returns the new `lodash` wrapper instance.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
 *
 * _(object).at(['a[0].b.c', 'a[1]']).value();
 * // => [3, 4]
 */
var wrapperAt = flatRest(function(paths) {
  var length = paths.length,
      start = length ? paths[0] : 0,
      value = this.__wrapped__,
      interceptor = function(object) { return baseAt(object, paths); };

  if (length > 1 || this.__actions__.length ||
      !(value instanceof LazyWrapper) || !isIndex(start)) {
    return this.thru(interceptor);
  }
  value = value.slice(start, +start + (length ? 1 : 0));
  value.__actions__.push({
    'func': thru,
    'args': [interceptor],
    'thisArg': undefined
  });
  return new LodashWrapper(value, this.__chain__).thru(function(array) {
    if (length && !array.length) {
      array.push(undefined);
    }
    return array;
  });
});

module.exports = wrapperAt;

----------------------------------------
File: ./animations/node_modules/lodash/_Map.js
----------------------------------------
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var Map = getNative(root, 'Map');

module.exports = Map;

----------------------------------------
File: ./animations/node_modules/lodash/_createCurry.js
----------------------------------------
var apply = require('./_apply'),
    createCtor = require('./_createCtor'),
    createHybrid = require('./_createHybrid'),
    createRecurry = require('./_createRecurry'),
    getHolder = require('./_getHolder'),
    replaceHolders = require('./_replaceHolders'),
    root = require('./_root');

/**
 * Creates a function that wraps `func` to enable currying.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {number} arity The arity of `func`.
 * @returns {Function} Returns the new wrapped function.
 */
function createCurry(func, bitmask, arity) {
  var Ctor = createCtor(func);

  function wrapper() {
    var length = arguments.length,
        args = Array(length),
        index = length,
        placeholder = getHolder(wrapper);

    while (index--) {
      args[index] = arguments[index];
    }
    var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
      ? []
      : replaceHolders(args, placeholder);

    length -= holders.length;
    if (length < arity) {
      return createRecurry(
        func, bitmask, createHybrid, wrapper.placeholder, undefined,
        args, holders, undefined, undefined, arity - length);
    }
    var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
    return apply(fn, this, args);
  }
  return wrapper;
}

module.exports = createCurry;

----------------------------------------
File: ./animations/node_modules/lodash/_lazyValue.js
----------------------------------------
var baseWrapperValue = require('./_baseWrapperValue'),
    getView = require('./_getView'),
    isArray = require('./isArray');

/** Used to indicate the type of lazy iteratees. */
var LAZY_FILTER_FLAG = 1,
    LAZY_MAP_FLAG = 2;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMin = Math.min;

/**
 * Extracts the unwrapped value from its lazy wrapper.
 *
 * @private
 * @name value
 * @memberOf LazyWrapper
 * @returns {*} Returns the unwrapped value.
 */
function lazyValue() {
  var array = this.__wrapped__.value(),
      dir = this.__dir__,
      isArr = isArray(array),
      isRight = dir < 0,
      arrLength = isArr ? array.length : 0,
      view = getView(0, arrLength, this.__views__),
      start = view.start,
      end = view.end,
      length = end - start,
      index = isRight ? end : (start - 1),
      iteratees = this.__iteratees__,
      iterLength = iteratees.length,
      resIndex = 0,
      takeCount = nativeMin(length, this.__takeCount__);

  if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
    return baseWrapperValue(array, this.__actions__);
  }
  var result = [];

  outer:
  while (length-- && resIndex < takeCount) {
    index += dir;

    var iterIndex = -1,
        value = array[index];

    while (++iterIndex < iterLength) {
      var data = iteratees[iterIndex],
          iteratee = data.iteratee,
          type = data.type,
          computed = iteratee(value);

      if (type == LAZY_MAP_FLAG) {
        value = computed;
      } else if (!computed) {
        if (type == LAZY_FILTER_FLAG) {
          continue outer;
        } else {
          break outer;
        }
      }
    }
    result[resIndex++] = value;
  }
  return result;
}

module.exports = lazyValue;

----------------------------------------
File: ./animations/node_modules/lodash/_arrayEvery.js
----------------------------------------
/**
 * A specialized version of `_.every` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if all elements pass the predicate check,
 *  else `false`.
 */
function arrayEvery(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (!predicate(array[index], index, array)) {
      return false;
    }
  }
  return true;
}

module.exports = arrayEvery;

----------------------------------------
File: ./animations/node_modules/lodash/extend.js
----------------------------------------
module.exports = require('./assignIn');

----------------------------------------
File: ./animations/node_modules/lodash/maxBy.js
----------------------------------------
var baseExtremum = require('./_baseExtremum'),
    baseGt = require('./_baseGt'),
    baseIteratee = require('./_baseIteratee');

/**
 * This method is like `_.max` except that it accepts `iteratee` which is
 * invoked for each element in `array` to generate the criterion by which
 * the value is ranked. The iteratee is invoked with one argument: (value).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Math
 * @param {Array} array The array to iterate over.
 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
 * @returns {*} Returns the maximum value.
 * @example
 *
 * var objects = [{ 'n': 1 }, { 'n': 2 }];
 *
 * _.maxBy(objects, function(o) { return o.n; });
 * // => { 'n': 2 }
 *
 * // The `_.property` iteratee shorthand.
 * _.maxBy(objects, 'n');
 * // => { 'n': 2 }
 */
function maxBy(array, iteratee) {
  return (array && array.length)
    ? baseExtremum(array, baseIteratee(iteratee, 2), baseGt)
    : undefined;
}

module.exports = maxBy;

----------------------------------------
File: ./animations/node_modules/lodash/multiply.js
----------------------------------------
var createMathOperation = require('./_createMathOperation');

/**
 * Multiply two numbers.
 *
 * @static
 * @memberOf _
 * @since 4.7.0
 * @category Math
 * @param {number} multiplier The first number in a multiplication.
 * @param {number} multiplicand The second number in a multiplication.
 * @returns {number} Returns the product.
 * @example
 *
 * _.multiply(6, 4);
 * // => 24
 */
var multiply = createMathOperation(function(multiplier, multiplicand) {
  return multiplier * multiplicand;
}, 1);

module.exports = multiply;

----------------------------------------
File: ./animations/node_modules/lodash/_baseClamp.js
----------------------------------------
/**
 * The base implementation of `_.clamp` which doesn't coerce arguments.
 *
 * @private
 * @param {number} number The number to clamp.
 * @param {number} [lower] The lower bound.
 * @param {number} upper The upper bound.
 * @returns {number} Returns the clamped number.
 */
function baseClamp(number, lower, upper) {
  if (number === number) {
    if (upper !== undefined) {
      number = number <= upper ? number : upper;
    }
    if (lower !== undefined) {
      number = number >= lower ? number : lower;
    }
  }
  return number;
}

module.exports = baseClamp;

----------------------------------------
File: ./animations/node_modules/lodash/_stackClear.js
----------------------------------------
var ListCache = require('./_ListCache');

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
  this.size = 0;
}

module.exports = stackClear;

----------------------------------------
File: ./animations/node_modules/lodash/_baseFilter.js
----------------------------------------
var baseEach = require('./_baseEach');

/**
 * The base implementation of `_.filter` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function baseFilter(collection, predicate) {
  var result = [];
  baseEach(collection, function(value, index, collection) {
    if (predicate(value, index, collection)) {
      result.push(value);
    }
  });
  return result;
}

module.exports = baseFilter;

----------------------------------------
File: ./animations/node_modules/lodash/assignInWith.js
----------------------------------------
var copyObject = require('./_copyObject'),
    createAssigner = require('./_createAssigner'),
    keysIn = require('./keysIn');

/**
 * This method is like `_.assignIn` except that it accepts `customizer`
 * which is invoked to produce the assigned values. If `customizer` returns
 * `undefined`, assignment is handled by the method instead. The `customizer`
 * is invoked with five arguments: (objValue, srcValue, key, object, source).
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @alias extendWith
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} sources The source objects.
 * @param {Function} [customizer] The function to customize assigned values.
 * @returns {Object} Returns `object`.
 * @see _.assignWith
 * @example
 *
 * function customizer(objValue, srcValue) {
 *   return _.isUndefined(objValue) ? srcValue : objValue;
 * }
 *
 * var defaults = _.partialRight(_.assignInWith, customizer);
 *
 * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
 * // => { 'a': 1, 'b': 2 }
 */
var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
  copyObject(source, keysIn(source), object, customizer);
});

module.exports = assignInWith;

----------------------------------------
File: ./animations/node_modules/lodash/_baseIsDate.js
----------------------------------------
var baseGetTag = require('./_baseGetTag'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var dateTag = '[object Date]';

/**
 * The base implementation of `_.isDate` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
 */
function baseIsDate(value) {
  return isObjectLike(value) && baseGetTag(value) == dateTag;
}

module.exports = baseIsDate;

----------------------------------------
File: ./animations/node_modules/lodash/_unicodeToArray.js
----------------------------------------
/** Used to compose unicode character classes. */
var rsAstralRange = '\\ud800-\\udfff',
    rsComboMarksRange = '\\u0300-\\u036f',
    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
    rsComboSymbolsRange = '\\u20d0-\\u20ff',
    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
    rsVarRange = '\\ufe0e\\ufe0f';

/** Used to compose unicode capture groups. */
var rsAstral = '[' + rsAstralRange + ']',
    rsCombo = '[' + rsComboRange + ']',
    rsFitz = '\\ud83c[\\udffb-\\udfff]',
    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
    rsNonAstral = '[^' + rsAstralRange + ']',
    rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
    rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
    rsZWJ = '\\u200d';

/** Used to compose unicode regexes. */
var reOptMod = rsModifier + '?',
    rsOptVar = '[' + rsVarRange + ']?',
    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
    rsSeq = rsOptVar + reOptMod + rsOptJoin,
    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

/**
 * Converts a Unicode `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function unicodeToArray(string) {
  return string.match(reUnicode) || [];
}

module.exports = unicodeToArray;

----------------------------------------
File: ./animations/node_modules/lodash/_baseIsArrayBuffer.js
----------------------------------------
var baseGetTag = require('./_baseGetTag'),
    isObjectLike = require('./isObjectLike');

var arrayBufferTag = '[object ArrayBuffer]';

/**
 * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
 */
function baseIsArrayBuffer(value) {
  return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
}

module.exports = baseIsArrayBuffer;

----------------------------------------
File: ./animations/node_modules/lodash/_baseLodash.js
----------------------------------------
/**
 * The function whose prototype chain sequence wrappers inherit from.
 *
 * @private
 */
function baseLodash() {
  // No operation performed.
}

module.exports = baseLodash;

----------------------------------------
File: ./animations/node_modules/lodash/isArrayBuffer.js
----------------------------------------
var baseIsArrayBuffer = require('./_baseIsArrayBuffer'),
    baseUnary = require('./_baseUnary'),
    nodeUtil = require('./_nodeUtil');

/* Node.js helper references. */
var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer;

/**
 * Checks if `value` is classified as an `ArrayBuffer` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
 * @example
 *
 * _.isArrayBuffer(new ArrayBuffer(2));
 * // => true
 *
 * _.isArrayBuffer(new Array(2));
 * // => false
 */
var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

module.exports = isArrayBuffer;

----------------------------------------
File: ./animations/node_modules/lodash/_strictLastIndexOf.js
----------------------------------------
/**
 * A specialized version of `_.lastIndexOf` which performs strict equality
 * comparisons of values, i.e. `===`.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function strictLastIndexOf(array, value, fromIndex) {
  var index = fromIndex + 1;
  while (index--) {
    if (array[index] === value) {
      return index;
    }
  }
  return index;
}

module.exports = strictLastIndexOf;

----------------------------------------
File: ./animations/node_modules/lodash/_baseLt.js
----------------------------------------
/**
 * The base implementation of `_.lt` which doesn't coerce arguments.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if `value` is less than `other`,
 *  else `false`.
 */
function baseLt(value, other) {
  return value < other;
}

module.exports = baseLt;

----------------------------------------
File: ./animations/node_modules/lodash/pickBy.js
----------------------------------------
var arrayMap = require('./_arrayMap'),
    baseIteratee = require('./_baseIteratee'),
    basePickBy = require('./_basePickBy'),
    getAllKeysIn = require('./_getAllKeysIn');

/**
 * Creates an object composed of the `object` properties `predicate` returns
 * truthy for. The predicate is invoked with two arguments: (value, key).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The source object.
 * @param {Function} [predicate=_.identity] The function invoked per property.
 * @returns {Object} Returns the new object.
 * @example
 *
 * var object = { 'a': 1, 'b': '2', 'c': 3 };
 *
 * _.pickBy(object, _.isNumber);
 * // => { 'a': 1, 'c': 3 }
 */
function pickBy(object, predicate) {
  if (object == null) {
    return {};
  }
  var props = arrayMap(getAllKeysIn(object), function(prop) {
    return [prop];
  });
  predicate = baseIteratee(predicate);
  return basePickBy(object, props, function(value, path) {
    return predicate(value, path[0]);
  });
}

module.exports = pickBy;

----------------------------------------
File: ./animations/node_modules/lodash/_realNames.js
----------------------------------------
/** Used to lookup unminified function names. */
var realNames = {};

module.exports = realNames;

----------------------------------------
File: ./animations/node_modules/lodash/toLower.js
----------------------------------------
var toString = require('./toString');

/**
 * Converts `string`, as a whole, to lower case just like
 * [String#toLowerCase](https://mdn.io/toLowerCase).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the lower cased string.
 * @example
 *
 * _.toLower('--Foo-Bar--');
 * // => '--foo-bar--'
 *
 * _.toLower('fooBar');
 * // => 'foobar'
 *
 * _.toLower('__FOO_BAR__');
 * // => '__foo_bar__'
 */
function toLower(value) {
  return toString(value).toLowerCase();
}

module.exports = toLower;

----------------------------------------
File: ./animations/node_modules/lodash/_hashClear.js
----------------------------------------
var nativeCreate = require('./_nativeCreate');

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
  this.size = 0;
}

module.exports = hashClear;

----------------------------------------
File: ./animations/node_modules/lodash/uniqBy.js
----------------------------------------
var baseIteratee = require('./_baseIteratee'),
    baseUniq = require('./_baseUniq');

/**
 * This method is like `_.uniq` except that it accepts `iteratee` which is
 * invoked for each element in `array` to generate the criterion by which
 * uniqueness is computed. The order of result values is determined by the
 * order they occur in the array. The iteratee is invoked with one argument:
 * (value).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
 * @returns {Array} Returns the new duplicate free array.
 * @example
 *
 * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
 * // => [2.1, 1.2]
 *
 * // The `_.property` iteratee shorthand.
 * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
 * // => [{ 'x': 1 }, { 'x': 2 }]
 */
function uniqBy(array, iteratee) {
  return (array && array.length) ? baseUniq(array, baseIteratee(iteratee, 2)) : [];
}

module.exports = uniqBy;

----------------------------------------
File: ./animations/node_modules/lodash/util.js
----------------------------------------
module.exports = {
  'attempt': require('./attempt'),
  'bindAll': require('./bindAll'),
  'cond': require('./cond'),
  'conforms': require('./conforms'),
  'constant': require('./constant'),
  'defaultTo': require('./defaultTo'),
  'flow': require('./flow'),
  'flowRight': require('./flowRight'),
  'identity': require('./identity'),
  'iteratee': require('./iteratee'),
  'matches': require('./matches'),
  'matchesProperty': require('./matchesProperty'),
  'method': require('./method'),
  'methodOf': require('./methodOf'),
  'mixin': require('./mixin'),
  'noop': require('./noop'),
  'nthArg': require('./nthArg'),
  'over': require('./over'),
  'overEvery': require('./overEvery'),
  'overSome': require('./overSome'),
  'property': require('./property'),
  'propertyOf': require('./propertyOf'),
  'range': require('./range'),
  'rangeRight': require('./rangeRight'),
  'stubArray': require('./stubArray'),
  'stubFalse': require('./stubFalse'),
  'stubObject': require('./stubObject'),
  'stubString': require('./stubString'),
  'stubTrue': require('./stubTrue'),
  'times': require('./times'),
  'toPath': require('./toPath'),
  'uniqueId': require('./uniqueId')
};

----------------------------------------
File: ./animations/node_modules/lodash/chain.js
----------------------------------------
var lodash = require('./wrapperLodash');

/**
 * Creates a `lodash` wrapper instance that wraps `value` with explicit method
 * chain sequences enabled. The result of such sequences must be unwrapped
 * with `_#value`.
 *
 * @static
 * @memberOf _
 * @since 1.3.0
 * @category Seq
 * @param {*} value The value to wrap.
 * @returns {Object} Returns the new `lodash` wrapper instance.
 * @example
 *
 * var users = [
 *   { 'user': 'barney',  'age': 36 },
 *   { 'user': 'fred',    'age': 40 },
 *   { 'user': 'pebbles', 'age': 1 }
 * ];
 *
 * var youngest = _
 *   .chain(users)
 *   .sortBy('age')
 *   .map(function(o) {
 *     return o.user + ' is ' + o.age;
 *   })
 *   .head()
 *   .value();
 * // => 'pebbles is 1'
 */
function chain(value) {
  var result = lodash(value);
  result.__chain__ = true;
  return result;
}

module.exports = chain;

----------------------------------------
File: ./animations/node_modules/lodash/_baseWhile.js
----------------------------------------
var baseSlice = require('./_baseSlice');

/**
 * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
 * without support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to query.
 * @param {Function} predicate The function invoked per iteration.
 * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Array} Returns the slice of `array`.
 */
function baseWhile(array, predicate, isDrop, fromRight) {
  var length = array.length,
      index = fromRight ? length : -1;

  while ((fromRight ? index-- : ++index < length) &&
    predicate(array[index], index, array)) {}

  return isDrop
    ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
    : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
}

module.exports = baseWhile;

----------------------------------------
File: ./animations/node_modules/lodash/_baseToString.js
----------------------------------------
var Symbol = require('./_Symbol'),
    arrayMap = require('./_arrayMap'),
    isArray = require('./isArray'),
    isSymbol = require('./isSymbol');

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isArray(value)) {
    // Recursively convert values (susceptible to call stack limits).
    return arrayMap(value, baseToString) + '';
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

module.exports = baseToString;

----------------------------------------
File: ./animations/node_modules/lodash/rearg.js
----------------------------------------
var createWrap = require('./_createWrap'),
    flatRest = require('./_flatRest');

/** Used to compose bitmasks for function metadata. */
var WRAP_REARG_FLAG = 256;

/**
 * Creates a function that invokes `func` with arguments arranged according
 * to the specified `indexes` where the argument value at the first index is
 * provided as the first argument, the argument value at the second index is
 * provided as the second argument, and so on.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Function
 * @param {Function} func The function to rearrange arguments for.
 * @param {...(number|number[])} indexes The arranged argument indexes.
 * @returns {Function} Returns the new function.
 * @example
 *
 * var rearged = _.rearg(function(a, b, c) {
 *   return [a, b, c];
 * }, [2, 0, 1]);
 *
 * rearged('b', 'c', 'a')
 * // => ['a', 'b', 'c']
 */
var rearg = flatRest(function(func, indexes) {
  return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
});

module.exports = rearg;

----------------------------------------
File: ./animations/node_modules/lodash/_copySymbolsIn.js
----------------------------------------
var copyObject = require('./_copyObject'),
    getSymbolsIn = require('./_getSymbolsIn');

/**
 * Copies own and inherited symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbolsIn(source, object) {
  return copyObject(source, getSymbolsIn(source), object);
}

module.exports = copySymbolsIn;

----------------------------------------
File: ./animations/node_modules/lodash/plant.js
----------------------------------------
var baseLodash = require('./_baseLodash'),
    wrapperClone = require('./_wrapperClone');

/**
 * Creates a clone of the chain sequence planting `value` as the wrapped value.
 *
 * @name plant
 * @memberOf _
 * @since 3.2.0
 * @category Seq
 * @param {*} value The value to plant.
 * @returns {Object} Returns the new `lodash` wrapper instance.
 * @example
 *
 * function square(n) {
 *   return n * n;
 * }
 *
 * var wrapped = _([1, 2]).map(square);
 * var other = wrapped.plant([3, 4]);
 *
 * other.value();
 * // => [9, 16]
 *
 * wrapped.value();
 * // => [1, 4]
 */
function wrapperPlant(value) {
  var result,
      parent = this;

  while (parent instanceof baseLodash) {
    var clone = wrapperClone(parent);
    clone.__index__ = 0;
    clone.__values__ = undefined;
    if (result) {
      previous.__wrapped__ = clone;
    } else {
      result = clone;
    }
    var previous = clone;
    parent = parent.__wrapped__;
  }
  previous.__wrapped__ = value;
  return result;
}

module.exports = wrapperPlant;

----------------------------------------
File: ./animations/node_modules/lodash/mapKeys.js
----------------------------------------
var baseAssignValue = require('./_baseAssignValue'),
    baseForOwn = require('./_baseForOwn'),
    baseIteratee = require('./_baseIteratee');

/**
 * The opposite of `_.mapValues`; this method creates an object with the
 * same values as `object` and keys generated by running each own enumerable
 * string keyed property of `object` thru `iteratee`. The iteratee is invoked
 * with three arguments: (value, key, object).
 *
 * @static
 * @memberOf _
 * @since 3.8.0
 * @category Object
 * @param {Object} object The object to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Object} Returns the new mapped object.
 * @see _.mapValues
 * @example
 *
 * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
 *   return key + value;
 * });
 * // => { 'a1': 1, 'b2': 2 }
 */
function mapKeys(object, iteratee) {
  var result = {};
  iteratee = baseIteratee(iteratee, 3);

  baseForOwn(object, function(value, key, object) {
    baseAssignValue(result, iteratee(value, key, object), value);
  });
  return result;
}

module.exports = mapKeys;

----------------------------------------
File: ./animations/node_modules/lodash/reverse.js
----------------------------------------
/** Used for built-in method references. */
var arrayProto = Array.prototype;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeReverse = arrayProto.reverse;

/**
 * Reverses `array` so that the first element becomes the last, the second
 * element becomes the second to last, and so on.
 *
 * **Note:** This method mutates `array` and is based on
 * [`Array#reverse`](https://mdn.io/Array/reverse).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {Array} array The array to modify.
 * @returns {Array} Returns `array`.
 * @example
 *
 * var array = [1, 2, 3];
 *
 * _.reverse(array);
 * // => [3, 2, 1]
 *
 * console.log(array);
 * // => [3, 2, 1]
 */
function reverse(array) {
  return array == null ? array : nativeReverse.call(array);
}

module.exports = reverse;

----------------------------------------
File: ./animations/node_modules/lodash/_baseIsMatch.js
----------------------------------------
var Stack = require('./_Stack'),
    baseIsEqual = require('./_baseIsEqual');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */
function baseIsMatch(object, source, matchData, customizer) {
  var index = matchData.length,
      length = index,
      noCustomizer = !customizer;

  if (object == null) {
    return !length;
  }
  object = Object(object);
  while (index--) {
    var data = matchData[index];
    if ((noCustomizer && data[2])
          ? data[1] !== object[data[0]]
          : !(data[0] in object)
        ) {
      return false;
    }
  }
  while (++index < length) {
    data = matchData[index];
    var key = data[0],
        objValue = object[key],
        srcValue = data[1];

    if (noCustomizer && data[2]) {
      if (objValue === undefined && !(key in object)) {
        return false;
      }
    } else {
      var stack = new Stack;
      if (customizer) {
        var result = customizer(objValue, srcValue, key, object, source, stack);
      }
      if (!(result === undefined
            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
            : result
          )) {
        return false;
      }
    }
  }
  return true;
}

module.exports = baseIsMatch;

----------------------------------------
File: ./animations/node_modules/lodash/_isIterateeCall.js
----------------------------------------
var eq = require('./eq'),
    isArrayLike = require('./isArrayLike'),
    isIndex = require('./_isIndex'),
    isObject = require('./isObject');

/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
 *  else `false`.
 */
function isIterateeCall(value, index, object) {
  if (!isObject(object)) {
    return false;
  }
  var type = typeof index;
  if (type == 'number'
        ? (isArrayLike(object) && isIndex(index, object.length))
        : (type == 'string' && index in object)
      ) {
    return eq(object[index], value);
  }
  return false;
}

module.exports = isIterateeCall;

----------------------------------------
File: ./animations/node_modules/lodash/_baseSample.js
----------------------------------------
var arraySample = require('./_arraySample'),
    values = require('./values');

/**
 * The base implementation of `_.sample`.
 *
 * @private
 * @param {Array|Object} collection The collection to sample.
 * @returns {*} Returns the random element.
 */
function baseSample(collection) {
  return arraySample(values(collection));
}

module.exports = baseSample;

----------------------------------------
File: ./animations/node_modules/lodash/functionsIn.js
----------------------------------------
var baseFunctions = require('./_baseFunctions'),
    keysIn = require('./keysIn');

/**
 * Creates an array of function property names from own and inherited
 * enumerable properties of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to inspect.
 * @returns {Array} Returns the function names.
 * @see _.functions
 * @example
 *
 * function Foo() {
 *   this.a = _.constant('a');
 *   this.b = _.constant('b');
 * }
 *
 * Foo.prototype.c = _.constant('c');
 *
 * _.functionsIn(new Foo);
 * // => ['a', 'b', 'c']
 */
function functionsIn(object) {
  return object == null ? [] : baseFunctions(object, keysIn(object));
}

module.exports = functionsIn;

----------------------------------------
File: ./animations/node_modules/lodash/fp.js
----------------------------------------
var _ = require('./lodash.min').runInContext();
module.exports = require('./fp/_baseConvert')(_, _);

----------------------------------------
File: ./animations/node_modules/lodash/unzip.js
----------------------------------------
var arrayFilter = require('./_arrayFilter'),
    arrayMap = require('./_arrayMap'),
    baseProperty = require('./_baseProperty'),
    baseTimes = require('./_baseTimes'),
    isArrayLikeObject = require('./isArrayLikeObject');

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * This method is like `_.zip` except that it accepts an array of grouped
 * elements and creates an array regrouping the elements to their pre-zip
 * configuration.
 *
 * @static
 * @memberOf _
 * @since 1.2.0
 * @category Array
 * @param {Array} array The array of grouped elements to process.
 * @returns {Array} Returns the new array of regrouped elements.
 * @example
 *
 * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
 * // => [['a', 1, true], ['b', 2, false]]
 *
 * _.unzip(zipped);
 * // => [['a', 'b'], [1, 2], [true, false]]
 */
function unzip(array) {
  if (!(array && array.length)) {
    return [];
  }
  var length = 0;
  array = arrayFilter(array, function(group) {
    if (isArrayLikeObject(group)) {
      length = nativeMax(group.length, length);
      return true;
    }
  });
  return baseTimes(length, function(index) {
    return arrayMap(array, baseProperty(index));
  });
}

module.exports = unzip;

----------------------------------------
File: ./animations/node_modules/lodash/_castFunction.js
----------------------------------------
var identity = require('./identity');

/**
 * Casts `value` to `identity` if it's not a function.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {Function} Returns cast function.
 */
function castFunction(value) {
  return typeof value == 'function' ? value : identity;
}

module.exports = castFunction;

----------------------------------------
File: ./animations/node_modules/lodash/isEqual.js
----------------------------------------
var baseIsEqual = require('./_baseIsEqual');

/**
 * Performs a deep comparison between two values to determine if they are
 * equivalent.
 *
 * **Note:** This method supports comparing arrays, array buffers, booleans,
 * date objects, error objects, maps, numbers, `Object` objects, regexes,
 * sets, strings, symbols, and typed arrays. `Object` objects are compared
 * by their own, not inherited, enumerable properties. Functions and DOM
 * nodes are compared by strict equality, i.e. `===`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.isEqual(object, other);
 * // => true
 *
 * object === other;
 * // => false
 */
function isEqual(value, other) {
  return baseIsEqual(value, other);
}

module.exports = isEqual;

----------------------------------------
File: ./animations/node_modules/lodash/_LazyWrapper.js
----------------------------------------
var baseCreate = require('./_baseCreate'),
    baseLodash = require('./_baseLodash');

/** Used as references for the maximum length and index of an array. */
var MAX_ARRAY_LENGTH = 4294967295;

/**
 * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
 *
 * @private
 * @constructor
 * @param {*} value The value to wrap.
 */
function LazyWrapper(value) {
  this.__wrapped__ = value;
  this.__actions__ = [];
  this.__dir__ = 1;
  this.__filtered__ = false;
  this.__iteratees__ = [];
  this.__takeCount__ = MAX_ARRAY_LENGTH;
  this.__views__ = [];
}

// Ensure `LazyWrapper` is an instance of `baseLodash`.
LazyWrapper.prototype = baseCreate(baseLodash.prototype);
LazyWrapper.prototype.constructor = LazyWrapper;

module.exports = LazyWrapper;

----------------------------------------
File: ./animations/node_modules/lodash/_arraySampleSize.js
----------------------------------------
var baseClamp = require('./_baseClamp'),
    copyArray = require('./_copyArray'),
    shuffleSelf = require('./_shuffleSelf');

/**
 * A specialized version of `_.sampleSize` for arrays.
 *
 * @private
 * @param {Array} array The array to sample.
 * @param {number} n The number of elements to sample.
 * @returns {Array} Returns the random elements.
 */
function arraySampleSize(array, n) {
  return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
}

module.exports = arraySampleSize;

----------------------------------------
File: ./animations/node_modules/lodash/xorBy.js
----------------------------------------
var arrayFilter = require('./_arrayFilter'),
    baseIteratee = require('./_baseIteratee'),
    baseRest = require('./_baseRest'),
    baseXor = require('./_baseXor'),
    isArrayLikeObject = require('./isArrayLikeObject'),
    last = require('./last');

/**
 * This method is like `_.xor` except that it accepts `iteratee` which is
 * invoked for each element of each `arrays` to generate the criterion by
 * which by which they're compared. The order of result values is determined
 * by the order they occur in the arrays. The iteratee is invoked with one
 * argument: (value).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {...Array} [arrays] The arrays to inspect.
 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
 * @returns {Array} Returns the new array of filtered values.
 * @example
 *
 * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
 * // => [1.2, 3.4]
 *
 * // The `_.property` iteratee shorthand.
 * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
 * // => [{ 'x': 2 }]
 */
var xorBy = baseRest(function(arrays) {
  var iteratee = last(arrays);
  if (isArrayLikeObject(iteratee)) {
    iteratee = undefined;
  }
  return baseXor(arrayFilter(arrays, isArrayLikeObject), baseIteratee(iteratee, 2));
});

module.exports = xorBy;

----------------------------------------
File: ./animations/node_modules/lodash/upperFirst.js
----------------------------------------
var createCaseFirst = require('./_createCaseFirst');

/**
 * Converts the first character of `string` to upper case.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.upperFirst('fred');
 * // => 'Fred'
 *
 * _.upperFirst('FRED');
 * // => 'FRED'
 */
var upperFirst = createCaseFirst('toUpperCase');

module.exports = upperFirst;

----------------------------------------
File: ./animations/node_modules/lodash/join.js
----------------------------------------
/** Used for built-in method references. */
var arrayProto = Array.prototype;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeJoin = arrayProto.join;

/**
 * Converts all elements in `array` into a string separated by `separator`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {Array} array The array to convert.
 * @param {string} [separator=','] The element separator.
 * @returns {string} Returns the joined string.
 * @example
 *
 * _.join(['a', 'b', 'c'], '~');
 * // => 'a~b~c'
 */
function join(array, separator) {
  return array == null ? '' : nativeJoin.call(array, separator);
}

module.exports = join;

----------------------------------------
File: ./animations/node_modules/lodash/at.js
----------------------------------------
var baseAt = require('./_baseAt'),
    flatRest = require('./_flatRest');

/**
 * Creates an array of values corresponding to `paths` of `object`.
 *
 * @static
 * @memberOf _
 * @since 1.0.0
 * @category Object
 * @param {Object} object The object to iterate over.
 * @param {...(string|string[])} [paths] The property paths to pick.
 * @returns {Array} Returns the picked values.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
 *
 * _.at(object, ['a[0].b.c', 'a[1]']);
 * // => [3, 4]
 */
var at = flatRest(baseAt);

module.exports = at;

----------------------------------------
File: ./animations/node_modules/lodash/ceil.js
----------------------------------------
var createRound = require('./_createRound');

/**
 * Computes `number` rounded up to `precision`.
 *
 * @static
 * @memberOf _
 * @since 3.10.0
 * @category Math
 * @param {number} number The number to round up.
 * @param {number} [precision=0] The precision to round up to.
 * @returns {number} Returns the rounded up number.
 * @example
 *
 * _.ceil(4.006);
 * // => 5
 *
 * _.ceil(6.004, 2);
 * // => 6.01
 *
 * _.ceil(6040, -2);
 * // => 6100
 */
var ceil = createRound('ceil');

module.exports = ceil;

----------------------------------------
File: ./animations/node_modules/lodash/_getData.js
----------------------------------------
var metaMap = require('./_metaMap'),
    noop = require('./noop');

/**
 * Gets metadata for `func`.
 *
 * @private
 * @param {Function} func The function to query.
 * @returns {*} Returns the metadata for `func`.
 */
var getData = !metaMap ? noop : function(func) {
  return metaMap.get(func);
};

module.exports = getData;

----------------------------------------
File: ./animations/node_modules/lodash/isError.js
----------------------------------------
var baseGetTag = require('./_baseGetTag'),
    isObjectLike = require('./isObjectLike'),
    isPlainObject = require('./isPlainObject');

/** `Object#toString` result references. */
var domExcTag = '[object DOMException]',
    errorTag = '[object Error]';

/**
 * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
 * `SyntaxError`, `TypeError`, or `URIError` object.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
 * @example
 *
 * _.isError(new Error);
 * // => true
 *
 * _.isError(Error);
 * // => false
 */
function isError(value) {
  if (!isObjectLike(value)) {
    return false;
  }
  var tag = baseGetTag(value);
  return tag == errorTag || tag == domExcTag ||
    (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
}

module.exports = isError;

----------------------------------------
File: ./animations/node_modules/lodash/_getRawTag.js
----------------------------------------
var Symbol = require('./_Symbol');

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

module.exports = getRawTag;

----------------------------------------
File: ./animations/node_modules/lodash/valuesIn.js
----------------------------------------
var baseValues = require('./_baseValues'),
    keysIn = require('./keysIn');

/**
 * Creates an array of the own and inherited enumerable string keyed property
 * values of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property values.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.valuesIn(new Foo);
 * // => [1, 2, 3] (iteration order is not guaranteed)
 */
function valuesIn(object) {
  return object == null ? [] : baseValues(object, keysIn(object));
}

module.exports = valuesIn;

----------------------------------------
File: ./animations/node_modules/lodash/_createToPairs.js
----------------------------------------
var baseToPairs = require('./_baseToPairs'),
    getTag = require('./_getTag'),
    mapToArray = require('./_mapToArray'),
    setToPairs = require('./_setToPairs');

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    setTag = '[object Set]';

/**
 * Creates a `_.toPairs` or `_.toPairsIn` function.
 *
 * @private
 * @param {Function} keysFunc The function to get the keys of a given object.
 * @returns {Function} Returns the new pairs function.
 */
function createToPairs(keysFunc) {
  return function(object) {
    var tag = getTag(object);
    if (tag == mapTag) {
      return mapToArray(object);
    }
    if (tag == setTag) {
      return setToPairs(object);
    }
    return baseToPairs(object, keysFunc(object));
  };
}

module.exports = createToPairs;

----------------------------------------
File: ./animations/node_modules/lodash/_createRound.js
----------------------------------------
var root = require('./_root'),
    toInteger = require('./toInteger'),
    toNumber = require('./toNumber'),
    toString = require('./toString');

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeIsFinite = root.isFinite,
    nativeMin = Math.min;

/**
 * Creates a function like `_.round`.
 *
 * @private
 * @param {string} methodName The name of the `Math` method to use when rounding.
 * @returns {Function} Returns the new round function.
 */
function createRound(methodName) {
  var func = Math[methodName];
  return function(number, precision) {
    number = toNumber(number);
    precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
    if (precision && nativeIsFinite(number)) {
      // Shift with exponential notation to avoid floating-point issues.
      // See [MDN](https://mdn.io/round#Examples) for more details.
      var pair = (toString(number) + 'e').split('e'),
          value = func(pair[0] + 'e' + (+pair[1] + precision));

      pair = (toString(value) + 'e').split('e');
      return +(pair[0] + 'e' + (+pair[1] - precision));
    }
    return func(number);
  };
}

module.exports = createRound;

----------------------------------------
File: ./animations/node_modules/lodash/times.js
----------------------------------------
var baseTimes = require('./_baseTimes'),
    castFunction = require('./_castFunction'),
    toInteger = require('./toInteger');

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** Used as references for the maximum length and index of an array. */
var MAX_ARRAY_LENGTH = 4294967295;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMin = Math.min;

/**
 * Invokes the iteratee `n` times, returning an array of the results of
 * each invocation. The iteratee is invoked with one argument; (index).
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 * @example
 *
 * _.times(3, String);
 * // => ['0', '1', '2']
 *
 *  _.times(4, _.constant(0));
 * // => [0, 0, 0, 0]
 */
function times(n, iteratee) {
  n = toInteger(n);
  if (n < 1 || n > MAX_SAFE_INTEGER) {
    return [];
  }
  var index = MAX_ARRAY_LENGTH,
      length = nativeMin(n, MAX_ARRAY_LENGTH);

  iteratee = castFunction(iteratee);
  n -= MAX_ARRAY_LENGTH;

  var result = baseTimes(length, iteratee);
  while (++index < n) {
    iteratee(index);
  }
  return result;
}

module.exports = times;

----------------------------------------
File: ./animations/node_modules/lodash/_basePullAll.js
----------------------------------------
var arrayMap = require('./_arrayMap'),
    baseIndexOf = require('./_baseIndexOf'),
    baseIndexOfWith = require('./_baseIndexOfWith'),
    baseUnary = require('./_baseUnary'),
    copyArray = require('./_copyArray');

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * The base implementation of `_.pullAllBy` without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to remove.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns `array`.
 */
function basePullAll(array, values, iteratee, comparator) {
  var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
      index = -1,
      length = values.length,
      seen = array;

  if (array === values) {
    values = copyArray(values);
  }
  if (iteratee) {
    seen = arrayMap(array, baseUnary(iteratee));
  }
  while (++index < length) {
    var fromIndex = 0,
        value = values[index],
        computed = iteratee ? iteratee(value) : value;

    while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
      if (seen !== array) {
        splice.call(seen, fromIndex, 1);
      }
      splice.call(array, fromIndex, 1);
    }
  }
  return array;
}

module.exports = basePullAll;

----------------------------------------
File: ./animations/node_modules/lodash/_iteratorToArray.js
----------------------------------------
/**
 * Converts `iterator` to an array.
 *
 * @private
 * @param {Object} iterator The iterator to convert.
 * @returns {Array} Returns the converted array.
 */
function iteratorToArray(iterator) {
  var data,
      result = [];

  while (!(data = iterator.next()).done) {
    result.push(data.value);
  }
  return result;
}

module.exports = iteratorToArray;

----------------------------------------
File: ./animations/node_modules/lodash/size.js
----------------------------------------
var baseKeys = require('./_baseKeys'),
    getTag = require('./_getTag'),
    isArrayLike = require('./isArrayLike'),
    isString = require('./isString'),
    stringSize = require('./_stringSize');

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    setTag = '[object Set]';

/**
 * Gets the size of `collection` by returning its length for array-like
 * values or the number of own enumerable string keyed properties for objects.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object|string} collection The collection to inspect.
 * @returns {number} Returns the collection size.
 * @example
 *
 * _.size([1, 2, 3]);
 * // => 3
 *
 * _.size({ 'a': 1, 'b': 2 });
 * // => 2
 *
 * _.size('pebbles');
 * // => 7
 */
function size(collection) {
  if (collection == null) {
    return 0;
  }
  if (isArrayLike(collection)) {
    return isString(collection) ? stringSize(collection) : collection.length;
  }
  var tag = getTag(collection);
  if (tag == mapTag || tag == setTag) {
    return collection.size;
  }
  return baseKeys(collection).length;
}

module.exports = size;

----------------------------------------
File: ./animations/node_modules/lodash/findLast.js
----------------------------------------
var createFind = require('./_createFind'),
    findLastIndex = require('./findLastIndex');

/**
 * This method is like `_.find` except that it iterates over elements of
 * `collection` from right to left.
 *
 * @static
 * @memberOf _
 * @since 2.0.0
 * @category Collection
 * @param {Array|Object} collection The collection to inspect.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @param {number} [fromIndex=collection.length-1] The index to search from.
 * @returns {*} Returns the matched element, else `undefined`.
 * @example
 *
 * _.findLast([1, 2, 3, 4], function(n) {
 *   return n % 2 == 1;
 * });
 * // => 3
 */
var findLast = createFind(findLastIndex);

module.exports = findLast;

----------------------------------------
File: ./animations/node_modules/lodash/random.js
----------------------------------------
var baseRandom = require('./_baseRandom'),
    isIterateeCall = require('./_isIterateeCall'),
    toFinite = require('./toFinite');

/** Built-in method references without a dependency on `root`. */
var freeParseFloat = parseFloat;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMin = Math.min,
    nativeRandom = Math.random;

/**
 * Produces a random number between the inclusive `lower` and `upper` bounds.
 * If only one argument is provided a number between `0` and the given number
 * is returned. If `floating` is `true`, or either `lower` or `upper` are
 * floats, a floating-point number is returned instead of an integer.
 *
 * **Note:** JavaScript follows the IEEE-754 standard for resolving
 * floating-point values which can produce unexpected results.
 *
 * @static
 * @memberOf _
 * @since 0.7.0
 * @category Number
 * @param {number} [lower=0] The lower bound.
 * @param {number} [upper=1] The upper bound.
 * @param {boolean} [floating] Specify returning a floating-point number.
 * @returns {number} Returns the random number.
 * @example
 *
 * _.random(0, 5);
 * // => an integer between 0 and 5
 *
 * _.random(5);
 * // => also an integer between 0 and 5
 *
 * _.random(5, true);
 * // => a floating-point number between 0 and 5
 *
 * _.random(1.2, 5.2);
 * // => a floating-point number between 1.2 and 5.2
 */
function random(lower, upper, floating) {
  if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
    upper = floating = undefined;
  }
  if (floating === undefined) {
    if (typeof upper == 'boolean') {
      floating = upper;
      upper = undefined;
    }
    else if (typeof lower == 'boolean') {
      floating = lower;
      lower = undefined;
    }
  }
  if (lower === undefined && upper === undefined) {
    lower = 0;
    upper = 1;
  }
  else {
    lower = toFinite(lower);
    if (upper === undefined) {
      upper = lower;
      lower = 0;
    } else {
      upper = toFinite(upper);
    }
  }
  if (lower > upper) {
    var temp = lower;
    lower = upper;
    upper = temp;
  }
  if (floating || lower % 1 || upper % 1) {
    var rand = nativeRandom();
    return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
  }
  return baseRandom(lower, upper);
}

module.exports = random;

----------------------------------------
File: ./animations/node_modules/lodash/findIndex.js
----------------------------------------
var baseFindIndex = require('./_baseFindIndex'),
    baseIteratee = require('./_baseIteratee'),
    toInteger = require('./toInteger');

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * This method is like `_.find` except that it returns the index of the first
 * element `predicate` returns truthy for instead of the element itself.
 *
 * @static
 * @memberOf _
 * @since 1.1.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @param {number} [fromIndex=0] The index to search from.
 * @returns {number} Returns the index of the found element, else `-1`.
 * @example
 *
 * var users = [
 *   { 'user': 'barney',  'active': false },
 *   { 'user': 'fred',    'active': false },
 *   { 'user': 'pebbles', 'active': true }
 * ];
 *
 * _.findIndex(users, function(o) { return o.user == 'barney'; });
 * // => 0
 *
 * // The `_.matches` iteratee shorthand.
 * _.findIndex(users, { 'user': 'fred', 'active': false });
 * // => 1
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.findIndex(users, ['active', false]);
 * // => 0
 *
 * // The `_.property` iteratee shorthand.
 * _.findIndex(users, 'active');
 * // => 2
 */
function findIndex(array, predicate, fromIndex) {
  var length = array == null ? 0 : array.length;
  if (!length) {
    return -1;
  }
  var index = fromIndex == null ? 0 : toInteger(fromIndex);
  if (index < 0) {
    index = nativeMax(length + index, 0);
  }
  return baseFindIndex(array, baseIteratee(predicate, 3), index);
}

module.exports = findIndex;

----------------------------------------
File: ./animations/node_modules/lodash/_SetCache.js
----------------------------------------
var MapCache = require('./_MapCache'),
    setCacheAdd = require('./_setCacheAdd'),
    setCacheHas = require('./_setCacheHas');

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
  var index = -1,
      length = values == null ? 0 : values.length;

  this.__data__ = new MapCache;
  while (++index < length) {
    this.add(values[index]);
  }
}

// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;

module.exports = SetCache;

----------------------------------------
File: ./animations/node_modules/lodash/chunk.js
----------------------------------------
var baseSlice = require('./_baseSlice'),
    isIterateeCall = require('./_isIterateeCall'),
    toInteger = require('./toInteger');

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeCeil = Math.ceil,
    nativeMax = Math.max;

/**
 * Creates an array of elements split into groups the length of `size`.
 * If `array` can't be split evenly, the final chunk will be the remaining
 * elements.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Array
 * @param {Array} array The array to process.
 * @param {number} [size=1] The length of each chunk
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Array} Returns the new array of chunks.
 * @example
 *
 * _.chunk(['a', 'b', 'c', 'd'], 2);
 * // => [['a', 'b'], ['c', 'd']]
 *
 * _.chunk(['a', 'b', 'c', 'd'], 3);
 * // => [['a', 'b', 'c'], ['d']]
 */
function chunk(array, size, guard) {
  if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
    size = 1;
  } else {
    size = nativeMax(toInteger(size), 0);
  }
  var length = array == null ? 0 : array.length;
  if (!length || size < 1) {
    return [];
  }
  var index = 0,
      resIndex = 0,
      result = Array(nativeCeil(length / size));

  while (index < length) {
    result[resIndex++] = baseSlice(array, index, (index += size));
  }
  return result;
}

module.exports = chunk;

----------------------------------------
File: ./animations/node_modules/lodash/_isMasked.js
----------------------------------------
var coreJsData = require('./_coreJsData');

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

module.exports = isMasked;

----------------------------------------
File: ./animations/node_modules/lodash/_isIndex.js
----------------------------------------
/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER : length;

  return !!length &&
    (type == 'number' ||
      (type != 'symbol' && reIsUint.test(value))) &&
        (value > -1 && value % 1 == 0 && value < length);
}

module.exports = isIndex;

----------------------------------------
File: ./animations/node_modules/lodash/every.js
----------------------------------------
var arrayEvery = require('./_arrayEvery'),
    baseEvery = require('./_baseEvery'),
    baseIteratee = require('./_baseIteratee'),
    isArray = require('./isArray'),
    isIterateeCall = require('./_isIterateeCall');

/**
 * Checks if `predicate` returns truthy for **all** elements of `collection`.
 * Iteration is stopped once `predicate` returns falsey. The predicate is
 * invoked with three arguments: (value, index|key, collection).
 *
 * **Note:** This method returns `true` for
 * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
 * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
 * elements of empty collections.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {boolean} Returns `true` if all elements pass the predicate check,
 *  else `false`.
 * @example
 *
 * _.every([true, 1, null, 'yes'], Boolean);
 * // => false
 *
 * var users = [
 *   { 'user': 'barney', 'age': 36, 'active': false },
 *   { 'user': 'fred',   'age': 40, 'active': false }
 * ];
 *
 * // The `_.matches` iteratee shorthand.
 * _.every(users, { 'user': 'barney', 'active': false });
 * // => false
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.every(users, ['active', false]);
 * // => true
 *
 * // The `_.property` iteratee shorthand.
 * _.every(users, 'active');
 * // => false
 */
function every(collection, predicate, guard) {
  var func = isArray(collection) ? arrayEvery : baseEvery;
  if (guard && isIterateeCall(collection, predicate, guard)) {
    predicate = undefined;
  }
  return func(collection, baseIteratee(predicate, 3));
}

module.exports = every;

----------------------------------------
File: ./animations/node_modules/lodash/flatMapDeep.js
----------------------------------------
var baseFlatten = require('./_baseFlatten'),
    map = require('./map');

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/**
 * This method is like `_.flatMap` except that it recursively flattens the
 * mapped results.
 *
 * @static
 * @memberOf _
 * @since 4.7.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new flattened array.
 * @example
 *
 * function duplicate(n) {
 *   return [[[n, n]]];
 * }
 *
 * _.flatMapDeep([1, 2], duplicate);
 * // => [1, 1, 2, 2]
 */
function flatMapDeep(collection, iteratee) {
  return baseFlatten(map(collection, iteratee), INFINITY);
}

module.exports = flatMapDeep;

----------------------------------------
File: ./animations/node_modules/lodash/_baseSome.js
----------------------------------------
var baseEach = require('./_baseEach');

/**
 * The base implementation of `_.some` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function baseSome(collection, predicate) {
  var result;

  baseEach(collection, function(value, index, collection) {
    result = predicate(value, index, collection);
    return !result;
  });
  return !!result;
}

module.exports = baseSome;

----------------------------------------
File: ./animations/node_modules/lodash/_getSymbolsIn.js
----------------------------------------
var arrayPush = require('./_arrayPush'),
    getPrototype = require('./_getPrototype'),
    getSymbols = require('./_getSymbols'),
    stubArray = require('./stubArray');

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own and inherited enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
  var result = [];
  while (object) {
    arrayPush(result, getSymbols(object));
    object = getPrototype(object);
  }
  return result;
};

module.exports = getSymbolsIn;

----------------------------------------
File: ./animations/node_modules/lodash/minBy.js
----------------------------------------
var baseExtremum = require('./_baseExtremum'),
    baseIteratee = require('./_baseIteratee'),
    baseLt = require('./_baseLt');

/**
 * This method is like `_.min` except that it accepts `iteratee` which is
 * invoked for each element in `array` to generate the criterion by which
 * the value is ranked. The iteratee is invoked with one argument: (value).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Math
 * @param {Array} array The array to iterate over.
 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
 * @returns {*} Returns the minimum value.
 * @example
 *
 * var objects = [{ 'n': 1 }, { 'n': 2 }];
 *
 * _.minBy(objects, function(o) { return o.n; });
 * // => { 'n': 1 }
 *
 * // The `_.property` iteratee shorthand.
 * _.minBy(objects, 'n');
 * // => { 'n': 1 }
 */
function minBy(array, iteratee) {
  return (array && array.length)
    ? baseExtremum(array, baseIteratee(iteratee, 2), baseLt)
    : undefined;
}

module.exports = minBy;

----------------------------------------
File: ./animations/node_modules/lodash/includes.js
----------------------------------------
var baseIndexOf = require('./_baseIndexOf'),
    isArrayLike = require('./isArrayLike'),
    isString = require('./isString'),
    toInteger = require('./toInteger'),
    values = require('./values');

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * Checks if `value` is in `collection`. If `collection` is a string, it's
 * checked for a substring of `value`, otherwise
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * is used for equality comparisons. If `fromIndex` is negative, it's used as
 * the offset from the end of `collection`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object|string} collection The collection to inspect.
 * @param {*} value The value to search for.
 * @param {number} [fromIndex=0] The index to search from.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
 * @returns {boolean} Returns `true` if `value` is found, else `false`.
 * @example
 *
 * _.includes([1, 2, 3], 1);
 * // => true
 *
 * _.includes([1, 2, 3], 1, 2);
 * // => false
 *
 * _.includes({ 'a': 1, 'b': 2 }, 1);
 * // => true
 *
 * _.includes('abcd', 'bc');
 * // => true
 */
function includes(collection, value, fromIndex, guard) {
  collection = isArrayLike(collection) ? collection : values(collection);
  fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

  var length = collection.length;
  if (fromIndex < 0) {
    fromIndex = nativeMax(length + fromIndex, 0);
  }
  return isString(collection)
    ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
    : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
}

module.exports = includes;

----------------------------------------
File: ./animations/node_modules/lodash/_lazyClone.js
----------------------------------------
var LazyWrapper = require('./_LazyWrapper'),
    copyArray = require('./_copyArray');

/**
 * Creates a clone of the lazy wrapper object.
 *
 * @private
 * @name clone
 * @memberOf LazyWrapper
 * @returns {Object} Returns the cloned `LazyWrapper` object.
 */
function lazyClone() {
  var result = new LazyWrapper(this.__wrapped__);
  result.__actions__ = copyArray(this.__actions__);
  result.__dir__ = this.__dir__;
  result.__filtered__ = this.__filtered__;
  result.__iteratees__ = copyArray(this.__iteratees__);
  result.__takeCount__ = this.__takeCount__;
  result.__views__ = copyArray(this.__views__);
  return result;
}

module.exports = lazyClone;

----------------------------------------
File: ./animations/node_modules/lodash/toString.js
----------------------------------------
var baseToString = require('./_baseToString');

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}

module.exports = toString;

----------------------------------------
File: ./animations/node_modules/lodash/_basePropertyOf.js
----------------------------------------
/**
 * The base implementation of `_.propertyOf` without support for deep paths.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyOf(object) {
  return function(key) {
    return object == null ? undefined : object[key];
  };
}

module.exports = basePropertyOf;

----------------------------------------
File: ./animations/node_modules/lodash/after.js
----------------------------------------
var toInteger = require('./toInteger');

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * The opposite of `_.before`; this method creates a function that invokes
 * `func` once it's called `n` or more times.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {number} n The number of calls before `func` is invoked.
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new restricted function.
 * @example
 *
 * var saves = ['profile', 'settings'];
 *
 * var done = _.after(saves.length, function() {
 *   console.log('done saving!');
 * });
 *
 * _.forEach(saves, function(type) {
 *   asyncSave({ 'type': type, 'complete': done });
 * });
 * // => Logs 'done saving!' after the two async saves have completed.
 */
function after(n, func) {
  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  n = toInteger(n);
  return function() {
    if (--n < 1) {
      return func.apply(this, arguments);
    }
  };
}

module.exports = after;

----------------------------------------
File: ./animations/node_modules/lodash/_overRest.js
----------------------------------------
var apply = require('./_apply');

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * A specialized version of `baseRest` which transforms the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @param {Function} transform The rest array transform.
 * @returns {Function} Returns the new function.
 */
function overRest(func, start, transform) {
  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
  return function() {
    var args = arguments,
        index = -1,
        length = nativeMax(args.length - start, 0),
        array = Array(length);

    while (++index < length) {
      array[index] = args[start + index];
    }
    index = -1;
    var otherArgs = Array(start + 1);
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = transform(array);
    return apply(func, this, otherArgs);
  };
}

module.exports = overRest;

----------------------------------------
File: ./animations/node_modules/lodash/hasIn.js
----------------------------------------
var baseHasIn = require('./_baseHasIn'),
    hasPath = require('./_hasPath');

/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */
function hasIn(object, path) {
  return object != null && hasPath(object, path, baseHasIn);
}

module.exports = hasIn;

----------------------------------------
File: ./animations/node_modules/lodash/_baseIndexOfWith.js
----------------------------------------
/**
 * This function is like `baseIndexOf` except that it accepts a comparator.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @param {Function} comparator The comparator invoked per element.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseIndexOfWith(array, value, fromIndex, comparator) {
  var index = fromIndex - 1,
      length = array.length;

  while (++index < length) {
    if (comparator(array[index], value)) {
      return index;
    }
  }
  return -1;
}

module.exports = baseIndexOfWith;

----------------------------------------
File: ./animations/node_modules/lodash/_getNative.js
----------------------------------------
var baseIsNative = require('./_baseIsNative'),
    getValue = require('./_getValue');

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

module.exports = getNative;

----------------------------------------
File: ./animations/node_modules/lodash/_baseEachRight.js
----------------------------------------
var baseForOwnRight = require('./_baseForOwnRight'),
    createBaseEach = require('./_createBaseEach');

/**
 * The base implementation of `_.forEachRight` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 */
var baseEachRight = createBaseEach(baseForOwnRight, true);

module.exports = baseEachRight;

----------------------------------------
File: ./animations/node_modules/lodash/forOwn.js
----------------------------------------
var baseForOwn = require('./_baseForOwn'),
    castFunction = require('./_castFunction');

/**
 * Iterates over own enumerable string keyed properties of an object and
 * invokes `iteratee` for each property. The iteratee is invoked with three
 * arguments: (value, key, object). Iteratee functions may exit iteration
 * early by explicitly returning `false`.
 *
 * @static
 * @memberOf _
 * @since 0.3.0
 * @category Object
 * @param {Object} object The object to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Object} Returns `object`.
 * @see _.forOwnRight
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.forOwn(new Foo, function(value, key) {
 *   console.log(key);
 * });
 * // => Logs 'a' then 'b' (iteration order is not guaranteed).
 */
function forOwn(object, iteratee) {
  return object && baseForOwn(object, castFunction(iteratee));
}

module.exports = forOwn;

----------------------------------------
File: ./animations/node_modules/lodash/_cloneDataView.js
----------------------------------------
var cloneArrayBuffer = require('./_cloneArrayBuffer');

/**
 * Creates a clone of `dataView`.
 *
 * @private
 * @param {Object} dataView The data view to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned data view.
 */
function cloneDataView(dataView, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}

module.exports = cloneDataView;

----------------------------------------
File: ./animations/node_modules/lodash/_strictIndexOf.js
----------------------------------------
/**
 * A specialized version of `_.indexOf` which performs strict equality
 * comparisons of values, i.e. `===`.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function strictIndexOf(array, value, fromIndex) {
  var index = fromIndex - 1,
      length = array.length;

  while (++index < length) {
    if (array[index] === value) {
      return index;
    }
  }
  return -1;
}

module.exports = strictIndexOf;

----------------------------------------
File: ./animations/node_modules/lodash/mapValues.js
----------------------------------------
var baseAssignValue = require('./_baseAssignValue'),
    baseForOwn = require('./_baseForOwn'),
    baseIteratee = require('./_baseIteratee');

/**
 * Creates an object with the same keys as `object` and values generated
 * by running each own enumerable string keyed property of `object` thru
 * `iteratee`. The iteratee is invoked with three arguments:
 * (value, key, object).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Object
 * @param {Object} object The object to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Object} Returns the new mapped object.
 * @see _.mapKeys
 * @example
 *
 * var users = {
 *   'fred':    { 'user': 'fred',    'age': 40 },
 *   'pebbles': { 'user': 'pebbles', 'age': 1 }
 * };
 *
 * _.mapValues(users, function(o) { return o.age; });
 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
 *
 * // The `_.property` iteratee shorthand.
 * _.mapValues(users, 'age');
 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
 */
function mapValues(object, iteratee) {
  var result = {};
  iteratee = baseIteratee(iteratee, 3);

  baseForOwn(object, function(value, key, object) {
    baseAssignValue(result, key, iteratee(value, key, object));
  });
  return result;
}

module.exports = mapValues;

----------------------------------------
File: ./animations/node_modules/lodash/trim.js
----------------------------------------
var baseToString = require('./_baseToString'),
    baseTrim = require('./_baseTrim'),
    castSlice = require('./_castSlice'),
    charsEndIndex = require('./_charsEndIndex'),
    charsStartIndex = require('./_charsStartIndex'),
    stringToArray = require('./_stringToArray'),
    toString = require('./toString');

/**
 * Removes leading and trailing whitespace or specified characters from `string`.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to trim.
 * @param {string} [chars=whitespace] The characters to trim.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {string} Returns the trimmed string.
 * @example
 *
 * _.trim('  abc  ');
 * // => 'abc'
 *
 * _.trim('-_-abc-_-', '_-');
 * // => 'abc'
 *
 * _.map(['  foo  ', '  bar  '], _.trim);
 * // => ['foo', 'bar']
 */
function trim(string, chars, guard) {
  string = toString(string);
  if (string && (guard || chars === undefined)) {
    return baseTrim(string);
  }
  if (!string || !(chars = baseToString(chars))) {
    return string;
  }
  var strSymbols = stringToArray(string),
      chrSymbols = stringToArray(chars),
      start = charsStartIndex(strSymbols, chrSymbols),
      end = charsEndIndex(strSymbols, chrSymbols) + 1;

  return castSlice(strSymbols, start, end).join('');
}

module.exports = trim;

----------------------------------------
File: ./animations/node_modules/lodash/_baseFill.js
----------------------------------------
var toInteger = require('./toInteger'),
    toLength = require('./toLength');

/**
 * The base implementation of `_.fill` without an iteratee call guard.
 *
 * @private
 * @param {Array} array The array to fill.
 * @param {*} value The value to fill `array` with.
 * @param {number} [start=0] The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns `array`.
 */
function baseFill(array, value, start, end) {
  var length = array.length;

  start = toInteger(start);
  if (start < 0) {
    start = -start > length ? 0 : (length + start);
  }
  end = (end === undefined || end > length) ? length : toInteger(end);
  if (end < 0) {
    end += length;
  }
  end = start > end ? 0 : toLength(end);
  while (start < end) {
    array[start++] = value;
  }
  return array;
}

module.exports = baseFill;

----------------------------------------
File: ./animations/node_modules/lodash/_baseToPairs.js
----------------------------------------
var arrayMap = require('./_arrayMap');

/**
 * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
 * of key-value pairs for `object` corresponding to the property names of `props`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array} props The property names to get values for.
 * @returns {Object} Returns the key-value pairs.
 */
function baseToPairs(object, props) {
  return arrayMap(props, function(key) {
    return [key, object[key]];
  });
}

module.exports = baseToPairs;

----------------------------------------
File: ./animations/node_modules/lodash/_createFlow.js
----------------------------------------
var LodashWrapper = require('./_LodashWrapper'),
    flatRest = require('./_flatRest'),
    getData = require('./_getData'),
    getFuncName = require('./_getFuncName'),
    isArray = require('./isArray'),
    isLaziable = require('./_isLaziable');

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/** Used to compose bitmasks for function metadata. */
var WRAP_CURRY_FLAG = 8,
    WRAP_PARTIAL_FLAG = 32,
    WRAP_ARY_FLAG = 128,
    WRAP_REARG_FLAG = 256;

/**
 * Creates a `_.flow` or `_.flowRight` function.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new flow function.
 */
function createFlow(fromRight) {
  return flatRest(function(funcs) {
    var length = funcs.length,
        index = length,
        prereq = LodashWrapper.prototype.thru;

    if (fromRight) {
      funcs.reverse();
    }
    while (index--) {
      var func = funcs[index];
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
        var wrapper = new LodashWrapper([], true);
      }
    }
    index = wrapper ? index : length;
    while (++index < length) {
      func = funcs[index];

      var funcName = getFuncName(func),
          data = funcName == 'wrapper' ? getData(func) : undefined;

      if (data && isLaziable(data[0]) &&
            data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
            !data[4].length && data[9] == 1
          ) {
        wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
      } else {
        wrapper = (func.length == 1 && isLaziable(func))
          ? wrapper[funcName]()
          : wrapper.thru(func);
      }
    }
    return function() {
      var args = arguments,
          value = args[0];

      if (wrapper && args.length == 1 && isArray(value)) {
        return wrapper.plant(value).value();
      }
      var index = 0,
          result = length ? funcs[index].apply(this, args) : value;

      while (++index < length) {
        result = funcs[index].call(this, result);
      }
      return result;
    };
  });
}

module.exports = createFlow;

----------------------------------------
File: ./animations/node_modules/lodash/divide.js
----------------------------------------
var createMathOperation = require('./_createMathOperation');

/**
 * Divide two numbers.
 *
 * @static
 * @memberOf _
 * @since 4.7.0
 * @category Math
 * @param {number} dividend The first number in a division.
 * @param {number} divisor The second number in a division.
 * @returns {number} Returns the quotient.
 * @example
 *
 * _.divide(6, 4);
 * // => 1.5
 */
var divide = createMathOperation(function(dividend, divisor) {
  return dividend / divisor;
}, 1);

module.exports = divide;

----------------------------------------
File: ./animations/node_modules/lodash/updateWith.js
----------------------------------------
var baseUpdate = require('./_baseUpdate'),
    castFunction = require('./_castFunction');

/**
 * This method is like `_.update` except that it accepts `customizer` which is
 * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
 * path creation is handled by the method instead. The `customizer` is invoked
 * with three arguments: (nsValue, key, nsObject).
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 4.6.0
 * @category Object
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to set.
 * @param {Function} updater The function to produce the updated value.
 * @param {Function} [customizer] The function to customize assigned values.
 * @returns {Object} Returns `object`.
 * @example
 *
 * var object = {};
 *
 * _.updateWith(object, '[0][1]', _.constant('a'), Object);
 * // => { '0': { '1': 'a' } }
 */
function updateWith(object, path, updater, customizer) {
  customizer = typeof customizer == 'function' ? customizer : undefined;
  return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
}

module.exports = updateWith;

----------------------------------------
File: ./animations/node_modules/lodash/flowRight.js
----------------------------------------
var createFlow = require('./_createFlow');

/**
 * This method is like `_.flow` except that it creates a function that
 * invokes the given functions from right to left.
 *
 * @static
 * @since 3.0.0
 * @memberOf _
 * @category Util
 * @param {...(Function|Function[])} [funcs] The functions to invoke.
 * @returns {Function} Returns the new composite function.
 * @see _.flow
 * @example
 *
 * function square(n) {
 *   return n * n;
 * }
 *
 * var addSquare = _.flowRight([square, _.add]);
 * addSquare(1, 2);
 * // => 9
 */
var flowRight = createFlow(true);

module.exports = flowRight;

----------------------------------------
File: ./animations/node_modules/lodash/flow.js
----------------------------------------
var createFlow = require('./_createFlow');

/**
 * Creates a function that returns the result of invoking the given functions
 * with the `this` binding of the created function, where each successive
 * invocation is supplied the return value of the previous.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Util
 * @param {...(Function|Function[])} [funcs] The functions to invoke.
 * @returns {Function} Returns the new composite function.
 * @see _.flowRight
 * @example
 *
 * function square(n) {
 *   return n * n;
 * }
 *
 * var addSquare = _.flow([_.add, square]);
 * addSquare(1, 2);
 * // => 9
 */
var flow = createFlow();

module.exports = flow;

----------------------------------------
File: ./animations/node_modules/lodash/now.js
----------------------------------------
var root = require('./_root');

/**
 * Gets the timestamp of the number of milliseconds that have elapsed since
 * the Unix epoch (1 January 1970 00:00:00 UTC).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Date
 * @returns {number} Returns the timestamp.
 * @example
 *
 * _.defer(function(stamp) {
 *   console.log(_.now() - stamp);
 * }, _.now());
 * // => Logs the number of milliseconds it took for the deferred invocation.
 */
var now = function() {
  return root.Date.now();
};

module.exports = now;

----------------------------------------
File: ./animations/node_modules/lodash/_escapeStringChar.js
----------------------------------------
/** Used to escape characters for inclusion in compiled string literals. */
var stringEscapes = {
  '\\': '\\',
  "'": "'",
  '\n': 'n',
  '\r': 'r',
  '\u2028': 'u2028',
  '\u2029': 'u2029'
};

/**
 * Used by `_.template` to escape characters for inclusion in compiled string literals.
 *
 * @private
 * @param {string} chr The matched character to escape.
 * @returns {string} Returns the escaped character.
 */
function escapeStringChar(chr) {
  return '\\' + stringEscapes[chr];
}

module.exports = escapeStringChar;

----------------------------------------
File: ./animations/node_modules/lodash/_assignMergeValue.js
----------------------------------------
var baseAssignValue = require('./_baseAssignValue'),
    eq = require('./eq');

/**
 * This function is like `assignValue` except that it doesn't assign
 * `undefined` values.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignMergeValue(object, key, value) {
  if ((value !== undefined && !eq(object[key], value)) ||
      (value === undefined && !(key in object))) {
    baseAssignValue(object, key, value);
  }
}

module.exports = assignMergeValue;

----------------------------------------
File: ./animations/node_modules/lodash/_baseShuffle.js
----------------------------------------
var shuffleSelf = require('./_shuffleSelf'),
    values = require('./values');

/**
 * The base implementation of `_.shuffle`.
 *
 * @private
 * @param {Array|Object} collection The collection to shuffle.
 * @returns {Array} Returns the new shuffled array.
 */
function baseShuffle(collection) {
  return shuffleSelf(values(collection));
}

module.exports = baseShuffle;

----------------------------------------
File: ./animations/node_modules/lodash/_isLaziable.js
----------------------------------------
var LazyWrapper = require('./_LazyWrapper'),
    getData = require('./_getData'),
    getFuncName = require('./_getFuncName'),
    lodash = require('./wrapperLodash');

/**
 * Checks if `func` has a lazy counterpart.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
 *  else `false`.
 */
function isLaziable(func) {
  var funcName = getFuncName(func),
      other = lodash[funcName];

  if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
    return false;
  }
  if (func === other) {
    return true;
  }
  var data = getData(other);
  return !!data && func === data[0];
}

module.exports = isLaziable;

----------------------------------------
File: ./animations/node_modules/lodash/_unescapeHtmlChar.js
----------------------------------------
var basePropertyOf = require('./_basePropertyOf');

/** Used to map HTML entities to characters. */
var htmlUnescapes = {
  '&amp;': '&',
  '&lt;': '<',
  '&gt;': '>',
  '&quot;': '"',
  '&#39;': "'"
};

/**
 * Used by `_.unescape` to convert HTML entities to characters.
 *
 * @private
 * @param {string} chr The matched character to unescape.
 * @returns {string} Returns the unescaped character.
 */
var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

module.exports = unescapeHtmlChar;

----------------------------------------
File: ./animations/node_modules/lodash/flattenDepth.js
----------------------------------------
var baseFlatten = require('./_baseFlatten'),
    toInteger = require('./toInteger');

/**
 * Recursively flatten `array` up to `depth` times.
 *
 * @static
 * @memberOf _
 * @since 4.4.0
 * @category Array
 * @param {Array} array The array to flatten.
 * @param {number} [depth=1] The maximum recursion depth.
 * @returns {Array} Returns the new flattened array.
 * @example
 *
 * var array = [1, [2, [3, [4]], 5]];
 *
 * _.flattenDepth(array, 1);
 * // => [1, 2, [3, [4]], 5]
 *
 * _.flattenDepth(array, 2);
 * // => [1, 2, 3, [4], 5]
 */
function flattenDepth(array, depth) {
  var length = array == null ? 0 : array.length;
  if (!length) {
    return [];
  }
  depth = depth === undefined ? 1 : toInteger(depth);
  return baseFlatten(array, depth);
}

module.exports = flattenDepth;

----------------------------------------
File: ./animations/node_modules/lodash/_baseIsTypedArray.js
----------------------------------------
var baseGetTag = require('./_baseGetTag'),
    isLength = require('./isLength'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
typedArrayTags[errorTag] = typedArrayTags[funcTag] =
typedArrayTags[mapTag] = typedArrayTags[numberTag] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
typedArrayTags[setTag] = typedArrayTags[stringTag] =
typedArrayTags[weakMapTag] = false;

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}

module.exports = baseIsTypedArray;

----------------------------------------
File: ./animations/node_modules/lodash/_arraySample.js
----------------------------------------
var baseRandom = require('./_baseRandom');

/**
 * A specialized version of `_.sample` for arrays.
 *
 * @private
 * @param {Array} array The array to sample.
 * @returns {*} Returns the random element.
 */
function arraySample(array) {
  var length = array.length;
  return length ? array[baseRandom(0, length - 1)] : undefined;
}

module.exports = arraySample;

----------------------------------------
File: ./animations/node_modules/lodash/keys.js
----------------------------------------
var arrayLikeKeys = require('./_arrayLikeKeys'),
    baseKeys = require('./_baseKeys'),
    isArrayLike = require('./isArrayLike');

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

module.exports = keys;

----------------------------------------
File: ./animations/node_modules/lodash/_unicodeWords.js
----------------------------------------
/** Used to compose unicode character classes. */
var rsAstralRange = '\\ud800-\\udfff',
    rsComboMarksRange = '\\u0300-\\u036f',
    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
    rsComboSymbolsRange = '\\u20d0-\\u20ff',
    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
    rsDingbatRange = '\\u2700-\\u27bf',
    rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
    rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
    rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
    rsPunctuationRange = '\\u2000-\\u206f',
    rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
    rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
    rsVarRange = '\\ufe0e\\ufe0f',
    rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

/** Used to compose unicode capture groups. */
var rsApos = "['\u2019]",
    rsBreak = '[' + rsBreakRange + ']',
    rsCombo = '[' + rsComboRange + ']',
    rsDigits = '\\d+',
    rsDingbat = '[' + rsDingbatRange + ']',
    rsLower = '[' + rsLowerRange + ']',
    rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
    rsFitz = '\\ud83c[\\udffb-\\udfff]',
    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
    rsNonAstral = '[^' + rsAstralRange + ']',
    rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
    rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
    rsUpper = '[' + rsUpperRange + ']',
    rsZWJ = '\\u200d';

/** Used to compose unicode regexes. */
var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
    rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
    rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
    rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
    reOptMod = rsModifier + '?',
    rsOptVar = '[' + rsVarRange + ']?',
    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
    rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
    rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
    rsSeq = rsOptVar + reOptMod + rsOptJoin,
    rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq;

/** Used to match complex or compound words. */
var reUnicodeWord = RegExp([
  rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
  rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
  rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
  rsUpper + '+' + rsOptContrUpper,
  rsOrdUpper,
  rsOrdLower,
  rsDigits,
  rsEmoji
].join('|'), 'g');

/**
 * Splits a Unicode `string` into an array of its words.
 *
 * @private
 * @param {string} The string to inspect.
 * @returns {Array} Returns the words of `string`.
 */
function unicodeWords(string) {
  return string.match(reUnicodeWord) || [];
}

module.exports = unicodeWords;

----------------------------------------
File: ./animations/node_modules/lodash/floor.js
----------------------------------------
var createRound = require('./_createRound');

/**
 * Computes `number` rounded down to `precision`.
 *
 * @static
 * @memberOf _
 * @since 3.10.0
 * @category Math
 * @param {number} number The number to round down.
 * @param {number} [precision=0] The precision to round down to.
 * @returns {number} Returns the rounded down number.
 * @example
 *
 * _.floor(4.006);
 * // => 4
 *
 * _.floor(0.046, 2);
 * // => 0.04
 *
 * _.floor(4060, -2);
 * // => 4000
 */
var floor = createRound('floor');

module.exports = floor;

----------------------------------------
File: ./animations/node_modules/lodash/_baseIsRegExp.js
----------------------------------------
var baseGetTag = require('./_baseGetTag'),
    isObjectLike = require('./isObjectLike');

/** `Object#toString` result references. */
var regexpTag = '[object RegExp]';

/**
 * The base implementation of `_.isRegExp` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
 */
function baseIsRegExp(value) {
  return isObjectLike(value) && baseGetTag(value) == regexpTag;
}

module.exports = baseIsRegExp;

----------------------------------------
File: ./animations/node_modules/lodash/_isKeyable.js
----------------------------------------
/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

module.exports = isKeyable;

----------------------------------------
File: ./animations/node_modules/lodash/core.js
----------------------------------------
/**
 * @license
 * Lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash core -o ./dist/lodash.core.js`
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.17.21';

  /** Error message constants. */
  var FUNC_ERROR_TEXT = 'Expected a function';

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG = 1,
      WRAP_PARTIAL_FLAG = 32;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991;

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      numberTag = '[object Number]',
      objectTag = '[object Object]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      stringTag = '[object String]';

  /** Used to match HTML entities and HTML characters. */
  var reUnescapedHtml = /[&<>"']/g,
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

  /*--------------------------------------------------------------------------*/

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    array.push.apply(array, values);
    return array;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return baseMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /*--------------------------------------------------------------------------*/

  /** Used for built-in method references. */
  var arrayProto = Array.prototype,
      objectProto = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /** Used to generate unique IDs. */
  var idCounter = 0;

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var nativeObjectToString = objectProto.toString;

  /** Used to restore the original `_` reference in `_.noConflict`. */
  var oldDash = root._;

  /** Built-in value references. */
  var objectCreate = Object.create,
      propertyIsEnumerable = objectProto.propertyIsEnumerable;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeIsFinite = root.isFinite,
      nativeKeys = overArg(Object.keys, Object),
      nativeMax = Math.max;

  /*------------------------------------------------------------------------*/

  /**
   * Creates a `lodash` object which wraps `value` to enable implicit method
   * chain sequences. Methods that operate on and return arrays, collections,
   * and functions can be chained together. Methods that retrieve a single value
   * or may return a primitive value will automatically end the chain sequence
   * and return the unwrapped value. Otherwise, the value must be unwrapped
   * with `_#value`.
   *
   * Explicit chain sequences, which must be unwrapped with `_#value`, may be
   * enabled using `_.chain`.
   *
   * The execution of chained methods is lazy, that is, it's deferred until
   * `_#value` is implicitly or explicitly called.
   *
   * Lazy evaluation allows several methods to support shortcut fusion.
   * Shortcut fusion is an optimization to merge iteratee calls; this avoids
   * the creation of intermediate arrays and can greatly reduce the number of
   * iteratee executions. Sections of a chain sequence qualify for shortcut
   * fusion if the section is applied to an array and iteratees accept only
   * one argument. The heuristic for whether a section qualifies for shortcut
   * fusion is subject to change.
   *
   * Chaining is supported in custom builds as long as the `_#value` method is
   * directly or indirectly included in the build.
   *
   * In addition to lodash methods, wrappers have `Array` and `String` methods.
   *
   * The wrapper `Array` methods are:
   * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
   *
   * The wrapper `String` methods are:
   * `replace` and `split`
   *
   * The wrapper methods that support shortcut fusion are:
   * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
   * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
   * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
   *
   * The chainable wrapper methods are:
   * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
   * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
   * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
   * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
   * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
   * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
   * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
   * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
   * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
   * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
   * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
   * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
   * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
   * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
   * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
   * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
   * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
   * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
   * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
   * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
   * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
   * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
   * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
   * `zipObject`, `zipObjectDeep`, and `zipWith`
   *
   * The wrapper methods that are **not** chainable by default are:
   * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
   * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
   * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
   * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
   * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
   * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
   * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
   * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
   * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
   * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
   * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
   * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
   * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
   * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
   * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
   * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
   * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
   * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
   * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
   * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
   * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
   * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
   * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
   * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
   * `upperFirst`, `value`, and `words`
   *
   * @name _
   * @constructor
   * @category Seq
   * @param {*} value The value to wrap in a `lodash` instance.
   * @returns {Object} Returns the new `lodash` wrapper instance.
   * @example
   *
   * function square(n) {
   *   return n * n;
   * }
   *
   * var wrapped = _([1, 2, 3]);
   *
   * // Returns an unwrapped value.
   * wrapped.reduce(_.add);
   * // => 6
   *
   * // Returns a wrapped value.
   * var squares = wrapped.map(square);
   *
   * _.isArray(squares);
   * // => false
   *
   * _.isArray(squares.value());
   * // => true
   */
  function lodash(value) {
    return value instanceof LodashWrapper
      ? value
      : new LodashWrapper(value);
  }

  /**
   * The base implementation of `_.create` without support for assigning
   * properties to the created object.
   *
   * @private
   * @param {Object} proto The object to inherit from.
   * @returns {Object} Returns the new object.
   */
  var baseCreate = (function() {
    function object() {}
    return function(proto) {
      if (!isObject(proto)) {
        return {};
      }
      if (objectCreate) {
        return objectCreate(proto);
      }
      object.prototype = proto;
      var result = new object;
      object.prototype = undefined;
      return result;
    };
  }());

  /**
   * The base constructor for creating `lodash` wrapper objects.
   *
   * @private
   * @param {*} value The value to wrap.
   * @param {boolean} [chainAll] Enable explicit method chain sequences.
   */
  function LodashWrapper(value, chainAll) {
    this.__wrapped__ = value;
    this.__actions__ = [];
    this.__chain__ = !!chainAll;
  }

  LodashWrapper.prototype = baseCreate(lodash.prototype);
  LodashWrapper.prototype.constructor = LodashWrapper;

  /*------------------------------------------------------------------------*/

  /**
   * Assigns `value` to `key` of `object` if the existing value is not equivalent
   * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * for equality comparisons.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */
  function assignValue(object, key, value) {
    var objValue = object[key];
    if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
        (value === undefined && !(key in object))) {
      baseAssignValue(object, key, value);
    }
  }

  /**
   * The base implementation of `assignValue` and `assignMergeValue` without
   * value checks.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */
  function baseAssignValue(object, key, value) {
    object[key] = value;
  }

  /**
   * The base implementation of `_.delay` and `_.defer` which accepts `args`
   * to provide to `func`.
   *
   * @private
   * @param {Function} func The function to delay.
   * @param {number} wait The number of milliseconds to delay invocation.
   * @param {Array} args The arguments to provide to `func`.
   * @returns {number|Object} Returns the timer id or timeout object.
   */
  function baseDelay(func, wait, args) {
    if (typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    return setTimeout(function() { func.apply(undefined, args); }, wait);
  }

  /**
   * The base implementation of `_.forEach` without support for iteratee shorthands.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array|Object} Returns `collection`.
   */
  var baseEach = createBaseEach(baseForOwn);

  /**
   * The base implementation of `_.every` without support for iteratee shorthands.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`
   */
  function baseEvery(collection, predicate) {
    var result = true;
    baseEach(collection, function(value, index, collection) {
      result = !!predicate(value, index, collection);
      return result;
    });
    return result;
  }

  /**
   * The base implementation of methods like `_.max` and `_.min` which accepts a
   * `comparator` to determine the extremum value.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The iteratee invoked per iteration.
   * @param {Function} comparator The comparator used to compare values.
   * @returns {*} Returns the extremum value.
   */
  function baseExtremum(array, iteratee, comparator) {
    var index = -1,
        length = array.length;

    while (++index < length) {
      var value = array[index],
          current = iteratee(value);

      if (current != null && (computed === undefined
            ? (current === current && !false)
            : comparator(current, computed)
          )) {
        var computed = current,
            result = value;
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.filter` without support for iteratee shorthands.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function baseFilter(collection, predicate) {
    var result = [];
    baseEach(collection, function(value, index, collection) {
      if (predicate(value, index, collection)) {
        result.push(value);
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.flatten` with support for restricting flattening.
   *
   * @private
   * @param {Array} array The array to flatten.
   * @param {number} depth The maximum recursion depth.
   * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
   * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
   * @param {Array} [result=[]] The initial result value.
   * @returns {Array} Returns the new flattened array.
   */
  function baseFlatten(array, depth, predicate, isStrict, result) {
    var index = -1,
        length = array.length;

    predicate || (predicate = isFlattenable);
    result || (result = []);

    while (++index < length) {
      var value = array[index];
      if (depth > 0 && predicate(value)) {
        if (depth > 1) {
          // Recursively flatten arrays (susceptible to call stack limits).
          baseFlatten(value, depth - 1, predicate, isStrict, result);
        } else {
          arrayPush(result, value);
        }
      } else if (!isStrict) {
        result[result.length] = value;
      }
    }
    return result;
  }

  /**
   * The base implementation of `baseForOwn` which iterates over `object`
   * properties returned by `keysFunc` and invokes `iteratee` for each property.
   * Iteratee functions may exit iteration early by explicitly returning `false`.
   *
   * @private
   * @param {Object} object The object to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {Function} keysFunc The function to get the keys of `object`.
   * @returns {Object} Returns `object`.
   */
  var baseFor = createBaseFor();

  /**
   * The base implementation of `_.forOwn` without support for iteratee shorthands.
   *
   * @private
   * @param {Object} object The object to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Object} Returns `object`.
   */
  function baseForOwn(object, iteratee) {
    return object && baseFor(object, iteratee, keys);
  }

  /**
   * The base implementation of `_.functions` which creates an array of
   * `object` function property names filtered from `props`.
   *
   * @private
   * @param {Object} object The object to inspect.
   * @param {Array} props The property names to filter.
   * @returns {Array} Returns the function names.
   */
  function baseFunctions(object, props) {
    return baseFilter(props, function(key) {
      return isFunction(object[key]);
    });
  }

  /**
   * The base implementation of `getTag` without fallbacks for buggy environments.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the `toStringTag`.
   */
  function baseGetTag(value) {
    return objectToString(value);
  }

  /**
   * The base implementation of `_.gt` which doesn't coerce arguments.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if `value` is greater than `other`,
   *  else `false`.
   */
  function baseGt(value, other) {
    return value > other;
  }

  /**
   * The base implementation of `_.isArguments`.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   */
  var baseIsArguments = noop;

  /**
   * The base implementation of `_.isDate` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
   */
  function baseIsDate(value) {
    return isObjectLike(value) && baseGetTag(value) == dateTag;
  }

  /**
   * The base implementation of `_.isEqual` which supports partial comparisons
   * and tracks traversed objects.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @param {boolean} bitmask The bitmask flags.
   *  1 - Unordered comparison
   *  2 - Partial comparison
   * @param {Function} [customizer] The function to customize comparisons.
   * @param {Object} [stack] Tracks traversed `value` and `other` objects.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   */
  function baseIsEqual(value, other, bitmask, customizer, stack) {
    if (value === other) {
      return true;
    }
    if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
      return value !== value && other !== other;
    }
    return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
  }

  /**
   * A specialized version of `baseIsEqual` for arrays and objects which performs
   * deep comparisons and tracks traversed objects enabling objects with circular
   * references to be compared.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} [stack] Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
    var objIsArr = isArray(object),
        othIsArr = isArray(other),
        objTag = objIsArr ? arrayTag : baseGetTag(object),
        othTag = othIsArr ? arrayTag : baseGetTag(other);

    objTag = objTag == argsTag ? objectTag : objTag;
    othTag = othTag == argsTag ? objectTag : othTag;

    var objIsObj = objTag == objectTag,
        othIsObj = othTag == objectTag,
        isSameTag = objTag == othTag;

    stack || (stack = []);
    var objStack = find(stack, function(entry) {
      return entry[0] == object;
    });
    var othStack = find(stack, function(entry) {
      return entry[0] == other;
    });
    if (objStack && othStack) {
      return objStack[1] == other;
    }
    stack.push([object, other]);
    stack.push([other, object]);
    if (isSameTag && !objIsObj) {
      var result = (objIsArr)
        ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
        : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      stack.pop();
      return result;
    }
    if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
      var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
          othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

      if (objIsWrapped || othIsWrapped) {
        var objUnwrapped = objIsWrapped ? object.value() : object,
            othUnwrapped = othIsWrapped ? other.value() : other;

        var result = equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        stack.pop();
        return result;
      }
    }
    if (!isSameTag) {
      return false;
    }
    var result = equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    stack.pop();
    return result;
  }

  /**
   * The base implementation of `_.isRegExp` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
   */
  function baseIsRegExp(value) {
    return isObjectLike(value) && baseGetTag(value) == regexpTag;
  }

  /**
   * The base implementation of `_.iteratee`.
   *
   * @private
   * @param {*} [value=_.identity] The value to convert to an iteratee.
   * @returns {Function} Returns the iteratee.
   */
  function baseIteratee(func) {
    if (typeof func == 'function') {
      return func;
    }
    if (func == null) {
      return identity;
    }
    return (typeof func == 'object' ? baseMatches : baseProperty)(func);
  }

  /**
   * The base implementation of `_.lt` which doesn't coerce arguments.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if `value` is less than `other`,
   *  else `false`.
   */
  function baseLt(value, other) {
    return value < other;
  }

  /**
   * The base implementation of `_.map` without support for iteratee shorthands.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function baseMap(collection, iteratee) {
    var index = -1,
        result = isArrayLike(collection) ? Array(collection.length) : [];

    baseEach(collection, function(value, key, collection) {
      result[++index] = iteratee(value, key, collection);
    });
    return result;
  }

  /**
   * The base implementation of `_.matches` which doesn't clone `source`.
   *
   * @private
   * @param {Object} source The object of property values to match.
   * @returns {Function} Returns the new spec function.
   */
  function baseMatches(source) {
    var props = nativeKeys(source);
    return function(object) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length];
        if (!(key in object &&
              baseIsEqual(source[key], object[key], COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG)
            )) {
          return false;
        }
      }
      return true;
    };
  }

  /**
   * The base implementation of `_.pick` without support for individual
   * property identifiers.
   *
   * @private
   * @param {Object} object The source object.
   * @param {string[]} paths The property paths to pick.
   * @returns {Object} Returns the new object.
   */
  function basePick(object, props) {
    object = Object(object);
    return reduce(props, function(result, key) {
      if (key in object) {
        result[key] = object[key];
      }
      return result;
    }, {});
  }

  /**
   * The base implementation of `_.rest` which doesn't validate or coerce arguments.
   *
   * @private
   * @param {Function} func The function to apply a rest parameter to.
   * @param {number} [start=func.length-1] The start position of the rest parameter.
   * @returns {Function} Returns the new function.
   */
  function baseRest(func, start) {
    return setToString(overRest(func, start, identity), func + '');
  }

  /**
   * The base implementation of `_.slice` without an iteratee call guard.
   *
   * @private
   * @param {Array} array The array to slice.
   * @param {number} [start=0] The start position.
   * @param {number} [end=array.length] The end position.
   * @returns {Array} Returns the slice of `array`.
   */
  function baseSlice(array, start, end) {
    var index = -1,
        length = array.length;

    if (start < 0) {
      start = -start > length ? 0 : (length + start);
    }
    end = end > length ? length : end;
    if (end < 0) {
      end += length;
    }
    length = start > end ? 0 : ((end - start) >>> 0);
    start >>>= 0;

    var result = Array(length);
    while (++index < length) {
      result[index] = array[index + start];
    }
    return result;
  }

  /**
   * Copies the values of `source` to `array`.
   *
   * @private
   * @param {Array} source The array to copy values from.
   * @param {Array} [array=[]] The array to copy values to.
   * @returns {Array} Returns `array`.
   */
  function copyArray(source) {
    return baseSlice(source, 0, source.length);
  }

  /**
   * The base implementation of `_.some` without support for iteratee shorthands.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function baseSome(collection, predicate) {
    var result;

    baseEach(collection, function(value, index, collection) {
      result = predicate(value, index, collection);
      return !result;
    });
    return !!result;
  }

  /**
   * The base implementation of `wrapperValue` which returns the result of
   * performing a sequence of actions on the unwrapped `value`, where each
   * successive action is supplied the return value of the previous.
   *
   * @private
   * @param {*} value The unwrapped value.
   * @param {Array} actions Actions to perform to resolve the unwrapped value.
   * @returns {*} Returns the resolved value.
   */
  function baseWrapperValue(value, actions) {
    var result = value;
    return reduce(actions, function(result, action) {
      return action.func.apply(action.thisArg, arrayPush([result], action.args));
    }, result);
  }

  /**
   * Compares values to sort them in ascending order.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {number} Returns the sort order indicator for `value`.
   */
  function compareAscending(value, other) {
    if (value !== other) {
      var valIsDefined = value !== undefined,
          valIsNull = value === null,
          valIsReflexive = value === value,
          valIsSymbol = false;

      var othIsDefined = other !== undefined,
          othIsNull = other === null,
          othIsReflexive = other === other,
          othIsSymbol = false;

      if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
          (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
          (valIsNull && othIsDefined && othIsReflexive) ||
          (!valIsDefined && othIsReflexive) ||
          !valIsReflexive) {
        return 1;
      }
      if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
          (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
          (othIsNull && valIsDefined && valIsReflexive) ||
          (!othIsDefined && valIsReflexive) ||
          !othIsReflexive) {
        return -1;
      }
    }
    return 0;
  }

  /**
   * Copies properties of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy properties from.
   * @param {Array} props The property identifiers to copy.
   * @param {Object} [object={}] The object to copy properties to.
   * @param {Function} [customizer] The function to customize copied values.
   * @returns {Object} Returns `object`.
   */
  function copyObject(source, props, object, customizer) {
    var isNew = !object;
    object || (object = {});

    var index = -1,
        length = props.length;

    while (++index < length) {
      var key = props[index];

      var newValue = customizer
        ? customizer(object[key], source[key], key, object, source)
        : undefined;

      if (newValue === undefined) {
        newValue = source[key];
      }
      if (isNew) {
        baseAssignValue(object, key, newValue);
      } else {
        assignValue(object, key, newValue);
      }
    }
    return object;
  }

  /**
   * Creates a function like `_.assign`.
   *
   * @private
   * @param {Function} assigner The function to assign values.
   * @returns {Function} Returns the new assigner function.
   */
  function createAssigner(assigner) {
    return baseRest(function(object, sources) {
      var index = -1,
          length = sources.length,
          customizer = length > 1 ? sources[length - 1] : undefined;

      customizer = (assigner.length > 3 && typeof customizer == 'function')
        ? (length--, customizer)
        : undefined;

      object = Object(object);
      while (++index < length) {
        var source = sources[index];
        if (source) {
          assigner(object, source, index, customizer);
        }
      }
      return object;
    });
  }

  /**
   * Creates a `baseEach` or `baseEachRight` function.
   *
   * @private
   * @param {Function} eachFunc The function to iterate over a collection.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Function} Returns the new base function.
   */
  function createBaseEach(eachFunc, fromRight) {
    return function(collection, iteratee) {
      if (collection == null) {
        return collection;
      }
      if (!isArrayLike(collection)) {
        return eachFunc(collection, iteratee);
      }
      var length = collection.length,
          index = fromRight ? length : -1,
          iterable = Object(collection);

      while ((fromRight ? index-- : ++index < length)) {
        if (iteratee(iterable[index], index, iterable) === false) {
          break;
        }
      }
      return collection;
    };
  }

  /**
   * Creates a base function for methods like `_.forIn` and `_.forOwn`.
   *
   * @private
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Function} Returns the new base function.
   */
  function createBaseFor(fromRight) {
    return function(object, iteratee, keysFunc) {
      var index = -1,
          iterable = Object(object),
          props = keysFunc(object),
          length = props.length;

      while (length--) {
        var key = props[fromRight ? length : ++index];
        if (iteratee(iterable[key], key, iterable) === false) {
          break;
        }
      }
      return object;
    };
  }

  /**
   * Creates a function that produces an instance of `Ctor` regardless of
   * whether it was invoked as part of a `new` expression or by `call` or `apply`.
   *
   * @private
   * @param {Function} Ctor The constructor to wrap.
   * @returns {Function} Returns the new wrapped function.
   */
  function createCtor(Ctor) {
    return function() {
      // Use a `switch` statement to work with class constructors. See
      // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
      // for more details.
      var args = arguments;
      var thisBinding = baseCreate(Ctor.prototype),
          result = Ctor.apply(thisBinding, args);

      // Mimic the constructor's `return` behavior.
      // See https://es5.github.io/#x13.2.2 for more details.
      return isObject(result) ? result : thisBinding;
    };
  }

  /**
   * Creates a `_.find` or `_.findLast` function.
   *
   * @private
   * @param {Function} findIndexFunc The function to find the collection index.
   * @returns {Function} Returns the new find function.
   */
  function createFind(findIndexFunc) {
    return function(collection, predicate, fromIndex) {
      var iterable = Object(collection);
      if (!isArrayLike(collection)) {
        var iteratee = baseIteratee(predicate, 3);
        collection = keys(collection);
        predicate = function(key) { return iteratee(iterable[key], key, iterable); };
      }
      var index = findIndexFunc(collection, predicate, fromIndex);
      return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
    };
  }

  /**
   * Creates a function that wraps `func` to invoke it with the `this` binding
   * of `thisArg` and `partials` prepended to the arguments it receives.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} partials The arguments to prepend to those provided to
   *  the new function.
   * @returns {Function} Returns the new wrapped function.
   */
  function createPartial(func, bitmask, thisArg, partials) {
    if (typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    var isBind = bitmask & WRAP_BIND_FLAG,
        Ctor = createCtor(func);

    function wrapper() {
      var argsIndex = -1,
          argsLength = arguments.length,
          leftIndex = -1,
          leftLength = partials.length,
          args = Array(leftLength + argsLength),
          fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

      while (++leftIndex < leftLength) {
        args[leftIndex] = partials[leftIndex];
      }
      while (argsLength--) {
        args[leftIndex++] = arguments[++argsIndex];
      }
      return fn.apply(isBind ? thisArg : this, args);
    }
    return wrapper;
  }

  /**
   * A specialized version of `baseIsEqualDeep` for arrays with support for
   * partial deep comparisons.
   *
   * @private
   * @param {Array} array The array to compare.
   * @param {Array} other The other array to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `array` and `other` objects.
   * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
   */
  function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
        arrLength = array.length,
        othLength = other.length;

    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
      return false;
    }
    // Check that cyclic values are equal.
    var arrStacked = stack.get(array);
    var othStacked = stack.get(other);
    if (arrStacked && othStacked) {
      return arrStacked == other && othStacked == array;
    }
    var index = -1,
        result = true,
        seen = (bitmask & COMPARE_UNORDERED_FLAG) ? [] : undefined;

    // Ignore non-index properties.
    while (++index < arrLength) {
      var arrValue = array[index],
          othValue = other[index];

      var compared;
      if (compared !== undefined) {
        if (compared) {
          continue;
        }
        result = false;
        break;
      }
      // Recursively compare arrays (susceptible to call stack limits).
      if (seen) {
        if (!baseSome(other, function(othValue, othIndex) {
              if (!indexOf(seen, othIndex) &&
                  (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                return seen.push(othIndex);
              }
            })) {
          result = false;
          break;
        }
      } else if (!(
            arrValue === othValue ||
              equalFunc(arrValue, othValue, bitmask, customizer, stack)
          )) {
        result = false;
        break;
      }
    }
    return result;
  }

  /**
   * A specialized version of `baseIsEqualDeep` for comparing objects of
   * the same `toStringTag`.
   *
   * **Note:** This function only supports comparing values with tags of
   * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {string} tag The `toStringTag` of the objects to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
    switch (tag) {

      case boolTag:
      case dateTag:
      case numberTag:
        // Coerce booleans to `1` or `0` and dates to milliseconds.
        // Invalid dates are coerced to `NaN`.
        return eq(+object, +other);

      case errorTag:
        return object.name == other.name && object.message == other.message;

      case regexpTag:
      case stringTag:
        // Coerce regexes to strings and treat strings, primitives and objects,
        // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
        // for more details.
        return object == (other + '');

    }
    return false;
  }

  /**
   * A specialized version of `baseIsEqualDeep` for objects with support for
   * partial deep comparisons.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
        objProps = keys(object),
        objLength = objProps.length,
        othProps = keys(other),
        othLength = othProps.length;

    if (objLength != othLength && !isPartial) {
      return false;
    }
    var index = objLength;
    while (index--) {
      var key = objProps[index];
      if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
        return false;
      }
    }
    // Check that cyclic values are equal.
    var objStacked = stack.get(object);
    var othStacked = stack.get(other);
    if (objStacked && othStacked) {
      return objStacked == other && othStacked == object;
    }
    var result = true;

    var skipCtor = isPartial;
    while (++index < objLength) {
      key = objProps[index];
      var objValue = object[key],
          othValue = other[key];

      var compared;
      // Recursively compare objects (susceptible to call stack limits).
      if (!(compared === undefined
            ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
            : compared
          )) {
        result = false;
        break;
      }
      skipCtor || (skipCtor = key == 'constructor');
    }
    if (result && !skipCtor) {
      var objCtor = object.constructor,
          othCtor = other.constructor;

      // Non `Object` object instances with different constructors are not equal.
      if (objCtor != othCtor &&
          ('constructor' in object && 'constructor' in other) &&
          !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
            typeof othCtor == 'function' && othCtor instanceof othCtor)) {
        result = false;
      }
    }
    return result;
  }

  /**
   * A specialized version of `baseRest` which flattens the rest array.
   *
   * @private
   * @param {Function} func The function to apply a rest parameter to.
   * @returns {Function} Returns the new function.
   */
  function flatRest(func) {
    return setToString(overRest(func, undefined, flatten), func + '');
  }

  /**
   * Checks if `value` is a flattenable `arguments` object or array.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
   */
  function isFlattenable(value) {
    return isArray(value) || isArguments(value);
  }

  /**
   * Checks if `value` is a valid array-like index.
   *
   * @private
   * @param {*} value The value to check.
   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
   */
  function isIndex(value, length) {
    var type = typeof value;
    length = length == null ? MAX_SAFE_INTEGER : length;

    return !!length &&
      (type == 'number' ||
        (type != 'symbol' && reIsUint.test(value))) &&
          (value > -1 && value % 1 == 0 && value < length);
  }

  /**
   * Checks if the given arguments are from an iteratee call.
   *
   * @private
   * @param {*} value The potential iteratee value argument.
   * @param {*} index The potential iteratee index or key argument.
   * @param {*} object The potential iteratee object argument.
   * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
   *  else `false`.
   */
  function isIterateeCall(value, index, object) {
    if (!isObject(object)) {
      return false;
    }
    var type = typeof index;
    if (type == 'number'
          ? (isArrayLike(object) && isIndex(index, object.length))
          : (type == 'string' && index in object)
        ) {
      return eq(object[index], value);
    }
    return false;
  }

  /**
   * This function is like
   * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
   * except that it includes inherited enumerable properties.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function nativeKeysIn(object) {
    var result = [];
    if (object != null) {
      for (var key in Object(object)) {
        result.push(key);
      }
    }
    return result;
  }

  /**
   * Converts `value` to a string using `Object.prototype.toString`.
   *
   * @private
   * @param {*} value The value to convert.
   * @returns {string} Returns the converted string.
   */
  function objectToString(value) {
    return nativeObjectToString.call(value);
  }

  /**
   * A specialized version of `baseRest` which transforms the rest array.
   *
   * @private
   * @param {Function} func The function to apply a rest parameter to.
   * @param {number} [start=func.length-1] The start position of the rest parameter.
   * @param {Function} transform The rest array transform.
   * @returns {Function} Returns the new function.
   */
  function overRest(func, start, transform) {
    start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
    return function() {
      var args = arguments,
          index = -1,
          length = nativeMax(args.length - start, 0),
          array = Array(length);

      while (++index < length) {
        array[index] = args[start + index];
      }
      index = -1;
      var otherArgs = Array(start + 1);
      while (++index < start) {
        otherArgs[index] = args[index];
      }
      otherArgs[start] = transform(array);
      return func.apply(this, otherArgs);
    };
  }

  /**
   * Sets the `toString` method of `func` to return `string`.
   *
   * @private
   * @param {Function} func The function to modify.
   * @param {Function} string The `toString` result.
   * @returns {Function} Returns `func`.
   */
  var setToString = identity;

  /*------------------------------------------------------------------------*/

  /**
   * Creates an array with all falsey values removed. The values `false`, `null`,
   * `0`, `""`, `undefined`, and `NaN` are falsey.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {Array} array The array to compact.
   * @returns {Array} Returns the new array of filtered values.
   * @example
   *
   * _.compact([0, 1, false, 2, '', 3]);
   * // => [1, 2, 3]
   */
  function compact(array) {
    return baseFilter(array, Boolean);
  }

  /**
   * Creates a new array concatenating `array` with any additional arrays
   * and/or values.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Array
   * @param {Array} array The array to concatenate.
   * @param {...*} [values] The values to concatenate.
   * @returns {Array} Returns the new concatenated array.
   * @example
   *
   * var array = [1];
   * var other = _.concat(array, 2, [3], [[4]]);
   *
   * console.log(other);
   * // => [1, 2, 3, [4]]
   *
   * console.log(array);
   * // => [1]
   */
  function concat() {
    var length = arguments.length;
    if (!length) {
      return [];
    }
    var args = Array(length - 1),
        array = arguments[0],
        index = length;

    while (index--) {
      args[index - 1] = arguments[index];
    }
    return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
  }

  /**
   * This method is like `_.find` except that it returns the index of the first
   * element `predicate` returns truthy for instead of the element itself.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Array
   * @param {Array} array The array to inspect.
   * @param {Function} [predicate=_.identity] The function invoked per iteration.
   * @param {number} [fromIndex=0] The index to search from.
   * @returns {number} Returns the index of the found element, else `-1`.
   * @example
   *
   * var users = [
   *   { 'user': 'barney',  'active': false },
   *   { 'user': 'fred',    'active': false },
   *   { 'user': 'pebbles', 'active': true }
   * ];
   *
   * _.findIndex(users, function(o) { return o.user == 'barney'; });
   * // => 0
   *
   * // The `_.matches` iteratee shorthand.
   * _.findIndex(users, { 'user': 'fred', 'active': false });
   * // => 1
   *
   * // The `_.matchesProperty` iteratee shorthand.
   * _.findIndex(users, ['active', false]);
   * // => 0
   *
   * // The `_.property` iteratee shorthand.
   * _.findIndex(users, 'active');
   * // => 2
   */
  function findIndex(array, predicate, fromIndex) {
    var length = array == null ? 0 : array.length;
    if (!length) {
      return -1;
    }
    var index = fromIndex == null ? 0 : toInteger(fromIndex);
    if (index < 0) {
      index = nativeMax(length + index, 0);
    }
    return baseFindIndex(array, baseIteratee(predicate, 3), index);
  }

  /**
   * Flattens `array` a single level deep.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {Array} array The array to flatten.
   * @returns {Array} Returns the new flattened array.
   * @example
   *
   * _.flatten([1, [2, [3, [4]], 5]]);
   * // => [1, 2, [3, [4]], 5]
   */
  function flatten(array) {
    var length = array == null ? 0 : array.length;
    return length ? baseFlatten(array, 1) : [];
  }

  /**
   * Recursively flattens `array`.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Array
   * @param {Array} array The array to flatten.
   * @returns {Array} Returns the new flattened array.
   * @example
   *
   * _.flattenDeep([1, [2, [3, [4]], 5]]);
   * // => [1, 2, 3, 4, 5]
   */
  function flattenDeep(array) {
    var length = array == null ? 0 : array.length;
    return length ? baseFlatten(array, INFINITY) : [];
  }

  /**
   * Gets the first element of `array`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @alias first
   * @category Array
   * @param {Array} array The array to query.
   * @returns {*} Returns the first element of `array`.
   * @example
   *
   * _.head([1, 2, 3]);
   * // => 1
   *
   * _.head([]);
   * // => undefined
   */
  function head(array) {
    return (array && array.length) ? array[0] : undefined;
  }

  /**
   * Gets the index at which the first occurrence of `value` is found in `array`
   * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * for equality comparisons. If `fromIndex` is negative, it's used as the
   * offset from the end of `array`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} [fromIndex=0] The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   * @example
   *
   * _.indexOf([1, 2, 1, 2], 2);
   * // => 1
   *
   * // Search from the `fromIndex`.
   * _.indexOf([1, 2, 1, 2], 2, 2);
   * // => 3
   */
  function indexOf(array, value, fromIndex) {
    var length = array == null ? 0 : array.length;
    if (typeof fromIndex == 'number') {
      fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : fromIndex;
    } else {
      fromIndex = 0;
    }
    var index = (fromIndex || 0) - 1,
        isReflexive = value === value;

    while (++index < length) {
      var other = array[index];
      if ((isReflexive ? other === value : other !== other)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * Gets the last element of `array`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {Array} array The array to query.
   * @returns {*} Returns the last element of `array`.
   * @example
   *
   * _.last([1, 2, 3]);
   * // => 3
   */
  function last(array) {
    var length = array == null ? 0 : array.length;
    return length ? array[length - 1] : undefined;
  }

  /**
   * Creates a slice of `array` from `start` up to, but not including, `end`.
   *
   * **Note:** This method is used instead of
   * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
   * returned.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Array
   * @param {Array} array The array to slice.
   * @param {number} [start=0] The start position.
   * @param {number} [end=array.length] The end position.
   * @returns {Array} Returns the slice of `array`.
   */
  function slice(array, start, end) {
    var length = array == null ? 0 : array.length;
    start = start == null ? 0 : +start;
    end = end === undefined ? length : +end;
    return length ? baseSlice(array, start, end) : [];
  }

  /*------------------------------------------------------------------------*/

  /**
   * Creates a `lodash` wrapper instance that wraps `value` with explicit method
   * chain sequences enabled. The result of such sequences must be unwrapped
   * with `_#value`.
   *
   * @static
   * @memberOf _
   * @since 1.3.0
   * @category Seq
   * @param {*} value The value to wrap.
   * @returns {Object} Returns the new `lodash` wrapper instance.
   * @example
   *
   * var users = [
   *   { 'user': 'barney',  'age': 36 },
   *   { 'user': 'fred',    'age': 40 },
   *   { 'user': 'pebbles', 'age': 1 }
   * ];
   *
   * var youngest = _
   *   .chain(users)
   *   .sortBy('age')
   *   .map(function(o) {
   *     return o.user + ' is ' + o.age;
   *   })
   *   .head()
   *   .value();
   * // => 'pebbles is 1'
   */
  function chain(value) {
    var result = lodash(value);
    result.__chain__ = true;
    return result;
  }

  /**
   * This method invokes `interceptor` and returns `value`. The interceptor
   * is invoked with one argument; (value). The purpose of this method is to
   * "tap into" a method chain sequence in order to modify intermediate results.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Seq
   * @param {*} value The value to provide to `interceptor`.
   * @param {Function} interceptor The function to invoke.
   * @returns {*} Returns `value`.
   * @example
   *
   * _([1, 2, 3])
   *  .tap(function(array) {
   *    // Mutate input array.
   *    array.pop();
   *  })
   *  .reverse()
   *  .value();
   * // => [2, 1]
   */
  function tap(value, interceptor) {
    interceptor(value);
    return value;
  }

  /**
   * This method is like `_.tap` except that it returns the result of `interceptor`.
   * The purpose of this method is to "pass thru" values replacing intermediate
   * results in a method chain sequence.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Seq
   * @param {*} value The value to provide to `interceptor`.
   * @param {Function} interceptor The function to invoke.
   * @returns {*} Returns the result of `interceptor`.
   * @example
   *
   * _('  abc  ')
   *  .chain()
   *  .trim()
   *  .thru(function(value) {
   *    return [value];
   *  })
   *  .value();
   * // => ['abc']
   */
  function thru(value, interceptor) {
    return interceptor(value);
  }

  /**
   * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
   *
   * @name chain
   * @memberOf _
   * @since 0.1.0
   * @category Seq
   * @returns {Object} Returns the new `lodash` wrapper instance.
   * @example
   *
   * var users = [
   *   { 'user': 'barney', 'age': 36 },
   *   { 'user': 'fred',   'age': 40 }
   * ];
   *
   * // A sequence without explicit chaining.
   * _(users).head();
   * // => { 'user': 'barney', 'age': 36 }
   *
   * // A sequence with explicit chaining.
   * _(users)
   *   .chain()
   *   .head()
   *   .pick('user')
   *   .value();
   * // => { 'user': 'barney' }
   */
  function wrapperChain() {
    return chain(this);
  }

  /**
   * Executes the chain sequence to resolve the unwrapped value.
   *
   * @name value
   * @memberOf _
   * @since 0.1.0
   * @alias toJSON, valueOf
   * @category Seq
   * @returns {*} Returns the resolved unwrapped value.
   * @example
   *
   * _([1, 2, 3]).value();
   * // => [1, 2, 3]
   */
  function wrapperValue() {
    return baseWrapperValue(this.__wrapped__, this.__actions__);
  }

  /*------------------------------------------------------------------------*/

  /**
   * Checks if `predicate` returns truthy for **all** elements of `collection`.
   * Iteration is stopped once `predicate` returns falsey. The predicate is
   * invoked with three arguments: (value, index|key, collection).
   *
   * **Note:** This method returns `true` for
   * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
   * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
   * elements of empty collections.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Collection
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} [predicate=_.identity] The function invoked per iteration.
   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   * @example
   *
   * _.every([true, 1, null, 'yes'], Boolean);
   * // => false
   *
   * var users = [
   *   { 'user': 'barney', 'age': 36, 'active': false },
   *   { 'user': 'fred',   'age': 40, 'active': false }
   * ];
   *
   * // The `_.matches` iteratee shorthand.
   * _.every(users, { 'user': 'barney', 'active': false });
   * // => false
   *
   * // The `_.matchesProperty` iteratee shorthand.
   * _.every(users, ['active', false]);
   * // => true
   *
   * // The `_.property` iteratee shorthand.
   * _.every(users, 'active');
   * // => false
   */
  function every(collection, predicate, guard) {
    predicate = guard ? undefined : predicate;
    return baseEvery(collection, baseIteratee(predicate));
  }

  /**
   * Iterates over elements of `collection`, returning an array of all elements
   * `predicate` returns truthy for. The predicate is invoked with three
   * arguments: (value, index|key, collection).
   *
   * **Note:** Unlike `_.remove`, this method returns a new array.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Collection
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} [predicate=_.identity] The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   * @see _.reject
   * @example
   *
   * var users = [
   *   { 'user': 'barney', 'age': 36, 'active': true },
   *   { 'user': 'fred',   'age': 40, 'active': false }
   * ];
   *
   * _.filter(users, function(o) { return !o.active; });
   * // => objects for ['fred']
   *
   * // The `_.matches` iteratee shorthand.
   * _.filter(users, { 'age': 36, 'active': true });
   * // => objects for ['barney']
   *
   * // The `_.matchesProperty` iteratee shorthand.
   * _.filter(users, ['active', false]);
   * // => objects for ['fred']
   *
   * // The `_.property` iteratee shorthand.
   * _.filter(users, 'active');
   * // => objects for ['barney']
   *
   * // Combining several predicates using `_.overEvery` or `_.overSome`.
   * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
   * // => objects for ['fred', 'barney']
   */
  function filter(collection, predicate) {
    return baseFilter(collection, baseIteratee(predicate));
  }

  /**
   * Iterates over elements of `collection`, returning the first element
   * `predicate` returns truthy for. The predicate is invoked with three
   * arguments: (value, index|key, collection).
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Collection
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} [predicate=_.identity] The function invoked per iteration.
   * @param {number} [fromIndex=0] The index to search from.
   * @returns {*} Returns the matched element, else `undefined`.
   * @example
   *
   * var users = [
   *   { 'user': 'barney',  'age': 36, 'active': true },
   *   { 'user': 'fred',    'age': 40, 'active': false },
   *   { 'user': 'pebbles', 'age': 1,  'active': true }
   * ];
   *
   * _.find(users, function(o) { return o.age < 40; });
   * // => object for 'barney'
   *
   * // The `_.matches` iteratee shorthand.
   * _.find(users, { 'age': 1, 'active': true });
   * // => object for 'pebbles'
   *
   * // The `_.matchesProperty` iteratee shorthand.
   * _.find(users, ['active', false]);
   * // => object for 'fred'
   *
   * // The `_.property` iteratee shorthand.
   * _.find(users, 'active');
   * // => object for 'barney'
   */
  var find = createFind(findIndex);

  /**
   * Iterates over elements of `collection` and invokes `iteratee` for each element.
   * The iteratee is invoked with three arguments: (value, index|key, collection).
   * Iteratee functions may exit iteration early by explicitly returning `false`.
   *
   * **Note:** As with other "Collections" methods, objects with a "length"
   * property are iterated like arrays. To avoid this behavior use `_.forIn`
   * or `_.forOwn` for object iteration.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @alias each
   * @category Collection
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} [iteratee=_.identity] The function invoked per iteration.
   * @returns {Array|Object} Returns `collection`.
   * @see _.forEachRight
   * @example
   *
   * _.forEach([1, 2], function(value) {
   *   console.log(value);
   * });
   * // => Logs `1` then `2`.
   *
   * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
   *   console.log(key);
   * });
   * // => Logs 'a' then 'b' (iteration order is not guaranteed).
   */
  function forEach(collection, iteratee) {
    return baseEach(collection, baseIteratee(iteratee));
  }

  /**
   * Creates an array of values by running each element in `collection` thru
   * `iteratee`. The iteratee is invoked with three arguments:
   * (value, index|key, collection).
   *
   * Many lodash methods are guarded to work as iteratees for methods like
   * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
   *
   * The guarded methods are:
   * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
   * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
   * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
   * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Collection
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} [iteratee=_.identity] The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   * @example
   *
   * function square(n) {
   *   return n * n;
   * }
   *
   * _.map([4, 8], square);
   * // => [16, 64]
   *
   * _.map({ 'a': 4, 'b': 8 }, square);
   * // => [16, 64] (iteration order is not guaranteed)
   *
   * var users = [
   *   { 'user': 'barney' },
   *   { 'user': 'fred' }
   * ];
   *
   * // The `_.property` iteratee shorthand.
   * _.map(users, 'user');
   * // => ['barney', 'fred']
   */
  function map(collection, iteratee) {
    return baseMap(collection, baseIteratee(iteratee));
  }

  /**
   * Reduces `collection` to a value which is the accumulated result of running
   * each element in `collection` thru `iteratee`, where each successive
   * invocation is supplied the return value of the previous. If `accumulator`
   * is not given, the first element of `collection` is used as the initial
   * value. The iteratee is invoked with four arguments:
   * (accumulator, value, index|key, collection).
   *
   * Many lodash methods are guarded to work as iteratees for methods like
   * `_.reduce`, `_.reduceRight`, and `_.transform`.
   *
   * The guarded methods are:
   * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
   * and `sortBy`
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Collection
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} [iteratee=_.identity] The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @returns {*} Returns the accumulated value.
   * @see _.reduceRight
   * @example
   *
   * _.reduce([1, 2], function(sum, n) {
   *   return sum + n;
   * }, 0);
   * // => 3
   *
   * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
   *   (result[value] || (result[value] = [])).push(key);
   *   return result;
   * }, {});
   * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
   */
  function reduce(collection, iteratee, accumulator) {
    return baseReduce(collection, baseIteratee(iteratee), accumulator, arguments.length < 3, baseEach);
  }

  /**
   * Gets the size of `collection` by returning its length for array-like
   * values or the number of own enumerable string keyed properties for objects.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Collection
   * @param {Array|Object|string} collection The collection to inspect.
   * @returns {number} Returns the collection size.
   * @example
   *
   * _.size([1, 2, 3]);
   * // => 3
   *
   * _.size({ 'a': 1, 'b': 2 });
   * // => 2
   *
   * _.size('pebbles');
   * // => 7
   */
  function size(collection) {
    if (collection == null) {
      return 0;
    }
    collection = isArrayLike(collection) ? collection : nativeKeys(collection);
    return collection.length;
  }

  /**
   * Checks if `predicate` returns truthy for **any** element of `collection`.
   * Iteration is stopped once `predicate` returns truthy. The predicate is
   * invoked with three arguments: (value, index|key, collection).
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Collection
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} [predicate=_.identity] The function invoked per iteration.
   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   * @example
   *
   * _.some([null, 0, 'yes', false], Boolean);
   * // => true
   *
   * var users = [
   *   { 'user': 'barney', 'active': true },
   *   { 'user': 'fred',   'active': false }
   * ];
   *
   * // The `_.matches` iteratee shorthand.
   * _.some(users, { 'user': 'barney', 'active': false });
   * // => false
   *
   * // The `_.matchesProperty` iteratee shorthand.
   * _.some(users, ['active', false]);
   * // => true
   *
   * // The `_.property` iteratee shorthand.
   * _.some(users, 'active');
   * // => true
   */
  function some(collection, predicate, guard) {
    predicate = guard ? undefined : predicate;
    return baseSome(collection, baseIteratee(predicate));
  }

  /**
   * Creates an array of elements, sorted in ascending order by the results of
   * running each element in a collection thru each iteratee. This method
   * performs a stable sort, that is, it preserves the original sort order of
   * equal elements. The iteratees are invoked with one argument: (value).
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Collection
   * @param {Array|Object} collection The collection to iterate over.
   * @param {...(Function|Function[])} [iteratees=[_.identity]]
   *  The iteratees to sort by.
   * @returns {Array} Returns the new sorted array.
   * @example
   *
   * var users = [
   *   { 'user': 'fred',   'age': 48 },
   *   { 'user': 'barney', 'age': 36 },
   *   { 'user': 'fred',   'age': 30 },
   *   { 'user': 'barney', 'age': 34 }
   * ];
   *
   * _.sortBy(users, [function(o) { return o.user; }]);
   * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
   *
   * _.sortBy(users, ['user', 'age']);
   * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
   */
  function sortBy(collection, iteratee) {
    var index = 0;
    iteratee = baseIteratee(iteratee);

    return baseMap(baseMap(collection, function(value, key, collection) {
      return { 'value': value, 'index': index++, 'criteria': iteratee(value, key, collection) };
    }).sort(function(object, other) {
      return compareAscending(object.criteria, other.criteria) || (object.index - other.index);
    }), baseProperty('value'));
  }

  /*------------------------------------------------------------------------*/

  /**
   * Creates a function that invokes `func`, with the `this` binding and arguments
   * of the created function, while it's called less than `n` times. Subsequent
   * calls to the created function return the result of the last `func` invocation.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Function
   * @param {number} n The number of calls at which `func` is no longer invoked.
   * @param {Function} func The function to restrict.
   * @returns {Function} Returns the new restricted function.
   * @example
   *
   * jQuery(element).on('click', _.before(5, addContactToList));
   * // => Allows adding up to 4 contacts to the list.
   */
  function before(n, func) {
    var result;
    if (typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    n = toInteger(n);
    return function() {
      if (--n > 0) {
        result = func.apply(this, arguments);
      }
      if (n <= 1) {
        func = undefined;
      }
      return result;
    };
  }

  /**
   * Creates a function that invokes `func` with the `this` binding of `thisArg`
   * and `partials` prepended to the arguments it receives.
   *
   * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
   * may be used as a placeholder for partially applied arguments.
   *
   * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
   * property of bound functions.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to bind.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {...*} [partials] The arguments to be partially applied.
   * @returns {Function} Returns the new bound function.
   * @example
   *
   * function greet(greeting, punctuation) {
   *   return greeting + ' ' + this.user + punctuation;
   * }
   *
   * var object = { 'user': 'fred' };
   *
   * var bound = _.bind(greet, object, 'hi');
   * bound('!');
   * // => 'hi fred!'
   *
   * // Bound with placeholders.
   * var bound = _.bind(greet, object, _, '!');
   * bound('hi');
   * // => 'hi fred!'
   */
  var bind = baseRest(function(func, thisArg, partials) {
    return createPartial(func, WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG, thisArg, partials);
  });

  /**
   * Defers invoking the `func` until the current call stack has cleared. Any
   * additional arguments are provided to `func` when it's invoked.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to defer.
   * @param {...*} [args] The arguments to invoke `func` with.
   * @returns {number} Returns the timer id.
   * @example
   *
   * _.defer(function(text) {
   *   console.log(text);
   * }, 'deferred');
   * // => Logs 'deferred' after one millisecond.
   */
  var defer = baseRest(function(func, args) {
    return baseDelay(func, 1, args);
  });

  /**
   * Invokes `func` after `wait` milliseconds. Any additional arguments are
   * provided to `func` when it's invoked.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to delay.
   * @param {number} wait The number of milliseconds to delay invocation.
   * @param {...*} [args] The arguments to invoke `func` with.
   * @returns {number} Returns the timer id.
   * @example
   *
   * _.delay(function(text) {
   *   console.log(text);
   * }, 1000, 'later');
   * // => Logs 'later' after one second.
   */
  var delay = baseRest(function(func, wait, args) {
    return baseDelay(func, toNumber(wait) || 0, args);
  });

  /**
   * Creates a function that negates the result of the predicate `func`. The
   * `func` predicate is invoked with the `this` binding and arguments of the
   * created function.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Function
   * @param {Function} predicate The predicate to negate.
   * @returns {Function} Returns the new negated function.
   * @example
   *
   * function isEven(n) {
   *   return n % 2 == 0;
   * }
   *
   * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
   * // => [1, 3, 5]
   */
  function negate(predicate) {
    if (typeof predicate != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    return function() {
      var args = arguments;
      return !predicate.apply(this, args);
    };
  }

  /**
   * Creates a function that is restricted to invoking `func` once. Repeat calls
   * to the function return the value of the first invocation. The `func` is
   * invoked with the `this` binding and arguments of the created function.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to restrict.
   * @returns {Function} Returns the new restricted function.
   * @example
   *
   * var initialize = _.once(createApplication);
   * initialize();
   * initialize();
   * // => `createApplication` is invoked once
   */
  function once(func) {
    return before(2, func);
  }

  /*------------------------------------------------------------------------*/

  /**
   * Creates a shallow clone of `value`.
   *
   * **Note:** This method is loosely based on the
   * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
   * and supports cloning arrays, array buffers, booleans, date objects, maps,
   * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
   * arrays. The own enumerable properties of `arguments` objects are cloned
   * as plain objects. An empty object is returned for uncloneable values such
   * as error objects, functions, DOM nodes, and WeakMaps.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to clone.
   * @returns {*} Returns the cloned value.
   * @see _.cloneDeep
   * @example
   *
   * var objects = [{ 'a': 1 }, { 'b': 2 }];
   *
   * var shallow = _.clone(objects);
   * console.log(shallow[0] === objects[0]);
   * // => true
   */
  function clone(value) {
    if (!isObject(value)) {
      return value;
    }
    return isArray(value) ? copyArray(value) : copyObject(value, nativeKeys(value));
  }

  /**
   * Performs a
   * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * comparison between two values to determine if they are equivalent.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   * @example
   *
   * var object = { 'a': 1 };
   * var other = { 'a': 1 };
   *
   * _.eq(object, object);
   * // => true
   *
   * _.eq(object, other);
   * // => false
   *
   * _.eq('a', 'a');
   * // => true
   *
   * _.eq('a', Object('a'));
   * // => false
   *
   * _.eq(NaN, NaN);
   * // => true
   */
  function eq(value, other) {
    return value === other || (value !== value && other !== other);
  }

  /**
   * Checks if `value` is likely an `arguments` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   *  else `false`.
   * @example
   *
   * _.isArguments(function() { return arguments; }());
   * // => true
   *
   * _.isArguments([1, 2, 3]);
   * // => false
   */
  var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
    return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
      !propertyIsEnumerable.call(value, 'callee');
  };

  /**
   * Checks if `value` is classified as an `Array` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array, else `false`.
   * @example
   *
   * _.isArray([1, 2, 3]);
   * // => true
   *
   * _.isArray(document.body.children);
   * // => false
   *
   * _.isArray('abc');
   * // => false
   *
   * _.isArray(_.noop);
   * // => false
   */
  var isArray = Array.isArray;

  /**
   * Checks if `value` is array-like. A value is considered array-like if it's
   * not a function and has a `value.length` that's an integer greater than or
   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
   * @example
   *
   * _.isArrayLike([1, 2, 3]);
   * // => true
   *
   * _.isArrayLike(document.body.children);
   * // => true
   *
   * _.isArrayLike('abc');
   * // => true
   *
   * _.isArrayLike(_.noop);
   * // => false
   */
  function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
  }

  /**
   * Checks if `value` is classified as a boolean primitive or object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
   * @example
   *
   * _.isBoolean(false);
   * // => true
   *
   * _.isBoolean(null);
   * // => false
   */
  function isBoolean(value) {
    return value === true || value === false ||
      (isObjectLike(value) && baseGetTag(value) == boolTag);
  }

  /**
   * Checks if `value` is classified as a `Date` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
   * @example
   *
   * _.isDate(new Date);
   * // => true
   *
   * _.isDate('Mon April 23 2012');
   * // => false
   */
  var isDate = baseIsDate;

  /**
   * Checks if `value` is an empty object, collection, map, or set.
   *
   * Objects are considered empty if they have no own enumerable string keyed
   * properties.
   *
   * Array-like values such as `arguments` objects, arrays, buffers, strings, or
   * jQuery-like collections are considered empty if they have a `length` of `0`.
   * Similarly, maps and sets are considered empty if they have a `size` of `0`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is empty, else `false`.
   * @example
   *
   * _.isEmpty(null);
   * // => true
   *
   * _.isEmpty(true);
   * // => true
   *
   * _.isEmpty(1);
   * // => true
   *
   * _.isEmpty([1, 2, 3]);
   * // => false
   *
   * _.isEmpty({ 'a': 1 });
   * // => false
   */
  function isEmpty(value) {
    if (isArrayLike(value) &&
        (isArray(value) || isString(value) ||
          isFunction(value.splice) || isArguments(value))) {
      return !value.length;
    }
    return !nativeKeys(value).length;
  }

  /**
   * Performs a deep comparison between two values to determine if they are
   * equivalent.
   *
   * **Note:** This method supports comparing arrays, array buffers, booleans,
   * date objects, error objects, maps, numbers, `Object` objects, regexes,
   * sets, strings, symbols, and typed arrays. `Object` objects are compared
   * by their own, not inherited, enumerable properties. Functions and DOM
   * nodes are compared by strict equality, i.e. `===`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   * @example
   *
   * var object = { 'a': 1 };
   * var other = { 'a': 1 };
   *
   * _.isEqual(object, other);
   * // => true
   *
   * object === other;
   * // => false
   */
  function isEqual(value, other) {
    return baseIsEqual(value, other);
  }

  /**
   * Checks if `value` is a finite primitive number.
   *
   * **Note:** This method is based on
   * [`Number.isFinite`](https://mdn.io/Number/isFinite).
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
   * @example
   *
   * _.isFinite(3);
   * // => true
   *
   * _.isFinite(Number.MIN_VALUE);
   * // => true
   *
   * _.isFinite(Infinity);
   * // => false
   *
   * _.isFinite('3');
   * // => false
   */
  function isFinite(value) {
    return typeof value == 'number' && nativeIsFinite(value);
  }

  /**
   * Checks if `value` is classified as a `Function` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a function, else `false`.
   * @example
   *
   * _.isFunction(_);
   * // => true
   *
   * _.isFunction(/abc/);
   * // => false
   */
  function isFunction(value) {
    if (!isObject(value)) {
      return false;
    }
    // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 9 which returns 'object' for typed arrays and other constructors.
    var tag = baseGetTag(value);
    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
  }

  /**
   * Checks if `value` is a valid array-like length.
   *
   * **Note:** This method is loosely based on
   * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
   * @example
   *
   * _.isLength(3);
   * // => true
   *
   * _.isLength(Number.MIN_VALUE);
   * // => false
   *
   * _.isLength(Infinity);
   * // => false
   *
   * _.isLength('3');
   * // => false
   */
  function isLength(value) {
    return typeof value == 'number' &&
      value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }

  /**
   * Checks if `value` is the
   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an object, else `false`.
   * @example
   *
   * _.isObject({});
   * // => true
   *
   * _.isObject([1, 2, 3]);
   * // => true
   *
   * _.isObject(_.noop);
   * // => true
   *
   * _.isObject(null);
   * // => false
   */
  function isObject(value) {
    var type = typeof value;
    return value != null && (type == 'object' || type == 'function');
  }

  /**
   * Checks if `value` is object-like. A value is object-like if it's not `null`
   * and has a `typeof` result of "object".
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
   * @example
   *
   * _.isObjectLike({});
   * // => true
   *
   * _.isObjectLike([1, 2, 3]);
   * // => true
   *
   * _.isObjectLike(_.noop);
   * // => false
   *
   * _.isObjectLike(null);
   * // => false
   */
  function isObjectLike(value) {
    return value != null && typeof value == 'object';
  }

  /**
   * Checks if `value` is `NaN`.
   *
   * **Note:** This method is based on
   * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
   * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
   * `undefined` and other non-number values.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   * @example
   *
   * _.isNaN(NaN);
   * // => true
   *
   * _.isNaN(new Number(NaN));
   * // => true
   *
   * isNaN(undefined);
   * // => true
   *
   * _.isNaN(undefined);
   * // => false
   */
  function isNaN(value) {
    // An `NaN` primitive is the only value that is not equal to itself.
    // Perform the `toStringTag` check first to avoid errors with some
    // ActiveX objects in IE.
    return isNumber(value) && value != +value;
  }

  /**
   * Checks if `value` is `null`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
   * @example
   *
   * _.isNull(null);
   * // => true
   *
   * _.isNull(void 0);
   * // => false
   */
  function isNull(value) {
    return value === null;
  }

  /**
   * Checks if `value` is classified as a `Number` primitive or object.
   *
   * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
   * classified as numbers, use the `_.isFinite` method.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a number, else `false`.
   * @example
   *
   * _.isNumber(3);
   * // => true
   *
   * _.isNumber(Number.MIN_VALUE);
   * // => true
   *
   * _.isNumber(Infinity);
   * // => true
   *
   * _.isNumber('3');
   * // => false
   */
  function isNumber(value) {
    return typeof value == 'number' ||
      (isObjectLike(value) && baseGetTag(value) == numberTag);
  }

  /**
   * Checks if `value` is classified as a `RegExp` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
   * @example
   *
   * _.isRegExp(/abc/);
   * // => true
   *
   * _.isRegExp('/abc/');
   * // => false
   */
  var isRegExp = baseIsRegExp;

  /**
   * Checks if `value` is classified as a `String` primitive or object.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a string, else `false`.
   * @example
   *
   * _.isString('abc');
   * // => true
   *
   * _.isString(1);
   * // => false
   */
  function isString(value) {
    return typeof value == 'string' ||
      (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
  }

  /**
   * Checks if `value` is `undefined`.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
   * @example
   *
   * _.isUndefined(void 0);
   * // => true
   *
   * _.isUndefined(null);
   * // => false
   */
  function isUndefined(value) {
    return value === undefined;
  }

  /**
   * Converts `value` to an array.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {Array} Returns the converted array.
   * @example
   *
   * _.toArray({ 'a': 1, 'b': 2 });
   * // => [1, 2]
   *
   * _.toArray('abc');
   * // => ['a', 'b', 'c']
   *
   * _.toArray(1);
   * // => []
   *
   * _.toArray(null);
   * // => []
   */
  function toArray(value) {
    if (!isArrayLike(value)) {
      return values(value);
    }
    return value.length ? copyArray(value) : [];
  }

  /**
   * Converts `value` to an integer.
   *
   * **Note:** This method is loosely based on
   * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {number} Returns the converted integer.
   * @example
   *
   * _.toInteger(3.2);
   * // => 3
   *
   * _.toInteger(Number.MIN_VALUE);
   * // => 0
   *
   * _.toInteger(Infinity);
   * // => 1.7976931348623157e+308
   *
   * _.toInteger('3.2');
   * // => 3
   */
  var toInteger = Number;

  /**
   * Converts `value` to a number.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to process.
   * @returns {number} Returns the number.
   * @example
   *
   * _.toNumber(3.2);
   * // => 3.2
   *
   * _.toNumber(Number.MIN_VALUE);
   * // => 5e-324
   *
   * _.toNumber(Infinity);
   * // => Infinity
   *
   * _.toNumber('3.2');
   * // => 3.2
   */
  var toNumber = Number;

  /**
   * Converts `value` to a string. An empty string is returned for `null`
   * and `undefined` values. The sign of `-0` is preserved.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {string} Returns the converted string.
   * @example
   *
   * _.toString(null);
   * // => ''
   *
   * _.toString(-0);
   * // => '-0'
   *
   * _.toString([1, 2, 3]);
   * // => '1,2,3'
   */
  function toString(value) {
    if (typeof value == 'string') {
      return value;
    }
    return value == null ? '' : (value + '');
  }

  /*------------------------------------------------------------------------*/

  /**
   * Assigns own enumerable string keyed properties of source objects to the
   * destination object. Source objects are applied from left to right.
   * Subsequent sources overwrite property assignments of previous sources.
   *
   * **Note:** This method mutates `object` and is loosely based on
   * [`Object.assign`](https://mdn.io/Object/assign).
   *
   * @static
   * @memberOf _
   * @since 0.10.0
   * @category Object
   * @param {Object} object The destination object.
   * @param {...Object} [sources] The source objects.
   * @returns {Object} Returns `object`.
   * @see _.assignIn
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   * }
   *
   * function Bar() {
   *   this.c = 3;
   * }
   *
   * Foo.prototype.b = 2;
   * Bar.prototype.d = 4;
   *
   * _.assign({ 'a': 0 }, new Foo, new Bar);
   * // => { 'a': 1, 'c': 3 }
   */
  var assign = createAssigner(function(object, source) {
    copyObject(source, nativeKeys(source), object);
  });

  /**
   * This method is like `_.assign` except that it iterates over own and
   * inherited source properties.
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @alias extend
   * @category Object
   * @param {Object} object The destination object.
   * @param {...Object} [sources] The source objects.
   * @returns {Object} Returns `object`.
   * @see _.assign
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   * }
   *
   * function Bar() {
   *   this.c = 3;
   * }
   *
   * Foo.prototype.b = 2;
   * Bar.prototype.d = 4;
   *
   * _.assignIn({ 'a': 0 }, new Foo, new Bar);
   * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
   */
  var assignIn = createAssigner(function(object, source) {
    copyObject(source, nativeKeysIn(source), object);
  });

  /**
   * Creates an object that inherits from the `prototype` object. If a
   * `properties` object is given, its own enumerable string keyed properties
   * are assigned to the created object.
   *
   * @static
   * @memberOf _
   * @since 2.3.0
   * @category Object
   * @param {Object} prototype The object to inherit from.
   * @param {Object} [properties] The properties to assign to the object.
   * @returns {Object} Returns the new object.
   * @example
   *
   * function Shape() {
   *   this.x = 0;
   *   this.y = 0;
   * }
   *
   * function Circle() {
   *   Shape.call(this);
   * }
   *
   * Circle.prototype = _.create(Shape.prototype, {
   *   'constructor': Circle
   * });
   *
   * var circle = new Circle;
   * circle instanceof Circle;
   * // => true
   *
   * circle instanceof Shape;
   * // => true
   */
  function create(prototype, properties) {
    var result = baseCreate(prototype);
    return properties == null ? result : assign(result, properties);
  }

  /**
   * Assigns own and inherited enumerable string keyed properties of source
   * objects to the destination object for all destination properties that
   * resolve to `undefined`. Source objects are applied from left to right.
   * Once a property is set, additional values of the same property are ignored.
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The destination object.
   * @param {...Object} [sources] The source objects.
   * @returns {Object} Returns `object`.
   * @see _.defaultsDeep
   * @example
   *
   * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
   * // => { 'a': 1, 'b': 2 }
   */
  var defaults = baseRest(function(object, sources) {
    object = Object(object);

    var index = -1;
    var length = sources.length;
    var guard = length > 2 ? sources[2] : undefined;

    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
      length = 1;
    }

    while (++index < length) {
      var source = sources[index];
      var props = keysIn(source);
      var propsIndex = -1;
      var propsLength = props.length;

      while (++propsIndex < propsLength) {
        var key = props[propsIndex];
        var value = object[key];

        if (value === undefined ||
            (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
          object[key] = source[key];
        }
      }
    }

    return object;
  });

  /**
   * Checks if `path` is a direct property of `object`.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @param {Array|string} path The path to check.
   * @returns {boolean} Returns `true` if `path` exists, else `false`.
   * @example
   *
   * var object = { 'a': { 'b': 2 } };
   * var other = _.create({ 'a': _.create({ 'b': 2 }) });
   *
   * _.has(object, 'a');
   * // => true
   *
   * _.has(object, 'a.b');
   * // => true
   *
   * _.has(object, ['a', 'b']);
   * // => true
   *
   * _.has(other, 'a');
   * // => false
   */
  function has(object, path) {
    return object != null && hasOwnProperty.call(object, path);
  }

  /**
   * Creates an array of the own enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects. See the
   * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
   * for more details.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keys(new Foo);
   * // => ['a', 'b'] (iteration order is not guaranteed)
   *
   * _.keys('hi');
   * // => ['0', '1']
   */
  var keys = nativeKeys;

  /**
   * Creates an array of the own and inherited enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keysIn(new Foo);
   * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
   */
  var keysIn = nativeKeysIn;

  /**
   * Creates an object composed of the picked `object` properties.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The source object.
   * @param {...(string|string[])} [paths] The property paths to pick.
   * @returns {Object} Returns the new object.
   * @example
   *
   * var object = { 'a': 1, 'b': '2', 'c': 3 };
   *
   * _.pick(object, ['a', 'c']);
   * // => { 'a': 1, 'c': 3 }
   */
  var pick = flatRest(function(object, paths) {
    return object == null ? {} : basePick(object, paths);
  });

  /**
   * This method is like `_.get` except that if the resolved value is a
   * function it's invoked with the `this` binding of its parent object and
   * its result is returned.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @param {Array|string} path The path of the property to resolve.
   * @param {*} [defaultValue] The value returned for `undefined` resolved values.
   * @returns {*} Returns the resolved value.
   * @example
   *
   * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
   *
   * _.result(object, 'a[0].b.c1');
   * // => 3
   *
   * _.result(object, 'a[0].b.c2');
   * // => 4
   *
   * _.result(object, 'a[0].b.c3', 'default');
   * // => 'default'
   *
   * _.result(object, 'a[0].b.c3', _.constant('default'));
   * // => 'default'
   */
  function result(object, path, defaultValue) {
    var value = object == null ? undefined : object[path];
    if (value === undefined) {
      value = defaultValue;
    }
    return isFunction(value) ? value.call(object) : value;
  }

  /**
   * Creates an array of the own enumerable string keyed property values of `object`.
   *
   * **Note:** Non-object values are coerced to objects.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property values.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.values(new Foo);
   * // => [1, 2] (iteration order is not guaranteed)
   *
   * _.values('hi');
   * // => ['h', 'i']
   */
  function values(object) {
    return object == null ? [] : baseValues(object, keys(object));
  }

  /*------------------------------------------------------------------------*/

  /**
   * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
   * corresponding HTML entities.
   *
   * **Note:** No other characters are escaped. To escape additional
   * characters use a third-party library like [_he_](https://mths.be/he).
   *
   * Though the ">" character is escaped for symmetry, characters like
   * ">" and "/" don't need escaping in HTML and have no special meaning
   * unless they're part of a tag or unquoted attribute value. See
   * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
   * (under "semi-related fun fact") for more details.
   *
   * When working with HTML you should always
   * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
   * XSS vectors.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category String
   * @param {string} [string=''] The string to escape.
   * @returns {string} Returns the escaped string.
   * @example
   *
   * _.escape('fred, barney, & pebbles');
   * // => 'fred, barney, &amp; pebbles'
   */
  function escape(string) {
    string = toString(string);
    return (string && reHasUnescapedHtml.test(string))
      ? string.replace(reUnescapedHtml, escapeHtmlChar)
      : string;
  }

  /*------------------------------------------------------------------------*/

  /**
   * This method returns the first argument it receives.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Util
   * @param {*} value Any value.
   * @returns {*} Returns `value`.
   * @example
   *
   * var object = { 'a': 1 };
   *
   * console.log(_.identity(object) === object);
   * // => true
   */
  function identity(value) {
    return value;
  }

  /**
   * Creates a function that invokes `func` with the arguments of the created
   * function. If `func` is a property name, the created function returns the
   * property value for a given element. If `func` is an array or object, the
   * created function returns `true` for elements that contain the equivalent
   * source properties, otherwise it returns `false`.
   *
   * @static
   * @since 4.0.0
   * @memberOf _
   * @category Util
   * @param {*} [func=_.identity] The value to convert to a callback.
   * @returns {Function} Returns the callback.
   * @example
   *
   * var users = [
   *   { 'user': 'barney', 'age': 36, 'active': true },
   *   { 'user': 'fred',   'age': 40, 'active': false }
   * ];
   *
   * // The `_.matches` iteratee shorthand.
   * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
   * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
   *
   * // The `_.matchesProperty` iteratee shorthand.
   * _.filter(users, _.iteratee(['user', 'fred']));
   * // => [{ 'user': 'fred', 'age': 40 }]
   *
   * // The `_.property` iteratee shorthand.
   * _.map(users, _.iteratee('user'));
   * // => ['barney', 'fred']
   *
   * // Create custom iteratee shorthands.
   * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
   *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
   *     return func.test(string);
   *   };
   * });
   *
   * _.filter(['abc', 'def'], /ef/);
   * // => ['def']
   */
  var iteratee = baseIteratee;

  /**
   * Creates a function that performs a partial deep comparison between a given
   * object and `source`, returning `true` if the given object has equivalent
   * property values, else `false`.
   *
   * **Note:** The created function is equivalent to `_.isMatch` with `source`
   * partially applied.
   *
   * Partial comparisons will match empty array and empty object `source`
   * values against any array or object value, respectively. See `_.isEqual`
   * for a list of supported value comparisons.
   *
   * **Note:** Multiple values can be checked by combining several matchers
   * using `_.overSome`
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Util
   * @param {Object} source The object of property values to match.
   * @returns {Function} Returns the new spec function.
   * @example
   *
   * var objects = [
   *   { 'a': 1, 'b': 2, 'c': 3 },
   *   { 'a': 4, 'b': 5, 'c': 6 }
   * ];
   *
   * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
   * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
   *
   * // Checking for several possible values
   * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
   * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
   */
  function matches(source) {
    return baseMatches(assign({}, source));
  }

  /**
   * Adds all own enumerable string keyed function properties of a source
   * object to the destination object. If `object` is a function, then methods
   * are added to its prototype as well.
   *
   * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
   * avoid conflicts caused by modifying the original.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Util
   * @param {Function|Object} [object=lodash] The destination object.
   * @param {Object} source The object of functions to add.
   * @param {Object} [options={}] The options object.
   * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
   * @returns {Function|Object} Returns `object`.
   * @example
   *
   * function vowels(string) {
   *   return _.filter(string, function(v) {
   *     return /[aeiou]/i.test(v);
   *   });
   * }
   *
   * _.mixin({ 'vowels': vowels });
   * _.vowels('fred');
   * // => ['e']
   *
   * _('fred').vowels().value();
   * // => ['e']
   *
   * _.mixin({ 'vowels': vowels }, { 'chain': false });
   * _('fred').vowels();
   * // => ['e']
   */
  function mixin(object, source, options) {
    var props = keys(source),
        methodNames = baseFunctions(source, props);

    if (options == null &&
        !(isObject(source) && (methodNames.length || !props.length))) {
      options = source;
      source = object;
      object = this;
      methodNames = baseFunctions(source, keys(source));
    }
    var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
        isFunc = isFunction(object);

    baseEach(methodNames, function(methodName) {
      var func = source[methodName];
      object[methodName] = func;
      if (isFunc) {
        object.prototype[methodName] = function() {
          var chainAll = this.__chain__;
          if (chain || chainAll) {
            var result = object(this.__wrapped__),
                actions = result.__actions__ = copyArray(this.__actions__);

            actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
            result.__chain__ = chainAll;
            return result;
          }
          return func.apply(object, arrayPush([this.value()], arguments));
        };
      }
    });

    return object;
  }

  /**
   * Reverts the `_` variable to its previous value and returns a reference to
   * the `lodash` function.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Util
   * @returns {Function} Returns the `lodash` function.
   * @example
   *
   * var lodash = _.noConflict();
   */
  function noConflict() {
    if (root._ === this) {
      root._ = oldDash;
    }
    return this;
  }

  /**
   * This method returns `undefined`.
   *
   * @static
   * @memberOf _
   * @since 2.3.0
   * @category Util
   * @example
   *
   * _.times(2, _.noop);
   * // => [undefined, undefined]
   */
  function noop() {
    // No operation performed.
  }

  /**
   * Generates a unique ID. If `prefix` is given, the ID is appended to it.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Util
   * @param {string} [prefix=''] The value to prefix the ID with.
   * @returns {string} Returns the unique ID.
   * @example
   *
   * _.uniqueId('contact_');
   * // => 'contact_104'
   *
   * _.uniqueId();
   * // => '105'
   */
  function uniqueId(prefix) {
    var id = ++idCounter;
    return toString(prefix) + id;
  }

  /*------------------------------------------------------------------------*/

  /**
   * Computes the maximum value of `array`. If `array` is empty or falsey,
   * `undefined` is returned.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Math
   * @param {Array} array The array to iterate over.
   * @returns {*} Returns the maximum value.
   * @example
   *
   * _.max([4, 2, 8, 6]);
   * // => 8
   *
   * _.max([]);
   * // => undefined
   */
  function max(array) {
    return (array && array.length)
      ? baseExtremum(array, identity, baseGt)
      : undefined;
  }

  /**
   * Computes the minimum value of `array`. If `array` is empty or falsey,
   * `undefined` is returned.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Math
   * @param {Array} array The array to iterate over.
   * @returns {*} Returns the minimum value.
   * @example
   *
   * _.min([4, 2, 8, 6]);
   * // => 2
   *
   * _.min([]);
   * // => undefined
   */
  function min(array) {
    return (array && array.length)
      ? baseExtremum(array, identity, baseLt)
      : undefined;
  }

  /*------------------------------------------------------------------------*/

  // Add methods that return wrapped values in chain sequences.
  lodash.assignIn = assignIn;
  lodash.before = before;
  lodash.bind = bind;
  lodash.chain = chain;
  lodash.compact = compact;
  lodash.concat = concat;
  lodash.create = create;
  lodash.defaults = defaults;
  lodash.defer = defer;
  lodash.delay = delay;
  lodash.filter = filter;
  lodash.flatten = flatten;
  lodash.flattenDeep = flattenDeep;
  lodash.iteratee = iteratee;
  lodash.keys = keys;
  lodash.map = map;
  lodash.matches = matches;
  lodash.mixin = mixin;
  lodash.negate = negate;
  lodash.once = once;
  lodash.pick = pick;
  lodash.slice = slice;
  lodash.sortBy = sortBy;
  lodash.tap = tap;
  lodash.thru = thru;
  lodash.toArray = toArray;
  lodash.values = values;

  // Add aliases.
  lodash.extend = assignIn;

  // Add methods to `lodash.prototype`.
  mixin(lodash, lodash);

  /*------------------------------------------------------------------------*/

  // Add methods that return unwrapped values in chain sequences.
  lodash.clone = clone;
  lodash.escape = escape;
  lodash.every = every;
  lodash.find = find;
  lodash.forEach = forEach;
  lodash.has = has;
  lodash.head = head;
  lodash.identity = identity;
  lodash.indexOf = indexOf;
  lodash.isArguments = isArguments;
  lodash.isArray = isArray;
  lodash.isBoolean = isBoolean;
  lodash.isDate = isDate;
  lodash.isEmpty = isEmpty;
  lodash.isEqual = isEqual;
  lodash.isFinite = isFinite;
  lodash.isFunction = isFunction;
  lodash.isNaN = isNaN;
  lodash.isNull = isNull;
  lodash.isNumber = isNumber;
  lodash.isObject = isObject;
  lodash.isRegExp = isRegExp;
  lodash.isString = isString;
  lodash.isUndefined = isUndefined;
  lodash.last = last;
  lodash.max = max;
  lodash.min = min;
  lodash.noConflict = noConflict;
  lodash.noop = noop;
  lodash.reduce = reduce;
  lodash.result = result;
  lodash.size = size;
  lodash.some = some;
  lodash.uniqueId = uniqueId;

  // Add aliases.
  lodash.each = forEach;
  lodash.first = head;

  mixin(lodash, (function() {
    var source = {};
    baseForOwn(lodash, function(func, methodName) {
      if (!hasOwnProperty.call(lodash.prototype, methodName)) {
        source[methodName] = func;
      }
    });
    return source;
  }()), { 'chain': false });

  /*------------------------------------------------------------------------*/

  /**
   * The semantic version number.
   *
   * @static
   * @memberOf _
   * @type {string}
   */
  lodash.VERSION = VERSION;

  // Add `Array` methods to `lodash.prototype`.
  baseEach(['pop', 'join', 'replace', 'reverse', 'split', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
    var func = (/^(?:replace|split)$/.test(methodName) ? String.prototype : arrayProto)[methodName],
        chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
        retUnwrapped = /^(?:pop|join|replace|shift)$/.test(methodName);

    lodash.prototype[methodName] = function() {
      var args = arguments;
      if (retUnwrapped && !this.__chain__) {
        var value = this.value();
        return func.apply(isArray(value) ? value : [], args);
      }
      return this[chainName](function(value) {
        return func.apply(isArray(value) ? value : [], args);
      });
    };
  });

  // Add chain sequence methods to the `lodash` wrapper.
  lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

  /*--------------------------------------------------------------------------*/

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Expose Lodash on the global object to prevent errors when Lodash is
    // loaded by a script tag in the presence of an AMD loader.
    // See http://requirejs.org/docs/errors.html#mismatch for more details.
    // Use `_.noConflict` to remove Lodash from the global object.
    root._ = lodash;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    define(function() {
      return lodash;
    });
  }
  // Check for `exports` after `define` in case a build optimizer adds it.
  else if (freeModule) {
    // Export for Node.js.
    (freeModule.exports = lodash)._ = lodash;
    // Export for CommonJS support.
    freeExports._ = lodash;
  }
  else {
    // Export to the global object.
    root._ = lodash;
  }
}.call(this));

----------------------------------------
File: ./animations/node_modules/lodash/_getAllKeysIn.js
----------------------------------------
var baseGetAllKeys = require('./_baseGetAllKeys'),
    getSymbolsIn = require('./_getSymbolsIn'),
    keysIn = require('./keysIn');

/**
 * Creates an array of own and inherited enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeysIn(object) {
  return baseGetAllKeys(object, keysIn, getSymbolsIn);
}

module.exports = getAllKeysIn;

----------------------------------------
File: ./animations/node_modules/lodash/trimEnd.js
----------------------------------------
var baseToString = require('./_baseToString'),
    castSlice = require('./_castSlice'),
    charsEndIndex = require('./_charsEndIndex'),
    stringToArray = require('./_stringToArray'),
    toString = require('./toString'),
    trimmedEndIndex = require('./_trimmedEndIndex');

/**
 * Removes trailing whitespace or specified characters from `string`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to trim.
 * @param {string} [chars=whitespace] The characters to trim.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {string} Returns the trimmed string.
 * @example
 *
 * _.trimEnd('  abc  ');
 * // => '  abc'
 *
 * _.trimEnd('-_-abc-_-', '_-');
 * // => '-_-abc'
 */
function trimEnd(string, chars, guard) {
  string = toString(string);
  if (string && (guard || chars === undefined)) {
    return string.slice(0, trimmedEndIndex(string) + 1);
  }
  if (!string || !(chars = baseToString(chars))) {
    return string;
  }
  var strSymbols = stringToArray(string),
      end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

  return castSlice(strSymbols, 0, end).join('');
}

module.exports = trimEnd;

----------------------------------------
File: ./animations/node_modules/lodash/_isPrototype.js
----------------------------------------
/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

module.exports = isPrototype;

----------------------------------------
File: ./animations/node_modules/lodash/cloneWith.js
----------------------------------------
var baseClone = require('./_baseClone');

/** Used to compose bitmasks for cloning. */
var CLONE_SYMBOLS_FLAG = 4;

/**
 * This method is like `_.clone` except that it accepts `customizer` which
 * is invoked to produce the cloned value. If `customizer` returns `undefined`,
 * cloning is handled by the method instead. The `customizer` is invoked with
 * up to four arguments; (value [, index|key, object, stack]).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to clone.
 * @param {Function} [customizer] The function to customize cloning.
 * @returns {*} Returns the cloned value.
 * @see _.cloneDeepWith
 * @example
 *
 * function customizer(value) {
 *   if (_.isElement(value)) {
 *     return value.cloneNode(false);
 *   }
 * }
 *
 * var el = _.cloneWith(document.body, customizer);
 *
 * console.log(el === document.body);
 * // => false
 * console.log(el.nodeName);
 * // => 'BODY'
 * console.log(el.childNodes.length);
 * // => 0
 */
function cloneWith(value, customizer) {
  customizer = typeof customizer == 'function' ? customizer : undefined;
  return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
}

module.exports = cloneWith;

----------------------------------------
File: ./animations/node_modules/lodash/_baseWrapperValue.js
----------------------------------------
var LazyWrapper = require('./_LazyWrapper'),
    arrayPush = require('./_arrayPush'),
    arrayReduce = require('./_arrayReduce');

/**
 * The base implementation of `wrapperValue` which returns the result of
 * performing a sequence of actions on the unwrapped `value`, where each
 * successive action is supplied the return value of the previous.
 *
 * @private
 * @param {*} value The unwrapped value.
 * @param {Array} actions Actions to perform to resolve the unwrapped value.
 * @returns {*} Returns the resolved value.
 */
function baseWrapperValue(value, actions) {
  var result = value;
  if (result instanceof LazyWrapper) {
    result = result.value();
  }
  return arrayReduce(actions, function(result, action) {
    return action.func.apply(action.thisArg, arrayPush([result], action.args));
  }, result);
}

module.exports = baseWrapperValue;

----------------------------------------
File: ./animations/node_modules/lodash/_arrayFilter.js
----------------------------------------
/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function arrayFilter(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}

module.exports = arrayFilter;

----------------------------------------
File: ./animations/node_modules/lodash/_Hash.js
----------------------------------------
var hashClear = require('./_hashClear'),
    hashDelete = require('./_hashDelete'),
    hashGet = require('./_hashGet'),
    hashHas = require('./_hashHas'),
    hashSet = require('./_hashSet');

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

module.exports = Hash;

----------------------------------------
File: ./animations/node_modules/lodash/_baseXor.js
----------------------------------------
var baseDifference = require('./_baseDifference'),
    baseFlatten = require('./_baseFlatten'),
    baseUniq = require('./_baseUniq');

/**
 * The base implementation of methods like `_.xor`, without support for
 * iteratee shorthands, that accepts an array of arrays to inspect.
 *
 * @private
 * @param {Array} arrays The arrays to inspect.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new array of values.
 */
function baseXor(arrays, iteratee, comparator) {
  var length = arrays.length;
  if (length < 2) {
    return length ? baseUniq(arrays[0]) : [];
  }
  var index = -1,
      result = Array(length);

  while (++index < length) {
    var array = arrays[index],
        othIndex = -1;

    while (++othIndex < length) {
      if (othIndex != index) {
        result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
      }
    }
  }
  return baseUniq(baseFlatten(result, 1), iteratee, comparator);
}

module.exports = baseXor;

----------------------------------------
File: ./animations/node_modules/lodash/_baseDelay.js
----------------------------------------
/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * The base implementation of `_.delay` and `_.defer` which accepts `args`
 * to provide to `func`.
 *
 * @private
 * @param {Function} func The function to delay.
 * @param {number} wait The number of milliseconds to delay invocation.
 * @param {Array} args The arguments to provide to `func`.
 * @returns {number|Object} Returns the timer id or timeout object.
 */
function baseDelay(func, wait, args) {
  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  return setTimeout(function() { func.apply(undefined, args); }, wait);
}

module.exports = baseDelay;

----------------------------------------
File: ./animations/node_modules/lodash/core.min.js
----------------------------------------
/**
 * @license
 * Lodash (Custom Build) lodash.com/license | Underscore.js 1.8.3 underscorejs.org/LICENSE
 * Build: `lodash core -o ./dist/lodash.core.js`
 */
;(function(){function n(n){return H(n)&&pn.call(n,"callee")&&!yn.call(n,"callee")}function t(n,t){return n.push.apply(n,t),n}function r(n){return function(t){return null==t?Z:t[n]}}function e(n,t,r,e,u){return u(n,function(n,u,o){r=e?(e=false,n):t(r,n,u,o)}),r}function u(n,t){return j(t,function(t){return n[t]})}function o(n){return n instanceof i?n:new i(n)}function i(n,t){this.__wrapped__=n,this.__actions__=[],this.__chain__=!!t}function c(n,t,r){if(typeof n!="function")throw new TypeError("Expected a function");
return setTimeout(function(){n.apply(Z,r)},t)}function f(n,t){var r=true;return mn(n,function(n,e,u){return r=!!t(n,e,u)}),r}function a(n,t,r){for(var e=-1,u=n.length;++e<u;){var o=n[e],i=t(o);if(null!=i&&(c===Z?i===i:r(i,c)))var c=i,f=o}return f}function l(n,t){var r=[];return mn(n,function(n,e,u){t(n,e,u)&&r.push(n)}),r}function p(n,r,e,u,o){var i=-1,c=n.length;for(e||(e=R),o||(o=[]);++i<c;){var f=n[i];0<r&&e(f)?1<r?p(f,r-1,e,u,o):t(o,f):u||(o[o.length]=f)}return o}function s(n,t){return n&&On(n,t,Dn);
}function h(n,t){return l(t,function(t){return U(n[t])})}function v(n,t){return n>t}function b(n,t,r,e,u){return n===t||(null==n||null==t||!H(n)&&!H(t)?n!==n&&t!==t:y(n,t,r,e,b,u))}function y(n,t,r,e,u,o){var i=Nn(n),c=Nn(t),f=i?"[object Array]":hn.call(n),a=c?"[object Array]":hn.call(t),f="[object Arguments]"==f?"[object Object]":f,a="[object Arguments]"==a?"[object Object]":a,l="[object Object]"==f,c="[object Object]"==a,a=f==a;o||(o=[]);var p=An(o,function(t){return t[0]==n}),s=An(o,function(n){
return n[0]==t});if(p&&s)return p[1]==t;if(o.push([n,t]),o.push([t,n]),a&&!l){if(i)r=T(n,t,r,e,u,o);else n:{switch(f){case"[object Boolean]":case"[object Date]":case"[object Number]":r=J(+n,+t);break n;case"[object Error]":r=n.name==t.name&&n.message==t.message;break n;case"[object RegExp]":case"[object String]":r=n==t+"";break n}r=false}return o.pop(),r}return 1&r||(i=l&&pn.call(n,"__wrapped__"),f=c&&pn.call(t,"__wrapped__"),!i&&!f)?!!a&&(r=B(n,t,r,e,u,o),o.pop(),r):(i=i?n.value():n,f=f?t.value():t,
r=u(i,f,r,e,o),o.pop(),r)}function g(n){return typeof n=="function"?n:null==n?X:(typeof n=="object"?d:r)(n)}function _(n,t){return n<t}function j(n,t){var r=-1,e=M(n)?Array(n.length):[];return mn(n,function(n,u,o){e[++r]=t(n,u,o)}),e}function d(n){var t=_n(n);return function(r){var e=t.length;if(null==r)return!e;for(r=Object(r);e--;){var u=t[e];if(!(u in r&&b(n[u],r[u],3)))return false}return true}}function m(n,t){return n=Object(n),C(t,function(t,r){return r in n&&(t[r]=n[r]),t},{})}function O(n){return xn(I(n,void 0,X),n+"");
}function x(n,t,r){var e=-1,u=n.length;for(0>t&&(t=-t>u?0:u+t),r=r>u?u:r,0>r&&(r+=u),u=t>r?0:r-t>>>0,t>>>=0,r=Array(u);++e<u;)r[e]=n[e+t];return r}function A(n){return x(n,0,n.length)}function E(n,t){var r;return mn(n,function(n,e,u){return r=t(n,e,u),!r}),!!r}function w(n,r){return C(r,function(n,r){return r.func.apply(r.thisArg,t([n],r.args))},n)}function k(n,t,r){var e=!r;r||(r={});for(var u=-1,o=t.length;++u<o;){var i=t[u],c=Z;if(c===Z&&(c=n[i]),e)r[i]=c;else{var f=r,a=f[i];pn.call(f,i)&&J(a,c)&&(c!==Z||i in f)||(f[i]=c);
}}return r}function N(n){return O(function(t,r){var e=-1,u=r.length,o=1<u?r[u-1]:Z,o=3<n.length&&typeof o=="function"?(u--,o):Z;for(t=Object(t);++e<u;){var i=r[e];i&&n(t,i,e,o)}return t})}function F(n){return function(){var t=arguments,r=dn(n.prototype),t=n.apply(r,t);return V(t)?t:r}}function S(n,t,r){function e(){for(var o=-1,i=arguments.length,c=-1,f=r.length,a=Array(f+i),l=this&&this!==on&&this instanceof e?u:n;++c<f;)a[c]=r[c];for(;i--;)a[c++]=arguments[++o];return l.apply(t,a)}if(typeof n!="function")throw new TypeError("Expected a function");
var u=F(n);return e}function T(n,t,r,e,u,o){var i=n.length,c=t.length;if(i!=c&&!(1&r&&c>i))return false;var c=o.get(n),f=o.get(t);if(c&&f)return c==t&&f==n;for(var c=-1,f=true,a=2&r?[]:Z;++c<i;){var l=n[c],p=t[c];if(void 0!==Z){f=false;break}if(a){if(!E(t,function(n,t){if(!P(a,t)&&(l===n||u(l,n,r,e,o)))return a.push(t)})){f=false;break}}else if(l!==p&&!u(l,p,r,e,o)){f=false;break}}return f}function B(n,t,r,e,u,o){var i=1&r,c=Dn(n),f=c.length,a=Dn(t).length;if(f!=a&&!i)return false;for(a=f;a--;){var l=c[a];if(!(i?l in t:pn.call(t,l)))return false;
}var p=o.get(n),l=o.get(t);if(p&&l)return p==t&&l==n;for(p=true;++a<f;){var l=c[a],s=n[l],h=t[l];if(void 0!==Z||s!==h&&!u(s,h,r,e,o)){p=false;break}i||(i="constructor"==l)}return p&&!i&&(r=n.constructor,e=t.constructor,r!=e&&"constructor"in n&&"constructor"in t&&!(typeof r=="function"&&r instanceof r&&typeof e=="function"&&e instanceof e)&&(p=false)),p}function R(t){return Nn(t)||n(t)}function D(n){var t=[];if(null!=n)for(var r in Object(n))t.push(r);return t}function I(n,t,r){return t=jn(t===Z?n.length-1:t,0),
function(){for(var e=arguments,u=-1,o=jn(e.length-t,0),i=Array(o);++u<o;)i[u]=e[t+u];for(u=-1,o=Array(t+1);++u<t;)o[u]=e[u];return o[t]=r(i),n.apply(this,o)}}function $(n){return(null==n?0:n.length)?p(n,1):[]}function q(n){return n&&n.length?n[0]:Z}function P(n,t,r){var e=null==n?0:n.length;r=typeof r=="number"?0>r?jn(e+r,0):r:0,r=(r||0)-1;for(var u=t===t;++r<e;){var o=n[r];if(u?o===t:o!==o)return r}return-1}function z(n,t){return mn(n,g(t))}function C(n,t,r){return e(n,g(t),r,3>arguments.length,mn);
}function G(n,t){var r;if(typeof t!="function")throw new TypeError("Expected a function");return n=Fn(n),function(){return 0<--n&&(r=t.apply(this,arguments)),1>=n&&(t=Z),r}}function J(n,t){return n===t||n!==n&&t!==t}function M(n){var t;return(t=null!=n)&&(t=n.length,t=typeof t=="number"&&-1<t&&0==t%1&&9007199254740991>=t),t&&!U(n)}function U(n){return!!V(n)&&(n=hn.call(n),"[object Function]"==n||"[object GeneratorFunction]"==n||"[object AsyncFunction]"==n||"[object Proxy]"==n)}function V(n){var t=typeof n;
return null!=n&&("object"==t||"function"==t)}function H(n){return null!=n&&typeof n=="object"}function K(n){return typeof n=="number"||H(n)&&"[object Number]"==hn.call(n)}function L(n){return typeof n=="string"||!Nn(n)&&H(n)&&"[object String]"==hn.call(n)}function Q(n){return typeof n=="string"?n:null==n?"":n+""}function W(n){return null==n?[]:u(n,Dn(n))}function X(n){return n}function Y(n,r,e){var u=Dn(r),o=h(r,u);null!=e||V(r)&&(o.length||!u.length)||(e=r,r=n,n=this,o=h(r,Dn(r)));var i=!(V(e)&&"chain"in e&&!e.chain),c=U(n);
return mn(o,function(e){var u=r[e];n[e]=u,c&&(n.prototype[e]=function(){var r=this.__chain__;if(i||r){var e=n(this.__wrapped__);return(e.__actions__=A(this.__actions__)).push({func:u,args:arguments,thisArg:n}),e.__chain__=r,e}return u.apply(n,t([this.value()],arguments))})}),n}var Z,nn=1/0,tn=/[&<>"']/g,rn=RegExp(tn.source),en=/^(?:0|[1-9]\d*)$/,un=typeof self=="object"&&self&&self.Object===Object&&self,on=typeof global=="object"&&global&&global.Object===Object&&global||un||Function("return this")(),cn=(un=typeof exports=="object"&&exports&&!exports.nodeType&&exports)&&typeof module=="object"&&module&&!module.nodeType&&module,fn=function(n){
return function(t){return null==n?Z:n[t]}}({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"}),an=Array.prototype,ln=Object.prototype,pn=ln.hasOwnProperty,sn=0,hn=ln.toString,vn=on._,bn=Object.create,yn=ln.propertyIsEnumerable,gn=on.isFinite,_n=function(n,t){return function(r){return n(t(r))}}(Object.keys,Object),jn=Math.max,dn=function(){function n(){}return function(t){return V(t)?bn?bn(t):(n.prototype=t,t=new n,n.prototype=Z,t):{}}}();i.prototype=dn(o.prototype),i.prototype.constructor=i;
var mn=function(n,t){return function(r,e){if(null==r)return r;if(!M(r))return n(r,e);for(var u=r.length,o=t?u:-1,i=Object(r);(t?o--:++o<u)&&false!==e(i[o],o,i););return r}}(s),On=function(n){return function(t,r,e){var u=-1,o=Object(t);e=e(t);for(var i=e.length;i--;){var c=e[n?i:++u];if(false===r(o[c],c,o))break}return t}}(),xn=X,An=function(n){return function(t,r,e){var u=Object(t);if(!M(t)){var o=g(r);t=Dn(t),r=function(n){return o(u[n],n,u)}}return r=n(t,r,e),-1<r?u[o?t[r]:r]:Z}}(function(n,t,r){var e=null==n?0:n.length;
if(!e)return-1;r=null==r?0:Fn(r),0>r&&(r=jn(e+r,0));n:{for(t=g(t),e=n.length,r+=-1;++r<e;)if(t(n[r],r,n)){n=r;break n}n=-1}return n}),En=O(function(n,t,r){return S(n,t,r)}),wn=O(function(n,t){return c(n,1,t)}),kn=O(function(n,t,r){return c(n,Sn(t)||0,r)}),Nn=Array.isArray,Fn=Number,Sn=Number,Tn=N(function(n,t){k(t,_n(t),n)}),Bn=N(function(n,t){k(t,D(t),n)}),Rn=O(function(n,t){n=Object(n);var r,e=-1,u=t.length,o=2<u?t[2]:Z;if(r=o){r=t[0];var i=t[1];if(V(o)){var c=typeof i;if("number"==c){if(c=M(o))var c=o.length,f=typeof i,c=null==c?9007199254740991:c,c=!!c&&("number"==f||"symbol"!=f&&en.test(i))&&-1<i&&0==i%1&&i<c;
}else c="string"==c&&i in o;r=!!c&&J(o[i],r)}else r=false}for(r&&(u=1);++e<u;)for(o=t[e],r=In(o),i=-1,c=r.length;++i<c;){var f=r[i],a=n[f];(a===Z||J(a,ln[f])&&!pn.call(n,f))&&(n[f]=o[f])}return n}),Dn=_n,In=D,$n=function(n){return xn(I(n,Z,$),n+"")}(function(n,t){return null==n?{}:m(n,t)});o.assignIn=Bn,o.before=G,o.bind=En,o.chain=function(n){return n=o(n),n.__chain__=true,n},o.compact=function(n){return l(n,Boolean)},o.concat=function(){var n=arguments.length;if(!n)return[];for(var r=Array(n-1),e=arguments[0];n--;)r[n-1]=arguments[n];
return t(Nn(e)?A(e):[e],p(r,1))},o.create=function(n,t){var r=dn(n);return null==t?r:Tn(r,t)},o.defaults=Rn,o.defer=wn,o.delay=kn,o.filter=function(n,t){return l(n,g(t))},o.flatten=$,o.flattenDeep=function(n){return(null==n?0:n.length)?p(n,nn):[]},o.iteratee=g,o.keys=Dn,o.map=function(n,t){return j(n,g(t))},o.matches=function(n){return d(Tn({},n))},o.mixin=Y,o.negate=function(n){if(typeof n!="function")throw new TypeError("Expected a function");return function(){return!n.apply(this,arguments)}},o.once=function(n){
return G(2,n)},o.pick=$n,o.slice=function(n,t,r){var e=null==n?0:n.length;return r=r===Z?e:+r,e?x(n,null==t?0:+t,r):[]},o.sortBy=function(n,t){var e=0;return t=g(t),j(j(n,function(n,r,u){return{value:n,index:e++,criteria:t(n,r,u)}}).sort(function(n,t){var r;n:{r=n.criteria;var e=t.criteria;if(r!==e){var u=r!==Z,o=null===r,i=r===r,c=e!==Z,f=null===e,a=e===e;if(!f&&r>e||o&&c&&a||!u&&a||!i){r=1;break n}if(!o&&r<e||f&&u&&i||!c&&i||!a){r=-1;break n}}r=0}return r||n.index-t.index}),r("value"))},o.tap=function(n,t){
return t(n),n},o.thru=function(n,t){return t(n)},o.toArray=function(n){return M(n)?n.length?A(n):[]:W(n)},o.values=W,o.extend=Bn,Y(o,o),o.clone=function(n){return V(n)?Nn(n)?A(n):k(n,_n(n)):n},o.escape=function(n){return(n=Q(n))&&rn.test(n)?n.replace(tn,fn):n},o.every=function(n,t,r){return t=r?Z:t,f(n,g(t))},o.find=An,o.forEach=z,o.has=function(n,t){return null!=n&&pn.call(n,t)},o.head=q,o.identity=X,o.indexOf=P,o.isArguments=n,o.isArray=Nn,o.isBoolean=function(n){return true===n||false===n||H(n)&&"[object Boolean]"==hn.call(n);
},o.isDate=function(n){return H(n)&&"[object Date]"==hn.call(n)},o.isEmpty=function(t){return M(t)&&(Nn(t)||L(t)||U(t.splice)||n(t))?!t.length:!_n(t).length},o.isEqual=function(n,t){return b(n,t)},o.isFinite=function(n){return typeof n=="number"&&gn(n)},o.isFunction=U,o.isNaN=function(n){return K(n)&&n!=+n},o.isNull=function(n){return null===n},o.isNumber=K,o.isObject=V,o.isRegExp=function(n){return H(n)&&"[object RegExp]"==hn.call(n)},o.isString=L,o.isUndefined=function(n){return n===Z},o.last=function(n){
var t=null==n?0:n.length;return t?n[t-1]:Z},o.max=function(n){return n&&n.length?a(n,X,v):Z},o.min=function(n){return n&&n.length?a(n,X,_):Z},o.noConflict=function(){return on._===this&&(on._=vn),this},o.noop=function(){},o.reduce=C,o.result=function(n,t,r){return t=null==n?Z:n[t],t===Z&&(t=r),U(t)?t.call(n):t},o.size=function(n){return null==n?0:(n=M(n)?n:_n(n),n.length)},o.some=function(n,t,r){return t=r?Z:t,E(n,g(t))},o.uniqueId=function(n){var t=++sn;return Q(n)+t},o.each=z,o.first=q,Y(o,function(){
var n={};return s(o,function(t,r){pn.call(o.prototype,r)||(n[r]=t)}),n}(),{chain:false}),o.VERSION="4.17.21",mn("pop join replace reverse split push shift sort splice unshift".split(" "),function(n){var t=(/^(?:replace|split)$/.test(n)?String.prototype:an)[n],r=/^(?:push|sort|unshift)$/.test(n)?"tap":"thru",e=/^(?:pop|join|replace|shift)$/.test(n);o.prototype[n]=function(){var n=arguments;if(e&&!this.__chain__){var u=this.value();return t.apply(Nn(u)?u:[],n)}return this[r](function(r){return t.apply(Nn(r)?r:[],n);
})}}),o.prototype.toJSON=o.prototype.valueOf=o.prototype.value=function(){return w(this.__wrapped__,this.__actions__)},typeof define=="function"&&typeof define.amd=="object"&&define.amd?(on._=o, define(function(){return o})):cn?((cn.exports=o)._=o,un._=o):on._=o}).call(this);
----------------------------------------
File: ./animations/node_modules/lodash/_equalObjects.js
----------------------------------------
var getAllKeys = require('./_getAllKeys');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      objProps = getAllKeys(object),
      objLength = objProps.length,
      othProps = getAllKeys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
      return false;
    }
  }
  // Check that cyclic values are equal.
  var objStacked = stack.get(object);
  var othStacked = stack.get(other);
  if (objStacked && othStacked) {
    return objStacked == other && othStacked == object;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);

  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, objValue, key, other, object, stack)
        : customizer(objValue, othValue, key, object, other, stack);
    }
    // Recursively compare objects (susceptible to call stack limits).
    if (!(compared === undefined
          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
          : compared
        )) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor &&
        ('constructor' in object && 'constructor' in other) &&
        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  stack['delete'](other);
  return result;
}

module.exports = equalObjects;

----------------------------------------
File: ./animations/node_modules/lodash/_baseSortedIndex.js
----------------------------------------
var baseSortedIndexBy = require('./_baseSortedIndexBy'),
    identity = require('./identity'),
    isSymbol = require('./isSymbol');

/** Used as references for the maximum length and index of an array. */
var MAX_ARRAY_LENGTH = 4294967295,
    HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

/**
 * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
 * performs a binary search of `array` to determine the index at which `value`
 * should be inserted into `array` in order to maintain its sort order.
 *
 * @private
 * @param {Array} array The sorted array to inspect.
 * @param {*} value The value to evaluate.
 * @param {boolean} [retHighest] Specify returning the highest qualified index.
 * @returns {number} Returns the index at which `value` should be inserted
 *  into `array`.
 */
function baseSortedIndex(array, value, retHighest) {
  var low = 0,
      high = array == null ? low : array.length;

  if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
    while (low < high) {
      var mid = (low + high) >>> 1,
          computed = array[mid];

      if (computed !== null && !isSymbol(computed) &&
          (retHighest ? (computed <= value) : (computed < value))) {
        low = mid + 1;
      } else {
        high = mid;
      }
    }
    return high;
  }
  return baseSortedIndexBy(array, value, identity, retHighest);
}

module.exports = baseSortedIndex;

----------------------------------------
File: ./animations/node_modules/lodash/gte.js
----------------------------------------
var createRelationalOperation = require('./_createRelationalOperation');

/**
 * Checks if `value` is greater than or equal to `other`.
 *
 * @static
 * @memberOf _
 * @since 3.9.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if `value` is greater than or equal to
 *  `other`, else `false`.
 * @see _.lte
 * @example
 *
 * _.gte(3, 1);
 * // => true
 *
 * _.gte(3, 3);
 * // => true
 *
 * _.gte(1, 3);
 * // => false
 */
var gte = createRelationalOperation(function(value, other) {
  return value >= other;
});

module.exports = gte;

----------------------------------------
File: ./animations/node_modules/lodash/compact.js
----------------------------------------
/**
 * Creates an array with all falsey values removed. The values `false`, `null`,
 * `0`, `""`, `undefined`, and `NaN` are falsey.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to compact.
 * @returns {Array} Returns the new array of filtered values.
 * @example
 *
 * _.compact([0, 1, false, 2, '', 3]);
 * // => [1, 2, 3]
 */
function compact(array) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (value) {
      result[resIndex++] = value;
    }
  }
  return result;
}

module.exports = compact;

----------------------------------------
File: ./animations/node_modules/lodash/_mapCacheClear.js
----------------------------------------
var Hash = require('./_Hash'),
    ListCache = require('./_ListCache'),
    Map = require('./_Map');

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

module.exports = mapCacheClear;

----------------------------------------
File: ./animations/node_modules/lodash/_basePropertyDeep.js
----------------------------------------
var baseGet = require('./_baseGet');

/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyDeep(path) {
  return function(object) {
    return baseGet(object, path);
  };
}

module.exports = basePropertyDeep;

----------------------------------------
File: ./animations/node_modules/lodash/_toSource.js
----------------------------------------
/** Used for built-in method references. */
var funcProto = Function.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

module.exports = toSource;

----------------------------------------
File: ./animations/node_modules/lodash/isBuffer.js
----------------------------------------
var root = require('./_root'),
    stubFalse = require('./stubFalse');

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

module.exports = isBuffer;

----------------------------------------
File: ./animations/node_modules/lodash/_composeArgsRight.js
----------------------------------------
/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * This function is like `composeArgs` except that the arguments composition
 * is tailored for `_.partialRight`.
 *
 * @private
 * @param {Array} args The provided arguments.
 * @param {Array} partials The arguments to append to those provided.
 * @param {Array} holders The `partials` placeholder indexes.
 * @params {boolean} [isCurried] Specify composing for a curried function.
 * @returns {Array} Returns the new array of composed arguments.
 */
function composeArgsRight(args, partials, holders, isCurried) {
  var argsIndex = -1,
      argsLength = args.length,
      holdersIndex = -1,
      holdersLength = holders.length,
      rightIndex = -1,
      rightLength = partials.length,
      rangeLength = nativeMax(argsLength - holdersLength, 0),
      result = Array(rangeLength + rightLength),
      isUncurried = !isCurried;

  while (++argsIndex < rangeLength) {
    result[argsIndex] = args[argsIndex];
  }
  var offset = argsIndex;
  while (++rightIndex < rightLength) {
    result[offset + rightIndex] = partials[rightIndex];
  }
  while (++holdersIndex < holdersLength) {
    if (isUncurried || argsIndex < argsLength) {
      result[offset + holders[holdersIndex]] = args[argsIndex++];
    }
  }
  return result;
}

module.exports = composeArgsRight;

----------------------------------------
File: ./animations/node_modules/lodash/nth.js
----------------------------------------
var baseNth = require('./_baseNth'),
    toInteger = require('./toInteger');

/**
 * Gets the element at index `n` of `array`. If `n` is negative, the nth
 * element from the end is returned.
 *
 * @static
 * @memberOf _
 * @since 4.11.0
 * @category Array
 * @param {Array} array The array to query.
 * @param {number} [n=0] The index of the element to return.
 * @returns {*} Returns the nth element of `array`.
 * @example
 *
 * var array = ['a', 'b', 'c', 'd'];
 *
 * _.nth(array, 1);
 * // => 'b'
 *
 * _.nth(array, -2);
 * // => 'c';
 */
function nth(array, n) {
  return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
}

module.exports = nth;

----------------------------------------
File: ./animations/node_modules/lodash/commit.js
----------------------------------------
var LodashWrapper = require('./_LodashWrapper');

/**
 * Executes the chain sequence and returns the wrapped result.
 *
 * @name commit
 * @memberOf _
 * @since 3.2.0
 * @category Seq
 * @returns {Object} Returns the new `lodash` wrapper instance.
 * @example
 *
 * var array = [1, 2];
 * var wrapped = _(array).push(3);
 *
 * console.log(array);
 * // => [1, 2]
 *
 * wrapped = wrapped.commit();
 * console.log(array);
 * // => [1, 2, 3]
 *
 * wrapped.last();
 * // => 3
 *
 * console.log(array);
 * // => [1, 2, 3]
 */
function wrapperCommit() {
  return new LodashWrapper(this.value(), this.__chain__);
}

module.exports = wrapperCommit;

----------------------------------------
File: ./animations/node_modules/lodash/thru.js
----------------------------------------
/**
 * This method is like `_.tap` except that it returns the result of `interceptor`.
 * The purpose of this method is to "pass thru" values replacing intermediate
 * results in a method chain sequence.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Seq
 * @param {*} value The value to provide to `interceptor`.
 * @param {Function} interceptor The function to invoke.
 * @returns {*} Returns the result of `interceptor`.
 * @example
 *
 * _('  abc  ')
 *  .chain()
 *  .trim()
 *  .thru(function(value) {
 *    return [value];
 *  })
 *  .value();
 * // => ['abc']
 */
function thru(value, interceptor) {
  return interceptor(value);
}

module.exports = thru;

----------------------------------------
File: ./animations/node_modules/lodash/dropWhile.js
----------------------------------------
var baseIteratee = require('./_baseIteratee'),
    baseWhile = require('./_baseWhile');

/**
 * Creates a slice of `array` excluding elements dropped from the beginning.
 * Elements are dropped until `predicate` returns falsey. The predicate is
 * invoked with three arguments: (value, index, array).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Array
 * @param {Array} array The array to query.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the slice of `array`.
 * @example
 *
 * var users = [
 *   { 'user': 'barney',  'active': false },
 *   { 'user': 'fred',    'active': false },
 *   { 'user': 'pebbles', 'active': true }
 * ];
 *
 * _.dropWhile(users, function(o) { return !o.active; });
 * // => objects for ['pebbles']
 *
 * // The `_.matches` iteratee shorthand.
 * _.dropWhile(users, { 'user': 'barney', 'active': false });
 * // => objects for ['fred', 'pebbles']
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.dropWhile(users, ['active', false]);
 * // => objects for ['pebbles']
 *
 * // The `_.property` iteratee shorthand.
 * _.dropWhile(users, 'active');
 * // => objects for ['barney', 'fred', 'pebbles']
 */
function dropWhile(array, predicate) {
  return (array && array.length)
    ? baseWhile(array, baseIteratee(predicate, 3), true)
    : [];
}

module.exports = dropWhile;

----------------------------------------
File: ./animations/node_modules/lodash/takeWhile.js
----------------------------------------
var baseIteratee = require('./_baseIteratee'),
    baseWhile = require('./_baseWhile');

/**
 * Creates a slice of `array` with elements taken from the beginning. Elements
 * are taken until `predicate` returns falsey. The predicate is invoked with
 * three arguments: (value, index, array).
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Array
 * @param {Array} array The array to query.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the slice of `array`.
 * @example
 *
 * var users = [
 *   { 'user': 'barney',  'active': false },
 *   { 'user': 'fred',    'active': false },
 *   { 'user': 'pebbles', 'active': true }
 * ];
 *
 * _.takeWhile(users, function(o) { return !o.active; });
 * // => objects for ['barney', 'fred']
 *
 * // The `_.matches` iteratee shorthand.
 * _.takeWhile(users, { 'user': 'barney', 'active': false });
 * // => objects for ['barney']
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.takeWhile(users, ['active', false]);
 * // => objects for ['barney', 'fred']
 *
 * // The `_.property` iteratee shorthand.
 * _.takeWhile(users, 'active');
 * // => []
 */
function takeWhile(array, predicate) {
  return (array && array.length)
    ? baseWhile(array, baseIteratee(predicate, 3))
    : [];
}

module.exports = takeWhile;

----------------------------------------
File: ./animations/node_modules/lodash/_baseExtremum.js
----------------------------------------
var isSymbol = require('./isSymbol');

/**
 * The base implementation of methods like `_.max` and `_.min` which accepts a
 * `comparator` to determine the extremum value.
 *
 * @private
 * @param {Array} array The array to iterate over.
 * @param {Function} iteratee The iteratee invoked per iteration.
 * @param {Function} comparator The comparator used to compare values.
 * @returns {*} Returns the extremum value.
 */
function baseExtremum(array, iteratee, comparator) {
  var index = -1,
      length = array.length;

  while (++index < length) {
    var value = array[index],
        current = iteratee(value);

    if (current != null && (computed === undefined
          ? (current === current && !isSymbol(current))
          : comparator(current, computed)
        )) {
      var computed = current,
          result = value;
    }
  }
  return result;
}

module.exports = baseExtremum;

----------------------------------------
File: ./animations/node_modules/lodash/_baseRepeat.js
----------------------------------------
/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeFloor = Math.floor;

/**
 * The base implementation of `_.repeat` which doesn't coerce arguments.
 *
 * @private
 * @param {string} string The string to repeat.
 * @param {number} n The number of times to repeat the string.
 * @returns {string} Returns the repeated string.
 */
function baseRepeat(string, n) {
  var result = '';
  if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
    return result;
  }
  // Leverage the exponentiation by squaring algorithm for a faster repeat.
  // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
  do {
    if (n % 2) {
      result += string;
    }
    n = nativeFloor(n / 2);
    if (n) {
      string += string;
    }
  } while (n);

  return result;
}

module.exports = baseRepeat;

----------------------------------------
File: ./animations/node_modules/lodash/eq.js
----------------------------------------
/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

module.exports = eq;

----------------------------------------
File: ./animations/node_modules/lodash/_ListCache.js
----------------------------------------
var listCacheClear = require('./_listCacheClear'),
    listCacheDelete = require('./_listCacheDelete'),
    listCacheGet = require('./_listCacheGet'),
    listCacheHas = require('./_listCacheHas'),
    listCacheSet = require('./_listCacheSet');

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

module.exports = ListCache;

----------------------------------------
File: ./animations/node_modules/lodash/parseInt.js
----------------------------------------
var root = require('./_root'),
    toString = require('./toString');

/** Used to match leading whitespace. */
var reTrimStart = /^\s+/;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeParseInt = root.parseInt;

/**
 * Converts `string` to an integer of the specified radix. If `radix` is
 * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
 * hexadecimal, in which case a `radix` of `16` is used.
 *
 * **Note:** This method aligns with the
 * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
 *
 * @static
 * @memberOf _
 * @since 1.1.0
 * @category String
 * @param {string} string The string to convert.
 * @param {number} [radix=10] The radix to interpret `value` by.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {number} Returns the converted integer.
 * @example
 *
 * _.parseInt('08');
 * // => 8
 *
 * _.map(['6', '08', '10'], _.parseInt);
 * // => [6, 8, 10]
 */
function parseInt(string, radix, guard) {
  if (guard || radix == null) {
    radix = 0;
  } else if (radix) {
    radix = +radix;
  }
  return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
}

module.exports = parseInt;

----------------------------------------
File: ./animations/node_modules/lodash/_baseIndexOf.js
----------------------------------------
var baseFindIndex = require('./_baseFindIndex'),
    baseIsNaN = require('./_baseIsNaN'),
    strictIndexOf = require('./_strictIndexOf');

/**
 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseIndexOf(array, value, fromIndex) {
  return value === value
    ? strictIndexOf(array, value, fromIndex)
    : baseFindIndex(array, baseIsNaN, fromIndex);
}

module.exports = baseIndexOf;

----------------------------------------
File: ./animations/node_modules/lodash/_defineProperty.js
----------------------------------------
var getNative = require('./_getNative');

var defineProperty = (function() {
  try {
    var func = getNative(Object, 'defineProperty');
    func({}, '', {});
    return func;
  } catch (e) {}
}());

module.exports = defineProperty;

----------------------------------------
File: ./animations/node_modules/lodash/tail.js
----------------------------------------
var baseSlice = require('./_baseSlice');

/**
 * Gets all but the first element of `array`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {Array} array The array to query.
 * @returns {Array} Returns the slice of `array`.
 * @example
 *
 * _.tail([1, 2, 3]);
 * // => [2, 3]
 */
function tail(array) {
  var length = array == null ? 0 : array.length;
  return length ? baseSlice(array, 1, length) : [];
}

module.exports = tail;

----------------------------------------
File: ./animations/node_modules/lodash/_getView.js
----------------------------------------
/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max,
    nativeMin = Math.min;

/**
 * Gets the view, applying any `transforms` to the `start` and `end` positions.
 *
 * @private
 * @param {number} start The start of the view.
 * @param {number} end The end of the view.
 * @param {Array} transforms The transformations to apply to the view.
 * @returns {Object} Returns an object containing the `start` and `end`
 *  positions of the view.
 */
function getView(start, end, transforms) {
  var index = -1,
      length = transforms.length;

  while (++index < length) {
    var data = transforms[index],
        size = data.size;

    switch (data.type) {
      case 'drop':      start += size; break;
      case 'dropRight': end -= size; break;
      case 'take':      end = nativeMin(end, start + size); break;
      case 'takeRight': start = nativeMax(start, end - size); break;
    }
  }
  return { 'start': start, 'end': end };
}

module.exports = getView;

----------------------------------------
File: ./animations/node_modules/lodash/lte.js
----------------------------------------
var createRelationalOperation = require('./_createRelationalOperation');

/**
 * Checks if `value` is less than or equal to `other`.
 *
 * @static
 * @memberOf _
 * @since 3.9.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if `value` is less than or equal to
 *  `other`, else `false`.
 * @see _.gte
 * @example
 *
 * _.lte(1, 3);
 * // => true
 *
 * _.lte(3, 3);
 * // => true
 *
 * _.lte(3, 1);
 * // => false
 */
var lte = createRelationalOperation(function(value, other) {
  return value <= other;
});

module.exports = lte;

----------------------------------------
File: ./animations/node_modules/lodash/merge.js
----------------------------------------
var baseMerge = require('./_baseMerge'),
    createAssigner = require('./_createAssigner');

/**
 * This method is like `_.assign` except that it recursively merges own and
 * inherited enumerable string keyed properties of source objects into the
 * destination object. Source properties that resolve to `undefined` are
 * skipped if a destination value exists. Array and plain object properties
 * are merged recursively. Other objects and value types are overridden by
 * assignment. Source objects are applied from left to right. Subsequent
 * sources overwrite property assignments of previous sources.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 0.5.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @example
 *
 * var object = {
 *   'a': [{ 'b': 2 }, { 'd': 4 }]
 * };
 *
 * var other = {
 *   'a': [{ 'c': 3 }, { 'e': 5 }]
 * };
 *
 * _.merge(object, other);
 * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
 */
var merge = createAssigner(function(object, source, srcIndex) {
  baseMerge(object, source, srcIndex);
});

module.exports = merge;

----------------------------------------
File: ./animations/node_modules/lodash/isUndefined.js
----------------------------------------
/**
 * Checks if `value` is `undefined`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
 * @example
 *
 * _.isUndefined(void 0);
 * // => true
 *
 * _.isUndefined(null);
 * // => false
 */
function isUndefined(value) {
  return value === undefined;
}

module.exports = isUndefined;

----------------------------------------
File: ./animations/node_modules/lodash/_trimmedEndIndex.js
----------------------------------------
/** Used to match a single whitespace character. */
var reWhitespace = /\s/;

/**
 * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
 * character of `string`.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {number} Returns the index of the last non-whitespace character.
 */
function trimmedEndIndex(string) {
  var index = string.length;

  while (index-- && reWhitespace.test(string.charAt(index))) {}
  return index;
}

module.exports = trimmedEndIndex;

----------------------------------------
File: ./animations/node_modules/lodash/escape.js
----------------------------------------
var escapeHtmlChar = require('./_escapeHtmlChar'),
    toString = require('./toString');

/** Used to match HTML entities and HTML characters. */
var reUnescapedHtml = /[&<>"']/g,
    reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

/**
 * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
 * corresponding HTML entities.
 *
 * **Note:** No other characters are escaped. To escape additional
 * characters use a third-party library like [_he_](https://mths.be/he).
 *
 * Though the ">" character is escaped for symmetry, characters like
 * ">" and "/" don't need escaping in HTML and have no special meaning
 * unless they're part of a tag or unquoted attribute value. See
 * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
 * (under "semi-related fun fact") for more details.
 *
 * When working with HTML you should always
 * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
 * XSS vectors.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category String
 * @param {string} [string=''] The string to escape.
 * @returns {string} Returns the escaped string.
 * @example
 *
 * _.escape('fred, barney, & pebbles');
 * // => 'fred, barney, &amp; pebbles'
 */
function escape(string) {
  string = toString(string);
  return (string && reHasUnescapedHtml.test(string))
    ? string.replace(reUnescapedHtml, escapeHtmlChar)
    : string;
}

module.exports = escape;

----------------------------------------
File: ./animations/node_modules/lodash/matches.js
----------------------------------------
var baseClone = require('./_baseClone'),
    baseMatches = require('./_baseMatches');

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1;

/**
 * Creates a function that performs a partial deep comparison between a given
 * object and `source`, returning `true` if the given object has equivalent
 * property values, else `false`.
 *
 * **Note:** The created function is equivalent to `_.isMatch` with `source`
 * partially applied.
 *
 * Partial comparisons will match empty array and empty object `source`
 * values against any array or object value, respectively. See `_.isEqual`
 * for a list of supported value comparisons.
 *
 * **Note:** Multiple values can be checked by combining several matchers
 * using `_.overSome`
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Util
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 * @example
 *
 * var objects = [
 *   { 'a': 1, 'b': 2, 'c': 3 },
 *   { 'a': 4, 'b': 5, 'c': 6 }
 * ];
 *
 * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
 * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
 *
 * // Checking for several possible values
 * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
 * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
 */
function matches(source) {
  return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
}

module.exports = matches;

----------------------------------------
File: ./animations/node_modules/lodash/_baseSum.js
----------------------------------------
/**
 * The base implementation of `_.sum` and `_.sumBy` without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {number} Returns the sum.
 */
function baseSum(array, iteratee) {
  var result,
      index = -1,
      length = array.length;

  while (++index < length) {
    var current = iteratee(array[index]);
    if (current !== undefined) {
      result = result === undefined ? current : (result + current);
    }
  }
  return result;
}

module.exports = baseSum;

----------------------------------------
File: ./animations/node_modules/lodash/isNull.js
----------------------------------------
/**
 * Checks if `value` is `null`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
 * @example
 *
 * _.isNull(null);
 * // => true
 *
 * _.isNull(void 0);
 * // => false
 */
function isNull(value) {
  return value === null;
}

module.exports = isNull;

----------------------------------------
File: ./animations/node_modules/lodash/truncate.js
----------------------------------------
var baseToString = require('./_baseToString'),
    castSlice = require('./_castSlice'),
    hasUnicode = require('./_hasUnicode'),
    isObject = require('./isObject'),
    isRegExp = require('./isRegExp'),
    stringSize = require('./_stringSize'),
    stringToArray = require('./_stringToArray'),
    toInteger = require('./toInteger'),
    toString = require('./toString');

/** Used as default options for `_.truncate`. */
var DEFAULT_TRUNC_LENGTH = 30,
    DEFAULT_TRUNC_OMISSION = '...';

/** Used to match `RegExp` flags from their coerced string values. */
var reFlags = /\w*$/;

/**
 * Truncates `string` if it's longer than the given maximum string length.
 * The last characters of the truncated string are replaced with the omission
 * string which defaults to "...".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to truncate.
 * @param {Object} [options={}] The options object.
 * @param {number} [options.length=30] The maximum string length.
 * @param {string} [options.omission='...'] The string to indicate text is omitted.
 * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
 * @returns {string} Returns the truncated string.
 * @example
 *
 * _.truncate('hi-diddly-ho there, neighborino');
 * // => 'hi-diddly-ho there, neighbo...'
 *
 * _.truncate('hi-diddly-ho there, neighborino', {
 *   'length': 24,
 *   'separator': ' '
 * });
 * // => 'hi-diddly-ho there,...'
 *
 * _.truncate('hi-diddly-ho there, neighborino', {
 *   'length': 24,
 *   'separator': /,? +/
 * });
 * // => 'hi-diddly-ho there...'
 *
 * _.truncate('hi-diddly-ho there, neighborino', {
 *   'omission': ' [...]'
 * });
 * // => 'hi-diddly-ho there, neig [...]'
 */
function truncate(string, options) {
  var length = DEFAULT_TRUNC_LENGTH,
      omission = DEFAULT_TRUNC_OMISSION;

  if (isObject(options)) {
    var separator = 'separator' in options ? options.separator : separator;
    length = 'length' in options ? toInteger(options.length) : length;
    omission = 'omission' in options ? baseToString(options.omission) : omission;
  }
  string = toString(string);

  var strLength = string.length;
  if (hasUnicode(string)) {
    var strSymbols = stringToArray(string);
    strLength = strSymbols.length;
  }
  if (length >= strLength) {
    return string;
  }
  var end = length - stringSize(omission);
  if (end < 1) {
    return omission;
  }
  var result = strSymbols
    ? castSlice(strSymbols, 0, end).join('')
    : string.slice(0, end);

  if (separator === undefined) {
    return result + omission;
  }
  if (strSymbols) {
    end += (result.length - end);
  }
  if (isRegExp(separator)) {
    if (string.slice(end).search(separator)) {
      var match,
          substring = result;

      if (!separator.global) {
        separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
      }
      separator.lastIndex = 0;
      while ((match = separator.exec(substring))) {
        var newEnd = match.index;
      }
      result = result.slice(0, newEnd === undefined ? end : newEnd);
    }
  } else if (string.indexOf(baseToString(separator), end) != end) {
    var index = result.lastIndexOf(separator);
    if (index > -1) {
      result = result.slice(0, index);
    }
  }
  return result + omission;
}

module.exports = truncate;

----------------------------------------
File: ./animations/node_modules/lodash/_DataView.js
----------------------------------------
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView');

module.exports = DataView;

----------------------------------------
File: ./animations/node_modules/lodash/max.js
----------------------------------------
var baseExtremum = require('./_baseExtremum'),
    baseGt = require('./_baseGt'),
    identity = require('./identity');

/**
 * Computes the maximum value of `array`. If `array` is empty or falsey,
 * `undefined` is returned.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Math
 * @param {Array} array The array to iterate over.
 * @returns {*} Returns the maximum value.
 * @example
 *
 * _.max([4, 2, 8, 6]);
 * // => 8
 *
 * _.max([]);
 * // => undefined
 */
function max(array) {
  return (array && array.length)
    ? baseExtremum(array, identity, baseGt)
    : undefined;
}

module.exports = max;

----------------------------------------
File: ./animations/node_modules/lodash/before.js
----------------------------------------
var toInteger = require('./toInteger');

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a function that invokes `func`, with the `this` binding and arguments
 * of the created function, while it's called less than `n` times. Subsequent
 * calls to the created function return the result of the last `func` invocation.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Function
 * @param {number} n The number of calls at which `func` is no longer invoked.
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new restricted function.
 * @example
 *
 * jQuery(element).on('click', _.before(5, addContactToList));
 * // => Allows adding up to 4 contacts to the list.
 */
function before(n, func) {
  var result;
  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  n = toInteger(n);
  return function() {
    if (--n > 0) {
      result = func.apply(this, arguments);
    }
    if (n <= 1) {
      func = undefined;
    }
    return result;
  };
}

module.exports = before;

----------------------------------------
File: ./animations/node_modules/lodash/_baseHas.js
----------------------------------------
/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.has` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHas(object, key) {
  return object != null && hasOwnProperty.call(object, key);
}

module.exports = baseHas;

----------------------------------------
File: ./animations/node_modules/lodash/assignWith.js
----------------------------------------
var copyObject = require('./_copyObject'),
    createAssigner = require('./_createAssigner'),
    keys = require('./keys');

/**
 * This method is like `_.assign` except that it accepts `customizer`
 * which is invoked to produce the assigned values. If `customizer` returns
 * `undefined`, assignment is handled by the method instead. The `customizer`
 * is invoked with five arguments: (objValue, srcValue, key, object, source).
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} sources The source objects.
 * @param {Function} [customizer] The function to customize assigned values.
 * @returns {Object} Returns `object`.
 * @see _.assignInWith
 * @example
 *
 * function customizer(objValue, srcValue) {
 *   return _.isUndefined(objValue) ? srcValue : objValue;
 * }
 *
 * var defaults = _.partialRight(_.assignWith, customizer);
 *
 * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
 * // => { 'a': 1, 'b': 2 }
 */
var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
  copyObject(source, keys(source), object, customizer);
});

module.exports = assignWith;

----------------------------------------
File: ./animations/node_modules/lodash/toArray.js
----------------------------------------
var Symbol = require('./_Symbol'),
    copyArray = require('./_copyArray'),
    getTag = require('./_getTag'),
    isArrayLike = require('./isArrayLike'),
    isString = require('./isString'),
    iteratorToArray = require('./_iteratorToArray'),
    mapToArray = require('./_mapToArray'),
    setToArray = require('./_setToArray'),
    stringToArray = require('./_stringToArray'),
    values = require('./values');

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    setTag = '[object Set]';

/** Built-in value references. */
var symIterator = Symbol ? Symbol.iterator : undefined;

/**
 * Converts `value` to an array.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {Array} Returns the converted array.
 * @example
 *
 * _.toArray({ 'a': 1, 'b': 2 });
 * // => [1, 2]
 *
 * _.toArray('abc');
 * // => ['a', 'b', 'c']
 *
 * _.toArray(1);
 * // => []
 *
 * _.toArray(null);
 * // => []
 */
function toArray(value) {
  if (!value) {
    return [];
  }
  if (isArrayLike(value)) {
    return isString(value) ? stringToArray(value) : copyArray(value);
  }
  if (symIterator && value[symIterator]) {
    return iteratorToArray(value[symIterator]());
  }
  var tag = getTag(value),
      func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

  return func(value);
}

module.exports = toArray;

----------------------------------------
File: ./animations/node_modules/lodash/intersectionBy.js
----------------------------------------
var arrayMap = require('./_arrayMap'),
    baseIntersection = require('./_baseIntersection'),
    baseIteratee = require('./_baseIteratee'),
    baseRest = require('./_baseRest'),
    castArrayLikeObject = require('./_castArrayLikeObject'),
    last = require('./last');

/**
 * This method is like `_.intersection` except that it accepts `iteratee`
 * which is invoked for each element of each `arrays` to generate the criterion
 * by which they're compared. The order and references of result values are
 * determined by the first array. The iteratee is invoked with one argument:
 * (value).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {...Array} [arrays] The arrays to inspect.
 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
 * @returns {Array} Returns the new array of intersecting values.
 * @example
 *
 * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
 * // => [2.1]
 *
 * // The `_.property` iteratee shorthand.
 * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
 * // => [{ 'x': 1 }]
 */
var intersectionBy = baseRest(function(arrays) {
  var iteratee = last(arrays),
      mapped = arrayMap(arrays, castArrayLikeObject);

  if (iteratee === last(mapped)) {
    iteratee = undefined;
  } else {
    mapped.pop();
  }
  return (mapped.length && mapped[0] === arrays[0])
    ? baseIntersection(mapped, baseIteratee(iteratee, 2))
    : [];
});

module.exports = intersectionBy;

----------------------------------------
File: ./animations/node_modules/lodash/_baseFor.js
----------------------------------------
var createBaseFor = require('./_createBaseFor');

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor = createBaseFor();

module.exports = baseFor;

----------------------------------------
File: ./animations/node_modules/lodash/_cloneSymbol.js
----------------------------------------
var Symbol = require('./_Symbol');

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * Creates a clone of the `symbol` object.
 *
 * @private
 * @param {Object} symbol The symbol object to clone.
 * @returns {Object} Returns the cloned symbol object.
 */
function cloneSymbol(symbol) {
  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
}

module.exports = cloneSymbol;

----------------------------------------
File: ./animations/node_modules/lodash/_createSet.js
----------------------------------------
var Set = require('./_Set'),
    noop = require('./noop'),
    setToArray = require('./_setToArray');

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/**
 * Creates a set object of `values`.
 *
 * @private
 * @param {Array} values The values to add to the set.
 * @returns {Object} Returns the new set.
 */
var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
  return new Set(values);
};

module.exports = createSet;

----------------------------------------
File: ./animations/node_modules/lodash/unset.js
----------------------------------------
var baseUnset = require('./_baseUnset');

/**
 * Removes the property at `path` of `object`.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to unset.
 * @returns {boolean} Returns `true` if the property is deleted, else `false`.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 7 } }] };
 * _.unset(object, 'a[0].b.c');
 * // => true
 *
 * console.log(object);
 * // => { 'a': [{ 'b': {} }] };
 *
 * _.unset(object, ['a', '0', 'b', 'c']);
 * // => true
 *
 * console.log(object);
 * // => { 'a': [{ 'b': {} }] };
 */
function unset(object, path) {
  return object == null ? true : baseUnset(object, path);
}

module.exports = unset;

----------------------------------------
File: ./animations/node_modules/lodash/_baseIteratee.js
----------------------------------------
var baseMatches = require('./_baseMatches'),
    baseMatchesProperty = require('./_baseMatchesProperty'),
    identity = require('./identity'),
    isArray = require('./isArray'),
    property = require('./property');

/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */
function baseIteratee(value) {
  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
  if (typeof value == 'function') {
    return value;
  }
  if (value == null) {
    return identity;
  }
  if (typeof value == 'object') {
    return isArray(value)
      ? baseMatchesProperty(value[0], value[1])
      : baseMatches(value);
  }
  return property(value);
}

module.exports = baseIteratee;

----------------------------------------
File: ./animations/node_modules/lodash/valueOf.js
----------------------------------------
module.exports = require('./wrapperValue');

----------------------------------------
File: ./animations/node_modules/lodash/_createPadding.js
----------------------------------------
var baseRepeat = require('./_baseRepeat'),
    baseToString = require('./_baseToString'),
    castSlice = require('./_castSlice'),
    hasUnicode = require('./_hasUnicode'),
    stringSize = require('./_stringSize'),
    stringToArray = require('./_stringToArray');

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeCeil = Math.ceil;

/**
 * Creates the padding for `string` based on `length`. The `chars` string
 * is truncated if the number of characters exceeds `length`.
 *
 * @private
 * @param {number} length The padding length.
 * @param {string} [chars=' '] The string used as padding.
 * @returns {string} Returns the padding for `string`.
 */
function createPadding(length, chars) {
  chars = chars === undefined ? ' ' : baseToString(chars);

  var charsLength = chars.length;
  if (charsLength < 2) {
    return charsLength ? baseRepeat(chars, length) : chars;
  }
  var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
  return hasUnicode(chars)
    ? castSlice(stringToArray(result), 0, length).join('')
    : result.slice(0, length);
}

module.exports = createPadding;

----------------------------------------
File: ./animations/node_modules/lodash/memoize.js
----------------------------------------
var MapCache = require('./_MapCache');

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize(func, resolver) {
  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache);
  return memoized;
}

// Expose `MapCache`.
memoize.Cache = MapCache;

module.exports = memoize;

----------------------------------------
File: ./animations/node_modules/lodash/lastIndexOf.js
----------------------------------------
var baseFindIndex = require('./_baseFindIndex'),
    baseIsNaN = require('./_baseIsNaN'),
    strictLastIndexOf = require('./_strictLastIndexOf'),
    toInteger = require('./toInteger');

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max,
    nativeMin = Math.min;

/**
 * This method is like `_.indexOf` except that it iterates over elements of
 * `array` from right to left.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} [fromIndex=array.length-1] The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 * @example
 *
 * _.lastIndexOf([1, 2, 1, 2], 2);
 * // => 3
 *
 * // Search from the `fromIndex`.
 * _.lastIndexOf([1, 2, 1, 2], 2, 2);
 * // => 1
 */
function lastIndexOf(array, value, fromIndex) {
  var length = array == null ? 0 : array.length;
  if (!length) {
    return -1;
  }
  var index = length;
  if (fromIndex !== undefined) {
    index = toInteger(fromIndex);
    index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
  }
  return value === value
    ? strictLastIndexOf(array, value, index)
    : baseFindIndex(array, baseIsNaN, index, true);
}

module.exports = lastIndexOf;

----------------------------------------
File: ./animations/node_modules/lodash/keyBy.js
----------------------------------------
var baseAssignValue = require('./_baseAssignValue'),
    createAggregator = require('./_createAggregator');

/**
 * Creates an object composed of keys generated from the results of running
 * each element of `collection` thru `iteratee`. The corresponding value of
 * each key is the last element responsible for generating the key. The
 * iteratee is invoked with one argument: (value).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
 * @returns {Object} Returns the composed aggregate object.
 * @example
 *
 * var array = [
 *   { 'dir': 'left', 'code': 97 },
 *   { 'dir': 'right', 'code': 100 }
 * ];
 *
 * _.keyBy(array, function(o) {
 *   return String.fromCharCode(o.code);
 * });
 * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
 *
 * _.keyBy(array, 'dir');
 * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
 */
var keyBy = createAggregator(function(result, value, key) {
  baseAssignValue(result, key, value);
});

module.exports = keyBy;

----------------------------------------
File: ./animations/node_modules/lodash/_Set.js
----------------------------------------
var getNative = require('./_getNative'),
    root = require('./_root');

/* Built-in method references that are verified to be native. */
var Set = getNative(root, 'Set');

module.exports = Set;

----------------------------------------
File: ./animations/node_modules/lodash/zipObject.js
----------------------------------------
var assignValue = require('./_assignValue'),
    baseZipObject = require('./_baseZipObject');

/**
 * This method is like `_.fromPairs` except that it accepts two arrays,
 * one of property identifiers and one of corresponding values.
 *
 * @static
 * @memberOf _
 * @since 0.4.0
 * @category Array
 * @param {Array} [props=[]] The property identifiers.
 * @param {Array} [values=[]] The property values.
 * @returns {Object} Returns the new object.
 * @example
 *
 * _.zipObject(['a', 'b'], [1, 2]);
 * // => { 'a': 1, 'b': 2 }
 */
function zipObject(props, values) {
  return baseZipObject(props || [], values || [], assignValue);
}

module.exports = zipObject;

----------------------------------------
File: ./animations/node_modules/lodash/wrapperValue.js
----------------------------------------
var baseWrapperValue = require('./_baseWrapperValue');

/**
 * Executes the chain sequence to resolve the unwrapped value.
 *
 * @name value
 * @memberOf _
 * @since 0.1.0
 * @alias toJSON, valueOf
 * @category Seq
 * @returns {*} Returns the resolved unwrapped value.
 * @example
 *
 * _([1, 2, 3]).value();
 * // => [1, 2, 3]
 */
function wrapperValue() {
  return baseWrapperValue(this.__wrapped__, this.__actions__);
}

module.exports = wrapperValue;

----------------------------------------
File: ./animations/node_modules/lodash/_baseProperty.js
----------------------------------------
/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function baseProperty(key) {
  return function(object) {
    return object == null ? undefined : object[key];
  };
}

module.exports = baseProperty;

----------------------------------------
File: ./animations/node_modules/lodash/toInteger.js
----------------------------------------
var toFinite = require('./toFinite');

/**
 * Converts `value` to an integer.
 *
 * **Note:** This method is loosely based on
 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted integer.
 * @example
 *
 * _.toInteger(3.2);
 * // => 3
 *
 * _.toInteger(Number.MIN_VALUE);
 * // => 0
 *
 * _.toInteger(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toInteger('3.2');
 * // => 3
 */
function toInteger(value) {
  var result = toFinite(value),
      remainder = result % 1;

  return result === result ? (remainder ? result - remainder : result) : 0;
}

module.exports = toInteger;

----------------------------------------
File: ./animations/node_modules/lodash/_mergeData.js
----------------------------------------
var composeArgs = require('./_composeArgs'),
    composeArgsRight = require('./_composeArgsRight'),
    replaceHolders = require('./_replaceHolders');

/** Used as the internal argument placeholder. */
var PLACEHOLDER = '__lodash_placeholder__';

/** Used to compose bitmasks for function metadata. */
var WRAP_BIND_FLAG = 1,
    WRAP_BIND_KEY_FLAG = 2,
    WRAP_CURRY_BOUND_FLAG = 4,
    WRAP_CURRY_FLAG = 8,
    WRAP_ARY_FLAG = 128,
    WRAP_REARG_FLAG = 256;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMin = Math.min;

/**
 * Merges the function metadata of `source` into `data`.
 *
 * Merging metadata reduces the number of wrappers used to invoke a function.
 * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
 * may be applied regardless of execution order. Methods like `_.ary` and
 * `_.rearg` modify function arguments, making the order in which they are
 * executed important, preventing the merging of metadata. However, we make
 * an exception for a safe combined case where curried functions have `_.ary`
 * and or `_.rearg` applied.
 *
 * @private
 * @param {Array} data The destination metadata.
 * @param {Array} source The source metadata.
 * @returns {Array} Returns `data`.
 */
function mergeData(data, source) {
  var bitmask = data[1],
      srcBitmask = source[1],
      newBitmask = bitmask | srcBitmask,
      isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

  var isCombo =
    ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
    ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
    ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

  // Exit early if metadata can't be merged.
  if (!(isCommon || isCombo)) {
    return data;
  }
  // Use source `thisArg` if available.
  if (srcBitmask & WRAP_BIND_FLAG) {
    data[2] = source[2];
    // Set when currying a bound function.
    newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
  }
  // Compose partial arguments.
  var value = source[3];
  if (value) {
    var partials = data[3];
    data[3] = partials ? composeArgs(partials, value, source[4]) : value;
    data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
  }
  // Compose partial right arguments.
  value = source[5];
  if (value) {
    partials = data[5];
    data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
    data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
  }
  // Use source `argPos` if available.
  value = source[7];
  if (value) {
    data[7] = value;
  }
  // Use source `ary` if it's smaller.
  if (srcBitmask & WRAP_ARY_FLAG) {
    data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
  }
  // Use source `arity` if one is not provided.
  if (data[9] == null) {
    data[9] = source[9];
  }
  // Use source `func` and merge bitmasks.
  data[0] = source[0];
  data[1] = newBitmask;

  return data;
}

module.exports = mergeData;

----------------------------------------
File: ./animations/node_modules/lodash/lang.js
----------------------------------------
module.exports = {
  'castArray': require('./castArray'),
  'clone': require('./clone'),
  'cloneDeep': require('./cloneDeep'),
  'cloneDeepWith': require('./cloneDeepWith'),
  'cloneWith': require('./cloneWith'),
  'conformsTo': require('./conformsTo'),
  'eq': require('./eq'),
  'gt': require('./gt'),
  'gte': require('./gte'),
  'isArguments': require('./isArguments'),
  'isArray': require('./isArray'),
  'isArrayBuffer': require('./isArrayBuffer'),
  'isArrayLike': require('./isArrayLike'),
  'isArrayLikeObject': require('./isArrayLikeObject'),
  'isBoolean': require('./isBoolean'),
  'isBuffer': require('./isBuffer'),
  'isDate': require('./isDate'),
  'isElement': require('./isElement'),
  'isEmpty': require('./isEmpty'),
  'isEqual': require('./isEqual'),
  'isEqualWith': require('./isEqualWith'),
  'isError': require('./isError'),
  'isFinite': require('./isFinite'),
  'isFunction': require('./isFunction'),
  'isInteger': require('./isInteger'),
  'isLength': require('./isLength'),
  'isMap': require('./isMap'),
  'isMatch': require('./isMatch'),
  'isMatchWith': require('./isMatchWith'),
  'isNaN': require('./isNaN'),
  'isNative': require('./isNative'),
  'isNil': require('./isNil'),
  'isNull': require('./isNull'),
  'isNumber': require('./isNumber'),
  'isObject': require('./isObject'),
  'isObjectLike': require('./isObjectLike'),
  'isPlainObject': require('./isPlainObject'),
  'isRegExp': require('./isRegExp'),
  'isSafeInteger': require('./isSafeInteger'),
  'isSet': require('./isSet'),
  'isString': require('./isString'),
  'isSymbol': require('./isSymbol'),
  'isTypedArray': require('./isTypedArray'),
  'isUndefined': require('./isUndefined'),
  'isWeakMap': require('./isWeakMap'),
  'isWeakSet': require('./isWeakSet'),
  'lt': require('./lt'),
  'lte': require('./lte'),
  'toArray': require('./toArray'),
  'toFinite': require('./toFinite'),
  'toInteger': require('./toInteger'),
  'toLength': require('./toLength'),
  'toNumber': require('./toNumber'),
  'toPlainObject': require('./toPlainObject'),
  'toSafeInteger': require('./toSafeInteger'),
  'toString': require('./toString')
};

----------------------------------------
File: ./animations/node_modules/lodash/_baseIsEqualDeep.js
----------------------------------------
var Stack = require('./_Stack'),
    equalArrays = require('./_equalArrays'),
    equalByTag = require('./_equalByTag'),
    equalObjects = require('./_equalObjects'),
    getTag = require('./_getTag'),
    isArray = require('./isArray'),
    isBuffer = require('./isBuffer'),
    isTypedArray = require('./isTypedArray');

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    objectTag = '[object Object]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = objIsArr ? arrayTag : getTag(object),
      othTag = othIsArr ? arrayTag : getTag(other);

  objTag = objTag == argsTag ? objectTag : objTag;
  othTag = othTag == argsTag ? objectTag : othTag;

  var objIsObj = objTag == objectTag,
      othIsObj = othTag == objectTag,
      isSameTag = objTag == othTag;

  if (isSameTag && isBuffer(object)) {
    if (!isBuffer(other)) {
      return false;
    }
    objIsArr = true;
    objIsObj = false;
  }
  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack);
    return (objIsArr || isTypedArray(object))
      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }
  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;

      stack || (stack = new Stack);
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack);
  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}

module.exports = baseIsEqualDeep;

----------------------------------------
File: ./animations/node_modules/lodash/_baseSampleSize.js
----------------------------------------
var baseClamp = require('./_baseClamp'),
    shuffleSelf = require('./_shuffleSelf'),
    values = require('./values');

/**
 * The base implementation of `_.sampleSize` without param guards.
 *
 * @private
 * @param {Array|Object} collection The collection to sample.
 * @param {number} n The number of elements to sample.
 * @returns {Array} Returns the random elements.
 */
function baseSampleSize(collection, n) {
  var array = values(collection);
  return shuffleSelf(array, baseClamp(n, 0, array.length));
}

module.exports = baseSampleSize;

----------------------------------------
File: ./animations/node_modules/lodash/assignIn.js
----------------------------------------
var copyObject = require('./_copyObject'),
    createAssigner = require('./_createAssigner'),
    keysIn = require('./keysIn');

/**
 * This method is like `_.assign` except that it iterates over own and
 * inherited source properties.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @alias extend
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @see _.assign
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * function Bar() {
 *   this.c = 3;
 * }
 *
 * Foo.prototype.b = 2;
 * Bar.prototype.d = 4;
 *
 * _.assignIn({ 'a': 0 }, new Foo, new Bar);
 * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
 */
var assignIn = createAssigner(function(object, source) {
  copyObject(source, keysIn(source), object);
});

module.exports = assignIn;

----------------------------------------
File: ./animations/node_modules/lodash/_coreJsData.js
----------------------------------------
var root = require('./_root');

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

module.exports = coreJsData;

----------------------------------------
File: ./animations/node_modules/lodash/_arrayShuffle.js
----------------------------------------
var copyArray = require('./_copyArray'),
    shuffleSelf = require('./_shuffleSelf');

/**
 * A specialized version of `_.shuffle` for arrays.
 *
 * @private
 * @param {Array} array The array to shuffle.
 * @returns {Array} Returns the new shuffled array.
 */
function arrayShuffle(array) {
  return shuffleSelf(copyArray(array));
}

module.exports = arrayShuffle;

----------------------------------------
File: ./animations/node_modules/lodash/_baseSet.js
----------------------------------------
var assignValue = require('./_assignValue'),
    castPath = require('./_castPath'),
    isIndex = require('./_isIndex'),
    isObject = require('./isObject'),
    toKey = require('./_toKey');

/**
 * The base implementation of `_.set`.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to set.
 * @param {*} value The value to set.
 * @param {Function} [customizer] The function to customize path creation.
 * @returns {Object} Returns `object`.
 */
function baseSet(object, path, value, customizer) {
  if (!isObject(object)) {
    return object;
  }
  path = castPath(path, object);

  var index = -1,
      length = path.length,
      lastIndex = length - 1,
      nested = object;

  while (nested != null && ++index < length) {
    var key = toKey(path[index]),
        newValue = value;

    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
      return object;
    }

    if (index != lastIndex) {
      var objValue = nested[key];
      newValue = customizer ? customizer(objValue, key, nested) : undefined;
      if (newValue === undefined) {
        newValue = isObject(objValue)
          ? objValue
          : (isIndex(path[index + 1]) ? [] : {});
      }
    }
    assignValue(nested, key, newValue);
    nested = nested[key];
  }
  return object;
}

module.exports = baseSet;

----------------------------------------
File: ./animations/node_modules/lodash/ary.js
----------------------------------------
var createWrap = require('./_createWrap');

/** Used to compose bitmasks for function metadata. */
var WRAP_ARY_FLAG = 128;

/**
 * Creates a function that invokes `func`, with up to `n` arguments,
 * ignoring any additional arguments.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Function
 * @param {Function} func The function to cap arguments for.
 * @param {number} [n=func.length] The arity cap.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Function} Returns the new capped function.
 * @example
 *
 * _.map(['6', '8', '10'], _.ary(parseInt, 1));
 * // => [6, 8, 10]
 */
function ary(func, n, guard) {
  n = guard ? undefined : n;
  n = (func && n == null) ? func.length : n;
  return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
}

module.exports = ary;

----------------------------------------
File: ./animations/node_modules/lodash/_isMaskable.js
----------------------------------------
var coreJsData = require('./_coreJsData'),
    isFunction = require('./isFunction'),
    stubFalse = require('./stubFalse');

/**
 * Checks if `func` is capable of being masked.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
 */
var isMaskable = coreJsData ? isFunction : stubFalse;

module.exports = isMaskable;

----------------------------------------
File: ./animations/node_modules/lodash/fp/isRegExp.js
----------------------------------------
var convert = require('./convert'),
    func = convert('isRegExp', require('../isRegExp'), require('./_falseOptions'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/gt.js
----------------------------------------
var convert = require('./convert'),
    func = convert('gt', require('../gt'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/padChars.js
----------------------------------------
var convert = require('./convert'),
    func = convert('padChars', require('../pad'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/remove.js
----------------------------------------
var convert = require('./convert'),
    func = convert('remove', require('../remove'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/kebabCase.js
----------------------------------------
var convert = require('./convert'),
    func = convert('kebabCase', require('../kebabCase'), require('./_falseOptions'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/invokeArgs.js
----------------------------------------
var convert = require('./convert'),
    func = convert('invokeArgs', require('../invoke'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/pickAll.js
----------------------------------------
module.exports = require('./pick');

----------------------------------------
File: ./animations/node_modules/lodash/fp/where.js
----------------------------------------
module.exports = require('./conformsTo');

----------------------------------------
File: ./animations/node_modules/lodash/fp/number.js
----------------------------------------
var convert = require('./convert');
module.exports = convert(require('../number'));

----------------------------------------
File: ./animations/node_modules/lodash/fp/unionWith.js
----------------------------------------
var convert = require('./convert'),
    func = convert('unionWith', require('../unionWith'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/pullAt.js
----------------------------------------
var convert = require('./convert'),
    func = convert('pullAt', require('../pullAt'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/isInteger.js
----------------------------------------
var convert = require('./convert'),
    func = convert('isInteger', require('../isInteger'), require('./_falseOptions'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/isSet.js
----------------------------------------
var convert = require('./convert'),
    func = convert('isSet', require('../isSet'), require('./_falseOptions'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/rest.js
----------------------------------------
var convert = require('./convert'),
    func = convert('rest', require('../rest'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/isEqualWith.js
----------------------------------------
var convert = require('./convert'),
    func = convert('isEqualWith', require('../isEqualWith'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/isObjectLike.js
----------------------------------------
var convert = require('./convert'),
    func = convert('isObjectLike', require('../isObjectLike'), require('./_falseOptions'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/padEnd.js
----------------------------------------
var convert = require('./convert'),
    func = convert('padEnd', require('../padEnd'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/range.js
----------------------------------------
var convert = require('./convert'),
    func = convert('range', require('../range'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/sortedLastIndex.js
----------------------------------------
var convert = require('./convert'),
    func = convert('sortedLastIndex', require('../sortedLastIndex'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/negate.js
----------------------------------------
var convert = require('./convert'),
    func = convert('negate', require('../negate'), require('./_falseOptions'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/wrapperAt.js
----------------------------------------
var convert = require('./convert'),
    func = convert('wrapperAt', require('../wrapperAt'), require('./_falseOptions'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/convert.js
----------------------------------------
var baseConvert = require('./_baseConvert'),
    util = require('./_util');

/**
 * Converts `func` of `name` to an immutable auto-curried iteratee-first data-last
 * version with conversion `options` applied. If `name` is an object its methods
 * will be converted.
 *
 * @param {string} name The name of the function to wrap.
 * @param {Function} [func] The function to wrap.
 * @param {Object} [options] The options object. See `baseConvert` for more details.
 * @returns {Function|Object} Returns the converted function or object.
 */
function convert(name, func, options) {
  return baseConvert(util, name, func, options);
}

module.exports = convert;

----------------------------------------
File: ./animations/node_modules/lodash/fp/_falseOptions.js
----------------------------------------
module.exports = {
  'cap': false,
  'curry': false,
  'fixed': false,
  'immutable': false,
  'rearg': false
};

----------------------------------------
File: ./animations/node_modules/lodash/fp/extend.js
----------------------------------------
module.exports = require('./assignIn');

----------------------------------------
File: ./animations/node_modules/lodash/fp/maxBy.js
----------------------------------------
var convert = require('./convert'),
    func = convert('maxBy', require('../maxBy'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/multiply.js
----------------------------------------
var convert = require('./convert'),
    func = convert('multiply', require('../multiply'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/propOr.js
----------------------------------------
module.exports = require('./getOr');

----------------------------------------
File: ./animations/node_modules/lodash/fp/assignInWith.js
----------------------------------------
var convert = require('./convert'),
    func = convert('assignInWith', require('../assignInWith'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/isArrayBuffer.js
----------------------------------------
var convert = require('./convert'),
    func = convert('isArrayBuffer', require('../isArrayBuffer'), require('./_falseOptions'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/pickBy.js
----------------------------------------
var convert = require('./convert'),
    func = convert('pickBy', require('../pickBy'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/symmetricDifferenceBy.js
----------------------------------------
module.exports = require('./xorBy');

----------------------------------------
File: ./animations/node_modules/lodash/fp/toLower.js
----------------------------------------
var convert = require('./convert'),
    func = convert('toLower', require('../toLower'), require('./_falseOptions'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/uniqBy.js
----------------------------------------
var convert = require('./convert'),
    func = convert('uniqBy', require('../uniqBy'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/util.js
----------------------------------------
var convert = require('./convert');
module.exports = convert(require('../util'));

----------------------------------------
File: ./animations/node_modules/lodash/fp/chain.js
----------------------------------------
var convert = require('./convert'),
    func = convert('chain', require('../chain'), require('./_falseOptions'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/assocPath.js
----------------------------------------
module.exports = require('./set');

----------------------------------------
File: ./animations/node_modules/lodash/fp/prop.js
----------------------------------------
module.exports = require('./get');

----------------------------------------
File: ./animations/node_modules/lodash/fp/rearg.js
----------------------------------------
var convert = require('./convert'),
    func = convert('rearg', require('../rearg'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/plant.js
----------------------------------------
var convert = require('./convert'),
    func = convert('plant', require('../plant'), require('./_falseOptions'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/mapKeys.js
----------------------------------------
var convert = require('./convert'),
    func = convert('mapKeys', require('../mapKeys'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/reverse.js
----------------------------------------
var convert = require('./convert'),
    func = convert('reverse', require('../reverse'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/functionsIn.js
----------------------------------------
var convert = require('./convert'),
    func = convert('functionsIn', require('../functionsIn'), require('./_falseOptions'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/unzip.js
----------------------------------------
var convert = require('./convert'),
    func = convert('unzip', require('../unzip'), require('./_falseOptions'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/isEqual.js
----------------------------------------
var convert = require('./convert'),
    func = convert('isEqual', require('../isEqual'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/xorBy.js
----------------------------------------
var convert = require('./convert'),
    func = convert('xorBy', require('../xorBy'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/upperFirst.js
----------------------------------------
var convert = require('./convert'),
    func = convert('upperFirst', require('../upperFirst'), require('./_falseOptions'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/join.js
----------------------------------------
var convert = require('./convert'),
    func = convert('join', require('../join'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/at.js
----------------------------------------
var convert = require('./convert'),
    func = convert('at', require('../at'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/ceil.js
----------------------------------------
var convert = require('./convert'),
    func = convert('ceil', require('../ceil'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/propEq.js
----------------------------------------
module.exports = require('./matchesProperty');

----------------------------------------
File: ./animations/node_modules/lodash/fp/isError.js
----------------------------------------
var convert = require('./convert'),
    func = convert('isError', require('../isError'), require('./_falseOptions'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/valuesIn.js
----------------------------------------
var convert = require('./convert'),
    func = convert('valuesIn', require('../valuesIn'), require('./_falseOptions'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/times.js
----------------------------------------
var convert = require('./convert'),
    func = convert('times', require('../times'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/curryRightN.js
----------------------------------------
var convert = require('./convert'),
    func = convert('curryRightN', require('../curryRight'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/size.js
----------------------------------------
var convert = require('./convert'),
    func = convert('size', require('../size'), require('./_falseOptions'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/findLast.js
----------------------------------------
var convert = require('./convert'),
    func = convert('findLast', require('../findLast'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/random.js
----------------------------------------
var convert = require('./convert'),
    func = convert('random', require('../random'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/findIndex.js
----------------------------------------
var convert = require('./convert'),
    func = convert('findIndex', require('../findIndex'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/chunk.js
----------------------------------------
var convert = require('./convert'),
    func = convert('chunk', require('../chunk'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/pluck.js
----------------------------------------
module.exports = require('./map');

----------------------------------------
File: ./animations/node_modules/lodash/fp/every.js
----------------------------------------
var convert = require('./convert'),
    func = convert('every', require('../every'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/flatMapDeep.js
----------------------------------------
var convert = require('./convert'),
    func = convert('flatMapDeep', require('../flatMapDeep'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/minBy.js
----------------------------------------
var convert = require('./convert'),
    func = convert('minBy', require('../minBy'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/includes.js
----------------------------------------
var convert = require('./convert'),
    func = convert('includes', require('../includes'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/spreadFrom.js
----------------------------------------
var convert = require('./convert'),
    func = convert('spreadFrom', require('../spread'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/toString.js
----------------------------------------
var convert = require('./convert'),
    func = convert('toString', require('../toString'), require('./_falseOptions'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/after.js
----------------------------------------
var convert = require('./convert'),
    func = convert('after', require('../after'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/hasIn.js
----------------------------------------
var convert = require('./convert'),
    func = convert('hasIn', require('../hasIn'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/assignAllWith.js
----------------------------------------
var convert = require('./convert'),
    func = convert('assignAllWith', require('../assignWith'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/forOwn.js
----------------------------------------
var convert = require('./convert'),
    func = convert('forOwn', require('../forOwn'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/mapValues.js
----------------------------------------
var convert = require('./convert'),
    func = convert('mapValues', require('../mapValues'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/all.js
----------------------------------------
module.exports = require('./every');

----------------------------------------
File: ./animations/node_modules/lodash/fp/trim.js
----------------------------------------
var convert = require('./convert'),
    func = convert('trim', require('../trim'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/dropLastWhile.js
----------------------------------------
module.exports = require('./dropRightWhile');

----------------------------------------
File: ./animations/node_modules/lodash/fp/divide.js
----------------------------------------
var convert = require('./convert'),
    func = convert('divide', require('../divide'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/updateWith.js
----------------------------------------
var convert = require('./convert'),
    func = convert('updateWith', require('../updateWith'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/flowRight.js
----------------------------------------
var convert = require('./convert'),
    func = convert('flowRight', require('../flowRight'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/flow.js
----------------------------------------
var convert = require('./convert'),
    func = convert('flow', require('../flow'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/juxt.js
----------------------------------------
module.exports = require('./over');

----------------------------------------
File: ./animations/node_modules/lodash/fp/now.js
----------------------------------------
var convert = require('./convert'),
    func = convert('now', require('../now'), require('./_falseOptions'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/flattenDepth.js
----------------------------------------
var convert = require('./convert'),
    func = convert('flattenDepth', require('../flattenDepth'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/keys.js
----------------------------------------
var convert = require('./convert'),
    func = convert('keys', require('../keys'), require('./_falseOptions'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/floor.js
----------------------------------------
var convert = require('./convert'),
    func = convert('floor', require('../floor'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/trimEnd.js
----------------------------------------
var convert = require('./convert'),
    func = convert('trimEnd', require('../trimEnd'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/findIndexFrom.js
----------------------------------------
var convert = require('./convert'),
    func = convert('findIndexFrom', require('../findIndex'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/cloneWith.js
----------------------------------------
var convert = require('./convert'),
    func = convert('cloneWith', require('../cloneWith'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/extendAllWith.js
----------------------------------------
module.exports = require('./assignInAllWith');

----------------------------------------
File: ./animations/node_modules/lodash/fp/gte.js
----------------------------------------
var convert = require('./convert'),
    func = convert('gte', require('../gte'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/compact.js
----------------------------------------
var convert = require('./convert'),
    func = convert('compact', require('../compact'), require('./_falseOptions'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/isBuffer.js
----------------------------------------
var convert = require('./convert'),
    func = convert('isBuffer', require('../isBuffer'), require('./_falseOptions'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/nth.js
----------------------------------------
var convert = require('./convert'),
    func = convert('nth', require('../nth'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/restFrom.js
----------------------------------------
var convert = require('./convert'),
    func = convert('restFrom', require('../rest'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
File: ./animations/node_modules/lodash/fp/useWith.js
----------------------------------------
module.exports = require('./overArgs');

----------------------------------------
File: ./animations/node_modules/lodash/fp/commit.js
----------------------------------------
var convert = require('./convert'),
    func = convert('commit', require('../commit'), require('./_falseOptions'));

func.placeholder = require('./placeholder');
module.exports = func;

----------------------------------------
